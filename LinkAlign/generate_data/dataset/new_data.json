[
    {
        "instance_id": "q_0",
        "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "db_id": "wta_1",
        "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'"
    },
    {
        "instance_id": "q_1",
        "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "db_id": "wta_1",
        "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'"
    },
    {
        "instance_id": "q_2",
        "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"
    },
    {
        "instance_id": "q_3",
        "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"
    },
    {
        "instance_id": "q_4",
        "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id"
    },
    {
        "instance_id": "q_5",
        "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id"
    },
    {
        "instance_id": "q_6",
        "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'"
    },
    {
        "instance_id": "q_7",
        "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
        "db_id": "student_transcripts_tracking",
        "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'"
    },
    {
        "instance_id": "q_8",
        "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "db_id": "tvshow",
        "query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'"
    },
    {
        "instance_id": "q_9",
        "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
        "db_id": "tvshow",
        "query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'"
    },
    {
        "instance_id": "q_10",
        "question": "How many countries speak both English and Dutch?",
        "db_id": "world_1",
        "query": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")"
    },
    {
        "instance_id": "q_11",
        "question": "What is the number of nations that use English and Dutch?",
        "db_id": "world_1",
        "query": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")"
    },
    {
        "instance_id": "q_12",
        "question": "What are the names of nations speak both English and French?",
        "db_id": "world_1",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\""
    },
    {
        "instance_id": "q_13",
        "question": "Give the names of nations that speak both English and French.",
        "db_id": "world_1",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\""
    },
    {
        "instance_id": "q_14",
        "question": "What are the names of nations where both English and French are official languages?",
        "db_id": "world_1",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\""
    },
    {
        "instance_id": "q_15",
        "question": "Give the names of countries with English and French as official languages.",
        "db_id": "world_1",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\""
    },
    {
        "instance_id": "q_16",
        "question": "What are the countries where either English or Dutch is the official language ?",
        "db_id": "world_1",
        "query": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\""
    },
    {
        "instance_id": "q_17",
        "question": "Which countries have either English or Dutch as an official language?",
        "db_id": "world_1",
        "query": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\""
    },
    {
        "instance_id": "q_18",
        "question": "Which cities are in European countries where English is not the official language?",
        "db_id": "world_1",
        "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')"
    },
    {
        "instance_id": "q_19",
        "question": "What are the names of cities in Europe for which English is not the official language?",
        "db_id": "world_1",
        "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')"
    },
    {
        "instance_id": "q_20",
        "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
        "db_id": "dog_kennels",
        "query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2"
    },
    {
        "instance_id": "q_21",
        "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
        "db_id": "dog_kennels",
        "query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2"
    },
    {
        "instance_id": "q_22",
        "question": "List the id, first name and last name of the customers who both have placed more than 2 orders and have bought at least 3 items.",
        "db_id": "e_commerce",
        "query": "SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2 INTERSECT SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING count(*)  >= 3"
    },
    {
        "instance_id": "q_23",
        "question": "What are the ids, first and last names of the customers who have ordered more than twice and have bought at least 3 items?",
        "db_id": "e_commerce",
        "query": "SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2 INTERSECT SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING count(*)  >= 3"
    },
    {
        "instance_id": "q_24",
        "question": "Which customers did not make any orders? List the first name, middle initial and last name.",
        "db_id": "e_commerce",
        "query": "SELECT customer_first_name ,  customer_middle_initial ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id"
    },
    {
        "instance_id": "q_25",
        "question": "WHat are the first and last names, and middle initials of all customers who did not make any orders?",
        "db_id": "e_commerce",
        "query": "SELECT customer_first_name ,  customer_middle_initial ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id"
    },
    {
        "instance_id": "q_26",
        "question": "What are the id, name, price and color of the products which have not been ordered for at least twice?",
        "db_id": "e_commerce",
        "query": "SELECT product_id ,  product_name ,  product_price ,  product_color FROM Products EXCEPT SELECT T1.product_id ,  T1.product_name ,  T1.product_price ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.product_id HAVING count(*)  >=  2"
    },
    {
        "instance_id": "q_27",
        "question": "List all the distinct product names, price and descriptions which are bought by female customers.",
        "db_id": "e_commerce",
        "query": "SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'"
    },
    {
        "instance_id": "q_28",
        "question": "What are the different names, prices, and descriptions for all products bought by female customers?",
        "db_id": "e_commerce",
        "query": "SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'"
    },
    {
        "instance_id": "q_29",
        "question": "List the biographical data and student id for the students who take 2 or more classes and the students who have less than 2 detentions.",
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.bio_data ,  T1.student_id FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  >=  2 UNION SELECT T1.bio_data ,  T1.student_id FROM Students AS T1 JOIN Detention AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  <  2"
    },
    {
        "instance_id": "q_30",
        "question": "What are the biographical data and student id of the students who either took two or more classes and or have less than two detentions?",
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.bio_data ,  T1.student_id FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  >=  2 UNION SELECT T1.bio_data ,  T1.student_id FROM Students AS T1 JOIN Detention AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  <  2"
    },
    {
        "instance_id": "q_31",
        "question": "List the details of the teachers who teach some class whose detail has the substring 'data' but do not teach a class whose detail contains the prefix 'net'",
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.class_details LIKE '%data%' EXCEPT SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.class_details LIKE 'net%'"
    },
    {
        "instance_id": "q_32",
        "question": "Which teachers teach a class that has the substring 'data' in its detail but do not teach a class that has prefix 'net' in its detail? Give me the teacher details.",
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.class_details LIKE '%data%' EXCEPT SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.class_details LIKE 'net%'"
    },
    {
        "instance_id": "q_33",
        "question": "List the biographical data of the students who never had a detention or student loan .",
        "db_id": "cre_Students_Information_Systems",
        "query": "select bio_data from students where student_id not in (select t1.student_id from students as t1 join detention as t2 on t1.student_id  =  t2.student_id union select t1.student_id from students as t1 join student_loans as t2 on t1.student_id  =  t2.student_id)"
    },
    {
        "instance_id": "q_34",
        "question": "Which students never had a detention or student loan ? Find their biographical data .",
        "db_id": "cre_Students_Information_Systems",
        "query": "select bio_data from students where student_id not in (select t1.student_id from students as t1 join detention as t2 on t1.student_id  =  t2.student_id union select t1.student_id from students as t1 join student_loans as t2 on t1.student_id  =  t2.student_id)"
    },
    {
        "instance_id": "q_35",
        "question": "Which students not only got the most common result but also got a result obtained by 3 students in behaviour monitoring? List the student's biographical data and details.",
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 ) INTERSECT SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING count(*)  =  3 )"
    },
    {
        "instance_id": "q_36",
        "question": "Find the biographical data and details of students who got not only the most common result but also a result that is obtained by 3 students in behaviour monitoring.",
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 ) INTERSECT SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING count(*)  =  3 )"
    },
    {
        "instance_id": "q_37",
        "question": "Which students only got the most common result for his or her all behaviour monitoring details? List the students' biographical information.",
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.bio_data FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 ) EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details NOT IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 )"
    },
    {
        "instance_id": "q_38",
        "question": "What is the biographical information of the students who got the most common result for their behaviour monitoring details ?",
        "db_id": "cre_Students_Information_Systems",
        "query": "select t1.bio_data from students as t1 join behaviour_monitoring as t2 on t1.student_id  =  t2.student_id where t2.behaviour_monitoring_details in ( select behaviour_monitoring_details from behaviour_monitoring group by behaviour_monitoring_details order by count(*) desc limit 1 ) except select t1.bio_data from students as t1 join behaviour_monitoring as t2 on t1.student_id  =  t2.student_id where t2.behaviour_monitoring_details not in ( select behaviour_monitoring_details from behaviour_monitoring group by behaviour_monitoring_details order by count(*) desc limit 1 )"
    },
    {
        "instance_id": "q_39",
        "question": "How many students have joined in the most common type of event? List the number, the event type and description.",
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT count(*) ,  T2.event_type_code ,  T3.event_type_description FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id JOIN Ref_Event_Types AS T3 ON T2.event_type_code  =  T3.event_type_code GROUP BY T2.event_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instance_id": "q_40",
        "question": "What is the type of event the most students joined? Give me the number of students, and the event type code and description.",
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT count(*) ,  T2.event_type_code ,  T3.event_type_description FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id JOIN Ref_Event_Types AS T3 ON T2.event_type_code  =  T3.event_type_code GROUP BY T2.event_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "instance_id": "q_41",
        "question": "In which cities are there any properties equipped with a swimming pool?",
        "db_id": "real_estate_rentals",
        "query": "SELECT T2.town_city FROM Properties AS T1 JOIN Addresses AS T2 ON T1.property_address_id  =  T2.address_id JOIN Property_Features AS T3 ON T1.property_id  =  T3.property_id JOIN Features AS T4 ON T4.feature_id  =  T3.feature_id WHERE T4.feature_name  =  'swimming pool';"
    },
    {
        "instance_id": "q_42",
        "question": "Return the cities in which there exist properties that have swimming pools.",
        "db_id": "real_estate_rentals",
        "query": "SELECT T2.town_city FROM Properties AS T1 JOIN Addresses AS T2 ON T1.property_address_id  =  T2.address_id JOIN Property_Features AS T3 ON T1.property_id  =  T3.property_id JOIN Features AS T4 ON T4.feature_id  =  T3.feature_id WHERE T4.feature_name  =  'swimming pool';"
    },
    {
        "instance_id": "q_43",
        "question": "List the last names and ids of users who have at least 2 properties and searched at most twice.",
        "db_id": "real_estate_rentals",
        "query": "SELECT T1.last_name ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  <=  2 INTERSECT SELECT T3.last_name ,  T3.user_id FROM Users AS T3 JOIN Properties AS T4 ON T3.user_id  =  T4.owner_user_id GROUP BY T3.user_id HAVING count(*)  >=  2;"
    },
    {
        "instance_id": "q_44",
        "question": "What are the last names and ids of users who have searched two or fewer times, and own two or more properties?",
        "db_id": "real_estate_rentals",
        "query": "SELECT T1.last_name ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  <=  2 INTERSECT SELECT T3.last_name ,  T3.user_id FROM Users AS T3 JOIN Properties AS T4 ON T3.user_id  =  T4.owner_user_id GROUP BY T3.user_id HAVING count(*)  >=  2;"
    },
    {
        "instance_id": "q_45",
        "question": "What is the process outcome description and process status description for the document with id 0?",
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT T2.process_outcome_description ,  T3.process_status_description FROM Documents_processes AS T1 JOIN Process_outcomes AS T2 ON T1.process_outcome_code  =  T2.process_outcome_code JOIN Process_Status AS T3 ON T1.process_status_code  =  T3.process_status_code WHERE T1.document_id  =  0"
    },
    {
        "instance_id": "q_46",
        "question": "What are the id, sic code and agency id of the client who has attended 1 meeting and has any invoice.",
        "db_id": "advertising_agencies",
        "query": "SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id HAVING count(*)  =  1 INTERSECT SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id"
    },
    {
        "instance_id": "q_47",
        "question": "Return the ids, sic codes, and agency ids of clients who have attended 1 meeting and had an invoice.",
        "db_id": "advertising_agencies",
        "query": "SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id HAVING count(*)  =  1 INTERSECT SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id"
    },
    {
        "instance_id": "q_48",
        "question": "List the start time, end time of each meeting, and the corresponding client detail and staff detail.",
        "db_id": "advertising_agencies",
        "query": "SELECT T1.start_date_time ,  T1.end_date_time ,  T2.client_details ,  T4.staff_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id JOIN staff_in_meetings AS T3 ON T1.meeting_id  =  T3.meeting_id JOIN staff AS T4 ON T3.staff_id  =  T4.staff_id"
    },
    {
        "instance_id": "q_49",
        "question": "What are the start and end times of each meeting, as well as the corresponding client and staff details the attendees?",
        "db_id": "advertising_agencies",
        "query": "SELECT T1.start_date_time ,  T1.end_date_time ,  T2.client_details ,  T4.staff_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id JOIN staff_in_meetings AS T3 ON T1.meeting_id  =  T3.meeting_id JOIN staff AS T4 ON T3.staff_id  =  T4.staff_id"
    },
    {
        "instance_id": "q_50",
        "question": "What are the entry names of catalog with the attribute possessed by most entries.",
        "db_id": "product_catalog",
        "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)"
    },
    {
        "instance_id": "q_51",
        "question": "Find the entry names of the catalog with the attribute that have the most entries.",
        "db_id": "product_catalog",
        "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)"
    },
    {
        "instance_id": "q_52",
        "question": "Find the name of tracks which are in Movies playlist but not in music playlist.",
        "db_id": "store_1",
        "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'"
    },
    {
        "instance_id": "q_53",
        "question": "What are the names of all tracks that are on the Movies playlist but not in the music playlist?",
        "db_id": "store_1",
        "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'"
    },
    {
        "instance_id": "q_54",
        "question": "Find the name of tracks which are in both Movies and music playlists.",
        "db_id": "store_1",
        "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'"
    },
    {
        "instance_id": "q_55",
        "question": "What are the names of all the tracks that are in both the Movies and music playlists?",
        "db_id": "store_1",
        "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'"
    },
    {
        "instance_id": "q_56",
        "question": "What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks?",
        "db_id": "chinook_1",
        "query": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'"
    },
    {
        "instance_id": "q_57",
        "question": "Find the titles of albums that contain tracks of both the Reggae and Rock genres.",
        "db_id": "chinook_1",
        "query": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'"
    },
    {
        "instance_id": "q_58",
        "question": "Show the apartment numbers of apartments with bookings that have status code both \"Provisional\" and \"Confirmed\"",
        "db_id": "apartment_rentals",
        "query": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\""
    },
    {
        "instance_id": "q_59",
        "question": "Which apartments have bookings with both status codes \"Provisional\" and \"Confirmed\"? Give me the apartment numbers.",
        "db_id": "apartment_rentals",
        "query": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\""
    },
    {
        "instance_id": "q_60",
        "question": "Show the apartment numbers of apartments with unit status availability of both 0 and 1.",
        "db_id": "apartment_rentals",
        "query": "SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  1"
    },
    {
        "instance_id": "q_61",
        "question": "Which apartments have unit status availability of both 0 and 1? Return their apartment numbers.",
        "db_id": "apartment_rentals",
        "query": "SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  1"
    },
    {
        "instance_id": "q_62",
        "question": "What are the coupon amount of the coupons owned by both good and bad customers?",
        "db_id": "products_for_hire",
        "query": "SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'good' INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'bad'"
    },
    {
        "instance_id": "q_63",
        "question": "Which shipping agent shipped the most documents? List the shipping agent name and the number of documents.",
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1;"
    },
    {
        "instance_id": "q_64",
        "question": "List the document ids of documents with the status done and type Paper, which not shipped by the shipping agent named USPS.",
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT document_id FROM Documents WHERE document_status_code  =  \"done\" AND document_type_code = \"Paper\" EXCEPT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";"
    },
    {
        "instance_id": "q_65",
        "question": "List document id of documents status is done and document type is Paper and the document is shipped by shipping agent named USPS.",
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT document_id FROM Documents WHERE document_status_code  =  \"done\" AND document_type_code = \"Paper\" INTERSECT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";"
    },
    {
        "instance_id": "q_66",
        "question": "Which employee has showed up in most circulation history documents. List the employee's name and the number of drafts and copies.",
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT Employees.employee_name , count(*) FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Circulation_History.document_id , Circulation_History.draft_number , Circulation_History.copy_number ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "instance_id": "q_67",
        "question": "Find the id and forenames of drivers who participated both the races with name Australian Grand Prix and the races with name Chinese Grand Prix?",
        "db_id": "formula_1",
        "query": "SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Australian Grand Prix\" INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Chinese Grand Prix\""
    },
    {
        "instance_id": "q_68",
        "question": "What is the id and first name of all the drivers who participated in the Australian Grand Prix and the Chinese Grand Prix?",
        "db_id": "formula_1",
        "query": "SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Australian Grand Prix\" INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Chinese Grand Prix\""
    },
    {
        "instance_id": "q_69",
        "question": "What are the forenames and surnames of drivers who participated in the races named Australian Grand Prix but not the races named Chinese Grand Prix?",
        "db_id": "formula_1",
        "query": "SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\""
    },
    {
        "instance_id": "q_70",
        "question": "What are the first and last names of all drivers who participated in the Australian Grand Prix but not the Chinese Grand Prix?",
        "db_id": "formula_1",
        "query": "SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\""
    },
    {
        "instance_id": "q_71",
        "question": "What are the drivers' first, last names and id who had more than 8 pit stops or participated in more than 5 race results?",
        "db_id": "formula_1",
        "query": "SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  8 UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5"
    },
    {
        "instance_id": "q_72",
        "question": "What are the drivers' first names,last names, and ids for all those that had more than 8 stops or participated in more than 5 races?",
        "db_id": "formula_1",
        "query": "SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  8 UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5"
    },
    {
        "instance_id": "q_73",
        "question": "What are the drivers' last names and id who had 11 pit stops and participated in more than 5 race results?",
        "db_id": "formula_1",
        "query": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5"
    },
    {
        "instance_id": "q_74",
        "question": "What are the last names and ids of all drivers who had 11 pit stops and participated in more than 5 races?",
        "db_id": "formula_1",
        "query": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5"
    },
    {
        "instance_id": "q_75",
        "question": "Find the names of customers who are not living in the state of California.",
        "db_id": "customer_deliveries",
        "query": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'"
    },
    {
        "instance_id": "q_76",
        "question": "Which assets have 2 parts and have less than 2 fault logs? List the asset id and detail.",
        "db_id": "assets_maintenance",
        "query": "SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  =  2 INTERSECT SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  <  2"
    },
    {
        "instance_id": "q_77",
        "question": "Which third party companies have at least 2 maintenance engineers or have at least 2 maintenance contracts? List the company id and name.",
        "db_id": "assets_maintenance",
        "query": "SELECT T1.company_id ,  T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id HAVING count(*)  >=  2 UNION SELECT T3.company_id ,  T3.company_name FROM Third_Party_Companies AS T3 JOIN Maintenance_Contracts AS T4 ON T3.company_id  =  T4.maintenance_contract_company_id GROUP BY T3.company_id HAVING count(*)  >=  2"
    },
    {
        "instance_id": "q_78",
        "question": "What is the description of the type of the company who concluded its contracts most recently?",
        "db_id": "assets_maintenance",
        "query": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id JOIN Ref_Company_Types AS T3 ON T1.company_type_code  =  T3.company_type_code ORDER BY T2.contract_end_date DESC LIMIT 1"
    },
    {
        "instance_id": "q_79",
        "question": "What is the first names of the professors from the history department who do not teach a class.",
        "db_id": "college_1",
        "query": "SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num  =  T5.prof_num"
    },
    {
        "instance_id": "q_80",
        "question": "What are the first names of all history professors who do not teach?",
        "db_id": "college_1",
        "query": "SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num  =  T5.prof_num"
    },
    {
        "instance_id": "q_81",
        "question": "Find the first name of student who is taking classes from accounting and Computer Info. Systems departments",
        "db_id": "college_1",
        "query": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Computer Info. Systems'"
    },
    {
        "instance_id": "q_82",
        "question": "What are the first names of all students taking accoutning and Computer Information Systems classes?",
        "db_id": "college_1",
        "query": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Computer Info. Systems'"
    },
    {
        "instance_id": "q_83",
        "question": "Find the first names and offices of all instructors who have taught some course and the course description and the department name.",
        "db_id": "college_1",
        "query": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description ,  T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num JOIN department AS T5 ON T4.dept_code  =  T5.dept_code"
    },
    {
        "instance_id": "q_84",
        "question": "What are the first names, office locations, and departments of all instructors, and also what are the descriptions of the courses they teach?",
        "db_id": "college_1",
        "query": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description ,  T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num JOIN department AS T5 ON T4.dept_code  =  T5.dept_code"
    },
    {
        "instance_id": "q_85",
        "question": "Find the first names and degree of all professors who are teaching some class in Computer Info. Systems department.",
        "db_id": "college_1",
        "query": "SELECT DISTINCT T2.emp_fname ,  T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Computer Info. Systems'"
    },
    {
        "instance_id": "q_86",
        "question": "What are the different first names and highest degree attained for professors teaching in the Computer Information Systems department?",
        "db_id": "college_1",
        "query": "SELECT DISTINCT T2.emp_fname ,  T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Computer Info. Systems'"
    },
    {
        "instance_id": "q_87",
        "question": "display the full name (first and last name ) of employee with ID and name of the country presently where (s)he is working.",
        "db_id": "hr_1",
        "query": "SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id"
    },
    {
        "instance_id": "q_88",
        "question": "What the full names, ids of each employee and the name of the country they are in?",
        "db_id": "hr_1",
        "query": "SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id"
    },
    {
        "instance_id": "q_89",
        "question": "Which claims caused more than 2 settlements or have the maximum claim value? List the date the claim was made and the claim id.",
        "db_id": "insurance_policies",
        "query": "SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.Claim_id HAVING count(*)  >  2 UNION SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id WHERE T1.Amount_Claimed  =  ( SELECT max(Amount_Claimed) FROM Claims )"
    },
    {
        "instance_id": "q_90",
        "question": "Find the claims that led to more than two settlements or have the maximum claim value. For each of them, return the date the claim was made and the id of the claim.",
        "db_id": "insurance_policies",
        "query": "SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.Claim_id HAVING count(*)  >  2 UNION SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id WHERE T1.Amount_Claimed  =  ( SELECT max(Amount_Claimed) FROM Claims )"
    },
    {
        "instance_id": "q_91",
        "question": "Which customer had at least 2 policies but did not file any claims? List the customer details and id.",
        "db_id": "insurance_policies",
        "query": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id"
    },
    {
        "instance_id": "q_92",
        "question": "Give me the the customer details and id for the customers who had two or more policies but did not file any claims.",
        "db_id": "insurance_policies",
        "query": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id"
    },
    {
        "instance_id": "q_93",
        "question": "Find the name of physicians who are affiliated with both Surgery and Psychiatry departments.",
        "db_id": "hospital_1",
        "query": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Psychiatry'"
    },
    {
        "instance_id": "q_94",
        "question": "Which physicians are affiliated with both Surgery and Psychiatry departments? Tell me their names.",
        "db_id": "hospital_1",
        "query": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Psychiatry'"
    },
    {
        "instance_id": "q_95",
        "question": "List the project details of the project both producing patent and paper as outcomes.",
        "db_id": "tracking_grants_for_research",
        "query": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Paper' INTERSECT SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Patent'"
    },
    {
        "instance_id": "q_96",
        "question": "What are the details of the project that is producing both patents and papers as outcomes?",
        "db_id": "tracking_grants_for_research",
        "query": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Paper' INTERSECT SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Patent'"
    },
    {
        "instance_id": "q_97",
        "question": "Find out the send dates of the documents with the grant amount of more than 5000 were granted by organisation type described",
        "db_id": "tracking_grants_for_research",
        "query": "SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'"
    },
    {
        "instance_id": "q_98",
        "question": "What are the send dates for all documents that have a grant amount of more than 5000 and are involved in research?",
        "db_id": "tracking_grants_for_research",
        "query": "SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'"
    },
    {
        "instance_id": "q_99",
        "question": "What are the task details, task id and project id for the projects which are detailed as 'omnis' or  have more than 2 outcomes?",
        "db_id": "tracking_grants_for_research",
        "query": "SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'omnis' UNION SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.project_id HAVING count(*)  >  2"
    },
    {
        "instance_id": "q_100",
        "question": "What are the task details, task ids, and project ids for the progrects that are detailed as 'omnis' or have at least 3 outcomes?",
        "db_id": "tracking_grants_for_research",
        "query": "SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'omnis' UNION SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.project_id HAVING count(*)  >  2"
    },
    {
        "instance_id": "q_101",
        "question": "For grants with both documents described as 'Regular' and documents described as 'Initial Application', list its start date.",
        "db_id": "tracking_grants_for_research",
        "query": "SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Initial Application'"
    },
    {
        "instance_id": "q_102",
        "question": "For grants that have descriptions of Regular and Initial Applications, what are their start dates?",
        "db_id": "tracking_grants_for_research",
        "query": "SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Initial Application'"
    },
    {
        "instance_id": "q_103",
        "question": "Find the average access counts of documents with functional area \"Acknowledgement\".",
        "db_id": "document_management",
        "query": "SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  \"Acknowledgement\""
    },
    {
        "instance_id": "q_104",
        "question": "What are the average access counts of documents that have the functional area description \"Acknowledgement\"?",
        "db_id": "document_management",
        "query": "SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  \"Acknowledgement\""
    },
    {
        "instance_id": "q_105",
        "question": "What are the name and payment method of customers who have both mailshots in 'Order' outcome and mailshots in 'No Response' outcome.",
        "db_id": "customers_campaigns_ecommerce",
        "query": "SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'Order' INTERSECT SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'No Response'"
    },
    {
        "instance_id": "q_106",
        "question": "Find the name and address of the customers who have both New and Pending orders.",
        "db_id": "department_store",
        "query": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\""
    },
    {
        "instance_id": "q_107",
        "question": "What are the names and addressed of customers who have both New and Pending orders?",
        "db_id": "department_store",
        "query": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\""
    },
    {
        "instance_id": "q_108",
        "question": "What is the id and name of the department store that has both marketing and managing department?",
        "db_id": "department_store",
        "query": "SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"marketing\" INTERSECT SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"managing\""
    },
    {
        "instance_id": "q_109",
        "question": "What are the ids and names of department stores with both marketing and managing departments?",
        "db_id": "department_store",
        "query": "SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"marketing\" INTERSECT SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"managing\""
    },
    {
        "instance_id": "q_110",
        "question": "List the names of all the distinct customers who bought a keyboard.",
        "db_id": "department_store",
        "query": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"keyboard\""
    },
    {
        "instance_id": "q_111",
        "question": "What are the distinct names of customers who have purchased a keyboard?",
        "db_id": "department_store",
        "query": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"keyboard\""
    },
    {
        "instance_id": "q_112",
        "question": "Find the name and gender of the staff who has been assigned the job of Sales Person but never Clerical Staff.",
        "db_id": "department_store",
        "query": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\""
    },
    {
        "instance_id": "q_113",
        "question": "What are the names and genders of staff who have held the title Sales Person, but never Clerical Staff?",
        "db_id": "department_store",
        "query": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\""
    },
    {
        "instance_id": "q_114",
        "question": "Show the names of aircrafts that are associated with both an airport named \"London Heathrow\" and an airport named \"London Gatwick\"",
        "db_id": "aircraft",
        "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Heathrow\" INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\""
    },
    {
        "instance_id": "q_115",
        "question": "What are the names of all aircrafts that are associated with both London Heathrow and Gatwick airports?",
        "db_id": "aircraft",
        "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Heathrow\" INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\""
    },
    {
        "instance_id": "q_116",
        "question": "What is the description of the service type which offers both the photo product and the film product?",
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'photo' INTERSECT SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'film'"
    },
    {
        "instance_id": "q_117",
        "question": "Give me the description of the service type that offers not only the photo product but also the film product.",
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'photo' INTERSECT SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'film'"
    },
    {
        "instance_id": "q_118",
        "question": "What are the id of problems reported by the staff named Dameon Frami or Jolie Weber?",
        "db_id": "tracking_software_problems",
        "query": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\""
    },
    {
        "instance_id": "q_119",
        "question": "Which problems were reported by the staff named Dameon Frami or Jolie Weber? Give me the ids of the problems.",
        "db_id": "tracking_software_problems",
        "query": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\""
    },
    {
        "instance_id": "q_120",
        "question": "What are the product ids for the problems reported by Christop Berge with closure authorised by Ashley Medhurst?",
        "db_id": "tracking_software_problems",
        "query": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\" AND T2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Ashley\" AND T2.staff_last_name = \"Medhurst\""
    },
    {
        "instance_id": "q_121",
        "question": "For which product was there a problem reported by Christop Berge, with closure authorised by Ashley Medhurst? Return the product ids.",
        "db_id": "tracking_software_problems",
        "query": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\" AND T2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Ashley\" AND T2.staff_last_name = \"Medhurst\""
    },
    {
        "instance_id": "q_122",
        "question": "What are the ids of the problems reported before the date of any problem reported by Lysanne Turcotte?",
        "db_id": "tracking_software_problems",
        "query": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  <  ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Lysanne\" AND T4.staff_last_name = \"Turcotte\" )"
    },
    {
        "instance_id": "q_123",
        "question": "Which problems were reported before the date of any problem reported by the staff Lysanne Turcotte? Give me the ids of the problems.",
        "db_id": "tracking_software_problems",
        "query": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  <  ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Lysanne\" AND T4.staff_last_name = \"Turcotte\" )"
    },
    {
        "instance_id": "q_124",
        "question": "What are the ids of the problems reported after the date of any problems reported by Rylan Homenick?",
        "db_id": "tracking_software_problems",
        "query": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  >  ( SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Rylan\" AND T4.staff_last_name = \"Homenick\" )"
    },
    {
        "instance_id": "q_125",
        "question": "Find the ids of the problems reported after the date of any problems reported by the staff Rylan Homenick.",
        "db_id": "tracking_software_problems",
        "query": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  >  ( SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Rylan\" AND T4.staff_last_name = \"Homenick\" )"
    },
    {
        "instance_id": "q_126",
        "question": "Find the first and last name of the staff members who reported problems from the product \"rem\" but not \"aut\"?",
        "db_id": "tracking_software_problems",
        "query": "SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\""
    },
    {
        "instance_id": "q_127",
        "question": "Which staff members who reported problems from the product \"rem\" but not \"aut\"? Give me their first and last names.",
        "db_id": "tracking_software_problems",
        "query": "SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\""
    },
    {
        "instance_id": "q_128",
        "question": "Find the products which have problems reported by both Lacey Bosco and Kenton Champlin?",
        "db_id": "tracking_software_problems",
        "query": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Lacey\" AND T3.staff_last_name = \"Bosco\" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Kenton\" AND T3.staff_last_name = \"Champlin\""
    },
    {
        "instance_id": "q_129",
        "question": "Which products have problems reported by both the staff named Lacey Bosco and the staff named Kenton Champlin?",
        "db_id": "tracking_software_problems",
        "query": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Lacey\" AND T3.staff_last_name = \"Bosco\" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Kenton\" AND T3.staff_last_name = \"Champlin\""
    },
    {
        "instance_id": "q_130",
        "question": "Show the names of customers who have both an order in completed status and an order in part status.",
        "db_id": "customers_and_products_contacts",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'Completed' INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'Part'"
    },
    {
        "instance_id": "q_131",
        "question": "What are the name and phone of the customer with the most ordered product quantity?",
        "db_id": "customers_and_products_contacts",
        "query": "SELECT  T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T3.order_id  =  T2.order_id GROUP BY T1.customer_id ORDER BY sum(T3.order_quantity) DESC LIMIT 1"
    },
    {
        "instance_id": "q_132",
        "question": "What are the names of the tourist attractions and the dates when the tourists named Vincent or Vivian visited there?",
        "db_id": "cre_Theme_park",
        "query": "SELECT T1.Name ,  T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" OR T2.Tourist_Details  =  \"Vivian\""
    },
    {
        "instance_id": "q_133",
        "question": "For each tourist attraction, return its name and the date when the tourists named Vincent or Vivian visited there.",
        "db_id": "cre_Theme_park",
        "query": "SELECT T1.Name ,  T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" OR T2.Tourist_Details  =  \"Vivian\""
    },
    {
        "instance_id": "q_134",
        "question": "What are the names of the tourist attractions that have parking or shopping as their feature details?",
        "db_id": "cre_Theme_park",
        "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'"
    },
    {
        "instance_id": "q_135",
        "question": "Find the tourist attractions that have parking or shopping as their feature details. What are the names of the attractions?",
        "db_id": "cre_Theme_park",
        "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'"
    },
    {
        "instance_id": "q_136",
        "question": "What are the names of the tourist attractions Vincent and Marcelle visit?",
        "db_id": "cre_Theme_park",
        "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Marcelle\""
    },
    {
        "instance_id": "q_137",
        "question": "Which tourist attractions do the tourists Vincent and Marcelle visit? Tell me the names of the attractions.",
        "db_id": "cre_Theme_park",
        "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Marcelle\""
    },
    {
        "instance_id": "q_138",
        "question": "What are the names of tourist attraction that Alison visited but Rosalind did not visit?",
        "db_id": "cre_Theme_park",
        "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\""
    },
    {
        "instance_id": "q_139",
        "question": "Find the the names of the tourist attractions that the tourist named Alison visited but Rosalind did not visit.",
        "db_id": "cre_Theme_park",
        "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\""
    },
    {
        "instance_id": "q_140",
        "question": "Find the names of customers who never ordered product Latte.",
        "db_id": "customers_and_addresses",
        "query": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'"
    },
    {
        "instance_id": "q_141",
        "question": "What are names of customers who never ordered product Latte.",
        "db_id": "customers_and_addresses",
        "query": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'"
    },
    {
        "instance_id": "q_142",
        "question": "Find the names of customers who ordered both products Latte and Americano.",
        "db_id": "customers_and_addresses",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano'"
    },
    {
        "instance_id": "q_143",
        "question": "What are the names of customers who have purchased both products Latte and Americano?",
        "db_id": "customers_and_addresses",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano'"
    },
    {
        "instance_id": "q_144",
        "question": "Find the last name of the latest contact individual of the organization \"Labour Party\".",
        "db_id": "e_government",
        "query": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.organization_name  =  \"Labour Party\" ORDER BY t2.date_contact_to DESC LIMIT 1"
    },
    {
        "instance_id": "q_145",
        "question": "What is the last name of the contact individual from the Labour party organization who was contacted most recently?",
        "db_id": "e_government",
        "query": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.organization_name  =  \"Labour Party\" ORDER BY t2.date_contact_to DESC LIMIT 1"
    },
    {
        "instance_id": "q_146",
        "question": "Find the last name of the first ever contact person of the organization with the highest UK Vat number.",
        "db_id": "e_government",
        "query": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.uk_vat_number  =  (SELECT max(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT 1"
    },
    {
        "instance_id": "q_147",
        "question": "What is the last name of the first individual contacted from the organization with the maximum UK Vat number across all organizations?",
        "db_id": "e_government",
        "query": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.uk_vat_number  =  (SELECT max(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT 1"
    },
    {
        "instance_id": "q_148",
        "question": "Find the names of the customers who have order status both \"On Road\" and \"Shipped\".",
        "db_id": "tracking_orders",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\""
    },
    {
        "instance_id": "q_149",
        "question": "Which customers have both \"On Road\" and \"Shipped\" as order status? List the customer names.",
        "db_id": "tracking_orders",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\""
    },
    {
        "instance_id": "q_150",
        "question": "Find the id of the customers who have order status both \"On Road\" and \"Shipped\".",
        "db_id": "tracking_orders",
        "query": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\""
    },
    {
        "instance_id": "q_151",
        "question": "Which customers have both \"On Road\" and \"Shipped\" as order status? List the customer ids.",
        "db_id": "tracking_orders",
        "query": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\""
    },
    {
        "instance_id": "q_152",
        "question": "List the names of the customers who have once bought product \"food\".",
        "db_id": "tracking_orders",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1"
    },
    {
        "instance_id": "q_153",
        "question": "What are the names of the customers who bought product \"food\" at least once?",
        "db_id": "tracking_orders",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1"
    },
    {
        "instance_id": "q_154",
        "question": "List the names of customers who have once canceled the purchase of the product \"food\" (the item status is \"Cancel\").",
        "db_id": "tracking_orders",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = \"Cancel\" AND T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1"
    },
    {
        "instance_id": "q_155",
        "question": "Which customers have ever canceled the purchase of the product \"food\" (the item status is \"Cancel\")?",
        "db_id": "tracking_orders",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = \"Cancel\" AND T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1"
    },
    {
        "instance_id": "q_156",
        "question": "what is the smallest city in the largest state",
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );"
    },
    {
        "instance_id": "q_157",
        "question": "how many states have a higher point than the highest point of the state with the largest capital city in the us",
        "db_id": "geo",
        "query": "SELECT COUNT ( state_name ) FROM highlow WHERE highest_elevation  >  ( SELECT highest_elevation FROM highlow WHERE state_name  =  ( SELECT state_name FROM state WHERE capital  =  ( SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city ) ) ) );"
    },
    {
        "instance_id": "q_158",
        "question": "what is the largest city in smallest state through which the mississippi runs",
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) AND area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ) ) ORDER BY population DESC LIMIT 1;"
    },
    {
        "instance_id": "q_159",
        "question": "what is the largest city in the smallest state in the usa",
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );"
    },
    {
        "instance_id": "q_160",
        "question": "what is the biggest city in the smallest state",
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );"
    },
    {
        "instance_id": "q_161",
        "question": "what is the largest state bordering california",
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" );"
    },
    {
        "instance_id": "q_162",
        "question": "what is the largest state that borders california",
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" );"
    },
    {
        "instance_id": "q_163",
        "question": "what state that borders california is the largest",
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" );"
    },
    {
        "instance_id": "q_164",
        "question": "what is the longest river in the largest state",
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) ) ) AND traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );"
    },
    {
        "instance_id": "q_165",
        "question": "what is the longest river in the states that border tennessee",
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" ) ) AND traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" );"
    },
    {
        "instance_id": "q_166",
        "question": "what is the longest river that flows through a state that borders tennessee",
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" ) ) AND traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" );"
    },
    {
        "instance_id": "q_167",
        "question": "what is the longest river that runs through a state that borders tennessee",
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" ) ) AND traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" );"
    },
    {
        "instance_id": "q_168",
        "question": "what is the most populous state through which the mississippi runs",
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );"
    },
    {
        "instance_id": "q_169",
        "question": "what state which the mississippi runs through has the largest population",
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );"
    },
    {
        "instance_id": "q_170",
        "question": "what is the population of the largest city in the state with the largest area",
        "db_id": "geo",
        "query": "SELECT population FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );"
    },
    {
        "instance_id": "q_171",
        "question": "which state has the lowest point that borders idaho",
        "db_id": "geo",
        "query": "SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"idaho\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"idaho\" );"
    },
    {
        "instance_id": "q_172",
        "question": "what is the largest city in a state that borders california",
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" );"
    },
    {
        "instance_id": "q_173",
        "question": "what is the largest city in states that border california",
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" );"
    },
    {
        "instance_id": "q_174",
        "question": "what is the smallest city of the smallest state in the us",
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );"
    },
    {
        "instance_id": "q_175",
        "question": "what is the largest state that borders the state with the highest population",
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT state_name FROM border_info WHERE border IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) ) ) ) AND state_name IN ( SELECT state_name FROM border_info WHERE border IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) ) );"
    },
    {
        "instance_id": "q_176",
        "question": "what is the longest river in the smallest state in the usa",
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) ) ) AND traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );"
    },
    {
        "instance_id": "q_177",
        "question": "what is the smallest state through which the longest river runs",
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river ) ) ) AND state_name IN ( SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river ) );"
    },
    {
        "instance_id": "q_178",
        "question": "how many people live in the smallest state bordering wyoming",
        "db_id": "geo",
        "query": "SELECT population FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"wyoming\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"wyoming\" );"
    },
    {
        "instance_id": "q_179",
        "question": "what is the largest state that borders the state with the lowest point in the usa",
        "db_id": "geo",
        "query": "SELECT t1.state_name FROM highlow AS t3 JOIN border_info AS t1 ON t3.state_name  =  t1.border JOIN state AS t2 ON t2.state_name  =  t1.border WHERE t3.lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow ) ORDER BY t2.area DESC LIMIT 1;"
    },
    {
        "instance_id": "q_180",
        "question": "papers that are coauthored by Peter Mertens and Dina Barbian",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";"
    },
    {
        "instance_id": "q_181",
        "question": "papers written by Peter Mertens and Dina Barbian",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";"
    },
    {
        "instance_id": "q_182",
        "question": "what are the papers that have Peter Mertens and Dina Barbian as co-authors",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";"
    },
    {
        "instance_id": "q_183",
        "question": "What papers have Peter Mertens and Dina Barbian written ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";"
    },
    {
        "instance_id": "q_184",
        "question": "what paper did Peter Mertens and Dina Barbian write together ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";"
    },
    {
        "instance_id": "q_185",
        "question": "Has Peter Mertens and Dina Barbian written a paper together ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";"
    },
    {
        "instance_id": "q_186",
        "question": "Papers by Peter Mertens and Dina Barbian",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";"
    },
    {
        "instance_id": "q_187",
        "question": "papers by authors Peter Mertens and Dina Barbian",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";"
    },
    {
        "instance_id": "q_188",
        "question": "What papers were written by authors Peter Mertens and Dina Barbian",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";"
    },
    {
        "instance_id": "q_189",
        "question": "papers by Peter Mertens and Dina Barbian",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";"
    },
    {
        "instance_id": "q_190",
        "question": "papers written by authors Peter Mertens and Dina Barbian",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";"
    },
    {
        "instance_id": "q_191",
        "question": "When did Peter Mertens and Dina Barbian collaborate ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";"
    },
    {
        "instance_id": "q_192",
        "question": "what are the collaborations of Peter Mertens and Dina Barbian ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";"
    },
    {
        "instance_id": "q_193",
        "question": "Have Peter Mertens and Dina Barbian written a paper together ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";"
    },
    {
        "instance_id": "q_194",
        "question": "Peter Mertens and Dina Barbian as co-authors",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";"
    },
    {
        "instance_id": "q_195",
        "question": "Does Peter Mertens ever collaborated with Dina Barbian ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";"
    },
    {
        "instance_id": "q_196",
        "question": "Which papers have Peter Mertens and Dina Barbian as co-authors ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";"
    },
    {
        "instance_id": "q_197",
        "question": "papers coauthored by Peter Mertens and Dina Barbian",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";"
    },
    {
        "instance_id": "q_198",
        "question": "What papers have been written by Peter Mertens and Dina Barbian ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";"
    },
    {
        "instance_id": "q_199",
        "question": "What papers have been written by both Peter Mertens and Dina Barbian ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";"
    },
    {
        "instance_id": "q_200",
        "question": "What papers have been written by Peter Mertens and Dina Barbian .",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";"
    },
    {
        "instance_id": "q_201",
        "question": "who has written the most syntactic parsing papers ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;"
    },
    {
        "instance_id": "q_202",
        "question": "who is the most published author in syntactic parsing ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;"
    },
    {
        "instance_id": "q_203",
        "question": "who has the most publications in syntactic parsing ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;"
    },
    {
        "instance_id": "q_204",
        "question": "who has written the most papers on syntactic parsing ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;"
    },
    {
        "instance_id": "q_205",
        "question": "List prominent scholars in syntactic parsing ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;"
    },
    {
        "instance_id": "q_206",
        "question": "who wrote the most papers on syntactic parsing ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;"
    },
    {
        "instance_id": "q_207",
        "question": "Who are the authors with the most published papers in syntactic parsing ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;"
    },
    {
        "instance_id": "q_208",
        "question": "top syntactic parsing author",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;"
    },
    {
        "instance_id": "q_209",
        "question": "top author in syntactic parsing",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;"
    },
    {
        "instance_id": "q_210",
        "question": "who published the most in syntactic parsing ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;"
    },
    {
        "instance_id": "q_211",
        "question": "who published the most papers in syntactic parsing ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;"
    },
    {
        "instance_id": "q_212",
        "question": "How many papers did David M. Blei publish at AISTATS ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";"
    },
    {
        "instance_id": "q_213",
        "question": "How many papers does David M. Blei have in AISTATS ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";"
    },
    {
        "instance_id": "q_214",
        "question": "How many papers has David M. Blei published in AISTATS ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";"
    },
    {
        "instance_id": "q_215",
        "question": "how many papers does David M. Blei have at AISTATS",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";"
    },
    {
        "instance_id": "q_216",
        "question": "how many papers does David M. Blei have in AISTATS ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";"
    },
    {
        "instance_id": "q_217",
        "question": "how many David M. Blei papers are in AISTATS ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";"
    },
    {
        "instance_id": "q_218",
        "question": "How many papers David M. Blei has in AISTATS ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";"
    },
    {
        "instance_id": "q_219",
        "question": "How many papers does David M. Blei have in AISTATS",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";"
    },
    {
        "instance_id": "q_220",
        "question": "which EMNLP 2010 papers have the most citations ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2010 AND t2.venuename  =  \"EMNLP\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citedpaperid ) DESC;"
    },
    {
        "instance_id": "q_221",
        "question": "Which paper from EMNLP 2010 was cited most ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2010 AND t2.venuename  =  \"EMNLP\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citedpaperid ) DESC;"
    },
    {
        "instance_id": "q_222",
        "question": "most cited EMNLP 2010 papers",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2010 AND t2.venuename  =  \"EMNLP\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citedpaperid ) DESC;"
    },
    {
        "instance_id": "q_223",
        "question": "which EMNLP 2010 papers have been cited the most ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2010 AND t2.venuename  =  \"EMNLP\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citedpaperid ) DESC;"
    },
    {
        "instance_id": "q_224",
        "question": "What papers were published at CVPR in 2016 about Class consistent multi-modal fusion with binary features applied to RGB-D Object Dataset ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"RGB-D Object Dataset\" AND t3.title  =  \"Class consistent multi-modal fusion with binary features\" AND t3.year  =  2016 AND t4.venuename  =  \"CVPR\";"
    },
    {
        "instance_id": "q_225",
        "question": "What papers were published at CVPR '16 about Class consistent multi-modal fusion with binary features applied to RGB-D Object Dataset ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"RGB-D Object Dataset\" AND t3.title  =  \"Class consistent multi-modal fusion with binary features\" AND t3.year  =  2016 AND t4.venuename  =  \"CVPR\";"
    },
    {
        "instance_id": "q_226",
        "question": "what kind of papers does Luke Zettlemoyer publish",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";"
    },
    {
        "instance_id": "q_227",
        "question": "Keyphrases used by Luke Zettlemoyer",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";"
    },
    {
        "instance_id": "q_228",
        "question": "What keywords are in papers by Luke Zettlemoyer ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";"
    },
    {
        "instance_id": "q_229",
        "question": "keywords used by Luke Zettlemoyer",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";"
    },
    {
        "instance_id": "q_230",
        "question": "what keywords are used by Luke Zettlemoyer",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";"
    },
    {
        "instance_id": "q_231",
        "question": "keyphrases used by Luke Zettlemoyer",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";"
    },
    {
        "instance_id": "q_232",
        "question": "keyphrases by Luke Zettlemoyer",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";"
    },
    {
        "instance_id": "q_233",
        "question": "give me the keywords used by Luke Zettlemoyer",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";"
    },
    {
        "instance_id": "q_234",
        "question": "What topic does Luke Zettlemoyer write about ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";"
    },
    {
        "instance_id": "q_235",
        "question": "what topics does Luke Zettlemoyer publish in",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";"
    },
    {
        "instance_id": "q_236",
        "question": "keywords in the papers written by Luke Zettlemoyer",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";"
    },
    {
        "instance_id": "q_237",
        "question": "keyphrases used by Luke Zettlemoyer .",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";"
    },
    {
        "instance_id": "q_238",
        "question": "topics used by Luke Zettlemoyer",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";"
    },
    {
        "instance_id": "q_239",
        "question": "How many papers by Ed Desmond contain the keyphrases Semantic Parsing ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t1.paperid JOIN author AS t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  \"Ed Desmond\" AND t4.keyphrasename  =  \"Semantic Parsing\";"
    },
    {
        "instance_id": "q_240",
        "question": "How many papers does Ed Desmond have in Semantic Parsing area ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t1.paperid JOIN author AS t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  \"Ed Desmond\" AND t4.keyphrasename  =  \"Semantic Parsing\";"
    },
    {
        "instance_id": "q_241",
        "question": "How many Semantic Parsing papers has Ed Desmond written ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t1.paperid JOIN author AS t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  \"Ed Desmond\" AND t4.keyphrasename  =  \"Semantic Parsing\";"
    },
    {
        "instance_id": "q_242",
        "question": "How many paper has Ed Desmond written about Semantic Parsing ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t1.paperid JOIN author AS t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  \"Ed Desmond\" AND t4.keyphrasename  =  \"Semantic Parsing\";"
    },
    {
        "instance_id": "q_243",
        "question": "acl papers in 2012 on Parsing",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";"
    },
    {
        "instance_id": "q_244",
        "question": "What papers were published in acl in 2012 about Parsing ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";"
    },
    {
        "instance_id": "q_245",
        "question": "papers on Parsing appeared at acl last year",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";"
    },
    {
        "instance_id": "q_246",
        "question": "Parsing papers from acl 2012",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";"
    },
    {
        "instance_id": "q_247",
        "question": "papers about Parsing in acl 2012",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";"
    },
    {
        "instance_id": "q_248",
        "question": "acl papers in 2012 in Parsing",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";"
    },
    {
        "instance_id": "q_249",
        "question": "acl papers in 2012 about Parsing",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";"
    },
    {
        "instance_id": "q_250",
        "question": "What papers were published at acl in 2012 were about Parsing ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";"
    },
    {
        "instance_id": "q_251",
        "question": "papers on Parsing appeared at acl in 2012",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";"
    },
    {
        "instance_id": "q_252",
        "question": "how many Parsing papers did acl 2012 have ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";"
    },
    {
        "instance_id": "q_253",
        "question": "who published Parsing papers at acl 2012",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";"
    },
    {
        "instance_id": "q_254",
        "question": "which papers in acl 2012 had Parsing in them ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";"
    },
    {
        "instance_id": "q_255",
        "question": "what were some Parsing based papers in acl 2012 ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";"
    },
    {
        "instance_id": "q_256",
        "question": "keyphrases used by Luke S Zettlemoyer for each year",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.keyphraseid  ,  t3.year FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Luke S Zettlemoyer\" ORDER BY t3.year  ,  t2.keyphraseid;"
    },
    {
        "instance_id": "q_257",
        "question": "recent research interests of sanjeev arora",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.keyphrasename  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"sanjeev arora\" ORDER BY t3.year DESC;"
    },
    {
        "instance_id": "q_258",
        "question": "recent papers by sanjeev arora",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.keyphrasename  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"sanjeev arora\" ORDER BY t3.year DESC;"
    },
    {
        "instance_id": "q_259",
        "question": "recent papers written by sanjeev arora",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.keyphrasename  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"sanjeev arora\" ORDER BY t3.year DESC;"
    },
    {
        "instance_id": "q_260",
        "question": "how many parsing papers in ACL 2014",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"parsing\" AND t3.year  =  2014 AND t4.venuename  =  \"ACL\";"
    },
    {
        "instance_id": "q_261",
        "question": "how many parsing papers appeared in the proceeeding of ACL 2014 ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"parsing\" AND t3.year  =  2014 AND t4.venuename  =  \"ACL\";"
    },
    {
        "instance_id": "q_262",
        "question": "how many parsing papers were published at ACL 2014 ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"parsing\" AND t3.year  =  2014 AND t4.venuename  =  \"ACL\";"
    },
    {
        "instance_id": "q_263",
        "question": "brian curless convolution paper",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";"
    },
    {
        "instance_id": "q_264",
        "question": "convolution by brian curless",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";"
    },
    {
        "instance_id": "q_265",
        "question": "papers by brian curless about convolution",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";"
    },
    {
        "instance_id": "q_266",
        "question": "brian curless 's paper about convolution",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";"
    },
    {
        "instance_id": "q_267",
        "question": "What are the papers of brian curless in convolution ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";"
    },
    {
        "instance_id": "q_268",
        "question": "papers brian curless wrote about convolution",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";"
    },
    {
        "instance_id": "q_269",
        "question": "brian curless 's papers on convolution",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";"
    },
    {
        "instance_id": "q_270",
        "question": "What is the paper about convolution from brian curless ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";"
    },
    {
        "instance_id": "q_271",
        "question": "papers by brian curless in convolution topic",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";"
    },
    {
        "instance_id": "q_272",
        "question": "I want the papers on keyphrase0 by brian curless",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";"
    },
    {
        "instance_id": "q_273",
        "question": "convolution papers by brian curless",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";"
    },
    {
        "instance_id": "q_274",
        "question": "What papers has brian curless written on convolution ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";"
    },
    {
        "instance_id": "q_275",
        "question": "What papers has brian curless written about convolution ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";"
    },
    {
        "instance_id": "q_276",
        "question": "convolution paper by brian curless",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";"
    },
    {
        "instance_id": "q_277",
        "question": "Does brian curless do convolution ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";"
    },
    {
        "instance_id": "q_278",
        "question": "What TAIL paper published in NIPS ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";"
    },
    {
        "instance_id": "q_279",
        "question": "List the papers on TAIL that were published in NIPS",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";"
    },
    {
        "instance_id": "q_280",
        "question": "what are the papers in NIPS about TAIL ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";"
    },
    {
        "instance_id": "q_281",
        "question": "Papers about TAIL in NIPS",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";"
    },
    {
        "instance_id": "q_282",
        "question": "papers at NIPS related to TAIL",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";"
    },
    {
        "instance_id": "q_283",
        "question": "papers about TAIL published at NIPS",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";"
    },
    {
        "instance_id": "q_284",
        "question": "TAIL papers in NIPS",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";"
    },
    {
        "instance_id": "q_285",
        "question": "papers on TAIL NIPS",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";"
    },
    {
        "instance_id": "q_286",
        "question": "TAIL papers used in NIPS",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";"
    },
    {
        "instance_id": "q_287",
        "question": "How many co-authors has Mark Steedman had ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t1.authorid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname != \"Mark Steedman\" AND t2.paperid IN ( SELECT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Mark Steedman\" );"
    },
    {
        "instance_id": "q_288",
        "question": "keyphrases used by Christof Dallermassl in 2000",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;"
    },
    {
        "instance_id": "q_289",
        "question": "Keyphrases used by Christof Dallermassl in 2000",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;"
    },
    {
        "instance_id": "q_290",
        "question": "keyphrases Christof Dallermassl used in papers written last year",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;"
    },
    {
        "instance_id": "q_291",
        "question": "What are keyphrases by Christof Dallermassl in 2000 ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;"
    },
    {
        "instance_id": "q_292",
        "question": "best paper in TACL 2014 ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;"
    },
    {
        "instance_id": "q_293",
        "question": "What was the best paper at TACL 2014 ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;"
    },
    {
        "instance_id": "q_294",
        "question": "How many papers were written on Multiuser Receiver in the Decision Feedback this year ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Multiuser Receiver in the Decision Feedback\" AND t3.year  =  2016 GROUP BY t3.paperid HAVING COUNT ( DISTINCT t1.keyphrasename )  >  1;"
    },
    {
        "instance_id": "q_295",
        "question": "When does Michael Stonebraker publish the first VLDB paper ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.year FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Michael Stonebraker\" AND t4.venuename  =  \"VLDB\" ORDER BY t3.year;"
    },
    {
        "instance_id": "q_296",
        "question": "semantic parsing dataset",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";"
    },
    {
        "instance_id": "q_297",
        "question": "data sets for semantic parsing",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";"
    },
    {
        "instance_id": "q_298",
        "question": "list datasets for semantic parsing",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";"
    },
    {
        "instance_id": "q_299",
        "question": "datasets for semantic parsing",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";"
    },
    {
        "instance_id": "q_300",
        "question": "Datasets with semantic parsing information",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";"
    },
    {
        "instance_id": "q_301",
        "question": "datasets used by semantic parsing papers",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";"
    },
    {
        "instance_id": "q_302",
        "question": "datasets in semantic parsing papers",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";"
    },
    {
        "instance_id": "q_303",
        "question": "semantic parsing datasets",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";"
    },
    {
        "instance_id": "q_304",
        "question": "datasets in papers about semantic parsing",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";"
    },
    {
        "instance_id": "q_305",
        "question": "datasets used for semantic parsing",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";"
    },
    {
        "instance_id": "q_306",
        "question": "large-scale datasets used in semantic parsing",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";"
    },
    {
        "instance_id": "q_307",
        "question": "datasets with semantic parsing",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";"
    },
    {
        "instance_id": "q_308",
        "question": "datasets used for evaluating semantic parsing",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";"
    },
    {
        "instance_id": "q_309",
        "question": "what was the first deep learning paper ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.datasetid  ,  t4.year FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN paper AS t4 ON t4.paperid  =  t3.paperid JOIN keyphrase AS t5 ON t1.keyphraseid  =  t5.keyphraseid WHERE t5.keyphrasename  =  \"deep learning\" ORDER BY t4.year ASC;"
    },
    {
        "instance_id": "q_310",
        "question": "what year was the first deep learning paper published ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.datasetid  ,  t4.year FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN paper AS t4 ON t4.paperid  =  t3.paperid JOIN keyphrase AS t5 ON t1.keyphraseid  =  t5.keyphraseid WHERE t5.keyphrasename  =  \"deep learning\" ORDER BY t4.year ASC;"
    },
    {
        "instance_id": "q_311",
        "question": "the papers on semantic parsing by li dong at acl in 2016",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.paperid FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN paper AS t2 ON t2.paperid  =  t5.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN writes AS t4 ON t4.paperid  =  t2.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"li dong\" AND t3.keyphrasename  =  \"semantic parsing\" AND t2.year  =  2016 AND t6.venuename  =  \"acl\";"
    },
    {
        "instance_id": "q_312",
        "question": "who has the most papers in semantic parsing after 2005 ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"semantic parsing\" AND t4.year  >  2005 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;"
    },
    {
        "instance_id": "q_313",
        "question": "who has written the most papers on semantic parsing since 2005 ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"semantic parsing\" AND t4.year  >  2005 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;"
    },
    {
        "instance_id": "q_314",
        "question": "who published the most in semantic parsing after 2005 ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"semantic parsing\" AND t4.year  >  2005 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;"
    },
    {
        "instance_id": "q_315",
        "question": "How many citations does Dan Makumbi 's Genetic Identity paper have ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t5.citingpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t3 ON t2.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t2.paperid JOIN cite AS t5 ON t4.paperid  =  t5.citedpaperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Dan Makumbi\" AND t3.keyphrasename  =  \"Genetic Identity\";"
    },
    {
        "instance_id": "q_316",
        "question": "what topics does oren etzioni write about most ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t2.keyphraseid )  ,  t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"oren etzioni\" GROUP BY t2.keyphraseid ORDER BY COUNT ( t2.keyphraseid ) DESC;"
    },
    {
        "instance_id": "q_317",
        "question": "How many papers related to deep learning cited the dataset ImageNet ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.paperid ) FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paper AS t4 ON t4.paperid  =  t3.paperid JOIN paperkeyphrase AS t1 ON t4.paperid  =  t1.paperid JOIN keyphrase AS t5 ON t1.keyphraseid  =  t5.keyphraseid WHERE t2.datasetname  =  \"ImageNet\" AND t5.keyphrasename  =  \"deep learning\";"
    },
    {
        "instance_id": "q_318",
        "question": "most cited papers on parsing",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;"
    },
    {
        "instance_id": "q_319",
        "question": "parsing top papers",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;"
    },
    {
        "instance_id": "q_320",
        "question": "List top papers for parsing",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;"
    },
    {
        "instance_id": "q_321",
        "question": "parsing papers that have the most citations",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;"
    },
    {
        "instance_id": "q_322",
        "question": "What is the paper about parsing of the most citation ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;"
    },
    {
        "instance_id": "q_323",
        "question": "Paper on parsing with most citations",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;"
    },
    {
        "instance_id": "q_324",
        "question": "parsing papers with most citations",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;"
    },
    {
        "instance_id": "q_325",
        "question": "most cited parsing papers",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;"
    },
    {
        "instance_id": "q_326",
        "question": "what are the parsing papers that have the most citations ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;"
    },
    {
        "instance_id": "q_327",
        "question": "highly cited parsing papers",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;"
    },
    {
        "instance_id": "q_328",
        "question": "most cited papers for parsing",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;"
    },
    {
        "instance_id": "q_329",
        "question": "Most cited papers on parsing",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;"
    },
    {
        "instance_id": "q_330",
        "question": "What is the most cited paper by ohad shamir ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;"
    },
    {
        "instance_id": "q_331",
        "question": "What is the highest cited paper by ohad shamir ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;"
    },
    {
        "instance_id": "q_332",
        "question": "What is the most cited paper of ohad shamir ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;"
    },
    {
        "instance_id": "q_333",
        "question": "What is ohad shamir 's highest cited paper ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;"
    },
    {
        "instance_id": "q_334",
        "question": "What paper by ohad shamir has the most citation ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;"
    },
    {
        "instance_id": "q_335",
        "question": "what is the most cited paper of ohad shamir ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;"
    },
    {
        "instance_id": "q_336",
        "question": "what is ohad shamir 's most cited paper ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;"
    },
    {
        "instance_id": "q_337",
        "question": "who wrote the most papers for CVPR 2007",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;"
    },
    {
        "instance_id": "q_338",
        "question": "who published papers in CVPR 2007",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;"
    },
    {
        "instance_id": "q_339",
        "question": "who wrote the most CVPR papers in 2007",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;"
    },
    {
        "instance_id": "q_340",
        "question": "most published author at CVPR 2007",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;"
    },
    {
        "instance_id": "q_341",
        "question": "who published the most papers in CVPR 2007",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;"
    },
    {
        "instance_id": "q_342",
        "question": "Who published the most papers in 2007 at CVPR ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;"
    },
    {
        "instance_id": "q_343",
        "question": "What papers does Richard Ladner have in chi ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";"
    },
    {
        "instance_id": "q_344",
        "question": "what paper has Richard Ladner published in chi journal ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";"
    },
    {
        "instance_id": "q_345",
        "question": "what paper has Richard Ladner published in chi ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";"
    },
    {
        "instance_id": "q_346",
        "question": "papers by Richard Ladner published at chi",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";"
    },
    {
        "instance_id": "q_347",
        "question": "Does Richard Ladner publish in chi ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";"
    },
    {
        "instance_id": "q_348",
        "question": "What has Richard Ladner published at chi ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";"
    },
    {
        "instance_id": "q_349",
        "question": "What papers has Richard Ladner written at chi ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";"
    },
    {
        "instance_id": "q_350",
        "question": "Which paper did Richard Ladner present at chi ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";"
    },
    {
        "instance_id": "q_351",
        "question": "What is the paper with the most citation about Artificial Intelligence ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citingpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"Artificial Intelligence\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citingpaperid ) DESC;"
    },
    {
        "instance_id": "q_352",
        "question": "Fetch me the most cited publications for Artificial Intelligence",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citingpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"Artificial Intelligence\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citingpaperid ) DESC;"
    },
    {
        "instance_id": "q_353",
        "question": "topics at ACL 2014",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2014 AND t4.venuename  =  \"ACL\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;"
    },
    {
        "instance_id": "q_354",
        "question": "most common topics at NIPS 2015",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;"
    },
    {
        "instance_id": "q_355",
        "question": "most popular topics at NIPS 2015",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;"
    },
    {
        "instance_id": "q_356",
        "question": "hot topics at NIPS 2015",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;"
    },
    {
        "instance_id": "q_357",
        "question": "popular topics at NIPS 2015",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;"
    },
    {
        "instance_id": "q_358",
        "question": "which topics were most popular at NIPS 2015",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;"
    },
    {
        "instance_id": "q_359",
        "question": "topics popular at NIPS 2015",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;"
    },
    {
        "instance_id": "q_360",
        "question": "How many papers related to deep reinforcement learning in nips ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"deep reinforcement learning\" AND t4.venuename  =  \"nips\";"
    },
    {
        "instance_id": "q_361",
        "question": "how is the most cited author in CVPR ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid JOIN cite AS t4 ON t1.paperid  =  t4.citedpaperid WHERE t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;"
    },
    {
        "instance_id": "q_362",
        "question": "who is the most cited author at CVPR ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid JOIN cite AS t4 ON t1.paperid  =  t4.citedpaperid WHERE t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;"
    },
    {
        "instance_id": "q_363",
        "question": "what are some syntactic parsing papers that chris dyer did not write ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != \"chris dyer\" AND t5.keyphrasename  =  \"syntactic parsing\";"
    },
    {
        "instance_id": "q_364",
        "question": "are there any syntactic parsing papers not written by chris dyer ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != \"chris dyer\" AND t5.keyphrasename  =  \"syntactic parsing\";"
    },
    {
        "instance_id": "q_365",
        "question": "what are syntactic parsing papers not written by chris dyer",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != \"chris dyer\" AND t5.keyphrasename  =  \"syntactic parsing\";"
    },
    {
        "instance_id": "q_366",
        "question": "syntactic parsing papers not written by chris dyer",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != \"chris dyer\" AND t5.keyphrasename  =  \"syntactic parsing\";"
    },
    {
        "instance_id": "q_367",
        "question": "Who cites Daniel A Reed the most",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.citingpaperid )  ,  t3.authorid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t4 ON t2.paperid  =  t4.citedpaperid JOIN writes AS t3 ON t3.paperid  =  t4.citingpaperid WHERE t1.authorname  =  \"Daniel A Reed\" GROUP BY t3.authorid ORDER BY COUNT ( t4.citingpaperid ) DESC;"
    },
    {
        "instance_id": "q_368",
        "question": "Who cites Daniel A Reed most ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.citingpaperid )  ,  t3.authorid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t4 ON t2.paperid  =  t4.citedpaperid JOIN writes AS t3 ON t3.paperid  =  t4.citingpaperid WHERE t1.authorname  =  \"Daniel A Reed\" GROUP BY t3.authorid ORDER BY COUNT ( t4.citingpaperid ) DESC;"
    },
    {
        "instance_id": "q_369",
        "question": "Who writes a lot of papers in Machine Learning ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename  =  \"Machine Learning\" GROUP BY t1.authorname ORDER BY COUNT ( DISTINCT t3.paperid ) DESC;"
    },
    {
        "instance_id": "q_370",
        "question": "Who wrote sensor fusion ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";"
    },
    {
        "instance_id": "q_371",
        "question": "Authors of papers on sensor fusion",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";"
    },
    {
        "instance_id": "q_372",
        "question": "people working on sensor fusion",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";"
    },
    {
        "instance_id": "q_373",
        "question": "Who publishes in sensor fusion ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";"
    },
    {
        "instance_id": "q_374",
        "question": "who publishes papers about sensor fusion",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";"
    },
    {
        "instance_id": "q_375",
        "question": "how many papers by dan klein are cited by michael i. jordan",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t5.citingpaperid ) FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN cite AS t5 ON t3.paperid  =  t5.citedpaperid JOIN writes AS t4 ON t4.paperid  =  t5.citingpaperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"michael i. jordan\" AND t1.authorname  =  \"dan klein\";"
    },
    {
        "instance_id": "q_376",
        "question": "how many of dan klein 's papers cite michael i. jordan",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t5.citingpaperid ) FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN cite AS t5 ON t3.paperid  =  t5.citedpaperid JOIN writes AS t4 ON t4.paperid  =  t5.citingpaperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"michael i. jordan\" AND t1.authorname  =  \"dan klein\";"
    },
    {
        "instance_id": "q_377",
        "question": "who else was on the paper with Ameet Soni and Ras Bodik ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t5.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN writes AS t5 ON t5.paperid  =  t4.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Ameet Soni\" AND t1.authorname  =  \"Ras Bodik\";"
    },
    {
        "instance_id": "q_378",
        "question": "What authors wrote papers about Bacterial Wilt in 2016 ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid JOIN author AS t5 ON t3.authorid  =  t5.authorid WHERE t2.keyphrasename  =  \"Bacterial Wilt\" AND t4.year  =  2016;"
    },
    {
        "instance_id": "q_379",
        "question": "Who wrote on the topic of Bacterial Wilt in 2016 ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid JOIN author AS t5 ON t3.authorid  =  t5.authorid WHERE t2.keyphrasename  =  \"Bacterial Wilt\" AND t4.year  =  2016;"
    },
    {
        "instance_id": "q_380",
        "question": "what keyphrases get most citations ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.citingpaperid )  ,  t1.keyphrasename FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN cite AS t3 ON t2.paperid  =  t3.citedpaperid GROUP BY t1.keyphrasename ORDER BY COUNT ( t3.citingpaperid ) DESC;"
    },
    {
        "instance_id": "q_381",
        "question": "which ACL 2014 papers about Parsing used Jeopardy! Questions ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";"
    },
    {
        "instance_id": "q_382",
        "question": "Parsing papers using Jeopardy! Questions published at ACL 2014",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";"
    },
    {
        "instance_id": "q_383",
        "question": "Parsing papers from ACL 2014 using Jeopardy! Questions",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";"
    },
    {
        "instance_id": "q_384",
        "question": "Parsing papers from ACL 2014 that used Jeopardy! Questions",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";"
    },
    {
        "instance_id": "q_385",
        "question": "papers about Parsing that used Jeopardy! Questions and were published at ACL 2014",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";"
    },
    {
        "instance_id": "q_386",
        "question": "which venue publishes the most papers about deep learning",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t4.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"deep learning\" GROUP BY t4.venueid ORDER BY COUNT ( t3.paperid ) DESC;"
    },
    {
        "instance_id": "q_387",
        "question": "papers published in eccv 2016 by ali farhadi",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ali farhadi\" AND t3.year  =  2016 AND t4.venuename  =  \"eccv\";"
    },
    {
        "instance_id": "q_388",
        "question": "Does ali farhadi have a paper in eccv in 2016 ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ali farhadi\" AND t3.year  =  2016 AND t4.venuename  =  \"eccv\";"
    },
    {
        "instance_id": "q_389",
        "question": "papers of ali farhadi in eccv 2016",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ali farhadi\" AND t3.year  =  2016 AND t4.venuename  =  \"eccv\";"
    },
    {
        "instance_id": "q_390",
        "question": "What are some papers dealing with Semantic Data in YAGO ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t1 ON t3.datasetid  =  t1.datasetid JOIN paperkeyphrase AS t2 ON t2.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid WHERE t1.datasetname  =  \"YAGO\" AND t4.keyphrasename  =  \"Semantic Data\";"
    },
    {
        "instance_id": "q_391",
        "question": "Who has published more papers in chi ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"chi\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t2.paperid ) DESC;"
    },
    {
        "instance_id": "q_392",
        "question": "Who has written the most papers at chi ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"chi\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t2.paperid ) DESC;"
    },
    {
        "instance_id": "q_393",
        "question": "how is the most prolific author in chi ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"chi\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t2.paperid ) DESC;"
    },
    {
        "instance_id": "q_394",
        "question": "who published the most at chi",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"chi\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t2.paperid ) DESC;"
    },
    {
        "instance_id": "q_395",
        "question": "In what year did Ye Cao publish the most papers",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname LIKE \"Ye Cao\" GROUP BY t3.year ORDER BY COUNT ( DISTINCT t3.paperid ) DESC;"
    },
    {
        "instance_id": "q_396",
        "question": "What year did Ye Cao publish the most papers",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname LIKE \"Ye Cao\" GROUP BY t3.year ORDER BY COUNT ( DISTINCT t3.paperid ) DESC;"
    },
    {
        "instance_id": "q_397",
        "question": "What are the best NLP conferences ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid )  ,  t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"NLP\" GROUP BY t3.venueid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;"
    },
    {
        "instance_id": "q_398",
        "question": "what keyphrase does Brian DeRenzi write about that gets most citations ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.keyphrasename  ,  SUM ( t3.numcitedby ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Brian DeRenzi\" GROUP BY t1.keyphrasename ORDER BY SUM ( t3.numcitedby ) DESC;"
    },
    {
        "instance_id": "q_399",
        "question": "main topics of work by Brian DeRenzi",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.keyphrasename  ,  SUM ( t3.numcitedby ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Brian DeRenzi\" GROUP BY t1.keyphrasename ORDER BY SUM ( t3.numcitedby ) DESC;"
    },
    {
        "instance_id": "q_400",
        "question": "When was Michael Stonebraker GIS Database published ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Michael Stonebraker\" AND t5.keyphrasename  =  \"GIS Database\";"
    },
    {
        "instance_id": "q_401",
        "question": "When did Michael Stonebraker publish his GIS Database paper ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Michael Stonebraker\" AND t5.keyphrasename  =  \"GIS Database\";"
    },
    {
        "instance_id": "q_402",
        "question": "When does Michael Stonebraker publish the GIS Database paper ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Michael Stonebraker\" AND t5.keyphrasename  =  \"GIS Database\";"
    },
    {
        "instance_id": "q_403",
        "question": "What is the most popular paper this year in CVPR ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2016 AND t2.venuename  =  \"CVPR\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citingpaperid ) DESC;"
    },
    {
        "instance_id": "q_404",
        "question": "How many citations does luke zettlemoyer have per year",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.citedpaperid )  ,  t3.year FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"luke zettlemoyer\" GROUP BY t3.year;"
    },
    {
        "instance_id": "q_405",
        "question": "authors working on ImageNet",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t1 ON t3.datasetid  =  t1.datasetid JOIN paper AS t4 ON t4.paperid  =  t3.paperid JOIN writes AS t2 ON t2.paperid  =  t4.paperid WHERE t1.datasetname  =  \"ImageNet\" GROUP BY t2.paperid;"
    },
    {
        "instance_id": "q_406",
        "question": "Eric C. Kerrigan 's Liquid Automatica paper",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.paperid FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t5.paperid JOIN paper AS t2 ON t4.paperid  =  t2.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid JOIN venue AS t6 ON t6.venueid  =  t2.venueid WHERE t1.authorname  =  \"Eric C. Kerrigan\" AND t3.keyphrasename  =  \"Liquid\" AND t6.venuename  =  \"Automatica\";"
    },
    {
        "instance_id": "q_407",
        "question": "keyphrases used by dan klein in his emnlp papers",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid JOIN writes AS t5 ON t5.paperid  =  t3.paperid JOIN author AS t1 ON t5.authorid  =  t1.authorid WHERE t1.authorname  =  \"dan klein\" AND t4.venuename  =  \"emnlp\";"
    },
    {
        "instance_id": "q_408",
        "question": "Who are the prominent researchers in Neutralizing Antibody in 2012 ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"Neutralizing Antibody\" AND t4.year  =  2012 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;"
    },
    {
        "instance_id": "q_409",
        "question": "the papers at eccv in 2014 using ImageNet dataset",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t3.year  =  2014 AND t4.venuename  =  \"eccv\";"
    },
    {
        "instance_id": "q_410",
        "question": "which papers in eccv 2014 use ImageNet ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t3.year  =  2014 AND t4.venuename  =  \"eccv\";"
    },
    {
        "instance_id": "q_411",
        "question": "eccv 2014 papers using ImageNet",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t3.year  =  2014 AND t4.venuename  =  \"eccv\";"
    },
    {
        "instance_id": "q_412",
        "question": "Euclidean Distance papers citing NIPS papers",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t5.citingpaperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN cite AS t5 ON t2.paperid  =  t5.citingpaperid JOIN paper AS t3 ON t3.paperid  =  t5.citedpaperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Euclidean Distance\" AND t4.venuename  =  \"NIPS\";"
    },
    {
        "instance_id": "q_413",
        "question": "top authors working on ImageNet ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t4 ON t4.paperid  =  t2.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t1.datasetname  =  \"ImageNet\" GROUP BY t3.paperid ORDER BY COUNT ( t4.paperid ) DESC;"
    },
    {
        "instance_id": "q_414",
        "question": "how many ACL 2012 papers have more than 7 citations ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT ( t1.paperid )  ,  COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2012 AND t2.venuename  =  \"ACL\" GROUP BY t1.paperid HAVING COUNT ( t3.citingpaperid )  >  7;"
    },
    {
        "instance_id": "q_415",
        "question": "What was the topic of best paper in 2012 EMNLP-CoNLL ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid )  ,  t1.keyphraseid  ,  t2.paperid FROM paper AS t2 JOIN cite AS t4 ON t2.paperid  =  t4.citedpaperid JOIN paperkeyphrase AS t1 ON t2.paperid  =  t1.paperid JOIN venue AS t3 ON t3.venueid  =  t2.venueid WHERE t2.year  =  2012 AND t3.venuename  =  \"EMNLP-CoNLL\" GROUP BY t2.paperid  ,  t1.keyphraseid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;"
    },
    {
        "instance_id": "q_416",
        "question": "How many papers has Noah Smith co-authored since 2009 ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname != \"Noah Smith\" AND t3.year  >  2009 AND t2.paperid IN ( SELECT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname LIKE \"Noah Smith\" );"
    },
    {
        "instance_id": "q_417",
        "question": "Number of ACL papers with more than 2 citations",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  >  2;"
    },
    {
        "instance_id": "q_418",
        "question": "What is the name of Eric C. Kerrigan 's Liquid Automatica paper ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.title FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t5.paperid JOIN paper AS t2 ON t4.paperid  =  t2.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid JOIN venue AS t6 ON t6.venueid  =  t2.venueid WHERE t1.authorname LIKE \"Eric C. Kerrigan\" AND t3.keyphrasename  =  \"Liquid\" AND t6.venuename  =  \"Automatica\";"
    },
    {
        "instance_id": "q_419",
        "question": "How many papers used ImageNet datasets in cvpr ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t4.venuename  =  \"cvpr\";"
    },
    {
        "instance_id": "q_420",
        "question": "I want the co-authors of papers on Machine Translation Output with Philipp Koehn",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid FROM paperkeyphrase AS t6 JOIN keyphrase AS t3 ON t6.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t6.paperid JOIN writes AS t5 ON t5.paperid  =  t4.paperid JOIN author AS t1 ON t5.authorid  =  t1.authorid JOIN author AS t2 ON t4.authorid  =  t2.authorid WHERE t2.authorname  =  \"Philipp Koehn\" AND t3.keyphrasename  =  \"Machine Translation Output\";"
    },
    {
        "instance_id": "q_421",
        "question": "How many papers does Samuel Madden publish outside of PVLDB area ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Samuel Madden\" AND t4.venuename != \"PVLDB\";"
    },
    {
        "instance_id": "q_422",
        "question": "which journal did Donald E Knuth publish his last paper ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.journalid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Donald E Knuth\" GROUP BY t3.journalid  ,  t3.year ORDER BY t3.year DESC;"
    },
    {
        "instance_id": "q_423",
        "question": "papers in semantic parsing for each year",
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"semantic parsing\" GROUP BY t3.year ORDER BY t3.year DESC;"
    },
    {
        "instance_id": "q_424",
        "question": "What is the most cited paper at sigcomm ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigcomm\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citingpaperid ) DESC;"
    },
    {
        "instance_id": "q_425",
        "question": "What is the name of Ranjit Jhala 's Liquid Haskell paper ?",
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.title FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t2.paperid JOIN paper AS t3 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname LIKE \"Ranjit Jhala\" AND t5.keyphrasename  =  \"Liquid Haskell\";"
    },
    {
        "instance_id": "q_426",
        "question": "List all the reviews by Michelle for Italian restaurant",
        "db_id": "yelp",
        "query": "SELECT t4.text FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN review AS t4 ON t4.business_id  =  t1.business_id JOIN USER AS t5 ON t5.user_id  =  t4.user_id WHERE t2.category_name  =  \"Italian\" AND t3.category_name  =  \"category_category_name1\" AND t5.name  =  \"Michelle\";"
    },
    {
        "instance_id": "q_427",
        "question": "find the number of reviews written for \" Cafe Zinho \" restaurant in Texas",
        "db_id": "yelp",
        "query": "SELECT COUNT ( DISTINCT t3.text ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"restaurant\";"
    },
    {
        "instance_id": "q_428",
        "question": "List all the neighbourhoods with Italian restaurant in Madison",
        "db_id": "yelp",
        "query": "SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id  =  t2.business_id JOIN category AS t4 ON t4.business_id  =  t2.business_id JOIN neighbourhood AS t1 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" AND t3.category_name  =  \"Italian\" AND t4.category_name  =  \"restaurant\";"
    },
    {
        "instance_id": "q_429",
        "question": "List all the neighbourhoods with Italian restaurant rated less than 2.5 in Madison",
        "db_id": "yelp",
        "query": "SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id  =  t2.business_id JOIN category AS t4 ON t4.business_id  =  t2.business_id JOIN neighbourhood AS t1 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" AND t2.rating  <  2.5 AND t3.category_name  =  \"Italian\" AND t4.category_name  =  \"restaurant\";"
    },
    {
        "instance_id": "q_430",
        "question": "Find all users who reviewed restaurant \" Mesa Grill \"",
        "db_id": "yelp",
        "query": "SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.name  =  \"Mesa Grill\" AND t2.category_name  =  \"restaurant\";"
    },
    {
        "instance_id": "q_431",
        "question": "Find all restaurant reviewed by Patrick in \" Dallas \"",
        "db_id": "yelp",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t2.category_name  =  \"restaurant\" AND t4.name  =  \"Patrick\";"
    },
    {
        "instance_id": "q_432",
        "question": "Which restaurant in Dallas were reviewed by user Patrick ?",
        "db_id": "yelp",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t2.category_name  =  \"restaurant\" AND t4.name  =  \"Patrick\";"
    },
    {
        "instance_id": "q_433",
        "question": "Find all Bars reviewed by Patrick",
        "db_id": "yelp",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  \"Bars\" AND t4.name  =  \"Patrick\";"
    },
    {
        "instance_id": "q_434",
        "question": "Find all Bars reviewed by Patrick with at least 3 stars",
        "db_id": "yelp",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.rating  >=  3 AND t2.category_name  =  \"Bars\" AND t4.name  =  \"Patrick\";"
    },
    {
        "instance_id": "q_435",
        "question": "Find all restaurant Seafood in Los Angeles",
        "db_id": "yelp",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Seafood\" AND t3.category_name  =  \"restaurant\";"
    },
    {
        "instance_id": "q_436",
        "question": "List all the Seafood restaurant in \" Los Angeles \"",
        "db_id": "yelp",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Seafood\" AND t3.category_name  =  \"restaurant\";"
    },
    {
        "instance_id": "q_437",
        "question": "Find all restaurant that serve Seafood in \" Los Angeles \"",
        "db_id": "yelp",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Seafood\" AND t3.category_name  =  \"restaurant\";"
    },
    {
        "instance_id": "q_438",
        "question": "What neighbourhood is restaurant \" Flat Top Grill \" in ?",
        "db_id": "yelp",
        "query": "SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id  =  t2.business_id JOIN neighbourhood AS t1 ON t1.business_id  =  t2.business_id WHERE t2.name  =  \"Flat Top Grill\" AND t3.category_name  =  \"category_category_name0\";"
    },
    {
        "instance_id": "q_439",
        "question": "List all users who reviewed businesses that are restaurant in 2010 .",
        "db_id": "yelp",
        "query": "SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  \"restaurant\" AND t3.year  =  2010;"
    },
    {
        "instance_id": "q_440",
        "question": "find the total checkins in Moroccan restaurant in \" Los Angeles \"",
        "db_id": "yelp",
        "query": "SELECT SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN checkin AS t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"restaurant\" AND t3.category_name  =  \"Moroccan\";"
    },
    {
        "instance_id": "q_441",
        "question": "find the total checkins in Moroccan restaurant in \" Los Angeles \" on Friday",
        "db_id": "yelp",
        "query": "SELECT SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN checkin AS t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Moroccan\" AND t3.category_name  =  \"restaurant\" AND t4.day  =  \"Friday\";"
    },
    {
        "instance_id": "q_442",
        "question": "find the total checkins in Moroccan restaurant in \" Los Angeles \" per day",
        "db_id": "yelp",
        "query": "SELECT t4.day  ,  SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN checkin AS t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Moroccan\" AND t3.category_name  =  \"restaurant\" GROUP BY t4.day;"
    },
    {
        "instance_id": "q_443",
        "question": "find the total checkins in Italian Delis in each state on Sunday",
        "db_id": "yelp",
        "query": "SELECT t1.state  ,  SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN checkin AS t4 ON t4.business_id  =  t1.business_id WHERE t2.category_name  =  \"Italian\" AND t3.category_name  =  \"Delis\" AND t4.day  =  \"Sunday\" GROUP BY t1.state;"
    },
    {
        "instance_id": "q_444",
        "question": "How many people reviewed the restaurant \" Texas de Brazil \" in Dallas Texas ?",
        "db_id": "yelp",
        "query": "SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t1.name  =  \"Texas de Brazil\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"restaurant\";"
    },
    {
        "instance_id": "q_445",
        "question": "How many restaurant are there in the Hazelwood district of Dallas ?",
        "db_id": "yelp",
        "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t3 JOIN business AS t1 ON t3.business_id  =  t1.business_id JOIN neighbourhood AS t2 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t3.category_name  =  \"restaurant\" AND t2.neighbourhood_name  =  \"Hazelwood\";"
    },
    {
        "instance_id": "q_446",
        "question": "Find the average number of checkins in restaurant \" Barrio Cafe \" per day",
        "db_id": "yelp",
        "query": "SELECT AVG ( t3.count )  ,  t3.day FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN checkin AS t3 ON t3.business_id  =  t1.business_id WHERE t1.name  =  \"Barrio Cafe\" AND t2.category_name  =  \"restaurant\" GROUP BY t3.day;"
    },
    {
        "instance_id": "q_447",
        "question": "How many users have reviewed Irish Pub in Dallas ?",
        "db_id": "yelp",
        "query": "SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t2.category_name  =  \"Irish Pub\";"
    },
    {
        "instance_id": "q_448",
        "question": "How many people reviewed restaurant \" Vintner Grill \" in 2010 ?",
        "db_id": "yelp",
        "query": "SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.name  =  \"Vintner Grill\" AND t2.category_name  =  \"category_category_name0\" AND t3.year  =  2010;"
    },
    {
        "instance_id": "q_449",
        "question": "Find all Mexican restaurant in Dallas with at least 3.5 stars",
        "db_id": "yelp",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  3.5 AND t2.category_name  =  \"Mexican\" AND t3.category_name  =  \"restaurant\";"
    },
    {
        "instance_id": "q_450",
        "question": "Find all Mexican restaurant in Dallas with a rating above 3.5",
        "db_id": "yelp",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  3.5 AND t2.category_name  =  \"Mexican\" AND t3.category_name  =  \"restaurant\";"
    },
    {
        "instance_id": "q_451",
        "question": "Find all restaurant with Valet Service in Dallas Texas",
        "db_id": "yelp",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"Valet Service\" AND t3.category_name  =  \"restaurant\";"
    },
    {
        "instance_id": "q_452",
        "question": "Find all Italian restaurant in the Meadowood neighbourhood of Madison",
        "db_id": "yelp",
        "query": "SELECT t1.name FROM category AS t3 JOIN business AS t1 ON t3.business_id  =  t1.business_id JOIN category AS t4 ON t4.business_id  =  t1.business_id JOIN neighbourhood AS t2 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t3.category_name  =  \"Italian\" AND t4.category_name  =  \"restaurant\" AND t2.neighbourhood_name  =  \"Meadowood\";"
    },
    {
        "instance_id": "q_453",
        "question": "How many Egyptian restaurant are there in Edinburgh ?",
        "db_id": "yelp",
        "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Edinburgh\" AND t2.category_name  =  \"restaurant\" AND t3.category_name  =  \"Egyptian\";"
    },
    {
        "instance_id": "q_454",
        "question": "return me the keywords in the papers of \" University of Michigan \" .",
        "db_id": "academic",
        "query": "SELECT t1.keyword FROM organization AS t6 JOIN author AS t2 ON t6.oid  =  t2.oid JOIN writes AS t4 ON t4.aid  =  t2.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN publication_keyword AS t3 ON t5.pid  =  t3.pid JOIN keyword AS t1 ON t3.kid  =  t1.kid WHERE t6.name  =  \"University of Michigan\";"
    },
    {
        "instance_id": "q_455",
        "question": "return me the papers of \" H. V. Jagadish \" containing keyword \" User Study \" .",
        "db_id": "academic",
        "query": "SELECT t5.title FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t5 ON t5.pid  =  t3.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.keyword  =  \"User Study\";"
    },
    {
        "instance_id": "q_456",
        "question": "return me the authors who have papers containing keyword \" Relational Database \" .",
        "db_id": "academic",
        "query": "SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  \"Relational Database\";"
    },
    {
        "instance_id": "q_457",
        "question": "return me all the papers in VLDB conference in \" University of Michigan \" .",
        "db_id": "academic",
        "query": "SELECT t5.title FROM organization AS t3 JOIN author AS t1 ON t3.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN conference AS t2 ON t5.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" AND t3.name  =  \"University of Michigan\";"
    },
    {
        "instance_id": "q_458",
        "question": "return me all the papers in PVLDB in \" University of Michigan \" .",
        "db_id": "academic",
        "query": "SELECT t5.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t2.name  =  \"University of Michigan\";"
    },
    {
        "instance_id": "q_459",
        "question": "return me all the papers in PVLDB after 2000 in \" University of Michigan \" .",
        "db_id": "academic",
        "query": "SELECT t5.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t2.name  =  \"University of Michigan\" AND t5.year  >  2000;"
    },
    {
        "instance_id": "q_460",
        "question": "return me the number of papers by \" H. V. Jagadish \" on PVLDB after 2000 .",
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"PVLDB\" AND t4.year  >  2000;"
    },
    {
        "instance_id": "q_461",
        "question": "return me the number of papers by \" H. V. Jagadish \" on VLDB conference after 2000 .",
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"VLDB\" AND t4.year  >  2000;"
    },
    {
        "instance_id": "q_462",
        "question": "return me the number of the keywords related to \" H. V. Jagadish \" .",
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\";"
    },
    {
        "instance_id": "q_463",
        "question": "return me the number of keywords in the papers of \" University of Michigan \" .",
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t1.keyword ) FROM organization AS t6 JOIN author AS t2 ON t6.oid  =  t2.oid JOIN writes AS t4 ON t4.aid  =  t2.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN publication_keyword AS t3 ON t5.pid  =  t3.pid JOIN keyword AS t1 ON t3.kid  =  t1.kid WHERE t6.name  =  \"University of Michigan\";"
    },
    {
        "instance_id": "q_464",
        "question": "return me the number of the papers of \" H. V. Jagadish \" containing keyword \" User Study \" .",
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t5.title ) FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t5 ON t5.pid  =  t3.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.keyword  =  \"User Study\";"
    },
    {
        "instance_id": "q_465",
        "question": "return me the number of papers in PVLDB containing keyword \" Keyword search \" .",
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t4.title ) FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t4 ON t4.pid  =  t2.pid JOIN journal AS t3 ON t4.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t1.keyword  =  \"Keyword search\";"
    },
    {
        "instance_id": "q_466",
        "question": "return me the number of papers in VLDB conference containing keyword \" Information Retrieval \" .",
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t4.title ) FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t4 ON t4.pid  =  t3.pid JOIN conference AS t2 ON t4.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" AND t1.keyword  =  \"Information Retrieval\";"
    },
    {
        "instance_id": "q_467",
        "question": "return me the number of authors who have papers containing keyword \" Relational Database \" .",
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t2.name ) FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  \"Relational Database\";"
    },
    {
        "instance_id": "q_468",
        "question": "return me the number of papers in \" University of Michigan \" in Databases area .",
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t4.title ) FROM domain_author AS t6 JOIN author AS t1 ON t6.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t6.did JOIN domain_publication AS t2 ON t3.did  =  t2.did JOIN organization AS t5 ON t5.oid  =  t1.oid JOIN publication AS t4 ON t4.pid  =  t2.pid WHERE t3.name  =  \"Databases\" AND t5.name  =  \"University of Michigan\";"
    },
    {
        "instance_id": "q_469",
        "question": "return me the number of papers in VLDB conference in \" University of Michigan \" .",
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t3 JOIN author AS t1 ON t3.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN conference AS t2 ON t5.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" AND t3.name  =  \"University of Michigan\";"
    },
    {
        "instance_id": "q_470",
        "question": "return me the number of papers in PVLDB in \" University of Michigan \" .",
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t2.name  =  \"University of Michigan\";"
    },
    {
        "instance_id": "q_471",
        "question": "return me the number of papers in PVLDB after 2000 in \" University of Michigan \" .",
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t2.name  =  \"University of Michigan\" AND t5.year  >  2000;"
    },
    {
        "instance_id": "q_472",
        "question": "return me the number of researchers in Databases area in \" University of Michigan \" .",
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t1.name ) FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\" AND t2.name  =  \"University of Michigan\";"
    },
    {
        "instance_id": "q_473",
        "question": "return me the authors who have cooperated both with \" H. V. Jagadish \" and \" Divesh Srivastava \" .",
        "db_id": "academic",
        "query": "SELECT t2.name FROM writes AS t4 JOIN author AS t2 ON t4.aid  =  t2.aid JOIN publication AS t7 ON t4.pid  =  t7.pid JOIN writes AS t5 ON t5.pid  =  t7.pid JOIN writes AS t6 ON t6.pid  =  t7.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t3 ON t6.aid  =  t3.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t3.name  =  \"Divesh Srivastava\";"
    },
    {
        "instance_id": "q_474",
        "question": "return me the papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" .",
        "db_id": "academic",
        "query": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\";"
    },
    {
        "instance_id": "q_475",
        "question": "return me the papers written by \" H. V. Jagadish \" and \" Yunyao Li \" after 2005 .",
        "db_id": "academic",
        "query": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Yunyao Li\" AND t5.year  >  2005;"
    },
    {
        "instance_id": "q_476",
        "question": "return me the papers written by \" H. V. Jagadish \" and \" Yunyao Li \" on PVLDB .",
        "db_id": "academic",
        "query": "SELECT t6.title FROM publication AS t6 JOIN journal AS t4 ON t6.jid  =  t4.jid JOIN writes AS t3 ON t3.pid  =  t6.pid JOIN writes AS t5 ON t5.pid  =  t6.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t2 ON t3.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Yunyao Li\" AND t4.name  =  \"PVLDB\";"
    },
    {
        "instance_id": "q_477",
        "question": "return me the papers written by \" H. V. Jagadish \" and \" Yunyao Li \" on PVLDB after 2005 .",
        "db_id": "academic",
        "query": "SELECT t6.title FROM publication AS t6 JOIN journal AS t4 ON t6.jid  =  t4.jid JOIN writes AS t3 ON t3.pid  =  t6.pid JOIN writes AS t5 ON t5.pid  =  t6.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t2 ON t3.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Yunyao Li\" AND t4.name  =  \"PVLDB\" AND t6.year  >  2005;"
    },
    {
        "instance_id": "q_478",
        "question": "return me the papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" before 2000 .",
        "db_id": "academic",
        "query": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\" AND t5.year  <  2000;"
    },
    {
        "instance_id": "q_479",
        "question": "return me the authors who have cited the papers by \" H. V. Jagadish \" .",
        "db_id": "academic",
        "query": "SELECT t2.name FROM publication AS t7 JOIN cite AS t5 ON t7.pid  =  t5.citing JOIN publication AS t6 ON t6.pid  =  t5.cited JOIN writes AS t3 ON t3.pid  =  t7.pid JOIN writes AS t4 ON t4.pid  =  t6.pid JOIN author AS t2 ON t3.aid  =  t2.aid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";"
    },
    {
        "instance_id": "q_480",
        "question": "return me the number of papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" .",
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t5.title ) FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\";"
    },
    {
        "instance_id": "q_481",
        "question": "return me the number of papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" before 2000 .",
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t5.title ) FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\" AND t5.year  <  2000;"
    },
    {
        "instance_id": "q_482",
        "question": "return me the number of papers written by \" H. V. Jagadish \" , \" Yunyao Li \" , and \" Cong Yu \" .",
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t7.title ) FROM writes AS t4 JOIN author AS t2 ON t4.aid  =  t2.aid JOIN publication AS t7 ON t4.pid  =  t7.pid JOIN writes AS t5 ON t5.pid  =  t7.pid JOIN writes AS t6 ON t6.pid  =  t7.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t3 ON t6.aid  =  t3.aid WHERE t2.name  =  \"Cong Yu\" AND t1.name  =  \"H. V. Jagadish\" AND t3.name  =  \"Yunyao Li\";"
    },
    {
        "instance_id": "q_483",
        "question": "return me the number of authors who have cited the papers by \" H. V. Jagadish \" .",
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t2.name ) FROM publication AS t7 JOIN cite AS t5 ON t7.pid  =  t5.citing JOIN publication AS t6 ON t6.pid  =  t5.cited JOIN writes AS t3 ON t3.pid  =  t7.pid JOIN writes AS t4 ON t4.pid  =  t6.pid JOIN author AS t2 ON t3.aid  =  t2.aid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";"
    },
    {
        "instance_id": "q_484",
        "question": "return me the papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" with more than 200 citations .",
        "db_id": "academic",
        "query": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\" AND t5.citation_num  >  200;"
    },
    {
        "instance_id": "q_485",
        "question": "return me the author who has the most number of papers containing keyword \" Relational Database \" .",
        "db_id": "academic",
        "query": "SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;"
    },
    {
        "instance_id": "q_486",
        "question": "return me the conference that has the most number of papers containing keyword \" Relational Database \" .",
        "db_id": "academic",
        "query": "SELECT t2.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;"
    },
    {
        "instance_id": "q_487",
        "question": "return me the conference, which has the most number of papers containing keyword \" Relational Database \" .",
        "db_id": "academic",
        "query": "SELECT t2.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;"
    },
    {
        "instance_id": "q_488",
        "question": "return me the journal that has the most number of papers containing keyword \" Relational Database \" .",
        "db_id": "academic",
        "query": "SELECT t3.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t3.name ORDER BY COUNT ( DISTINCT t2.title ) DESC LIMIT 1;"
    },
    {
        "instance_id": "q_489",
        "question": "return me the journal, which has the most number of papers containing keyword \" Relational Database \" .",
        "db_id": "academic",
        "query": "SELECT t3.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t3.name ORDER BY COUNT ( DISTINCT t2.title ) DESC LIMIT 1;"
    },
    {
        "instance_id": "q_490",
        "question": "return me the keyword, which have been contained by the most number of papers in VLDB conference .",
        "db_id": "academic",
        "query": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" GROUP BY t1.keyword ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;"
    },
    {
        "instance_id": "q_491",
        "question": "return me the keyword, which have been contained by the most number of papers in PVLDB .",
        "db_id": "academic",
        "query": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" GROUP BY t1.keyword ORDER BY COUNT ( DISTINCT t2.title ) DESC LIMIT 1;"
    },
    {
        "instance_id": "q_492",
        "question": "return me the keyword, which have been contained by the most number of papers by \" H. V. Jagadish \" .",
        "db_id": "academic",
        "query": "SELECT t1.keyword FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" GROUP BY t1.keyword ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;"
    },
    {
        "instance_id": "q_493",
        "question": "return me the author in the \" University of Michigan \" whose papers have the most total citations .",
        "db_id": "academic",
        "query": "SELECT t1.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\" GROUP BY t1.name ORDER BY SUM ( t4.citation_num ) DESC LIMIT 1;"
    },
    {
        "instance_id": "q_494",
        "question": "return me the author in the \" University of Michigan \" whose papers in Databases area have the most total citations .",
        "db_id": "academic",
        "query": "SELECT t1.name FROM DOMAIN AS t4 JOIN domain_publication AS t2 ON t4.did  =  t2.did JOIN publication AS t5 ON t5.pid  =  t2.pid JOIN writes AS t3 ON t3.pid  =  t5.pid JOIN author AS t1 ON t3.aid  =  t1.aid JOIN organization AS t6 ON t6.oid  =  t1.oid WHERE t4.name  =  \"Databases\" AND t6.name  =  \"University of Michigan\" GROUP BY t1.name ORDER BY SUM ( t5.citation_num ) DESC LIMIT 1;"
    },
    {
        "instance_id": "q_495",
        "question": "return me the papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" with the most number of citations .",
        "db_id": "academic",
        "query": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"Divesh Srivastava\" AND t1.name  =  \"H. V. Jagadish\" ORDER BY t5.citation_num DESC LIMIT 1;"
    },
    {
        "instance_id": "q_496",
        "question": "return me the conferences, which have more than 10 papers by \" H. V. Jagadish \" .",
        "db_id": "academic",
        "query": "SELECT t2.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" GROUP BY t2.name HAVING COUNT ( DISTINCT t4.title )  >  10;"
    },
    {
        "instance_id": "q_497",
        "question": "return me the conference, which have the most number of papers by \" H. V. Jagadish \" .",
        "db_id": "academic",
        "query": "SELECT t2.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1;"
    },
    {
        "instance_id": "q_498",
        "question": "return me the journal, which have the most number of papers by \" H. V. Jagadish \" .",
        "db_id": "academic",
        "query": "SELECT t2.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1;"
    },
    {
        "instance_id": "q_499",
        "question": "return me the authors who have more than 10 papers containing keyword \" Relational Database \" .",
        "db_id": "academic",
        "query": "SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t2.name HAVING COUNT ( DISTINCT t3.title )  >  10;"
    },
    {
        "instance_id": "q_500",
        "question": "return me the conferences, which have more than 60 papers containing keyword \" Relational Database \" .",
        "db_id": "academic",
        "query": "SELECT t2.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t2.name HAVING COUNT ( DISTINCT t3.title )  >  60;"
    },
    {
        "instance_id": "q_501",
        "question": "return me the journals, which have more than 60 papers containing keyword \" Relational Database \" .",
        "db_id": "academic",
        "query": "SELECT t3.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t3.name HAVING COUNT ( DISTINCT t2.title )  >  60;"
    },
    {
        "instance_id": "q_502",
        "question": "return me the keywords, which have been contained by more than 100 papers in VLDB conference .",
        "db_id": "academic",
        "query": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" GROUP BY t1.keyword HAVING COUNT ( DISTINCT t3.title )  >  100;"
    },
    {
        "instance_id": "q_503",
        "question": "return me the keywords, which have been contained by more than 100 papers in PVLDB .",
        "db_id": "academic",
        "query": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" GROUP BY t1.keyword HAVING COUNT ( DISTINCT t2.title )  >  100;"
    },
    {
        "instance_id": "q_504",
        "question": "return me the keywords, which have been contained by more than 10 papers of \" H. V. Jagadish \" .",
        "db_id": "academic",
        "query": "SELECT t1.keyword FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" GROUP BY t1.keyword HAVING COUNT ( DISTINCT t3.title )  >  10;"
    },
    {
        "instance_id": "q_505",
        "question": "return me the author who has the most number of papers in the VLDB conference .",
        "db_id": "academic",
        "query": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" GROUP BY t1.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1;"
    },
    {
        "instance_id": "q_506",
        "question": "return me the author in the \" University of Michigan \" whose papers have more than 5000 total citations .",
        "db_id": "academic",
        "query": "SELECT t1.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\" GROUP BY t1.name HAVING SUM ( t4.citation_num )  >  5000;"
    },
    {
        "instance_id": "q_507",
        "question": "return me the author in the \" University of Michigan \" in Databases area whose papers have more than 5000 total citations .",
        "db_id": "academic",
        "query": "SELECT t1.name FROM domain_author AS t6 JOIN author AS t1 ON t6.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t6.did JOIN organization AS t5 ON t5.oid  =  t1.oid JOIN writes AS t2 ON t2.aid  =  t1.aid JOIN publication AS t4 ON t2.pid  =  t4.pid WHERE t3.name  =  \"Databases\" AND t5.name  =  \"University of Michigan\" GROUP BY t1.name HAVING SUM ( t4.citation_num )  >  5000;"
    },
    {
        "instance_id": "q_508",
        "question": "Find all movies written and produced by \" Woody Allen \"",
        "db_id": "imdb",
        "query": "SELECT t2.title FROM movie AS t2 JOIN made_by AS t3 ON t2.mid  =  t3.msid JOIN producer AS t1 ON t1.pid  =  t3.pid JOIN written_by AS t5 ON t5.msid  =  t2.mid JOIN writer AS t4 ON t5.wid  =  t4.wid WHERE t1.name  =  \"Woody Allen\" AND t4.name  =  \"Woody Allen\";"
    },
    {
        "instance_id": "q_509",
        "question": "Find all movies directed by \" Asghar Farhadi \" and featuring \" Taraneh Alidoosti \"",
        "db_id": "imdb",
        "query": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\";"
    },
    {
        "instance_id": "q_510",
        "question": "What are all the movies directed by \" Asghar Farhadi \" featuring \" Taraneh Alidoosti \" ?",
        "db_id": "imdb",
        "query": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\";"
    },
    {
        "instance_id": "q_511",
        "question": "How many movies are there that are directed by \" Asghar Farhadi \" and featuring \" Taraneh Alidoosti \" ?",
        "db_id": "imdb",
        "query": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\";"
    },
    {
        "instance_id": "q_512",
        "question": "List all the movies directed by \" Asghar Farhadi \" in which \" Taraneh Alidoosti \" played",
        "db_id": "imdb",
        "query": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\";"
    },
    {
        "instance_id": "q_513",
        "question": "How many movies did \" Quentin Tarantino \" direct before 2002 and after 2010 ?",
        "db_id": "imdb",
        "query": "SELECT COUNT ( DISTINCT t4.title  ) FROM director AS t3 JOIN directed_by AS t2 ON t3.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN made_by AS t5 ON t4.mid  =  t5.msid JOIN producer AS t1 ON t1.pid  =  t5.pid WHERE t3.name  =  \"Quentin Tarantino\" AND t4.release_year  <  2010 AND t4.release_year  >  2002;"
    },
    {
        "instance_id": "q_514",
        "question": "find the number of actors from Iran who played in \" Jim Jarmusch \" movies",
        "db_id": "imdb",
        "query": "SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN directed_by AS t2 ON t5.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.nationality  =  \"Iran\" AND t3.name  =  \"Jim Jarmusch\";"
    },
    {
        "instance_id": "q_515",
        "question": "Find the actors who played in the latest movie by \" Quentin Tarantino \"",
        "db_id": "imdb",
        "query": "SELECT t1.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN directed_by AS t2 ON t5.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t3.name  =  \"Quentin Tarantino\" ORDER BY t5.release_year DESC LIMIT 1;"
    },
    {
        "instance_id": "q_516",
        "question": "Which producer has worked with the most number of directors ?",
        "db_id": "imdb",
        "query": "SELECT t1.name FROM director AS t3 JOIN directed_by AS t2 ON t3.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN made_by AS t5 ON t4.mid  =  t5.msid JOIN producer AS t1 ON t1.pid  =  t5.pid GROUP BY t1.name ORDER BY COUNT ( DISTINCT t3.name  ) DESC LIMIT 1;"
    },
    {
        "instance_id": "q_533",
        "db_id": "wta_1_new",
        "question": "Which players, identified by their country code and first name, have won matches in both the WTA Championships and the Australian Open tournaments? Consider only players who have shown a positive trend in their recent form score (player_current_form_index > 0) and have consistent performance metrics across these tournaments as indicated by a non-negative ranking points change (rank_change >= 0). Ensure that the player's performance metrics are marked as true.",
        "query": "```sql\nSELECT DISTINCT p.player_country_code, p.player_first_name\nFROM players p\nJOIN matches m1 ON p.player_id = m1.winner_id\nJOIN tournaments t1 ON m1.tournament_id = t1.tournament_id\nJOIN matches m2 ON p.player_id = m2.winner_id\nJOIN tournaments t2 ON m2.tournament_id = t2.tournament_id\nJOIN rankings r ON p.player_id = r.ranking AND r.rank_change >= 0\nWHERE t1.tournament_name = 'WTA Championships'\nAND t2.tournament_name = 'Australian Open'\nAND p.player_current_form_index > 0\nAND p.player_performance_metrics IS TRUE;\n```"
    },
    {
        "instance_id": "q_522",
        "db_id": "wta_1_new",
        "question": "Which players, identified by their player IDs and country codes, have won titles in at least two distinct high-profile tournaments, including the WTA Championships and major Opens such as the Australian Open, French Open, Wimbledon, and US Open, while maintaining an upward ranking trend over the past year, having a positive current form index, and participating only in non-canceled matches where they scored more points than their opponents? Additionally, these players must have at least one title to their name, and the tournaments considered must be of the \"Grand Slam\" level.",
        "query": "```sql\nSELECT DISTINCT p.player_id, p.player_country_code\nFROM wta_1_new.players AS p\nJOIN wta_1_new.matches AS m ON p.player_id = m.winner_id\nJOIN wta_1_new.tournaments AS t ON m.tournament_id = t.tournament_id\nWHERE t.tournament_name IN ('WTA Championships', 'Australian Open', 'French Open', 'Wimbledon', 'US Open')\n  AND p.player_ranking_trend = 'up'\n  AND p.player_current_form_index > 0\n  AND p.player_total_titles > 0\n  AND m.match_cancellation_reason IS NULL\n  AND m.tournament_level = 'Grand Slam'\n  AND m.match_winner_points > m.match_loser_points\n  AND p.player_highest_ranking_date >= NOW() - INTERVAL '1 year'\nGROUP BY p.player_id, p.player_country_code\nHAVING COUNT(DISTINCT t.tournament_name) >= 2;\n```"
    },
    {
        "instance_id": "q_527",
        "db_id": "student_transcripts_tracking_new",
        "question": "Which students are currently enrolled in a Bachelor's degree program, including their full names? Additionally, identify any students who have changed their major within the last academic year, providing their new major and the reason for the change.",
        "query": "```sql\nSELECT \n    s.STUDENT_ID,\n    CONCAT(s.FIRST_NAME, ' ', s.LAST_NAME) AS FULL_NAME,\n    dp.DEGREE_SUMMARY_NAME AS CURRENT_MAJOR,\n    e.ENROLLMENT_REASON AS REASON_FOR_CHANGE\nFROM \n    Students s\nJOIN \n    Student_Enrolment e ON s.STUDENT_ID = e.STUDENT_ID\nJOIN \n    Degree_Programs dp ON e.DEGREE_PROGRAM_ID = dp.DEPARTMENT_ID\nLEFT JOIN \n    (SELECT \n         STUDENT_ID, \n         DEGREE_SUMMARY_NAME AS NEW_MAJOR, \n         ENROLLMENT_REASON, \n         PROGRAM_ENROLLMENT_DATE\n     FROM \n         Student_Enrolment\n     JOIN \n         Degree_Programs ON Student_Enrolment.DEGREE_PROGRAM_ID = Degree_Programs.DEPARTMENT_ID\n     WHERE \n         PROGRAM_ENROLLMENT_DATE >= DATEADD(YEAR, -1, GETDATE())) recent_changes\n     ON s.STUDENT_ID = recent_changes.STUDENT_ID\nWHERE \n    dp.DEGREE_PROGRAM_LEVEL = 'Bachelor'\n    AND e.ENROLLMENT_STATUS = 'Enrolled';\n```"
    },
    {
        "instance_id": "q_523",
        "db_id": "student_transcripts_tracking_new",
        "question": "Which students enrolled in a Bachelors program have changed their major at least once, and what are their full names (first name and last name concatenated), current cities, and current GPAs as indicators of academic performance trends? Additionally, include any notes from the student enrollment audit log that mention \"major change\" for these students. Ensure that the students have more than one distinct enrollment reason recorded in their enrollment history.",
        "query": "```sql\nSELECT \n    s.STUDENT_ID,\n    CONCAT(s.FIRST_NAME, ' ', s.LAST_NAME) AS FULL_NAME,\n    s.CURRENT_CITY,\n    s.CURRENT_GPA AS ACADEMIC_PERFORMANCE_TRENDS,\n    se.STUDENT_ENROLLMENT_AUDIT_LOG AS MAJOR_CHANGE_NOTES\nFROM \n    Students s\nJOIN \n    Student_Enrolment se ON s.STUDENT_ID = se.STUDENT_ID\nJOIN \n    Degree_Programs dp ON se.DEGREE_PROGRAM_ID = dp.DEPARTMENT_ID\nWHERE \n    dp.DEGREE_PROGRAM_LEVEL = 'Bachelors'\n    AND se.STUDENT_ENROLLMENT_AUDIT_LOG LIKE '%major change%'\nGROUP BY \n    s.STUDENT_ID, FULL_NAME, s.CURRENT_CITY, s.CURRENT_GPA, se.STUDENT_ENROLLMENT_AUDIT_LOG\nHAVING \n    COUNT(DISTINCT se.ENROLLMENT_REASON) > 1;\n```"
    },
    {
        "instance_id": "q_520",
        "db_id": "student_transcripts_tracking_new",
        "question": "Find the unique identifiers, current GPAs, cities of residence, home countries, academic focuses, and academic interests of students who are currently living in North Carolina, have not enrolled in any degree programs, and have mentioned advisory interactions as a retention reason. Additionally, ensure these students do not have an active student loan status.",
        "query": "```sql\nSELECT DISTINCT s.STUDENT_ID, s.CURRENT_GPA, s.CURRENT_CITY, s.HOME_COUNTRY, s.STUDENT_ACADEMIC_FOCUS, s.STUDENT_ACADEMIC_INTERESTS\nFROM Students s\nLEFT JOIN Student_Enrolment se ON s.STUDENT_ID = se.STUDENT_ID\nWHERE se.DEGREE_PROGRAM_ID IS NULL \nAND s.CURRENT_CITY = 'North Carolina' \nAND s.STUDENT_RETENTION_REASON LIKE '%advisory interactions%' \nAND s.STUDENT_LOAN_STATUS = FALSE;\n```"
    },
    {
        "instance_id": "q_526",
        "db_id": "student_transcripts_tracking_new",
        "question": "Which students, currently residing in North Carolina, have never enrolled in any degree programs, exhibit a low likelihood (less than 0.3) of enrolling in the upcoming semester based on their historical enrollment prediction model, and are not associated with any degree programs that have an upcoming semester enrollment likelihood of less than 0.2?",
        "query": "```sql\nSELECT \n    s.STUDENT_ID, \n    s.CURRENT_ADDRESS_ID, \n    s.GENDER, \n    s.DATE_OF_BIRTH, \n    s.EMAIL_ADDRESS, \n    s.PHONE_NUMBER, \n    s.HOME_COUNTRY, \n    s.CURRENT_CITY, \n    s.CURRENT_GPA, \n    s.STUDENT_LOAN_STATUS, \n    s.STUDENT_RETENTION_REASON, \n    s.STUDENT_ACADEMIC_FOCUS\nFROM \n    Students s\nLEFT JOIN \n    Student_Enrolment se ON s.STUDENT_ID = se.STUDENT_ID\nLEFT JOIN \n    Degree_Programs dp ON se.DEGREE_PROGRAM_ID = dp.DEPARTMENT_ID\nWHERE \n    s.CURRENT_CITY = 'North Carolina'\n    AND se.STUDENT_ID IS NULL\n    AND s.STUDENT_ENROLLMENT_PREDICTION_MODEL < 0.3\n    AND dp.PROGRAM_ADMISSION_STATUS != 'Accepted'\n    AND dp.DEGREE_PROGRAM_ENROLLMENT_TRENDS ->> 'upcoming_semester_likelihood' < '0.2';\n```"
    },
    {
        "instance_id": "q_517",
        "db_id": "student_transcripts_tracking_new",
        "question": "Which semesters have had concurrent enrollments from both Master's and Bachelor's degree students, and what are the detailed academic performance trends (including average GPA, academic load, and academic results) observed during those specific periods?",
        "query": "```sql\nSELECT \n    s.SEMESTER_NAME, \n    s.SEMESTER_START_DATE, \n    s.SEMESTER_END_DATE, \n    s.SEMESTER_ACADEMIC_LOAD, \n    s.SEMESTER_AVERAGE_GPA, \n    s.SEMESTER_ACADEMIC_RESULTS, \n    s.SEMESTER_ACADEMIC_LOAD_PERFORMANCE_DETAILS\nFROM \n    Semesters s\nJOIN \n    Student_Enrolment se ON s.SEMESTER_ID = se.SEMESTER_ID\nJOIN \n    Degree_Programs dp ON se.DEGREE_PROGRAM_ID = dp.DEPARTMENT_ID\nWHERE \n    dp.DEGREE_PROGRAM_LEVEL IN ('Masters', 'Bachelors')\n    AND EXISTS (\n        SELECT 1 \n        FROM Student_Enrolment se_m \n        JOIN Degree_Programs dp_m ON se_m.DEGREE_PROGRAM_ID = dp_m.DEPARTMENT_ID\n        WHERE dp_m.DEGREE_PROGRAM_LEVEL = 'Masters' \n            AND se_m.SEMESTER_ID = s.SEMESTER_ID\n    )\n    AND EXISTS (\n        SELECT 1 \n        FROM Student_Enrolment se_b \n        JOIN Degree_Programs dp_b ON se_b.DEGREE_PROGRAM_ID = dp_b.DEPARTMENT_ID\n        WHERE dp_b.DEGREE_PROGRAM_LEVEL = 'Bachelors' \n            AND se_b.SEMESTER_ID = s.SEMESTER_ID\n    )\nGROUP BY \n    s.SEMESTER_NAME, \n    s.SEMESTER_START_DATE, \n    s.SEMESTER_END_DATE, \n    s.SEMESTER_ACADEMIC_LOAD, \n    s.SEMESTER_AVERAGE_GPA, \n    s.SEMESTER_ACADEMIC_RESULTS, \n    s.SEMESTER_ACADEMIC_LOAD_PERFORMANCE_DETAILS;\n```"
    },
    {
        "instance_id": "q_524",
        "db_id": "student_transcripts_tracking_new",
        "question": "Which semester IDs correspond to terms where both graduate and undergraduate students were actively enrolled, with a positive academic load and non-null enrollment trends for the associated degree programs?",
        "query": "SELECT DISTINCT se.SEMESTER_ID  \nFROM Student_Enrolment se  \nJOIN Degree_Programs dp ON se.DEGREE_PROGRAM_ID = dp.DEPARTMENT_ID  \nJOIN Semesters s ON se.SEMESTER_ID = s.SEMESTER_NAME  \nWHERE se.ENROLLMENT_STATUS = 'Active'  \nAND (dp.DEGREE_PROGRAM_LEVEL = 'Graduate' OR dp.DEGREE_PROGRAM_LEVEL = 'Undergraduate')  \nAND s.SEMESTER_ACADEMIC_LOAD > 0  \nAND dp.DEGREE_PROGRAM_ENROLLMENT_TRENDS IS NOT NULL;"
    },
    {
        "instance_id": "q_519",
        "db_id": "tvshow_new",
        "question": "Which TV channels are currently airing cartoons produced by Ben Jones or Michael Chang, and what is the target audience for these cartoons? Additionally, provide the country of origin for the TV channels airing these cartoons, ensuring that only cartoons with an original air date on or before today are included. Results should be listed in alphabetical order by the TV channel name.",
        "query": "SELECT DISTINCT \n    TV_Channel.series_name AS Channel_Name, \n    Cartoon.Cartoon_Age_Rating AS Target_Audience, \n    TV_Channel.TV_Series_Production_Country AS Country_of_Origin\nFROM \n    Cartoon\nJOIN TV_series ON Cartoon.id = TV_series.id\nJOIN TV_Channel ON TV_Channel.series_name = TV_series.Episode\nWHERE \n    TV_series.Episode_Writer IN ('Ben Jones', 'Michael Chang')\n    AND Cartoon.Original_air_date <= CURRENT_DATE\nORDER BY \n    TV_Channel.series_name;"
    },
    {
        "instance_id": "q_521",
        "db_id": "tvshow_new",
        "question": "Which TV channels, identified by their series name and production country, are currently airing cartoons targeted at a children audience, specifically those with episodes directed by Ben Jones or Michael Chang? Additionally, provide the titles of these cartoons and their production countries. Only include channels whose license has not expired as of today's date.",
        "query": "```sql\nSELECT DISTINCT \n    TV_Channel.series_name, \n    TV_Channel.TV_Series_Production_Country AS Channel_Production_Country, \n    Cartoon.Title, \n    Cartoon.Series_Production_Company AS Cartoon_Production_Country\nFROM \n    Cartoon\nJOIN \n    TV_series ON Cartoon.id = TV_series.id\nJOIN \n    TV_Channel ON TV_series.series_name = TV_Channel.series_name\nWHERE \n    Cartoon.Cartoon_Age_Rating = 'Children'\n    AND (Cartoon.Episode_Writer = 'Ben Jones' OR Cartoon.Episode_Writer = 'Michael Chang')\n    AND TV_Channel.TV_Channel_License_Expiry > CURRENT_DATE;\n```"
    },
    {
        "instance_id": "q_518",
        "db_id": "world_1_new",
        "question": "Which countries have both English and Dutch as commonly spoken languages, where the percentage of Dutch speakers is higher than that of English speakers, and the total population of the country exceeds 10 million?",
        "query": "```sql\nSELECT \n    c.Code AS Country_Code,\n    c.Name AS Country_Name\nFROM \n    countrylanguage cl_en\nJOIN \n    countrylanguage cl_nl\nON cl_en.CountryCode = cl_nl.CountryCode\nJOIN \n    country c\nON cl_en.CountryCode = c.Code\nWHERE \n    cl_en.Language = 'English'\n    AND cl_nl.Language = 'Dutch'\n    AND cl_en.Language_Spoken = 'commonly'\n    AND cl_nl.Language_Spoken = 'commonly'\n    AND cl_nl.Language_Population_Percentage > cl_en.Language_Population_Percentage\n    AND c.Population > 10000000;\n```"
    },
    {
        "instance_id": "q_525",
        "db_id": "world_1_new",
        "question": "How many countries have both English and Dutch as spoken languages, where each language is actively spoken by a percentage of the population greater than 0%? Additionally, identify the countries that have a government type classified as either \"Constitutional Monarchy\" or \"Parliamentary Democracy\".",
        "query": "```sql\nSELECT \n    c.Code AS Country_Code,\n    c.Name AS Country_Name,\n    c.Government_Type AS Government_Type\nFROM \n    countrylanguage cl\nJOIN \n    country c ON cl.CountryCode = c.Code\nWHERE \n    cl.Language IN ('English', 'Dutch')\n    AND cl.Language_Spoken = 'T'\n    AND cl.Language_Population_Percentage > 0\nGROUP BY \n    c.Code, c.Name, c.Government_Type\nHAVING \n    COUNT(DISTINCT CASE WHEN cl.Language = 'English' THEN cl.Language END) > 0\n    AND COUNT(DISTINCT CASE WHEN cl.Language = 'Dutch' THEN cl.Language END) > 0\n    AND c.Government_Type IN ('Constitutional Monarchy', 'Parliamentary Democracy');\n```"
    },
    {
        "instance_id": "q_529",
        "db_id": "world_1_new",
        "question": "Which countries have both English and French as official languages, and what percentage of their populations speak each of these languages? Among these countries, which ones are classified as republics in terms of government type, and what is their average GDP per capita?",
        "query": "```sql\nSELECT \n    c.Code AS Country_Code,\n    c.Name AS Country_Name,\n    cl1.Language_Population_Percentage AS English_Speakers_Percentage,\n    cl2.Language_Population_Percentage AS French_Speakers_Percentage,\n    c.Government_Type,\n    (c.GDP / c.Population) AS GDP_Per_Capita\nFROM \n    country c\nJOIN \n    countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' AND cl1.Language_Status = 'Official'\nJOIN \n    countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' AND cl2.Language_Status = 'Official'\nWHERE \n    c.Government_Type LIKE '%Republic%'\nGROUP BY \n    c.Code, c.Name, cl1.Language_Population_Percentage, cl2.Language_Population_Percentage, c.Government_Type, c.GDP, c.Population;\n```"
    },
    {
        "instance_id": "q_530",
        "db_id": "world_1_new",
        "question": "Which countries have both English and French as official languages, and what percentage of their populations speak each language? Additionally, identify the countries where the combined percentage of people who speak these two languages exceeds 50% of the total population.",
        "query": "```sql\nSELECT \n    c.Code AS Country_Code,\n    c.Name AS Country_Name,\n    cl1.Language_Population_Percentage AS English_Speaking_Percentage,\n    cl2.Language_Population_Percentage AS French_Speaking_Percentage,\n    (cl1.Language_Population_Percentage + cl2.Language_Population_Percentage) AS Combined_Speaking_Percentage\nFROM \n    country c\nJOIN \n    countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' AND cl1.Language_Status = 'Official'\nJOIN \n    countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' AND cl2.Language_Status = 'Official'\nWHERE \n    (cl1.Language_Population_Percentage + cl2.Language_Population_Percentage) > 50;\n```"
    },
    {
        "instance_id": "q_528",
        "db_id": "world_1_new",
        "question": "Which countries have both English and French as official languages, and what percentage of their populations speak each language? Among these countries, which ones have a government type classified as a democracy, and what is their GDP per capita when sorted in descending order?",
        "query": "```sql\nSELECT \n    c.Code AS Country_Code,\n    c.Name AS Country_Name,\n    cl1.Language_Population_Percentage AS English_Speaking_Percentage,\n    cl2.Language_Population_Percentage AS French_Speaking_Percentage,\n    c.Government_Type,\n    (c.GDP / c.Population) AS GDP_Per_Capita\nFROM \n    country c\nJOIN \n    countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' AND cl1.Language_Status = 'Official'\nJOIN \n    countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' AND cl2.Language_Status = 'Official'\nWHERE \n    c.Government_Type LIKE '%democracy%'\nORDER BY \n    GDP_Per_Capita DESC;\n```"
    },
    {
        "instance_id": "q_531",
        "db_id": "world_1_new",
        "question": "List the countries where both English and French are widely spoken, based on their respective speaking populations. Include each country's government type and GDP per capita in the results.",
        "query": "```sql\nSELECT \n    c.Name AS Country_Name,\n    c.Government_Type,\n    (c.GDP / c.Population) AS GDP_Per_Capita\nFROM \n    country c\nWHERE \n    EXISTS (\n        SELECT 1\n        FROM countrylanguage cl_en\n        WHERE cl_en.CountryCode = c.Code\n        AND cl_en.Language = 'English'\n        AND cl_en.Language_Spoken = 'Widely'\n    )\n    AND EXISTS (\n        SELECT 1\n        FROM countrylanguage cl_fr\n        WHERE cl_fr.CountryCode = c.Code\n        AND cl_fr.Language = 'French'\n        AND cl_fr.Language_Spoken = 'Widely'\n    );\n```"
    },
    {
        "instance_id": "q_537",
        "db_id": "world_1_new",
        "question": "Which countries have English or Dutch as one of their predominant languages, and what percentage of their population speaks these languages? Among these countries, which ones have a government type classified as a democratic system, and what is their GDP per capita when sorted in descending order?",
        "query": "```sql\nSELECT \n    c.Code AS Country_Code,\n    c.Name AS Country_Name,\n    cl.Language AS Predominant_Language,\n    cl.Language_Population_Percentage AS Language_Population_Percentage,\n    c.Government_Type AS Government_Type,\n    (c.GDP / c.Population) AS GDP_Per_Capita\nFROM \n    country c\nJOIN \n    countrylanguage cl ON c.Code = cl.CountryCode\nWHERE \n    cl.Language IN ('English', 'Dutch')\n    AND cl.Language_Status = 'Predominant'\n    AND c.Government_Type LIKE '%democratic%'\nORDER BY \n    GDP_Per_Capita DESC;\n```"
    },
    {
        "instance_id": "q_536",
        "db_id": "world_1_new",
        "question": "Which countries have English or Dutch as one of their predominant languages, with the language dominance being the highest in the country? For these countries, what is the percentage of the population that speaks these languages, the total population of the country, and the GDP per capita? Additionally, filter the results to include only those countries with a population greater than 10 million and a GDP per capita above the global average (calculated as the average GDP per capita across all countries with valid population and GDP data). Finally, sort the results by country name and language in ascending order.",
        "query": "```sql\nSELECT \n    c.Name AS Country_Name,\n    cl.Language AS Predominant_Language,\n    cl.Language_Population_Percentage AS Language_Population_Percentage,\n    c.Population AS Country_Population,\n    (c.GDP / c.Population) AS GDP_Per_Capita\nFROM \n    world_1_new.country c\nJOIN \n    world_1_new.countrylanguage cl ON c.Code = cl.CountryCode\nWHERE \n    (cl.Language = 'English' OR cl.Language = 'Dutch')\n    AND cl.Country_Language_Dominance = 1\n    AND c.Population > 10000000\n    AND (c.GDP / c.Population) > (\n        SELECT AVG(GDP / Population)\n        FROM world_1_new.country\n        WHERE Population > 0 AND GDP IS NOT NULL\n    )\nORDER BY \n    c.Name, cl.Language;\n```"
    },
    {
        "instance_id": "q_532",
        "db_id": "world_1_new",
        "question": "In which cities within European democratic countries, specifically Germany, France, Italy, Spain, Netherlands, Belgium, Sweden, Norway, Denmark, Finland, Greece, Portugal, Austria, Switzerland, Ireland, and the United Kingdom, do significant populations (at least 10% of the city's population) speak official languages other than English, potentially indicating diverse cultural hubs with unique market opportunities? The results should be ordered by the language population percentage in descending order.",
        "query": "```sql\nSELECT \n    c.Name AS City_Name,\n    cl.Language AS City_Language,\n    cl.Language_Population_Percentage AS Language_Population_Percentage\nFROM \n    city c\nJOIN \n    countrylanguage cl ON c.CountryCode = cl.CountryCode\nJOIN \n    country co ON c.CountryCode = co.Code\nWHERE \n    cl.Language != 'English'\n    AND cl.Language_Status = 'Official'\n    AND cl.Language_Population_Percentage >= 10\n    AND co.Government_Type = 'Democracy'\n    AND co.Country_GDP_Growth_Rate > 2\n    AND co.Unemployment_Rate < 5\n    AND co.Name IN ('Germany', 'France', 'Italy', 'Spain', 'Netherlands', 'Belgium', 'Sweden', 'Norway', 'Denmark', 'Finland', 'Greece', 'Portugal', 'Austria', 'Switzerland', 'Ireland', 'United Kingdom')\nORDER BY \n    cl.Language_Population_Percentage DESC;\n```"
    },
    {
        "instance_id": "q_534",
        "db_id": "world_1_new",
        "question": "Which non-capital cities in Europe have a primary language other than English spoken by more than 10% of their population?",
        "query": "```sql\nSELECT \n    c.Name AS City_Name,\n    cl.Language AS Primary_Language,\n    cl.Language_Population_Percentage AS Language_Population_Percentage\nFROM \n    city c\nJOIN \n    countrylanguage cl ON c.CountryCode = cl.CountryCode\nWHERE \n    cl.Language_Status = 'Primary' \n    AND cl.Language <> 'English' \n    AND c.City_Type <> 'Capital' \n    AND c.City_Country_Code IN (\n        SELECT Code \n        FROM country \n        WHERE Name IN ('Germany', 'France', 'Italy', 'Spain', 'Netherlands', 'Belgium', 'Switzerland', 'Austria', 'Greece', 'Portugal', 'Sweden', 'Norway', 'Denmark', 'Finland', 'Ireland', 'United Kingdom')\n    )\n    AND cl.Language_Population_Percentage > 10;\n```"
    },
    {
        "instance_id": "q_535",
        "db_id": "dog_kennels_new",
        "question": "Which professionals have either treated dogs with a behavior score below the average behavior score of all dogs or specialize in treatments with a duration exceeding the average treatment duration? Provide the professional's ID, last name, and contact number, where the contact number is obtained from the Owners table if the professional ID matches an owner ID.",
        "query": "```sql\nSELECT DISTINCT \n    T.PROFESSIONAL_ID, \n    SUBSTRING(T.PROFESSIONAL_NAME FROM POSITION(' ' IN T.PROFESSIONAL_NAME) + 1 FOR LENGTH(T.PROFESSIONAL_NAME)) AS LAST_NAME, \n    O.OWNER_PHONE AS CONTACT_NUMBER\nFROM \n    Treatments T\nLEFT JOIN \n    Owners O ON T.PROFESSIONAL_ID = O.OWNER_ID\nWHERE \n    T.PROFESSIONAL_ID IN (\n        SELECT DISTINCT T1.PROFESSIONAL_ID\n        FROM Treatments T1\n        WHERE T1.TREATMENT_DOG_ID IN (\n            SELECT D.DOG_ID\n            FROM Dogs D\n            WHERE D.DOG_BEHAVIOR_SCORE < (SELECT AVG(D1.DOG_BEHAVIOR_SCORE) FROM Dogs D1)\n        )\n        UNION\n        SELECT DISTINCT T2.PROFESSIONAL_ID\n        FROM Treatments T2\n        WHERE T2.TREATMENT_DURATION > (SELECT AVG(T3.TREATMENT_DURATION) FROM Treatments T3)\n    );\n```"
    },
    {
        "instance_id": "q_543",
        "db_id": "dog_kennels_new",
        "question": "Identify the professionals whose specialty is in advanced treatment categories and who have conducted treatments within the last six months. Include professionals who either reside in Indiana or have performed treatments with an average duration exceeding two hours. Provide their professional ID, last name, and contact number. Ensure that only professionals with an advanced specialty and treatments categorized as advanced are considered.",
        "query": "```sql\nSELECT DISTINCT \n    T.PROFESSIONAL_ID, \n    SUBSTRING(T.PROFESSIONAL_NAME, POSITION(' ' IN T.PROFESSIONAL_NAME) + 1) AS LAST_NAME, \n    O.OWNER_PHONE AS CONTACT_NUMBER\nFROM \n    Treatments T\nJOIN \n    Owners O ON T.PROFESSIONAL_ID = O.OWNER_ID\nWHERE \n    (O.OWNER_ADDRESS LIKE '%Indiana%' \n     OR T.TREATMENT_DURATION > 120)\nAND T.TREATMENT_CATEGORY IN ('Advanced')\nAND T.DATE_OF_TREATMENT >= NOW() - INTERVAL '6 months'\nAND T.TREATMENT_DOCTOR_SPECIALTY = 'Advanced';\n```"
    },
    {
        "instance_id": "q_539",
        "db_id": "e_commerce_new",
        "question": "Identify customers who have made more than two distinct purchases and acquired at least three distinct products. For each qualifying customer, include their customer ID, first name, last name, loyalty tier, and details of the most recent promotion they utilized (promotion ID, start date, and end date). Ensure that the results are ordered by loyalty tier in descending order.",
        "query": "```sql\nSELECT \n    c.CUSTOMER_ID,\n    c.FIRST_NAME,\n    c.LAST_NAME,\n    c.LOYALTY_TIER,\n    pr.PROMOTION_RULE_ID,\n    pr.PROMOTION_START_DATE,\n    pr.PROMOTION_END_DATE\nFROM \n    Customers c\nJOIN \n    (SELECT \n         CUSTOMER_ID, \n         COUNT(DISTINCT ORDER_ID) AS purchase_count, \n         COUNT(DISTINCT PRODUCT_ID) AS product_count\n     FROM \n         Orders o\n     JOIN Order_Items oi ON o.ORDER_ID = oi.ORDER_ID\n     GROUP BY CUSTOMER_ID\n     HAVING COUNT(DISTINCT ORDER_ID) > 2 AND COUNT(DISTINCT PRODUCT_ID) >= 3) filtered_orders\nON c.CUSTOMER_ID = filtered_orders.CUSTOMER_ID\nLEFT JOIN Orders o2 ON c.CUSTOMER_ID = o2.CUSTOMER_ID\nLEFT JOIN Promotion_Rules pr ON o2.ORDER_PROMOTION_RULE_ID = pr.PROMOTION_RULE_ID\nWHERE \n    pr.PROMOTION_START_DATE = (\n        SELECT MAX(PROMOTION_START_DATE)\n        FROM Promotion_Rules\n        WHERE PROMOTION_RULE_ID = o2.ORDER_PROMOTION_RULE_ID\n    )\nORDER BY c.LOYALTY_TIER DESC;\n```"
    },
    {
        "instance_id": "q_538",
        "db_id": "e_commerce_new",
        "question": "Which customers, identified by their customer IDs and segment names, have made more than two purchases within the last 90 days, have a loyalty score exceeding 800, and have used at least two different payment methods for their orders?",
        "query": "```sql\nSELECT DISTINCT c.CUSTOMER_ID, c.LOYALTY_SCORE, cs.CUSTOMER_SEGMENT_NAME\nFROM Customers c\nJOIN Customer_Segments cs ON c.CUSTOMER_SEGMENT_ID = cs.CUSTOMER_SEGMENT_ID\nWHERE c.LOYALTY_SCORE > 800\nAND c.CUSTOMER_ID IN (\n    SELECT o1.CUSTOMER_ID\n    FROM Orders o1\n    WHERE o1.PAYMENT_DATE >= NOW() - INTERVAL '90 days'\n    GROUP BY o1.CUSTOMER_ID\n    HAVING COUNT(o1.ORDER_ID) > 2\n)\nAND c.CUSTOMER_ID IN (\n    SELECT o2.CUSTOMER_ID\n    FROM Orders o2\n    GROUP BY o2.CUSTOMER_ID\n    HAVING COUNT(DISTINCT o2.PAYMENT_METHOD) >= 2\n);\n```"
    },
    {
        "instance_id": "q_548",
        "db_id": "e_commerce_new",
        "question": "Which customers, who have been enrolled in the loyalty program for more than six months, have not placed any orders in the last three months and are at risk of churning? Please provide their customer ID, loyalty score, and loyalty tier. Only include customers who have not engaged in any transactions within the specified time frame.",
        "query": "```sql\nSELECT \n    c.CUSTOMER_ID,\n    c.LOYALTY_SCORE,\n    c.LOYALTY_TIER\nFROM \n    Customers c\nLEFT JOIN \n    Orders o ON c.CUSTOMER_ID = o.ORDER_ID\nWHERE \n    o.ORDER_ID IS NULL\n    AND c.LOYALTY_PROGRAM_ENROLLED = TRUE\n    AND c.CUSTOMER_ID NOT IN (\n        SELECT DISTINCT CUSTOMER_ID \n        FROM Orders \n        WHERE PAYMENT_DATE >= NOW() - INTERVAL '3 months'\n    )\n    AND c.CUSTOMER_ID IN (\n        SELECT CUSTOMER_ID \n        FROM Customers \n        WHERE LOYALTY_PROGRAM_ENROLLED = TRUE \n        AND CUSTOMER_ID IN (\n            SELECT CUSTOMER_ID \n            FROM Customers \n            WHERE LOYALTY_PROGRAM_ENROLLED = TRUE \n            AND CUSTOMER_ID NOT IN (\n                SELECT DISTINCT CUSTOMER_ID \n                FROM Orders \n                WHERE PAYMENT_DATE >= NOW() - INTERVAL '6 months'\n            )\n        )\n    );\n```"
    },
    {
        "instance_id": "q_542",
        "db_id": "e_commerce_new",
        "question": "Which customers, identified by their customer segment name, have not placed any orders and belong to the loyalty tier indicating \"Potential Churn Risk\"? Consider only those customers who have been enrolled in the loyalty program for more than six months and have not utilized any promotional offers during this period.",
        "query": "```sql\nSELECT DISTINCT c.CUSTOMER_ID, cs.CUSTOMER_SEGMENT_NAME AS customer_name\nFROM Customers c\nJOIN Customer_Segments cs ON c.CUSTOMER_SEGMENT_ID = cs.CUSTOMER_SEGMENT_ID\nLEFT JOIN Orders o ON c.CUSTOMER_ID = o.ORDER_ID\nLEFT JOIN Order_Items oi ON o.ORDER_ID = oi.ORDER_ITEM_ID\nLEFT JOIN Promotion_Rules pr ON o.ORDER_PROMOTION_RULE_ID = pr.PROMOTION_RULE_ID\nWHERE c.LOYALTY_TIER = 'Potential Churn Risk'\n  AND c.LOYALTY_PROGRAM_ENROLLED = TRUE\n  AND DATEDIFF(CURRENT_TIMESTAMP, c.LOYALTY_PROGRAM_RANK) > 180\n  AND o.ORDER_ID IS NULL\n  AND pr.PROMOTION_RULE_ID IS NULL;\n```"
    },
    {
        "instance_id": "q_544",
        "db_id": "e_commerce_new",
        "question": "What are the IDs, names, prices, and colors of products that have been ordered fewer than two times in the past 30 days, where the orders were completed and the products were not associated with any promotional campaigns during this period?",
        "query": "```sql\nSELECT \n    p.PRODUCT_ID AS product_id,\n    p.PRODUCT_NAME AS product_name,\n    p.PRODUCT_PRICE AS product_price,\n    p.PRODUCT_COLOR AS product_color\nFROM \n    Products p\nLEFT JOIN \n    Orders o ON p.PRODUCT_ID = ANY(SELECT oi.ORDER_ITEM_PRODUCT_ID FROM Order_Items oi WHERE oi.ORDER_ITEM_ORDER_ID = o.ORDER_ID)\nLEFT JOIN \n    Promotion_Rules pr ON o.ORDER_PROMOTION_RULE_ID = pr.PROMOTION_RULE_ID\nWHERE \n    o.ORDER_STATUS = 'Completed'\n    AND o.PAYMENT_DATE >= NOW() - INTERVAL '30 days'\n    AND pr.PROMOTION_RULE_ID IS NULL\nGROUP BY \n    p.PRODUCT_ID, p.PRODUCT_NAME, p.PRODUCT_PRICE, p.PRODUCT_COLOR\nHAVING \n    COUNT(o.ORDER_ID) < 2;\n```"
    },
    {
        "instance_id": "q_541",
        "db_id": "e_commerce_new",
        "question": "Identify the unique names, prices, and descriptions of products purchased by female customers, ensuring that only customers with a defined loyalty tier are included. Organize the results by loyalty tier and product name to analyze purchasing patterns across different customer segments.",
        "query": "```sql\nSELECT DISTINCT \n    p.PRODUCT_NAME AS product_name, \n    p.PRODUCT_PRICE AS product_price, \n    p.PRODUCT_DESCRIPTION AS product_description\nFROM \n    Products p\nJOIN \n    Order_Items oi ON p.PRODUCT_ID = oi.PRODUCT_ID\nJOIN \n    Orders o ON oi.ORDER_ID = o.ORDER_ID\nJOIN \n    Customers c ON o.CUSTOMER_ID = c.CUSTOMER_ID\nWHERE \n    c.GENDER = 'Female'\n    AND c.LOYALTY_TIER IS NOT NULL\nORDER BY \n    c.LOYALTY_TIER, \n    p.PRODUCT_NAME;\n``` \n\n### 注意：\n1. 假设 `Products` 表中存在字段 `PRODUCT_NAME`, `PRODUCT_PRICE`, 和 `PRODUCT_DESCRIPTION`，但模式定义未明确提供。如果这些字段不存在，请补充完整模式定义。\n2. 假设 `Customers` 表中存在字段 `GENDER`，但模式定义未明确提供。如果该字段不存在，请补充完整模式定义。"
    },
    {
        "instance_id": "q_540",
        "db_id": "e_commerce_new",
        "question": "What are the product names, prices, and promotion descriptions for items purchased by customers in the highest loyalty tier who used the specific payment method 'SPECIFIC_PAYMENT_METHOD' and completed their orders within the last 30 days?",
        "query": "```sql\nSELECT \n    p.PRODUCT_ID AS PRODUCT_ID,\n    p.PRODUCT_BRAND AS PRODUCT_NAME,\n    oi.ORDER_ITEM_REVENUE AS PRICE,\n    pr.PROMOTION_RULE_DESCRIPTION AS DESCRIPTION\nFROM \n    Customers c\nJOIN \n    Orders o ON c.CUSTOMER_ID = o.CUSTOMER_ID\nJOIN \n    Order_Items oi ON o.ORDER_ID = oi.ORDER_ITEM_ID\nJOIN \n    Products p ON oi.ORDER_ITEM_ID = p.PRODUCT_ID\nLEFT JOIN \n    Promotion_Rules pr ON o.ORDER_PROMOTION_RULE_ID = pr.PROMOTION_RULE_ID\nWHERE \n    c.LOYALTY_TIER = (SELECT MAX(c2.LOYALTY_TIER) FROM Customers c2)\n    AND o.PAYMENT_METHOD = 'SPECIFIC_PAYMENT_METHOD'\n    AND o.PAYMENT_DATE >= NOW() - INTERVAL '1 MONTH'\n    AND o.ORDER_STATUS = 'Completed';\n```"
    },
    {
        "instance_id": "q_549",
        "db_id": "cre_Students_Information_Systems_new",
        "question": "List the unique identifiers and personal details, including loyalty score, payment method, loyalty tier, and student preference, for students who meet the following criteria: they are enrolled in at least two different academic events, have received fewer than two detentions, have achieved either an award or a high-performance score (weighted above 4.0) within the current semester, and maintain a cumulative GPA of 3.5 or higher. Ensure that recent achievements and event participations are considered to reflect positive engagement.",
        "query": "```sql\nSELECT DISTINCT s.student_id, s.loyalty_score, s.payment_method, s.loyalty_tier, s.student_preference\nFROM cre_Students_Information_Systems_new.Students s\nJOIN cre_Students_Information_Systems_new.Student_Events se ON s.student_id = se.student_id\nJOIN cre_Students_Information_Systems_new.Achievements a ON s.student_id = a.student_id\nLEFT JOIN cre_Students_Information_Systems_new.Transcripts t ON s.student_id = t.student_id\nWHERE se.event_participation_count >= 2\nAND (\n    SELECT COUNT(*) \n    FROM cre_Students_Information_Systems_new.Student_Events se2 \n    WHERE se2.student_id = s.student_id AND se2.event_participation_status = 'Detention'\n) < 2\nAND a.achievement_date >= DATE_TRUNC('semester', CURRENT_DATE)\nAND (a.achievement_type = 'Award' OR a.achievement_weighting > 4.0)\nAND t.transcript_cumulative_gpa >= 3.5;\n```"
    },
    {
        "instance_id": "q_546",
        "db_id": "cre_Students_Information_Systems_new",
        "question": "Which students have either participated in more than one unique academic achievement within the last semester (starting from January 1, 2023) or have had fewer than two disciplinary actions recorded since January 1, 2023? Additionally, include students who may be at risk of dropping out based on a loyalty score lower than 5.0. Provide their biographical information, including their unique student identifier, loyalty score, payment method, loyalty tier, and student preferences. Ensure that students with no disciplinary actions are also included in the results.",
        "query": "```sql\nSELECT \n    s.student_id, \n    s.loyalty_score, \n    s.payment_method, \n    s.loyalty_tier, \n    s.student_preference,\n    COUNT(DISTINCT a.achievement_id) AS achievement_count,\n    SUM(CASE WHEN se.event_participation_status = 'disciplinary' THEN 1 ELSE 0 END) AS disciplinary_actions\nFROM \n    cre_Students_Information_Systems_new.Students s\nLEFT JOIN \n    cre_Students_Information_Systems_new.Achievements a \n    ON s.student_id = a.student_id AND a.achievement_date >= '2023-01-01'::date\nLEFT JOIN \n    student_events.Student_Events se \n    ON s.student_id = se.student_id AND se.event_start_time >= '2023-01-01'::timestamp\nWHERE \n    (COUNT(DISTINCT a.achievement_id) > 1 AND se.event_participation_status != 'disciplinary')\n    OR (SUM(CASE WHEN se.event_participation_status = 'disciplinary' THEN 1 ELSE 0 END) < 2)\n    OR s.loyalty_score < 5.0 -- Assuming at-risk students have low loyalty scores\nGROUP BY \n    s.student_id, s.loyalty_score, s.payment_method, s.loyalty_tier, s.student_preference\nHAVING \n    COUNT(DISTINCT a.achievement_id) > 1 \n    OR SUM(CASE WHEN se.event_participation_status = 'disciplinary' THEN 1 ELSE 0 END) < 2;\n```"
    },
    {
        "instance_id": "q_545",
        "db_id": "cre_Students_Information_Systems_new",
        "question": "Find teachers who have taught classes with 'data' mentioned in the class details but have never been assigned to any class whose name starts with 'net'. Additionally, provide insights into their teaching performance by including the average student attendance percentage and the number of students who dropped out of their classes in the last academic year.",
        "query": "```sql\nSELECT \n    t.teacher_id,\n    t.teacher_department,\n    AVG(se.student_attendance_percentage) AS avg_student_attendance,\n    COUNT(DISTINCT CASE WHEN se.student_dropped_out = 'Yes' THEN se.student_id END) AS dropout_count\nFROM \n    Teachers t\nLEFT JOIN \n    Classes c ON t.teacher_id = c.teacher_id\nLEFT JOIN \n    Student_Enrollment se ON c.class_id = se.class_id\nLEFT JOIN \n    (SELECT DISTINCT teacher_id FROM Classes WHERE class_name LIKE 'net%') net_classes ON t.teacher_id = net_classes.teacher_id\nWHERE \n    net_classes.teacher_id IS NULL\n    AND c.class_details LIKE '%data%'\n    AND se.enrollment_year = EXTRACT(YEAR FROM CURRENT_DATE) - 1\nGROUP BY \n    t.teacher_id, t.teacher_department;\n```"
    },
    {
        "instance_id": "q_552",
        "db_id": "cre_Students_Information_Systems_new",
        "question": "Which teachers, who have taught at least one class in the past six months and are currently active, are associated with classes that include 'data' in their descriptions while not teaching any classes starting with 'net'? Additionally, provide details about these teachers, including their department and average rating. Ensure that only teachers with a valid performance review within the last six months and a non-null rating are considered.",
        "query": "```sql\nSELECT \n    t.teacher_id, \n    t.teacher_department, \n    AVG(t.teacher_rating) AS average_rating\nFROM \n    Teachers t\nJOIN \n    Transcripts tr ON t.teacher_id = tr.transcript_id\nWHERE \n    tr.transcript_course_load > 0\n    AND tr.transcript_semester IN (\n        SELECT transcript_semester \n        FROM Transcripts \n        WHERE transcript_year >= EXTRACT(YEAR FROM CURRENT_DATE - INTERVAL '6 MONTH')\n    )\n    AND EXISTS (\n        SELECT 1 \n        FROM Ref_Achievement_Type rat \n        WHERE rat.achievement_type_code LIKE '%data%' \n            AND rat.achievement_type_code = tr.transcript_course_load\n    )\n    AND NOT EXISTS (\n        SELECT 1 \n        FROM Ref_Achievement_Type rat \n        WHERE rat.achievement_type_code LIKE 'net%' \n            AND rat.achievement_type_code = tr.transcript_course_load\n    )\n    AND t.teacher_rating IS NOT NULL\n    AND t.teacher_performance_review_date >= CURRENT_DATE - INTERVAL '6 MONTH'\nGROUP BY \n    t.teacher_id, t.teacher_department;\n```"
    },
    {
        "instance_id": "q_547",
        "db_id": "cre_Students_Information_Systems_new",
        "question": "Find students who have never been involved in disciplinary actions, such as detentions (event_type_code = 'disciplinary_action' with participation status as 'participated'), and have not participated in any financial assistance programs like student loans (event_type_code = 'financial_assistance' with participation status as 'participated'). Provide their biographical information, including loyalty score, payment method, loyalty tier, and student preferences. Additionally, list any notable achievements described in the Achievements table and highlight their participation status and ranking in any events they have been part of during their academic journey. Results should be ordered by student ID.",
        "query": "```sql\nSELECT \n    s.student_id,\n    s.loyalty_score,\n    s.payment_method,\n    s.loyalty_tier,\n    s.student_preference,\n    a.achievement_description,\n    se.event_participation_status,\n    se.event_participation_ranking\nFROM \n    cre_Students_Information_Systems_new.Students s\nLEFT JOIN \n    cre_Students_Information_Systems_new.Achievements a \n        ON s.student_id = a.student_id\nLEFT JOIN \n    cre_Students_Information_Systems_new.Student_Events se \n        ON s.student_id = se.student_id\nWHERE \n    s.student_id NOT IN (\n        SELECT DISTINCT student_id \n        FROM cre_Students_Information_Systems_new.Student_Events \n        WHERE event_type_code = 'disciplinary_action' AND event_participation_status = 'participated'\n    )\nAND \n    s.student_id NOT IN (\n        SELECT DISTINCT student_id \n        FROM cre_Students_Information_Systems_new.Student_Events \n        WHERE event_type_code = 'financial_assistance' AND event_participation_status = 'participated'\n    )\nORDER BY \n    s.student_id;\n```"
    },
    {
        "instance_id": "q_554",
        "db_id": "cre_Students_Information_Systems_new",
        "question": "Identify students who have never received detentions and do not use student loans as their payment method. Provide their biographical information, including loyalty score, payment method, loyalty tier, and student preferences. Additionally, list their achievements with details such as achievement description, type, and date. Include any notable events they participated in, showing the event participation status and ranking. Analyze their academic performance by providing their GPA, semester, and year from their transcripts. Organize the results by student ID, achievement date, and event participation ranking.",
        "query": "```sql\nSELECT \n    s.student_id,\n    s.loyalty_score,\n    s.payment_method,\n    s.loyalty_tier,\n    s.student_preference,\n    a.achievement_description,\n    a.achievement_type,\n    a.achievement_date,\n    se.event_participation_status,\n    se.event_participation_ranking,\n    t.transcript_gpa,\n    t.transcript_semester,\n    t.transcript_year\nFROM \n    cre_Students_Information_Systems_new.Students s\nLEFT JOIN \n    cre_Students_Information_Systems_new.Achievements a \n        ON s.student_id = a.student_id\nLEFT JOIN \n    cre_Students_Information_Systems_new.Student_Events se \n        ON s.student_id = se.student_id\nLEFT JOIN \n    cre_Students_Information_Systems_new.Transcripts t \n        ON s.student_id = t.student_id\nWHERE \n    s.payment_method NOT IN ('Student Loan') \n    AND s.student_id NOT IN (\n        SELECT DISTINCT student_id \n        FROM cre_Students_Information_Systems_new.Student_Events \n        WHERE event_participation_status = 'Detention'\n    )\nORDER BY \n    s.student_id, a.achievement_date, se.event_participation_ranking;\n```"
    },
    {
        "instance_id": "q_555",
        "db_id": "cre_Students_Information_Systems_new",
        "question": "Identify students who belong to the \"specific_behavior_category\" and have demonstrated this behavior at least three times during the last academic term (from January 1, 2023, to June 30, 2023). Additionally, ensure these students maintain a consistent academic performance with a minimum GPA of 2.5 across all semesters within the same period. Provide their personal background information, including loyalty score, payment method, loyalty tier, and student preferences. Include any associated behavioral notes from the achievements records and detailed class attendance information, such as GPA, semester, and year, from their transcripts.",
        "query": "```sql\nSELECT \n    s.student_id, \n    s.loyalty_score, \n    s.payment_method, \n    s.loyalty_tier, \n    s.student_preference, \n    a.achievement_description, \n    t.transcript_gpa, \n    t.transcript_semester, \n    t.transcript_year\nFROM \n    cre_Students_Information_Systems_new.Students s\nJOIN \n    cre_Students_Information_Systems_new.Achievements a \n    ON s.student_id = a.student_id\nJOIN \n    cre_Students_Information_Systems_new.Transcripts t \n    ON s.student_id = t.student_id\nWHERE \n    a.achievement_category = 'specific_behavior_category'\n    AND a.achievement_date >= '2023-01-01'::date -- Assuming last academic term starts from Jan 1, 2023\n    AND a.achievement_date <= '2023-06-30'::date -- Assuming last academic term ends on June 30, 2023\n    AND s.student_id IN (\n        SELECT \n            student_id\n        FROM \n            cre_Students_Information_Systems_new.Achievements\n        WHERE \n            achievement_category = 'specific_behavior_category'\n            AND achievement_date >= '2023-01-01'::date\n            AND achievement_date <= '2023-06-30'::date\n        GROUP BY \n            student_id\n        HAVING \n            COUNT(achievement_id) >= 3\n    )\nGROUP BY \n    s.student_id, \n    s.loyalty_score, \n    s.payment_method, \n    s.loyalty_tier, \n    s.student_preference, \n    a.achievement_description, \n    t.transcript_gpa, \n    t.transcript_semester, \n    t.transcript_year\nHAVING \n    MIN(t.transcript_gpa) > 2.5; -- Assuming consistent performance means GPA > 2.5 across all semesters\n```"
    },
    {
        "instance_id": "q_562",
        "db_id": "cre_Students_Information_Systems_new",
        "question": "Find students who have completed events with a duration greater than 0 hours exactly three times between January 1, 2023, and the current date. Provide their student ID, loyalty score, payment method, loyalty tier, and student preference. Additionally, calculate the average GPA of these students from their transcripts. Include only those students whose behavior has been consistently recorded three times within the specified period. Ensure all data pertains to the recent evaluation timeframe.",
        "query": "```sql\nSELECT \n    s.student_id, \n    s.loyalty_score, \n    s.payment_method, \n    s.loyalty_tier, \n    s.student_preference, \n    COUNT(se.event_id) AS behavior_count, \n    AVG(t.transcript_gpa) AS average_gpa\nFROM \n    cre_Students_Information_Systems_new.Students s\nLEFT JOIN \n    student_events.Student_Events se ON s.student_id = se.student_id\nLEFT JOIN \n    transcripts.Transcripts t ON s.student_id = t.student_id\nWHERE \n    se.event_participation_status = 'Completed'\n    AND se.event_duration_hours > 0\n    AND se.event_start_time >= '2023-01-01'::date\n    AND se.event_end_time <= CURRENT_DATE\nGROUP BY \n    s.student_id, s.loyalty_score, s.payment_method, s.loyalty_tier, s.student_preference\nHAVING \n    COUNT(se.event_id) = 3;\n```"
    },
    {
        "instance_id": "q_553",
        "db_id": "cre_Students_Information_Systems_new",
        "question": "Find students whose behavior segmentation consistently indicates the \"Least Severe Behavior\" across all records. Retrieve their biographical details, including loyalty score, payment method, loyalty tier, and student preferences. Additionally, provide any associated address information (province, city, district, and address type) and guardians' contact information (if available; indicate \"No Guardian Info\" if not). Also, determine whether these students have had any detentions or notable events within the last academic term (starting from January 1, 2023), indicating \"Yes\" or \"No\" accordingly. Ensure results are grouped by each student's unique identifier and related attributes.",
        "query": "```sql\nSELECT \n    s.student_id, \n    s.loyalty_score, \n    s.payment_method, \n    s.loyalty_tier, \n    s.student_preference, \n    a.address_province, \n    a.address_city, \n    a.address_district, \n    a.address_type, \n    COALESCE(g.guardian_contact_info, 'No Guardian Info') AS guardian_contact_info,\n    CASE \n        WHEN se.event_participation_status = 'Detention' AND se.event_start_time >= '2023-01-01'::date THEN 'Yes'\n        ELSE 'No'\n    END AS had_detention_or_notable_event\nFROM \n    cre_Students_Information_Systems_new.Students s\nLEFT JOIN \n    cre_Students_Information_Systems_new.Students_Addresses sa ON s.student_id = sa.student_address_id\nLEFT JOIN \n    cre_Students_Information_Systems_new.Addresses a ON sa.student_address_id = a.address_id\nLEFT JOIN \n    student_events.Student_Segmentation seg ON s.student_id = seg.student_segmentation_id\nLEFT JOIN \n    student_events.Student_Events se ON s.student_id = se.student_id\nLEFT JOIN \n    guardians g ON s.student_id = g.student_id\nWHERE \n    seg.segmentation_criteria = 'Least Severe Behavior'\nGROUP BY \n    s.student_id, \n    s.loyalty_score, \n    s.payment_method, \n    s.loyalty_tier, \n    s.student_preference, \n    a.address_province, \n    a.address_city, \n    a.address_district, \n    a.address_type, \n    g.guardian_contact_info, \n    se.event_participation_status, \n    se.event_start_time;\n```"
    },
    {
        "instance_id": "q_551",
        "db_id": "cre_Students_Information_Systems_new",
        "question": "Which students have the highest frequency of behavior records within the last academic term (from September 1, 2022, to December 31, 2022), and what are their key biographical details, including loyalty score, payment method, loyalty tier, and student preference? Additionally, calculate the average achievement score for these students and count the number of detention events during the same period. Provide the top 10 results sorted by behavior record frequency in descending order.",
        "query": "```sql\nSELECT \n    s.student_id,\n    s.loyalty_score,\n    s.payment_method,\n    s.loyalty_tier,\n    s.student_preference,\n    COUNT(se.event_id) AS event_frequency,\n    AVG(a.achievement_weighting) AS avg_achievement_score,\n    SUM(CASE WHEN se.event_participation_status = 'Detention' THEN 1 ELSE 0 END) AS detention_count\nFROM \n    cre_Students_Information_Systems_new.Students s\nLEFT JOIN \n    student_events.Student_Events se ON s.student_id = se.student_id\nLEFT JOIN \n    cre_Students_Information_Systems_new.Achievements a ON s.student_id = a.student_id\nWHERE \n    se.event_start_time >= '2022-09-01'::date -- Assuming last academic term start date\n    AND se.event_end_time <= '2022-12-31'::date -- Assuming last academic term end date\nGROUP BY \n    s.student_id, s.loyalty_score, s.payment_method, s.loyalty_tier, s.student_preference\nORDER BY \n    event_frequency DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_550",
        "db_id": "cre_Students_Information_Systems_new",
        "question": "Which event type has the highest average participation rate among students, measured as the ratio of distinct participants to distinct events? Provide the corresponding event description, the total number of unique participants, the average satisfaction score achieved by students for this event type, and the most common dropout reason among classes associated with this event type.",
        "query": "```sql\nSELECT \n    r.event_type_code AS event_type,\n    se.event_description,\n    COUNT(DISTINCT se.student_id) AS total_participants,\n    AVG(se.event_satisfaction_score) AS average_score,\n    MODE() WITHIN GROUP (ORDER BY sd.dropout_reason) AS most_common_dropout_reason\nFROM \n    student_events se\nJOIN \n    ref_event_types r ON se.event_type_code = r.event_type_code\nLEFT JOIN \n    (SELECT student_id, event_id, dropout_reason FROM student_dropout_details) sd \n    ON se.event_id = sd.event_id\nGROUP BY \n    r.event_type_code, se.event_description\nORDER BY \n    COUNT(DISTINCT se.student_id) / NULLIF(COUNT(DISTINCT se.event_id), 0) DESC\nLIMIT 1;\n```"
    },
    {
        "instance_id": "q_556",
        "db_id": "cre_Students_Information_Systems_new",
        "question": "What is the event type with the highest average participation score among students who have attended at least three events? Please provide the event type code, its description, the average participation score, and the total number of students who meet this criterion.",
        "query": "```sql\nSELECT \n    r.event_type_code AS event_type_code,\n    r.event_type_description AS event_type_description,\n    AVG(s.event_satisfaction_score) AS average_participation_score,\n    COUNT(DISTINCT s.student_id) AS total_students\nFROM \n    student_events s\nJOIN \n    ref_event_types r ON s.event_type_code = r.event_type_code\nWHERE \n    s.student_id IN (\n        SELECT \n            se.student_id\n        FROM \n            student_events se\n        GROUP BY \n            se.student_id\n        HAVING \n            COUNT(se.event_id) >= 3\n    )\nGROUP BY \n    r.event_type_code, r.event_type_description\nORDER BY \n    average_participation_score DESC\nLIMIT 1;\n```"
    },
    {
        "instance_id": "q_557",
        "db_id": "real_estate_rentals_new",
        "question": "Which cities have properties with swimming pools that are currently on the market and have been viewed by potential buyers within the last 30 days?",
        "query": "SELECT DISTINCT p.PROPERTY_ADDRESS_ID AS CITY\nFROM real_estate_rentals_new.Properties p\nJOIN real_estate_rentals_new.Property_Features pf ON p.PROPERTY_ID = pf.PROPERTY_ID\nJOIN real_estate_rentals_new.Features f ON pf.PROPERTY_ID = f.FEATURE_ID\nJOIN real_estate_rentals_new.User_Property_History uph ON p.PROPERTY_ID = uph.PROPERTY_ID\nWHERE f.FEATURE_DESCRIPTION = 'Swimming Pool'\n  AND p.PROPERTY_STATUS = 'On Market'\n  AND uph.DATESTAMP >= NOW() - INTERVAL '30 days'\n  AND uph.USER_PROPERTY_INTEREST = TRUE;"
    },
    {
        "instance_id": "q_563",
        "db_id": "real_estate_rentals_new",
        "question": "Identify the distinct cities where properties featuring swimming pools are available, ensuring that these properties have been listed on the market for less than 30 days and have garnered user interest within the past week. Additionally, filter the results to include only those properties whose prices fall within the interquartile range (25th to 75th percentile) of price-related search queries conducted by users in the same city over the past week. Prioritize the results by the earliest date the property was listed on the market.",
        "query": "```sql\nSELECT DISTINCT p.PROPERTY_ADDRESS_ID AS city\nFROM Properties p\nJOIN Property_Features pf ON p.PROPERTY_ID = pf.PROPERTY_ID\nJOIN Features f ON f.FEATURE_ID = pf.FEATURE_ID AND f.FEATURE_DESCRIPTION = 'Swimming Pool'\nJOIN User_Property_History uph ON p.PROPERTY_ID = uph.PROPERTY_ID\nJOIN Users u ON uph.USER_ID = u.USER_ID\nWHERE p.DATE_ON_MARKET >= NOW() - INTERVAL '30 days'\n  AND uph.DATESTAMP >= NOW() - INTERVAL '7 days'\n  AND uph.USER_PROPERTY_INTEREST = TRUE\n  AND p.PROPERTY_PRICE BETWEEN (\n    SELECT percentile_cont(0.25) WITHIN GROUP (ORDER BY us.SEARCH_STRING::decimal)\n    FROM User_Searches us\n    WHERE us.SEARCH_DATE >= NOW() - INTERVAL '7 days'\n      AND us.SEARCH_STRING ~ '^[\\d\\.\\,]+$'\n      AND p.PROPERTY_ADDRESS_ID = us.PROPERTY_ADDRESS_ID\n  ) AND (\n    SELECT percentile_cont(0.75) WITHIN GROUP (ORDER BY us.SEARCH_STRING::decimal)\n    FROM User_Searches us\n    WHERE us.SEARCH_DATE >= NOW() - INTERVAL '7 days'\n      AND us.SEARCH_STRING ~ '^[\\d\\.\\,]+$'\n      AND p.PROPERTY_ADDRESS_ID = us.PROPERTY_ADDRESS_ID\n  )\nORDER BY p.DATE_ON_MARKET ASC;\n```"
    },
    {
        "instance_id": "q_560",
        "db_id": "real_estate_rentals_new",
        "question": "Identify users who have expressed interest in at least two distinct properties and have conducted searches on no more than two unique dates, indicating a low level of engagement. Provide the users' last names and their unique identifiers. Prioritize users with a longer duration between their first and latest search activities, as they may represent more qualified leads.",
        "query": "```sql\nSELECT DISTINCT u.USER_ID AS unique_identifier, uh.USER_LAST_NAME AS last_name\nFROM Users u\nJOIN (\n    SELECT USER_ID, COUNT(DISTINCT PROPERTY_ID) AS property_count\n    FROM User_Property_History\n    WHERE USER_PROPERTY_INTEREST = TRUE\n    GROUP BY USER_ID\n    HAVING COUNT(DISTINCT PROPERTY_ID) >= 2\n) ip ON u.USER_ID = ip.USER_ID\nJOIN (\n    SELECT USER_ID, COUNT(DISTINCT SEARCH_DATE) AS search_occasions\n    FROM User_Searches\n    GROUP BY USER_ID\n    HAVING COUNT(DISTINCT SEARCH_DATE) <= 2\n) se ON u.USER_ID = se.USER_ID\nJOIN (\n    SELECT USER_ID, MAX(SEARCH_DATE) AS latest_search_date, MIN(SEARCH_DATE) AS first_search_date\n    FROM User_Searches\n    GROUP BY USER_ID\n) tenure ON u.USER_ID = tenure.USER_ID\nORDER BY (tenure.latest_search_date - tenure.first_search_date) DESC;\n```"
    },
    {
        "instance_id": "q_558",
        "db_id": "real_estate_rentals_new",
        "question": "Which users, identified by their user IDs and category codes (interpreted as last names), have conducted two or fewer property searches within the past year but actively manage more than one property in the system? Additionally, include users who prioritize specific property features, indicated by their association with properties that have recorded features, and have been registered on the platform for over a year.",
        "query": "```sql\nSELECT \n    u.USER_ID,\n    u.USER_CATEGORY_CODE AS last_name\nFROM \n    Users u\nLEFT JOIN \n    User_Searches us ON u.USER_ID = us.USER_SEARCH_HISTORY_ID\nLEFT JOIN \n    User_Property_History uph ON u.USER_ID = uph.USER_ID\nLEFT JOIN \n    Property_Features pf ON uph.PROPERTY_ID = pf.PROPERTY_ID\nWHERE \n    (SELECT COUNT(*) FROM User_Searches WHERE USER_SEARCH_HISTORY_ID = u.USER_ID) <= 2\n    AND (SELECT COUNT(DISTINCT PROPERTY_ID) FROM User_Property_History WHERE USER_ID = u.USER_ID) > 1\n    AND EXISTS (\n        SELECT 1 \n        FROM Property_Features \n        WHERE PROPERTY_ID IN (SELECT PROPERTY_ID FROM User_Property_History WHERE USER_ID = u.USER_ID)\n    )\n    AND DATEDIFF(CURDATE(), MIN(us.SEARCH_DATE)) OVER (PARTITION BY u.USER_ID) > 365\nGROUP BY \n    u.USER_ID, u.USER_CATEGORY_CODE;\n```"
    },
    {
        "instance_id": "q_564",
        "db_id": "cre_Doc_Workflow_new",
        "question": "What is the process outcome, process status description, and their corresponding weighted scores for the documents that have an approval status of \"Pending\" and were last accessed within the past 30 days? Additionally, include the name of the author who created each document.",
        "query": "```sql\nSELECT \n    dp.process_outcome_code AS process_outcome,\n    dp.process_status_code AS process_status_description,\n    dp.PROCESS_SEQUENCE_WEIGHT_ADJUSTED AS weighted_score,\n    d.author_name\nFROM \n    Documents_Processes dp\nJOIN \n    Documents d ON dp.process_sequence_number = d.document_id\nWHERE \n    dp.process_approval_status = 'Pending'\n    AND d.document_last_accessed >= (CURRENT_TIMESTAMP - INTERVAL '30 days');\n```"
    },
    {
        "instance_id": "q_568",
        "db_id": "advertising_agencies_new",
        "question": "Which clients have attended exactly one meeting with a positive revenue trend, are associated with an invoice, and belong to a loyalty program level indicating \"High Revenue Potential\"? Additionally, provide their unique identifier, industry classification code, and the agency they are associated with. Consider only clients whose satisfaction score exceeds the average satisfaction score for their industry segment, and ensure that these clients are enrolled in a loyalty program.",
        "query": "```sql\nSELECT \n    c.CLIENT_ID AS unique_identifier,\n    c.INDUSTRY_CLASSIFICATION_CODE,\n    a.AGENCY_ID AS associated_agency\nFROM \n    Clients c\nJOIN \n    (SELECT CLIENT_ID FROM Meetings GROUP BY CLIENT_ID HAVING COUNT(MEETING_ID) = 1 AND SUM(MEETING_OUTCOME_METRIC) > 0) m\n    ON c.CLIENT_ID = m.CLIENT_ID\nJOIN \n    Invoices i\n    ON c.CLIENT_ID = i.CLIENT_ID\nJOIN \n    Agencies a\n    ON c.AGENCY_ID = a.AGENCY_ID\nWHERE \n    c.LOYALTY_PROGRAM_REWARD_LEVEL = 'High Revenue Potential'\n    AND c.SATISFACTION_SCORE > (SELECT AVG(SATISFACTION_SCORE) FROM Clients WHERE INDUSTRY_CLASSIFICATION_CODE = c.INDUSTRY_CLASSIFICATION_CODE)\n    AND c.LOYALTY_PROGRAM_ENROLLED = TRUE;\n```"
    },
    {
        "instance_id": "q_565",
        "db_id": "advertising_agencies_new",
        "question": "Find the client IDs and their corresponding agency IDs for clients who have participated in exactly one meeting categorized as billable within the past, where these clients have an outstanding unpaid invoice beyond the due date. Additionally, include only clients with a loyalty score greater than 0.75, and ensure that the most recent billable meeting generated revenue exceeding $1,000.",
        "query": "```sql\nSELECT \n    c.CLIENT_ID,\n    a.AGENCY_ID\nFROM \n    Clients c\nJOIN \n    Staff_in_Meetings sm ON c.CLIENT_ID = sm.CLIENT_ID\nJOIN \n    Meetings m ON sm.MEETING_ID = m.MEETING_ID\nJOIN \n    Invoices i ON c.CLIENT_ID = i.CLIENT_ID\nJOIN \n    Agencies a ON c.AGENCY_ID = a.AGENCY_ID\nWHERE \n    c.LOYALTY_SCORE > 0.75\n    AND m.MEETING_PURPOSE = 'billable'\n    AND i.PAYMENT_STATUS = 'unpaid'\n    AND i.INVOICE_PAYMENT_CONFIRMATION_DATE > i.PAYMENT_DUE_DATE\n    AND sm.MEETING_OUTCOME_METRIC > 1000\n    AND (SELECT COUNT(DISTINCT sm2.MEETING_ID) \n         FROM Staff_in_Meetings sm2 \n         JOIN Meetings m2 ON sm2.MEETING_ID = m2.MEETING_ID\n         WHERE sm2.CLIENT_ID = c.CLIENT_ID \n           AND m2.MEETING_PURPOSE = 'billable') = 1\nGROUP BY \n    c.CLIENT_ID, a.AGENCY_ID;\n```"
    },
    {
        "instance_id": "q_559",
        "db_id": "advertising_agencies_new",
        "question": "Determine the start and end times of each session, identified by its session ID, along with details about the associated client profile, including their loyalty tier and score. Additionally, provide information about the team members involved in each session, specifically their staff ID and commission rate. Categorize each session's potential revenue impact as \"High Revenue Impact\" if the client is enrolled in a loyalty program and the meeting review status is positive, \"Moderate Revenue Impact\" if the review status is neutral, and \"Low Revenue Impact\" otherwise. Further, classify each session based on its contribution to client loyalty progression: label it as \"Significant Loyalty Progression\" if the client's loyalty score exceeds 0.8, \"Moderate Loyalty Progression\" if the score is between 0.5 and 0.8, and \"Minimal Loyalty Progression\" if the score is below 0.5. Present the results ordered by session start time in ascending order.",
        "query": "```sql\nSELECT \n    m.MEETING_ID AS Session_ID,\n    MIN(m.MEETING_OUTCOME_DATE) AS Session_Start_Time,\n    MAX(m.MEETING_OUTCOME_DATE) AS Session_End_Time,\n    c.CLIENT_ID AS Client_ID,\n    c.LOYALTY_TIER AS Client_Loyalty_Tier,\n    c.LOYALTY_SCORE AS Client_Loyalty_Score,\n    s.STAFF_ID AS Staff_ID,\n    s.COMMISSION_RATE AS Staff_Commission_Rate,\n    CASE \n        WHEN c.LOYALTY_PROGRAM_ENROLLED = TRUE AND m.MEETING_REVIEW_STATUS = 'Positive' THEN 'High Revenue Impact'\n        WHEN c.LOYALTY_PROGRAM_ENROLLED = TRUE AND m.MEETING_REVIEW_STATUS = 'Neutral' THEN 'Moderate Revenue Impact'\n        ELSE 'Low Revenue Impact'\n    END AS Revenue_Impact_Category,\n    CASE \n        WHEN c.LOYALTY_SCORE > 0.8 THEN 'Significant Loyalty Progression'\n        WHEN c.LOYALTY_SCORE BETWEEN 0.5 AND 0.8 THEN 'Moderate Loyalty Progression'\n        ELSE 'Minimal Loyalty Progression'\n    END AS Loyalty_Progression_Category\nFROM \n    Meetings m\nJOIN \n    Staff_in_Meetings sm ON m.MEETING_ID = sm.MEETING_ID\nJOIN \n    Clients c ON sm.MEETING_ID = c.CLIENT_ID -- Assuming a link exists between meetings and clients\nJOIN \n    Staff s ON sm.STAFF_ID = s.STAFF_ID\nGROUP BY \n    m.MEETING_ID, c.CLIENT_ID, c.LOYALTY_TIER, c.LOYALTY_SCORE, s.STAFF_ID, s.COMMISSION_RATE, c.LOYALTY_PROGRAM_ENROLLED, m.MEETING_REVIEW_STATUS\nORDER BY \n    Session_Start_Time ASC;\n```"
    },
    {
        "instance_id": "q_569",
        "db_id": "advertising_agencies_new",
        "question": "Which meetings exhibited the highest revenue variance, specifically identifying their start and end times, the associated client loyalty program reward level, and the roles of staff involved in those meetings? Additionally, provide the meeting outcome metrics and statuses to assess alignment with the revenue forecast. Were there any notable patterns in staff attendance or contribution scores for these meetings, as indicated by the available data?",
        "query": "```sql\nWITH MeetingRevenueVariance AS (\n    SELECT \n        sm.MEETING_ID,\n        m.MEETING_START_TIME,\n        m.MEETING_END_TIME,\n        c.LOYALTY_PROGRAM_REWARD_LEVEL,\n        sm.STAFF_ROLE_IN_MEETING,\n        sm.MEETING_OUTCOME_METRIC,\n        sm.MEETING_OUTCOME_STATUS,\n        (REVENUE_FORECAST - ACTUAL_REVENUE) AS REVENUE_VARIANCE\n    FROM Staff_in_Meetings sm\n    JOIN Meetings m ON sm.MEETING_ID = m.MEETING_ID\n    JOIN Clients c ON m.CLIENT_ID = c.CLIENT_ID\n    WHERE sm.MEETING_OUTCOME_METRIC IS NOT NULL\n),\nRankedMeetings AS (\n    SELECT \n        MRV.MEETING_ID,\n        MRV.MEETING_START_TIME,\n        MRV.MEETING_END_TIME,\n        MRV.LOYALTY_PROGRAM_REWARD_LEVEL,\n        MRV.STAFF_ROLE_IN_MEETING,\n        MRV.MEETING_OUTCOME_METRIC,\n        MRV.MEETING_OUTCOME_STATUS,\n        MRV.REVENUE_VARIANCE,\n        RANK() OVER (ORDER BY ABS(MRV.REVENUE_VARIANCE) DESC) AS VARIANCE_RANK\n    FROM MeetingRevenueVariance MRV\n)\nSELECT \n    RM.MEETING_ID,\n    RM.MEETING_START_TIME,\n    RM.MEETING_END_TIME,\n    RM.LOYALTY_PROGRAM_REWARD_LEVEL,\n    RM.STAFF_ROLE_IN_MEETING,\n    RM.MEETING_OUTCOME_METRIC,\n    RM.MEETING_OUTCOME_STATUS,\n    RM.REVENUE_VARIANCE\nFROM RankedMeetings RM\nWHERE RM.VARIANCE_RANK = 1;\n```"
    },
    {
        "instance_id": "q_571",
        "db_id": "product_catalog_new",
        "question": "Which catalog entries have the highest frequency of attributes across all entries, and what is their associated environmental impact score (represented by the loyalty score)? Additionally, determine the current status of these entries by identifying whether they are in a promotion phase (if they have a non-null promotion rule ID), marked as retired (if their order status is \"Retired\"), or neither, based on the latest status updates?",
        "query": "```sql\nWITH AttributeFrequency AS (\n    SELECT \n        ca.catalog_entry_id,\n        COUNT(ad.attribute_id) AS attribute_count\n    FROM \n        Catalog_Contents ca\n    LEFT JOIN \n        Attribute_Definitions ad\n    ON \n        ca.catalog_entry_id = ad.attribute_id\n    GROUP BY \n        ca.catalog_entry_id\n),\nMostCommonAttributes AS (\n    SELECT \n        catalog_entry_id\n    FROM \n        AttributeFrequency\n    WHERE \n        attribute_count = (SELECT MAX(attribute_count) FROM AttributeFrequency)\n),\nLatestStatus AS (\n    SELECT \n        catalog_entry_id,\n        order_status,\n        promotion_rule_id,\n        ROW_NUMBER() OVER (PARTITION BY catalog_entry_id ORDER BY segmentation_update_date DESC) AS rn\n    FROM \n        Catalog_Contents cc\n    INNER JOIN \n        Customers c\n    ON \n        cc.catalog_entry_id = c.customer_segmentation_id\n)\nSELECT \n    mca.catalog_entry_id,\n    cc.loyalty_score AS environmental_impact_score,\n    CASE \n        WHEN ls.promotion_rule_id IS NOT NULL THEN 'Promotion Phase'\n        WHEN cc.order_status = 'Retired' THEN 'Retired'\n        ELSE 'Not in Promotion or Retired' \n    END AS current_status\nFROM \n    MostCommonAttributes mca\nINNER JOIN \n    Catalog_Contents cc\nON \n    mca.catalog_entry_id = cc.catalog_entry_id\nLEFT JOIN \n    LatestStatus ls\nON \n    mca.catalog_entry_id = ls.catalog_entry_id AND ls.rn = 1;\n```"
    },
    {
        "instance_id": "q_561",
        "db_id": "product_catalog_new",
        "question": "Which catalog entries are currently active, belong to the product category with the most detailed subcategories, and have the highest number of associated attributes? Please provide the IDs and names of these catalog entries.",
        "query": "```sql\nSELECT \n    cc.catalog_entry_id, \n    cc.catalog_entry_name, \n    COUNT(ad.attribute_id) AS attribute_count\nFROM \n    Catalog_Contents AS cc\nLEFT JOIN \n    Attribute_Definitions AS ad\nON \n    cc.catalog_entry_id = ad.attribute_id\nWHERE \n    cc.order_status = 'active'\n    AND cc.catalog_entry_category IN (\n        SELECT \n            catalog_entry_category\n        FROM \n            Catalog_Contents\n        GROUP BY \n            catalog_entry_category\n        ORDER BY \n            COUNT(DISTINCT catalog_entry_subcategory) DESC\n        LIMIT 1\n    )\nGROUP BY \n    cc.catalog_entry_id, cc.catalog_entry_name\nORDER BY \n    attribute_count DESC\nLIMIT 1;\n```"
    },
    {
        "instance_id": "q_566",
        "db_id": "store_1_new",
        "question": "Find the names of tracks that belong to playlists categorized as \"Movies\", excluding any tracks associated with genres containing \"Music\". Consider only tracks linked to promotional rules and analyze whether these tracks have been part of any order cancellations or were approved under the order status \"Approved\" within the last quarter (starting from October 1, 2022). Results should be distinct and ordered alphabetically by track name.",
        "query": "```sql\nSELECT DISTINCT t.name AS track_name\nFROM store_1_new.tracks t\nJOIN store_1_new.albums a ON t.album_id = a.id\nJOIN store_1_new.invoices i ON i.customer_id = ANY (ARRAY(\n    SELECT customer_id \n    FROM store_1_new.orders \n    WHERE order_cancellation_reason IS NOT NULL \n       OR (order_status IN ('Approved') AND order_approval_date >= '2022-10-01'::timestamptz)\n))\nLEFT JOIN store_1_new.promotions p ON i.promotion_rule_id = p.id\nLEFT JOIN store_1_new.genres g ON t.genre_id = g.id\nWHERE g.name = 'Movies'\n  AND NOT EXISTS (\n    SELECT 1 \n    FROM store_1_new.genres g2 \n    WHERE g2.name LIKE '%Music%' AND t.genre_id = g2.id\n  )\nORDER BY t.name;\n```"
    },
    {
        "instance_id": "q_567",
        "db_id": "store_1_new",
        "question": "Which tracks are included in the \"Movies\" playlist but excluded from the \"Music\" playlist, and what are their associated promotion discounts, if any? Consider only those tracks that have been part of a sales forecast within the last 6 months, and list the results in alphabetical order by track name.",
        "query": "```sql\nSELECT \n    t.name AS track_name, \n    p.promotion_rule_description AS promotion_discount\nFROM \n    tracks AS t\nLEFT JOIN \n    albums AS a ON t.album_id = a.id\nLEFT JOIN \n    artists AS ar ON a.artist_id = ar.id\nLEFT JOIN \n    invoices AS i ON t.id = i.track_id\nLEFT JOIN \n    promotions AS p ON i.promotion_rule_id = p.id\nLEFT JOIN \n    sales_forecast AS sf ON t.id = sf.track_id\nWHERE \n    t.id IN (\n        SELECT track_id \n        FROM playlists \n        WHERE playlist_name = 'Movies'\n    )\n    AND t.id NOT IN (\n        SELECT track_id \n        FROM playlists \n        WHERE playlist_name = 'Music'\n    )\n    AND sf.forecast_date >= NOW() - INTERVAL '6 months'\n    AND sf.forecast_date <= NOW()\nORDER BY \n    t.name;\n```"
    },
    {
        "instance_id": "q_570",
        "db_id": "store_1_new",
        "question": "Identify the distinct names of tracks that belong to entertainment-related genres, have been purchased by customers with above-average loyalty scores, are associated with approved orders, and are linked to promotional rules. Ensure that only tracks appearing in both entertainment categories are included, and list the results in alphabetical order by track name.",
        "query": "```sql\nSELECT DISTINCT t.name AS item_name\nFROM store_1_new.tracks t\nJOIN store_1_new.albums a ON t.album_id = a.id\nJOIN store_1_new.invoices i ON a.id = i.customer_id\nJOIN store_1_new.promotions p ON i.promotion_rule_id = p.promotion_rule_type\nJOIN store_1_new.customers c ON i.customer_id = c.id\nWHERE c.customer_loyalty_score > (SELECT AVG(customer_loyalty_score) FROM store_1_new.customers)\n  AND t.genre_id IN (SELECT g.id FROM store_1_new.genres g WHERE g.name LIKE '%entertainment%')\n  AND i.order_status = 'approved'\nORDER BY t.name;\n```"
    },
    {
        "instance_id": "q_572",
        "db_id": "store_1_new",
        "question": "Which tracks are featured in both music and video playlists, and what are their associated promotion statuses? Additionally, identify the loyalty tiers of customers who most frequently purchase these tracks, to determine potential high-value items, ordered by the number of customer purchases in descending order.",
        "query": "```sql\nSELECT \n    t.name AS track_name, \n    p.promotion_rule_description AS promotion_status, \n    c.customer_segment AS customer_loyalty_tier\nFROM \n    tracks t\nJOIN \n    albums a ON t.album_id = a.id\nJOIN \n    artists ar ON a.artist_id = ar.id\nLEFT JOIN \n    invoices i ON t.id = i.track_id\nLEFT JOIN \n    promotions p ON i.promotion_rule_id = p.id\nJOIN \n    customers c ON i.customer_id = c.id\nWHERE \n    t.id IN (\n        SELECT track_id \n        FROM playlists \n        WHERE playlist_type = 'music'\n    )\n    AND t.id IN (\n        SELECT track_id \n        FROM playlists \n        WHERE playlist_type = 'video'\n    )\nGROUP BY \n    t.name, p.promotion_rule_description, c.customer_segment\nORDER BY \n    COUNT(i.customer_id) DESC;\n```"
    },
    {
        "instance_id": "q_573",
        "db_id": "chinook_1_new",
        "question": "Which albums, from artists who have been active for more than 10 years, include tracks that belong to both the 'Reggae' and 'Rock' genres, and what is the average popularity score of these tracks based on customer preferences?",
        "query": "```sql\nSELECT DISTINCT a.AlbumId, AVG(pt.PlaylistTrackUserRating) AS AveragePopularityScore\nFROM Album a\nJOIN Track t ON a.AlbumId = t.TrackId\nJOIN PlaylistTrack pt ON t.TrackId = pt.PlaylistTrackId\nJOIN Artist ar ON a.ArtistId = ar.ArtistId\nWHERE ar.ArtistActiveYears > 10\nAND EXISTS (\n    SELECT 1\n    FROM Track t1\n    JOIN Genre g1 ON t1.GenreId = g1.GenreId\n    WHERE t1.TrackId = t.TrackId AND g1.GenreName = 'Reggae'\n)\nAND EXISTS (\n    SELECT 1\n    FROM Track t2\n    JOIN Genre g2 ON t2.GenreId = g2.GenreId\n    WHERE t2.TrackId = t.TrackId AND g2.GenreName = 'Rock'\n)\nGROUP BY a.AlbumId;\n```"
    },
    {
        "instance_id": "q_574",
        "db_id": "chinook_1_new",
        "question": "Identify the unique identifiers and types of playlists that include both Reggae and Rock genre tracks, while ensuring that these playlists are associated with artists who have been active for more than 10 years. Additionally, consider the popularity scores of the tracks within these playlists as part of the analysis. Results should be ordered by playlist identifier.",
        "query": "```sql\nSELECT DISTINCT p.PlaylistId, p.PlaylistType \nFROM Playlist p\nJOIN PlaylistTrack pt ON p.PlaylistId = pt.PlaylistId\nJOIN Track t ON pt.PlaylistTrackId = t.TrackId\nJOIN Album a ON t.TrackId = a.AlbumId\nJOIN Artist ar ON a.AlbumId = ar.ArtistId\nWHERE EXISTS (\n    SELECT 1 \n    FROM Track t1 \n    JOIN PlaylistTrack pt1 ON t1.TrackId = pt1.PlaylistTrackId\n    WHERE t1.TrackCategory = 'Reggae' AND pt1.PlaylistId = p.PlaylistId\n)\nAND EXISTS (\n    SELECT 1 \n    FROM Track t2 \n    JOIN PlaylistTrack pt2 ON t2.TrackId = pt2.PlaylistTrackId\n    WHERE t2.TrackCategory = 'Rock' AND pt2.PlaylistId = p.PlaylistId\n)\nAND ar.ArtistActiveYears > 10\nORDER BY p.PlaylistId;\n```"
    },
    {
        "instance_id": "q_578",
        "db_id": "apartment_rentals_new",
        "question": "Which apartments, offering facilities marked as \"Highly Available\" and having received an above-average rating from previous guests, have been booked with both provisional and confirmed statuses within overlapping booking windows? Additionally, provide the average guest loyalty score, the ratio of premium membership guests, and the likelihood of these bookings being canceled based on historical guest behavior. Ensure that only apartments meeting all specified criteria are included in the results.",
        "query": "```sql\nSELECT \n    a.APT_ID,\n    a.APT_TYPE_CODE,\n    a.APT_NUMBER,\n    a.APARTMENT_RATING,\n    a.APARTMENT_AMENITIES,\n    COUNT(DISTINCT CASE WHEN ab.APT_BOOKING_APPROVAL_STATUS = 'Provisional' THEN ab.APT_BOOKING_ID END) AS Provisional_Bookings_Count,\n    COUNT(DISTINCT CASE WHEN ab.APT_BOOKING_APPROVAL_STATUS = 'Confirmed' THEN ab.APT_BOOKING_ID END) AS Confirmed_Bookings_Count,\n    AVG(g.GUEST_LOYALTY_SCORE) AS Avg_Loyalty_Score,\n    SUM(CASE WHEN g.GUEST_PREMIUM_MEMBERSHIP = TRUE THEN 1 ELSE 0 END) / COUNT(DISTINCT g.GUEST_ID) AS Premium_Membership_Ratio,\n    (SUM(CASE WHEN ab.BOOKING_CANCEL_REASON IS NOT NULL THEN 1 ELSE 0 END) * 1.0 / COUNT(DISTINCT ab.APT_BOOKING_ID)) AS Cancellation_Likelihood\nFROM \n    Apartments a\nJOIN \n    Apartment_Bookings ab ON a.APT_ID = ab.APT_ID\nJOIN \n    Guests g ON ab.GUEST_ID = g.GUEST_ID\nWHERE \n    a.APARTMENT_RATING > (SELECT AVG(APARTMENT_RATING) FROM Apartments)\n    AND 'Highly Available' = ANY(a.APARTMENT_AMENITIES)\n    AND EXISTS (\n        SELECT 1 \n        FROM Apartment_Bookings ab2 \n        WHERE ab2.APT_ID = a.APT_ID \n        AND ab2.APT_BOOKING_APPROVAL_STATUS IN ('Provisional', 'Confirmed')\n        AND ab2.CHECK_IN_TIME <= ab.CHECK_OUT_TIME \n        AND ab2.CHECK_OUT_TIME >= ab.CHECK_IN_TIME\n    )\nGROUP BY \n    a.APT_ID, a.APT_TYPE_CODE, a.APT_NUMBER, a.APARTMENT_RATING, a.APARTMENT_AMENITIES\nHAVING \n    COUNT(DISTINCT CASE WHEN ab.APT_BOOKING_APPROVAL_STATUS = 'Provisional' THEN ab.APT_BOOKING_ID END) > 0\n    AND COUNT(DISTINCT CASE WHEN ab.APT_BOOKING_APPROVAL_STATUS = 'Confirmed' THEN ab.APT_BOOKING_ID END) > 0;\n```"
    },
    {
        "instance_id": "q_575",
        "db_id": "apartment_rentals_new",
        "question": "Which apartments, identified by their apartment numbers and associated building IDs, have both provisional and confirmed bookings within the past 30 days? Additionally, include any apartments where the booking approval process was initiated but not yet completed, indicating potential delays in the approval workflow. The results should be ordered by apartment number.",
        "query": "```sql\nSELECT DISTINCT \n    a.APT_NUMBER, \n    b.BUILDING_ID AS BUILDING_NAME\nFROM \n    Apartments a\nJOIN \n    Apartment_Bookings ab1 ON a.APT_ID = ab1.APT_ID\nLEFT JOIN \n    Booking_Approval_Log bal ON ab1.APT_BOOKING_ID = bal.APT_BOOKING_ID\nWHERE \n    ab1.CHECK_IN_TIME >= CURRENT_TIMESTAMP - INTERVAL '30 days'\n    AND EXISTS (\n        SELECT 1 \n        FROM Apartment_Bookings ab2 \n        WHERE ab2.APT_ID = a.APT_ID \n            AND ab2.APT_BOOKING_APPROVAL_STATUS = 'Provisional'\n    )\n    AND EXISTS (\n        SELECT 1 \n        FROM Apartment_Bookings ab3 \n        WHERE ab3.APT_ID = a.APT_ID \n            AND ab3.APT_BOOKING_APPROVAL_STATUS = 'Confirmed'\n    )\n    OR (bal.APPROVAL_FLOW_STAGE IS NOT NULL AND bal.APPROVAL_DECISION IS NULL)\nORDER BY \n    a.APT_NUMBER;\n```"
    },
    {
        "instance_id": "q_582",
        "db_id": "apartment_rentals_new",
        "question": "Which apartment numbers have alternated between available and unavailable statuses at least once within the past 30 days, along with the exact dates of these status changes? Additionally, provide any promotions or discounts applied to bookings associated with these status changes. Classify these apartments as \"Premium\" if they include amenities such as a Gym or Pool, otherwise classify them as \"Standard.\" Ensure the results are ordered by apartment number and status date in ascending order.",
        "query": "```sql\nSELECT \n    a.APT_NUMBER,\n    vus.APT_STATUS,\n    vus.STATUS_DATE,\n    ab.PROMOTION_CODE,\n    ab.PROMOTION_DISCOUNT,\n    CASE \n        WHEN 'Gym' = ANY(a.APARTMENT_AMENITIES) OR 'Pool' = ANY(a.APARTMENT_AMENITIES) THEN 'Premium'\n        ELSE 'Standard'\n    END AS BUILDING_CLASSIFICATION\nFROM \n    Apartments a\nJOIN \n    View_Unit_Status vus ON a.APT_ID = vus.APT_ID\nLEFT JOIN \n    Apartment_Bookings ab ON vus.APT_BOOKING_ID = ab.APT_BOOKING_ID\nWHERE \n    vus.STATUS_DATE >= CURRENT_TIMESTAMP - INTERVAL '30 days'\n    AND vus.APT_STATUS IN ('Available', 'Unavailable')\nGROUP BY \n    a.APT_NUMBER, vus.APT_STATUS, vus.STATUS_DATE, ab.PROMOTION_CODE, ab.PROMOTION_DISCOUNT, a.APARTMENT_AMENITIES\nHAVING \n    COUNT(DISTINCT vus.APT_STATUS) > 1\nORDER BY \n    a.APT_NUMBER, vus.STATUS_DATE;\n```"
    },
    {
        "instance_id": "q_580",
        "db_id": "apartment_rentals_new",
        "question": "Which apartments, identified by their apartment numbers, have had both 'Available' and 'Booked' statuses on the same day at least once in the past month? Provide the specific dates when this occurred, along with any distinct maintenance activities scheduled for these apartments during the same period. Maintenance activities should be listed as a comma-separated string for each occurrence.",
        "query": "```sql\nSELECT \n    a.APT_NUMBER,\n    v.STATUS_DATE AS date_of_occurrence,\n    STRING_AGG(DISTINCT v.UNIT_STATUS_CHANGE_REASON, ', ') AS maintenance_activities\nFROM \n    Apartments a\nJOIN \n    View_Unit_Status v ON a.APT_ID = v.APT_ID\nJOIN \n    Apartment_Bookings b ON a.APT_ID = b.APT_ID\nWHERE \n    v.STATUS_DATE >= CURRENT_DATE - INTERVAL '1 MONTH'\n    AND v.STATUS_DATE < CURRENT_DATE\n    AND v.APT_STATUS IN ('Available', 'Booked')\n    AND EXISTS (\n        SELECT 1\n        FROM View_Unit_Status v2\n        WHERE v2.APT_ID = v.APT_ID\n            AND v2.STATUS_DATE = v.STATUS_DATE\n            AND v2.APT_STATUS <> v.APT_STATUS\n    )\nGROUP BY \n    a.APT_NUMBER, v.STATUS_DATE\nHAVING \n    COUNT(DISTINCT v.APT_STATUS) > 1;\n```"
    },
    {
        "instance_id": "q_576",
        "db_id": "products_for_hire_new",
        "question": "Which customers, categorized as \"High-Value Low-Risk,\" have used discounts between January 1, 2023, and March 31, 2023, while participating in multiple bookings and maintaining an active loyalty program status? Additionally, what is the total discount amount these customers have benefited from?",
        "query": "```sql\nSELECT \n    c.CUSTOMER_ID,\n    c.CUSTOMER_LOYALTY_LEVEL,\n    SUM(b.ORDER_DISCOUNT_AMOUNT) AS TOTAL_DISCOUNT_BENEFITED\nFROM \n    Customers c\nJOIN \n    Bookings b ON c.CUSTOMER_ID = b.CUSTOMER_ID\nWHERE \n    c.CUSTOMER_LOYALTY_LEVEL = 'High-Value Low-Risk'\n    AND b.BOOKING_START_DATE >= '2023-01-01'::date -- Assuming last quarter starts from Jan 1, 2023\n    AND b.BOOKING_START_DATE < '2023-04-01'::date -- Assuming last quarter ends before Apr 1, 2023\n    AND b.DISCOUNT_COUPON_USED = TRUE\n    AND c.LOYALTY_PROGRAM_ENROLLMENT_DATE IS NOT NULL\nGROUP BY \n    c.CUSTOMER_ID, c.CUSTOMER_LOYALTY_LEVEL\nHAVING \n    COUNT(DISTINCT b.BOOKING_ID) > 1;\n```"
    },
    {
        "instance_id": "q_577",
        "db_id": "cre_Doc_Control_Systems_new",
        "question": "Which shipping agent has been most frequently used for mailing documents over the past 30 days, considering only documents that reached their final approval status before being mailed? Please provide the name of the shipping agent and the total number of documents mailed.",
        "query": "```sql\nSELECT \n    rsa.shipping_agent_contact AS shipping_agent_name, \n    COUNT(dm.document_mailing_history_id) AS total_documents_mailed\nFROM \n    Documents_Mailed dm\nJOIN \n    Documents d ON dm.mailing_employee_id = d.sender_employee_id\nJOIN \n    Ref_Shipping_Agents rsa ON d.shipping_agent_code = rsa.shipping_agent_code\nWHERE \n    dm.mailing_date >= NOW() - INTERVAL '1 month'\n    AND d.document_approval_status = 'Final Approved'\nGROUP BY \n    rsa.shipping_agent_contact\nORDER BY \n    total_documents_mailed DESC\nLIMIT 1;\n```"
    },
    {
        "instance_id": "q_579",
        "db_id": "cre_Doc_Control_Systems_new",
        "question": "Find the unique IDs of all documents that are categorized as formal reports, have a status of finalized, and are awaiting distribution. Ensure these documents have not been rejected or expired within the system, have not been dispatched via any courier service, and specifically exclude those handled by the express courier service. Additionally, confirm that none of these documents were sent by employees who have previously used the express courier service for mailing.",
        "query": "```sql\nSELECT DISTINCT d.document_id\nFROM Documents AS d\nJOIN Ref_Document_Types AS rdt ON d.document_type_code = rdt.document_type_code\nLEFT JOIN Documents_Mailed AS dm ON d.document_id = dm.mailing_employee_id\nWHERE d.document_status_code = 'Finalized'\nAND d.document_approval_status = 'Awaiting Distribution'\nAND d.document_rejection_reason IS NULL\nAND d.document_status_code NOT IN ('Rejected', 'Expired')\nAND rdt.document_category = 'Formal Reports'\nAND (dm.mailing_method IS NULL OR dm.mailing_method != 'Express Courier')\nAND d.sender_employee_id NOT IN (\n    SELECT mailing_employee_id \n    FROM Documents_Mailed \n    WHERE mailing_method = 'Express Courier'\n);\n```"
    },
    {
        "instance_id": "q_581",
        "db_id": "cre_Doc_Control_Systems_new",
        "question": "Find the unique IDs of all documents that have been successfully delivered with a \"Delivered\" status, where the document type is categorized as \"Paper,\" and the shipping agent responsible for delivery offers a premium service level. Additionally, ensure these documents were approved within the past 30 days and underwent at least one revision during their drafting process, as indicated by a revision number greater than zero.",
        "query": "```sql\nSELECT DISTINCT d.document_id\nFROM Documents d\nJOIN Documents_Mailed dm ON d.document_id = dm.mailing_employee_id\nJOIN Ref_Document_Types rdt ON d.document_type_code = rdt.document_type_code\nJOIN Ref_Shipping_Agents rsa ON d.shipping_agent_code = rsa.shipping_agent_code\nWHERE d.document_approval_status = 'Approved'\nAND d.document_creation_date >= NOW() - INTERVAL '30 days'\nAND rdt.document_category = 'Paper'\nAND rsa.shipping_agent_contact_type = 'Premium'\nAND EXISTS (\n    SELECT 1\n    FROM Document_Drafts dd\n    WHERE dd.document_draft_author = d.sender_employee_id\n    AND dd.document_draft_revision_number > 0\n)\nAND dm.mailing_status = 'Delivered';\n```"
    },
    {
        "instance_id": "q_585",
        "db_id": "cre_Doc_Control_Systems_new",
        "question": "Which employee has been most actively involved in the circulation and revision of documents, measured by the total count of distinct drafts they created and distinct document copies circulated under their supervision? Please provide the employee's name along with the combined count of distinct drafts and circulated copies associated with them.",
        "query": "```sql\nSELECT \n    e.employee_name, \n    COUNT(DISTINCT dd.draft_number) + COUNT(DISTINCT ch.document_mailing_history_id) AS combined_count\nFROM \n    Employees e\nLEFT JOIN \n    Document_Drafts dd ON e.employee_role_hierarchy = dd.document_draft_author\nLEFT JOIN \n    Circulation_History ch ON e.employee_role_hierarchy = ch.sender_employee_id\nGROUP BY \n    e.employee_name\nORDER BY \n    combined_count DESC\nLIMIT 1;\n```"
    },
    {
        "instance_id": "q_586",
        "db_id": "formula_1_new",
        "question": "Identify the drivers who have participated in both the Australian Grand Prix and Chinese Grand Prix races, providing their IDs and forenames. Analyze the performance trends of these drivers during these specific races by calculating their average lap time improvements across seasons and evaluating their pit stop strategies. Include only drivers whose technical skill level (measured by driver_performance_score) is above the overall average and who have competed in at least one race characterized by challenging technical difficulty. Ensure that each selected driver has valid records for both races mentioned, and present the results grouped by individual driver with their respective pit stop strategies.",
        "query": "```sql\nSELECT \n    d.driverId,\n    d.driver_forename,\n    AVG(lt.lap_duration_seconds) - LAG(AVG(lt.lap_duration_seconds)) OVER (PARTITION BY d.driverId ORDER BY r.race_season) AS lap_time_improvement,\n    ps.pit_stop_strategy\nFROM \n    drivers d\nJOIN \n    results res ON d.driverId = res.driverId\nJOIN \n    races r ON res.raceId = r.raceId\nLEFT JOIN \n    lapTimes lt ON r.raceId = lt.raceId AND res.resultId = lt.resultId\nLEFT JOIN \n    pitStops ps ON res.resultId = ps.resultId\nWHERE \n    r.race_analysis_table IN ('Australian Grand Prix', 'Chinese Grand Prix')\n    AND d.driver_performance_score > (SELECT AVG(driver_performance_score) FROM drivers)\n    AND EXISTS (\n        SELECT 1 \n        FROM races r2 \n        JOIN results res2 ON r2.raceId = res2.raceId \n        WHERE res2.driverId = d.driverId \n        AND r2.race_analysis_metrics LIKE '%challenging technical difficulty%'\n    )\nGROUP BY \n    d.driverId, d.driver_forename, ps.pit_stop_strategy\nHAVING \n    COUNT(DISTINCT CASE WHEN r.race_analysis_table = 'Australian Grand Prix' THEN r.raceId END) > 0\n    AND COUNT(DISTINCT CASE WHEN r.race_analysis_table = 'Chinese Grand Prix' THEN r.raceId END) > 0;\n```"
    },
    {
        "instance_id": "q_583",
        "db_id": "formula_1_new",
        "question": "Which drivers, identified by their ID and first name, have competed in both the Australian Grand Prix and the Chinese Grand Prix, with a technical skill level above the average of all drivers, and have participated in at least one pit stop during these races? Additionally, what were their respective performance scores in the Australian Grand Prix and the Chinese Grand Prix?",
        "query": "SELECT DISTINCT d.driverId, d.driver_first_name, r1.performance_score AS australian_gp_performance_score, r2.performance_score AS chinese_gp_performance_score\nFROM drivers d\nJOIN results r1 ON d.driverId = r1.driverId\nJOIN races ra1 ON r1.raceId = ra1.raceId AND ra1.circuit_country = 'Australia'\nJOIN results r2 ON d.driverId = r2.driverId\nJOIN races ra2 ON r2.raceId = ra2.raceId AND ra2.circuit_country = 'China'\nJOIN pitStops ps ON d.driverId = ps.driverId AND (ps.raceId = ra1.raceId OR ps.raceId = ra2.raceId)\nWHERE d.driver_technical_skill_level > (SELECT AVG(driver_technical_skill_level) FROM drivers)\nAND EXISTS (\n    SELECT 1\n    FROM results r\n    JOIN races ra ON r.raceId = ra.raceId\n    WHERE r.driverId = d.driverId\n    AND ra.circuit_country IN ('Australia', 'China')\n);"
    },
    {
        "instance_id": "q_584",
        "db_id": "formula_1_new",
        "question": "Which drivers, identified by their driver ID and nationality, have competed in races held in Australia but have never participated in races held in China, based on their most recent race statistics? Additionally, consider only those drivers who have been active in the sport for at least five years and are part of teams that have won a championship in the past ten years. What is the average performance score for these drivers?",
        "query": "```sql\nSELECT \n    d.driverId AS driver_id,\n    d.driver_nationality AS driver_nationality,\n    AVG(d.driver_performance_score) AS average_performance_score\nFROM \n    drivers d\nJOIN \n    results r ON d.driverId = r.driverId\nJOIN \n    races ra ON r.raceId = ra.raceId\nJOIN \n    constructors c ON d.DRIVER_CURRENT_TEAM = c.CONSTRUCTOR_TEAM_LEADER\nWHERE \n    ra.circuit_country = 'Australia'\n    AND NOT EXISTS (\n        SELECT 1 \n        FROM results r2 \n        JOIN races ra2 ON r2.raceId = ra2.raceId \n        WHERE ra2.circuit_country = 'China' AND r2.driverId = d.driverId\n    )\n    AND d.driver_experience_years >= 5\n    AND c.constructor_last_championship_win_year >= YEAR(NOW()) - 10\nGROUP BY \n    d.driverId, d.driver_nationality;\n```"
    },
    {
        "instance_id": "q_589",
        "db_id": "formula_1_new",
        "question": "Which drivers participated in the Australian Grand Prix but did not participate in the Chinese Grand Prix, and what were their performance trends during those races? Additionally, identify any drivers who showed at least a 10% improvement in either their average lap times or their average pit stop durations in the Australian Grand Prix compared to their average performance across all other races in the same season.",
        "query": "```sql\nWITH AustralianGP AS (\n    SELECT DISTINCT r.driverId\n    FROM results r\n    JOIN races ra ON r.raceId = ra.raceId\n    WHERE ra.circuit_country = 'Australia'\n),\nChineseGP AS (\n    SELECT DISTINCT r.driverId\n    FROM results r\n    JOIN races ra ON r.raceId = ra.raceId\n    WHERE ra.circuit_country = 'China'\n),\nDriversInAustralianNotInChinese AS (\n    SELECT a.driverId\n    FROM AustralianGP a\n    LEFT JOIN ChineseGP c ON a.driverId = c.driverId\n    WHERE c.driverId IS NULL\n),\nPerformanceTrends AS (\n    SELECT d.driverId, d.driver_performance_trend\n    FROM drivers d\n    WHERE d.driverId IN (SELECT driverId FROM DriversInAustralianNotInChinese)\n),\nSignificantImprovement AS (\n    SELECT r.driverId\n    FROM results r\n    JOIN races ra ON r.raceId = ra.raceId\n    JOIN (\n        SELECT driverId, AVG(pit_stop_duration_seconds) AS avg_pit_stop_duration, AVG(RESULT_LAP_TIMES[1]) AS avg_lap_time\n        FROM results res\n        JOIN pitStops ps ON res.resultId = ps.stop\n        GROUP BY driverId\n    ) avg_perf ON r.driverId = avg_perf.driverId\n    WHERE ra.circuit_country = 'Australia'\n      AND ((SELECT AVG(ps.pit_stop_duration_seconds) \n           FROM pitStops ps \n           WHERE ps.stop = r.resultId) < avg_perf.avg_pit_stop_duration * 0.9\n         OR (SELECT AVG(lt.lap_duration_seconds) \n             FROM lapTimes lt \n             WHERE lt.lap = r.resultId) < avg_perf.avg_lap_time * 0.9)\n)\nSELECT d.driverId, pt.driver_performance_trend\nFROM PerformanceTrends pt\nJOIN drivers d ON pt.driverId = d.driverId\nWHERE d.driverId IN (SELECT driverId FROM SignificantImprovement);\n```"
    },
    {
        "instance_id": "q_596",
        "db_id": "formula_1_new",
        "question": "Which drivers, identified by their unique ID and nationality (as a proxy for name), have either performed more than 8 strategic pit stops or finished in the top 10 positions in over 5 races? Additionally, analyze how these drivers' performance trends correlate with their current team's technical skill level (represented by constructor ranking) and past race records (indicated by the last championship win year). Include only drivers who meet at least one of the specified conditions.",
        "query": "```sql\nSELECT \n    d.driverId,\n    d.driver_nationality AS driver_name, -- Assuming driver_nationality is used as a proxy for name; adjust if actual name fields exist\n    COUNT(DISTINCT ps.stop) AS total_pit_stops,\n    SUM(CASE WHEN ps.pit_stop_strategy ->> 'reason' = 'strategic' THEN 1 ELSE 0 END) AS strategic_pit_stops,\n    COUNT(DISTINCT CASE WHEN r.result_status = 'Finished' AND r.result_grid_position <= 10 THEN res.raceId END) AS top_10_finishes,\n    c.constructor_ranking AS team_technical_skill_level,\n    c.constructor_last_championship_win_year AS team_past_race_records\nFROM \n    drivers d\nLEFT JOIN \n    pitStops ps ON d.driverId = ps.driverId\nLEFT JOIN \n    results res ON d.driverId = res.driverId\nLEFT JOIN \n    races r ON res.raceId = r.raceId\nLEFT JOIN \n    constructors c ON d.DRIVER_CURRENT_TEAM = c.CONSTRUCTOR_TEAM_LEADER\nWHERE \n    (SUM(CASE WHEN ps.pit_stop_strategy ->> 'reason' = 'strategic' THEN 1 ELSE 0 END) > 8 \n     OR COUNT(DISTINCT CASE WHEN r.result_status = 'Finished' AND r.result_grid_position <= 10 THEN res.raceId END) > 5)\nGROUP BY \n    d.driverId, d.driver_nationality, c.constructor_ranking, c.constructor_last_championship_win_year\nHAVING \n    COUNT(DISTINCT ps.stop) > 8 \n    OR COUNT(DISTINCT CASE WHEN r.result_status = 'Finished' AND r.result_grid_position <= 10 THEN res.raceId END) > 5;\n```"
    },
    {
        "instance_id": "q_593",
        "db_id": "formula_1_new",
        "question": "Which drivers, identified by their IDs and current teams, have either completed more than 8 laps with lap times shorter than the average lap time under optimal weather conditions or achieved a qualifying position within the top 5 in any race? Additionally, consider only those drivers who are currently contracted with a team (i.e., their contract end year is after the current year) that has a technical team leader, a team size greater than 50 members, and a ranking of 10 or higher.",
        "query": "```sql\nSELECT DISTINCT d.driverId, d.DRIVER_CURRENT_TEAM\nFROM drivers d\nJOIN results r ON d.driverId = r.resultId\nJOIN qualifying q ON d.driverId = q.qualifyId\nWHERE d.DRIVER_CONTRACT_END_YEAR > YEAR(CURDATE()) \n  AND d.DRIVER_CURRENT_TEAM IN (\n    SELECT CONSTRUCTOR_TEAM_LEADER \n    FROM constructors \n    WHERE CONSTRUCTOR_TEAM_SIZE > 50 AND constructor_ranking <= 10\n  )\n  AND (\n    (\n      SELECT COUNT(*) \n      FROM lapTimes lt \n      WHERE lt.lap_performance_metrics ->> 'driverId' = CAST(d.driverId AS VARCHAR) \n        AND lt.lap_weather_condition = 'Optimal' \n        AND lt.lap_duration_seconds < (\n          SELECT AVG(lt2.lap_duration_seconds) \n          FROM lapTimes lt2 \n          WHERE lt2.lap_weather_condition = 'Optimal'\n        )\n    ) > 8 \n    OR q.qualifying_position <= 5\n  );\n```"
    },
    {
        "instance_id": "q_587",
        "db_id": "formula_1_new",
        "question": "Which drivers, identified by their last names and unique IDs, have experienced exactly 11 pit stops across all races and have finished in the top 10 positions in more than 5 race outcomes, while also possessing a technical skill level rated above the average performance score of all drivers?",
        "query": "```sql\nSELECT \n    d.driverId AS driver_unique_id,\n    SUBSTRING(d.DRIVER_CURRENT_TEAM, POSITION(' ' IN d.DRIVER_CURRENT_TEAM) + 1) AS driver_last_name\nFROM \n    drivers d\nJOIN \n    results r ON d.driverId = r.result_driverId\nJOIN \n    pitStops p ON d.driverId = p.pitstop_driverId\nWHERE \n    d.driver_performance_score > (SELECT AVG(driver_performance_score) FROM drivers)\nGROUP BY \n    d.driverId, driver_last_name\nHAVING \n    COUNT(DISTINCT CASE WHEN p.stop IS NOT NULL THEN p.stop END) = 11\n    AND SUM(CASE WHEN r.result_positionOrder <= 10 THEN 1 ELSE 0 END) > 5;\n```"
    },
    {
        "instance_id": "q_594",
        "db_id": "formula_1_new",
        "question": "Which drivers, identified by their surnames and IDs, had exactly 11 pit stops in races where they finished in the top 10 positions, participated in more than half of the total races in any season, and have been with their current team for at least two years? Only consider seasons where at least one race was held.",
        "query": "```sql\nSELECT \n    d.driverId, \n    SUBSTRING(d.DRIVER_CURRENT_TEAM FROM '(?<=\\s)\\w+$') AS driver_surname\nFROM \n    drivers d\nJOIN \n    results r ON d.driverId = r.driverId\nJOIN \n    races ra ON r.raceId = ra.raceId\nJOIN \n    pitStops ps ON d.driverId = ps.driverId AND r.raceId = ps.raceId\nWHERE \n    r.result_grid_position <= 10\n    AND d.DRIVER_CONTRACT_END_YEAR - EXTRACT(YEAR FROM CURRENT_DATE) >= 2\n    AND ra.race_season IN (\n        SELECT race_season \n        FROM races \n        GROUP BY race_season \n        HAVING COUNT(DISTINCT raceId) > 0\n    )\nGROUP BY \n    d.driverId, driver_surname\nHAVING \n    COUNT(DISTINCT ps.stop) = 11\n    AND COUNT(DISTINCT r.raceId) > (SELECT COUNT(DISTINCT raceId) / 2 FROM races);\n```"
    },
    {
        "instance_id": "q_595",
        "db_id": "customer_deliveries_new",
        "question": "Identify customers who have not placed any orders in the past 90 days and whose delivery addresses are not located in provinces typically associated with high delivery volumes, such as California. Provide their loyalty scores and segmentation categories to evaluate potential customer retention strategies. Ensure that customers without any order history are included by considering those whose most recent order timestamp is earlier than 90 days from the current date or who have no orders at all.",
        "query": "```sql\nSELECT \n    c.CUSTOMER_ID,\n    c.LOYALTY_SCORE,\n    c.SEGMENTATION_CATEGORY\nFROM \n    Customers c\nLEFT JOIN \n    Actual_Orders ao ON c.CUSTOMER_ID = ao.ACTUAL_ORDER_ID\nWHERE \n    ao.ACTUAL_ORDER_ID IS NULL\n    AND c.DELIVERY_ADDRESS_PROVINCE NOT IN ('California')\n    AND (CURRENT_TIMESTAMP - INTERVAL '90 DAYS') > COALESCE((SELECT MAX(ao1.ORDER_PAYMENT_TIMESTAMP) FROM Actual_Orders ao1 WHERE ao1.ACTUAL_ORDER_ID = c.CUSTOMER_ID), '1970-01-01'::timestamp);\n```"
    },
    {
        "instance_id": "q_592",
        "db_id": "assets_maintenance_new",
        "question": "Identify assets that are currently under active maintenance contracts and have experienced faults with a resolution time of less than 2 hours. Provide the asset ID, a detailed description of the fault, and the average response time from engineers for these faults. Additionally, include the probability of part failure for any parts associated with these assets, where the probability is defined as 1.0 if the part is unavailable and 0.0 if the part is available. Ensure results are grouped by asset ID, fault description, and part availability status.",
        "query": "```sql\nSELECT \n    a.ASSET_ID,\n    fl.FAULT_DESCRIPTION AS detailed_description,\n    AVG(fl.FAULT_RESOLUTION_TIME) AS average_response_time,\n    CASE \n        WHEN p.PART_AVAILABILITY = FALSE THEN 1.0 \n        ELSE 0.0 \n    END AS probability_of_part_failure\nFROM \n    Assets a\nJOIN \n    Maintenance_Contracts mc ON a.ASSET_MAINTENANCE_HISTORY_ID = mc.MAINTENANCE_CONTRACT_ID\nJOIN \n    Fault_Log fl ON a.ASSET_ID = fl.FAULT_LOG_ENTRY_ID\nLEFT JOIN \n    Parts p ON a.ASSET_ID = p.PART_ID\nWHERE \n    mc.CONTRACT_RENEWAL_STATUS = 'Active'\n    AND fl.FAULT_RESOLUTION_TIME < 120\nGROUP BY \n    a.ASSET_ID, fl.FAULT_DESCRIPTION, p.PART_AVAILABILITY;\n```"
    },
    {
        "instance_id": "q_588",
        "db_id": "assets_maintenance_new",
        "question": "Identify third-party companies that maintain a service level agreement with a status of \"active\" or \"pending renewal,\" where the companies either have at least two engineers specialized in critical asset maintenance or manage assets with a status indicating \"high failure probability.\" Provide the unique company ID and contact person name for these companies.",
        "query": "```sql\nSELECT DISTINCT \n    tc.COMPANY_ID, \n    tc.COMPANY_CONTACT_PERSON AS COMPANY_NAME\nFROM \n    Third_Party_Companies tc\nJOIN \n    Maintenance_Contracts mc ON tc.COMPANY_ID = mc.MAINTENANCE_CONTRACT_ID\nJOIN \n    Maintenance_Engineers me ON tc.COMPANY_ID = me.FAULT_LOG_ENGINEER_ID\nJOIN \n    Skills s ON me.ENGINEER_ID = s.SKILL_ID\nJOIN \n    Assets a ON mc.MAINTENANCE_CONTRACT_ID = a.ASSET_MAINTENANCE_HISTORY_ID\nWHERE \n    mc.CONTRACT_RENEWAL_STATUS IN ('active', 'pending renewal')\n    AND (\n        -- Condition 1: At least two engineers specialized in critical asset maintenance\n        tc.COMPANY_ID IN (\n            SELECT COMPANY_ID\n            FROM Maintenance_Engineers me\n            JOIN Skills s ON me.ENGINEER_ID = s.SKILL_ID\n            WHERE s.SKILL_AREA = 'critical asset maintenance'\n            GROUP BY COMPANY_ID\n            HAVING COUNT(DISTINCT me.ENGINEER_ID) >= 2\n        )\n        OR \n        -- Condition 2: Manage assets with a high failure probability\n        a.ASSET_STATUS = 'high failure probability'\n    );\n```"
    },
    {
        "instance_id": "q_590",
        "db_id": "assets_maintenance_new",
        "question": "What is the type of third-party company (based on service level) that has the highest average fault resolution time for assets covered by active maintenance contracts, where the percentage of assets under the contract exceeds 80%?",
        "query": "```sql\nSELECT tc.COMPANY_SERVICE_LEVEL AS company_type, AVG(fl.FAULT_RESOLUTION_TIME) AS avg_response_time\nFROM Fault_Log fl\nJOIN Maintenance_Contracts mc ON fl.FAULT_LOG_ENGINEER_ID = mc.MAINTENANCE_CONTRACT_ID\nJOIN Third_Party_Companies tc ON mc.MAINTENANCE_CONTRACT_ID = tc.COMPANY_REFERENCE_ID\nWHERE mc.CONTRACT_RENEWAL_STATUS = 'Active'\n  AND (mc.CONTRACT_END_DATE - mc.CONTRACT_START_DATE) * (SELECT COUNT(*) FROM Assets WHERE ASSET_MAINTENANCE_HISTORY_ID = mc.MAINTENANCE_CONTRACT_ID) / (SELECT COUNT(*) FROM Assets) > 0.8\nGROUP BY tc.COMPANY_SERVICE_LEVEL\nORDER BY avg_response_time DESC\nLIMIT 1;\n```"
    },
    {
        "instance_id": "q_591",
        "db_id": "college_1_new",
        "question": "Which professors in the history department have not been assigned as instructors for any classes and have a research publication count lower than the average publication count of all professors in the history department?",
        "query": "```sql\nSELECT e.EMP_NUM, d.DEPT_CODE\nFROM EMPLOYEE e\nJOIN DEPARTMENT d ON e.EMPLOYEE_DEPARTMENT = d.DEPT_CODE\nLEFT JOIN CLASS c ON e.EMP_NUM = c.CLASS_INSTRUCTOR\nWHERE d.DEPARTMENT_RESEARCH_FOCUS_AREA = 'History'\n  AND c.CLASS_INSTRUCTOR IS NULL\n  AND (\n    SELECT COUNT(*)\n    FROM RESEARCH_PUBLICATION rp\n    WHERE rp.PUBLICATION_AUTHOR_EMP_NUM = e.EMP_NUM\n  ) < (\n    SELECT AVG(publication_count)\n    FROM (\n      SELECT COUNT(*) AS publication_count\n      FROM RESEARCH_PUBLICATION rp\n      INNER JOIN EMPLOYEE emp ON rp.PUBLICATION_AUTHOR_EMP_NUM = emp.EMP_NUM\n      INNER JOIN DEPARTMENT dept ON emp.EMPLOYEE_DEPARTMENT = dept.DEPT_CODE\n      WHERE dept.DEPARTMENT_RESEARCH_FOCUS_AREA = 'History'\n      GROUP BY emp.EMP_NUM\n    ) subquery\n  )\nGROUP BY e.EMP_NUM, d.DEPT_CODE;\n``` \n\n### 注意：\n上述SQL假设存在一个名为`RESEARCH_PUBLICATION`的表来记录研究发表情况。如果该表不存在或名称不同，请根据实际数据库结构调整。"
    },
    {
        "instance_id": "q_599",
        "db_id": "college_1_new",
        "question": "Which history professors, who are not currently teaching any classes and belong to the department with the highest research funding in the past five years, have received the maximum departmental research ranking? Additionally, provide their first names, considering only those whose research focus aligns with the department's strategic priorities in history.",
        "query": "```sql\nSELECT DISTINCT e.EMP_NUM, INITCAP(SPLIT_PART(e.EMP_NUM::text, ' ', 1)) AS first_name\nFROM EMPLOYEE e\nJOIN DEPARTMENT d ON e.EMPLOYEE_DEPARTMENT = d.DEPT_CODE\nLEFT JOIN CLASS c ON e.EMP_NUM::text = c.CLASS_INSTRUCTOR\nWHERE d.DEPARTMENT_RESEARCH_FOCUS_AREA ILIKE '%history%'\n  AND c.CLASS_CODE IS NULL\n  AND e.EMP_NUM IN (\n    SELECT emp_num\n    FROM EMPLOYEE\n    WHERE EMPLOYEE_HIRE_DATE >= CURRENT_DATE - INTERVAL '5 years'\n      AND EMPLOYEE_DEPARTMENT_RANK = (\n        SELECT MAX(EMPLOYEE_DEPARTMENT_RANK)\n        FROM EMPLOYEE\n        WHERE EMPLOYEE_DEPARTMENT = d.DEPT_CODE\n      )\n  )\n  AND d.DEPARTMENT_RESEARCH_GRANTS = (\n    SELECT MAX(DEPARTMENT_RESEARCH_GRANTS)\n    FROM DEPARTMENT\n    WHERE DEPARTMENT_RESEARCH_FOCUS_AREA ILIKE '%history%'\n  );\n```"
    },
    {
        "instance_id": "q_608",
        "db_id": "college_1_new",
        "question": "Which students are currently enrolled in courses offered by the Accounting and Computer Information Systems departments within the last two years, and what is their likelihood of graduating within the next two years based on their current academic progress (class year and GPA)? Provide the student ID, current GPA, class year, and current enrollment term along with the graduation likelihood categorized as High, Moderate, Low, or Unknown based on the following criteria:  \n- Senior (Class Year 4) with GPA >= 3.0: High Likelihood  \n- Senior (Class Year 4) with GPA between 2.5 and 2.9: Moderate Likelihood  \n- Senior (Class Year 4) with GPA < 2.5: Low Likelihood  \n- Junior (Class Year 3) with GPA >= 3.0: Moderate Likelihood  \n- All other cases: Unknown Likelihood  \n\nSort the results by student ID and the most recent enrollment term.",
        "query": "```sql\nSELECT \n    s.STU_NUM AS Student_ID,\n    s.STUDENT_GPA AS Current_GPA,\n    s.STUDENT_CLASS_YEAR AS Class_Year,\n    e.ENROLL_TERM AS Current_Term,\n    d.DEPT_CODE AS Department_Code,\n    CASE \n        WHEN s.STUDENT_CLASS_YEAR = 4 AND s.STUDENT_GPA >= 3.0 THEN 'High'\n        WHEN s.STUDENT_CLASS_YEAR = 4 AND s.STUDENT_GPA BETWEEN 2.5 AND 2.9 THEN 'Moderate'\n        WHEN s.STUDENT_CLASS_YEAR = 4 AND s.STUDENT_GPA < 2.5 THEN 'Low'\n        WHEN s.STUDENT_CLASS_YEAR = 3 AND s.STUDENT_GPA >= 3.0 THEN 'Moderate'\n        ELSE 'Unknown'\n    END AS Graduation_Likelihood\nFROM \n    STUDENT s\nJOIN \n    ENROLL e ON s.STU_NUM = e.STU_NUM\nJOIN \n    CLASS c ON e.CLASS_CODE = c.CLASS_CODE\nJOIN \n    DEPARTMENT d ON c.CLASS_INSTRUCTOR = d.DEPARTMENT_HEAD\nWHERE \n    d.DEPT_CODE IN ('Accounting', 'Computer Information Systems')\n    AND e.ENROLL_STATUS = 'Enrolled'\n    AND e.ENROLL_DATE >= CURRENT_DATE - INTERVAL '2 YEARS'\nORDER BY \n    s.STU_NUM, e.ENROLL_TERM DESC;\n```"
    },
    {
        "instance_id": "q_602",
        "db_id": "college_1_new",
        "question": "Which students are enrolled in courses categorized under Accounting or Computer Information Systems since January 1, 2023, and what is their academic progress indicated by their GPA and class year? Additionally, provide details on their current enrollment status and progress. Identify the course credit and category for each enrolled course. If available, include the name of the department head and their research focus area as potential advisor feedback. Are there any patterns in the enrollment trends or advisor characteristics that might suggest a higher likelihood of these students changing their major? List the results in descending order of student GPA and ascending order of student ID.",
        "query": "```sql\nSELECT \n    s.STU_NUM AS Student_ID,\n    s.STUDENT_GPA AS GPA,\n    s.STUDENT_CLASS_YEAR AS Class_Year,\n    e.ENROLL_STATUS AS Enrollment_Status,\n    e.ENROLLMENT_STATUS AS Enrollment_Progress,\n    c.COURSE_CREDIT AS Course_Credit,\n    c.COURSE_CATEGORY AS Course_Category,\n    d.DEPARTMENT_HEAD AS Advisor_Name,\n    d.DEPARTMENT_RESEARCH_FOCUS_AREA AS Advisor_Research_Focus\nFROM \n    STUDENT s\nJOIN \n    ENROLL e ON s.STU_NUM = e.STU_NUM\nJOIN \n    COURSE c ON e.CRS_CODE = c.CRS_CODE\nLEFT JOIN \n    DEPARTMENT d ON s.EMPLOYEE_DEPARTMENT = d.DEPT_CODE\nWHERE \n    c.COURSE_CATEGORY IN ('Accounting', 'Computer Information Systems')\n    AND e.ENROLL_DATE >= '2023-01-01'::date -- Assuming current year for trends\n    AND s.STUDENT_ADMISSION_DATE IS NOT NULL\nORDER BY \n    s.STUDENT_GPA DESC, \n    s.STU_NUM ASC;\n```"
    },
    {
        "instance_id": "q_597",
        "db_id": "college_1_new",
        "question": "Which instructors, along with their department office locations, are associated with teaching courses that have a positive course description or have defined prerequisites, while also having a non-zero class capacity? Additionally, provide the course credit, category, and description, as well as the department's research focus area. Only include courses that are linked to active classes based on the class code association.",
        "query": "```sql\nSELECT \n    c.CLASS_INSTRUCTOR AS instructor,\n    d.DEPT_OFFICE_LOCATION AS office_location,\n    co.COURSE_CREDIT AS course_credit,\n    co.COURSE_CATEGORY AS course_category,\n    co.COURSE_DESCRIPTION AS course_description,\n    d.DEPARTMENT_RESEARCH_FOCUS_AREA AS department_research_focus_area\nFROM \n    CLASS c\nJOIN \n    COURSE co ON c.CLASS_CODE = co.CRS_CODE\nJOIN \n    DEPARTMENT d ON co.COURSE_CREDIT > 0 AND d.DEPT_CODE = c.CLASS_INSTRUCTOR\nWHERE \n    c.CLASS_CAPACITY > 0 \n    AND (co.COURSE_PREREQUISITE IS NOT NULL OR co.COURSE_DESCRIPTION LIKE '%positive%')\nGROUP BY \n    c.CLASS_INSTRUCTOR, d.DEPT_OFFICE_LOCATION, co.COURSE_CREDIT, co.COURSE_CATEGORY, co.COURSE_DESCRIPTION, d.DEPARTMENT_RESEARCH_FOCUS_AREA;\n```"
    },
    {
        "instance_id": "q_604",
        "db_id": "college_1_new",
        "question": "Which instructors, along with their department office locations and the departments they belong to, are associated with courses that have experienced a change in enrollment status within the past semester? Additionally, provide the descriptions of these courses and indicate whether the courses are currently active (\"Yes\" if the enrollment status is \"Active\", otherwise \"No\"). The results should be ordered by the instructors' names in ascending order.",
        "query": "```sql\nSELECT DISTINCT \n    c.CLASS_INSTRUCTOR AS instructor,\n    d.DEPT_OFFICE_LOCATION AS office_location,\n    e.EMPLOYEE_DEPARTMENT AS department,\n    cr.COURSE_DESCRIPTION AS course_description,\n    CASE WHEN en.ENROLLMENT_STATUS = 'Active' THEN 'Yes' ELSE 'No' END AS is_course_active\nFROM \n    CLASS c\nJOIN \n    COURSE cr ON c.CLASS_CODE = cr.CRS_CODE\nJOIN \n    DEPARTMENT d ON cr.COURSE_CATEGORY = d.DEPT_CODE\nJOIN \n    EMPLOYEE e ON c.CLASS_INSTRUCTOR = e.EMP_NUM\nJOIN \n    ENROLL en ON c.CLASS_CODE = en.ENROLL_TERM\nWHERE \n    en.ENROLL_DATE >= CURRENT_DATE - INTERVAL '1 semester'\n    AND en.ENROLL_STATUS <> LAG(en.ENROLL_STATUS) OVER (PARTITION BY en.ENROLL_TERM ORDER BY en.ENROLL_DATE)\nORDER BY \n    instructor ASC;\n```"
    },
    {
        "instance_id": "q_600",
        "db_id": "college_1_new",
        "question": "Which professors, identified by their unique professor ID and department, within the Computer Information Systems (CIS) department, have a teaching load consisting of distinct courses they are currently assigned to teach, and what is their highest course credit which can be considered as their highest degree? Additionally, compare each professor's teaching load to the average teaching load of all professors in the same department. Furthermore, analyze the enrollment trends for the courses taught by these professors by providing the enrollment count per term, specifying the term and the corresponding professor ID. Only include active professors with a department rank greater than 0.",
        "query": "```sql\nWITH Professor_Teaching_Load AS (\n    SELECT \n        E.EMP_NUM AS PROFESSOR_ID,\n        MAX(C.COURSE_CREDIT) AS HIGHEST_COURSE_CREDIT,\n        COUNT(DISTINCT C.CRS_CODE) AS TEACHING_LOAD,\n        AVG(COUNT(DISTINCT C.CRS_CODE)) OVER () AS AVERAGE_TEACHING_LOAD\n    FROM \n        EMPLOYEE E\n    JOIN \n        CLASS CL ON E.EMP_NUM = CL.CLASS_INSTRUCTOR\n    JOIN \n        COURSE C ON CL.CLASS_CODE = C.CRS_CODE\n    JOIN \n        DEPARTMENT D ON E.EMPLOYEE_DEPARTMENT = D.DEPT_CODE\n    WHERE \n        D.DEPT_CODE = 'CIS' -- Computer Information Systems department\n        AND E.EMPLOYEE_DEPARTMENT_RANK > 0 -- Assuming active professors have a rank > 0\n    GROUP BY \n        E.EMP_NUM\n),\nClass_Enrollment_Trends AS (\n    SELECT \n        CL.CLASS_INSTRUCTOR AS PROFESSOR_ID,\n        EN.ENROLL_TERM,\n        COUNT(*) AS ENROLLMENT_COUNT\n    FROM \n        CLASS CL\n    JOIN \n        ENROLL EN ON CL.CLASS_CODE = EN.ENROLL_TERM\n    JOIN \n        COURSE C ON CL.CLASS_CODE = C.CRS_CODE\n    JOIN \n        DEPARTMENT D ON C.COURSE_CATEGORY = D.DEPT_CODE\n    WHERE \n        D.DEPT_CODE = 'CIS'\n    GROUP BY \n        CL.CLASS_INSTRUCTOR, EN.ENROLL_TERM\n)\nSELECT \n    PT.PROFESSOR_ID,\n    E.EMPLOYEE_DEPARTMENT AS DEPARTMENT,\n    PT.HIGHEST_COURSE_CREDIT AS HIGHEST_DEGREE,\n    PT.TEACHING_LOAD,\n    PT.AVERAGE_TEACHING_LOAD,\n    CET.ENROLLMENT_COUNT,\n    CET.ENROLL_TERM\nFROM \n    Professor_Teaching_Load PT\nJOIN \n    EMPLOYEE E ON PT.PROFESSOR_ID = E.EMP_NUM\nLEFT JOIN \n    Class_Enrollment_Trends CET ON PT.PROFESSOR_ID = CET.PROFESSOR_ID\nWHERE \n    E.EMPLOYEE_DEPARTMENT = 'CIS';\n```"
    },
    {
        "instance_id": "q_598",
        "db_id": "college_1_new",
        "question": "What are the unique professor IDs and their highest degrees, for professors who teach research courses in departments where the department's graduation rate is above the college-wide average graduation rate and the department offers research opportunities?",
        "query": "```sql\nSELECT DISTINCT e.EMP_NUM AS PROFESSOR_ID, s.STUDENT_ACADEMIC_CONCENTRATION AS HIGHEST_DEGREE\nFROM EMPLOYEE e\nJOIN DEPARTMENT d ON e.EMPLOYEE_DEPARTMENT = d.DEPT_CODE\nJOIN CLASS c ON e.EMP_NUM = c.CLASS_INSTRUCTOR\nJOIN COURSE cr ON c.CLASS_CODE = cr.CRS_CODE\nJOIN (\n    SELECT DEPT_CODE, AVG(DEPARTMENT_GRADUATION_RATE) AS AVERAGE_GRADUATION_RATE\n    FROM DEPARTMENT\n    GROUP BY DEPT_CODE\n) avg_grad_rate ON d.DEPT_CODE = avg_grad_rate.DEPT_CODE\nWHERE d.DEPARTMENT_RESEARCH_FOCUS_AREA IS NOT NULL\nAND d.DEPARTMENT_GRADUATION_RATE > (SELECT AVG(DEPARTMENT_GRADUATION_RATE) FROM DEPARTMENT)\nAND cr.COURSE_CATEGORY = 'Research';\n```"
    },
    {
        "instance_id": "q_606",
        "db_id": "hr_1_new",
        "question": "Which employees, along with their full names and the countries they are currently working in, have a loyalty score higher than the average loyalty score of all employees and belong to a department that has undergone restructuring within the last year? Additionally, provide the reason for their hiring and the tier of their loyalty program, ordered by their loyalty score in descending order.",
        "query": "```sql\nSELECT \n    e.EMPLOYEE_ID, \n    e.FIRST_NAME || ' ' || e.LAST_NAME AS FULL_NAME, \n    c.COUNTRY_NAME, \n    e.LOYALTY_SCORE, \n    e.EMPLOYEE_RECRUITMENT_SOURCE AS REASON_FOR_HIRING, \n    e.LOYALTY_PROGRAM_TIER\nFROM \n    employees e\nJOIN \n    departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID\nJOIN \n    locations l ON d.LOCATION_ID = l.LOCATION_ID\nJOIN \n    countries c ON l.COUNTRY_ID = c.COUNTRY_ID\nWHERE \n    e.LOYALTY_SCORE > (SELECT AVG(LOYALTY_SCORE) FROM employees)\n    AND d.DEPARTMENT_ID IN (\n        SELECT DISTINCT jh.DEPARTMENT_ID \n        FROM job_history jh \n        WHERE jh.END_DATE >= CURRENT_TIMESTAMP - INTERVAL '1 YEAR'\n          AND jh.JOB_HISTORY_REASON LIKE '%restructuring%'\n    )\nORDER BY \n    e.LOYALTY_SCORE DESC;\n```"
    },
    {
        "instance_id": "q_605",
        "db_id": "hr_1_new",
        "question": "Which employees have a loyalty score higher than the average loyalty score of all employees, and what are their full names and employee IDs? Additionally, include only those employees whose recruitment source mentions \"department restructuring\" and provide the names of the countries where they are located. Results should be ordered by employee ID.",
        "query": "```sql\nSELECT \n    e.EMPLOYEE_ID,\n    e.FIRST_NAME || ' ' || e.LAST_NAME AS FULL_NAME,\n    c.COUNTRY_NAME\nFROM \n    employees e\nJOIN \n    departments d ON e.DEPARTMENT_ID = d.DPARTMENT_ID\nJOIN \n    locations l ON d.LOCATION_ID = l.LOCATION_ID\nJOIN \n    countries c ON l.COUNTRY_ID = c.COUNTRY_ID\nWHERE \n    e.LOYALTY_SCORE > (SELECT AVG(LOYALTY_SCORE) FROM employees)\n    AND e.EMPLOYEE_RECRUITMENT_SOURCE LIKE '%department restructuring%'\nORDER BY \n    e.EMPLOYEE_ID;\n```"
    },
    {
        "instance_id": "q_601",
        "db_id": "insurance_policies_new",
        "question": "Which claims resulted in more than two settlements, had the highest total claimed amount, or had a settlement amount exceeding the claimed amount? For each claim, include the unique claim identifier and the date the claim was filed. Additionally, for claims where the settlement amount exceeded the claimed amount, provide the reason for the adjustment if available. Ensure that all claims are evaluated based on their associated payments and settlements, using the payment reference ID to link claims with their respective payments and settlements.",
        "query": "```sql\nWITH Claim_Settlement_Count AS (\n    SELECT \n        c.Claim_ID, \n        COUNT(s.Settlement_ID) AS Settlement_Count,\n        MAX(s.Settlement_Amount) AS Max_Settlement_Amount,\n        c.Incident_Date\n    FROM \n        Claims c\n    LEFT JOIN \n        Settlements s ON c.Claim_ID = s.Payment_Reference_ID\n    GROUP BY \n        c.Claim_ID, c.Incident_Date\n),\nClaim_Payment_Details AS (\n    SELECT \n        c.Claim_ID, \n        c.Incident_Date,\n        SUM(p.Payment_Amount) AS Total_Claimed_Amount\n    FROM \n        Claims c\n    INNER JOIN \n        Payments p ON c.Claim_ID = p.Payment_Reference_ID\n    GROUP BY \n        c.Claim_ID, c.Incident_Date\n)\nSELECT \n    DISTINCT csc.Claim_ID, \n    csc.Incident_Date,\n    CASE \n        WHEN csc.Settlement_Count > 2 THEN 'More than two settlements'\n        WHEN cpd.Total_Claimed_Amount = (SELECT MAX(Total_Claimed_Amount) FROM Claim_Payment_Details) THEN 'Highest claim amount'\n        WHEN s.Settlement_Amount > cpd.Total_Claimed_Amount THEN 'Settlement exceeds claim amount'\n        ELSE NULL \n    END AS Claim_Note,\n    s.Settlement_Reason AS Adjustment_Reason\nFROM \n    Claim_Settlement_Count csc\nLEFT JOIN \n    Claim_Payment_Details cpd ON csc.Claim_ID = cpd.Claim_ID\nLEFT JOIN \n    Settlements s ON csc.Claim_ID = s.Payment_Reference_ID\nWHERE \n    csc.Settlement_Count > 2 \n    OR cpd.Total_Claimed_Amount = (SELECT MAX(Total_Claimed_Amount) FROM Claim_Payment_Details)\n    OR s.Settlement_Amount > cpd.Total_Claimed_Amount;\n```"
    },
    {
        "instance_id": "q_603",
        "db_id": "insurance_policies_new",
        "question": "Identify all claims that either resulted in more than one settlement or had the highest claim amount within their respective incident categories. For each of these claims, provide the unique claim identifier and the date the claim was submitted. Additionally, indicate whether each claim was associated with a dispute (mark as \"Yes\" if the claim type is \"Disputed\", otherwise \"No\"), and specify the channel through which the claim was submitted (as indicated by the claim type).",
        "query": "```sql\nWITH Claim_Settlement_Count AS (\n    SELECT \n        c.Claim_ID, \n        COUNT(s.Settlement_ID) AS Settlement_Count\n    FROM \n        Claims c\n    LEFT JOIN Settlements s ON c.Claim_ID = s.Payment_Reference_ID\n    GROUP BY c.Claim_ID\n),\nCategory_Max_Claim AS (\n    SELECT \n        Incident_Category, \n        MAX(p.Payment_Amount) AS Max_Claim_Amount\n    FROM \n        Claims c\n    INNER JOIN Payments p ON c.Claim_ID = p.Payment_Reference_ID\n    GROUP BY Incident_Category\n),\nFiltered_Claims AS (\n    SELECT \n        c.Claim_ID, \n        c.Incident_Date AS Submission_Date, \n        sc.Settlement_Count,\n        cmc.Max_Claim_Amount,\n        CASE WHEN c.Claim_Type = 'Disputed' THEN 'Yes' ELSE 'No' END AS Is_Disputed,\n        c.Claim_Type AS Submission_Channel\n    FROM \n        Claims c\n    INNER JOIN Claim_Settlement_Count sc ON c.Claim_ID = sc.Claim_ID\n    LEFT JOIN Category_Max_Claim cmc ON c.Incident_Category = cmc.Incident_Category\n    INNER JOIN Payments p ON c.Claim_ID = p.Payment_Reference_ID\n    WHERE \n        sc.Settlement_Count > 1 \n        OR p.Payment_Amount = cmc.Max_Claim_Amount\n)\nSELECT \n    Claim_ID, \n    Submission_Date, \n    Is_Disputed, \n    Submission_Channel\nFROM \n    Filtered_Claims;\n```"
    },
    {
        "instance_id": "q_609",
        "db_id": "insurance_policies_new",
        "question": "Find customers who have had at least two active policies renewed in the past year and have not been involved in any claim-related activities during this period. Provide their detailed information, including customer segment, loyalty scores, age, gender, and full contact details (address lines, postal code, city, state, country), to evaluate potential retention strategies. Ensure that \"active policies\" are defined as policies with a positive term length and a renewal date within the last year. Confirm that \"no claim-related activities\" means the customer has no associated claims recorded in the Claims table.",
        "query": "```sql\nSELECT \n    cp.Customer_ID,\n    cp.Customer_Segment,\n    cp.Customer_Loyalty_Score,\n    cp.Customer_Age,\n    cp.Customer_Gender,\n    cp.Customer_Address_Line1,\n    cp.Customer_Address_Line2,\n    cp.Customer_Postal_Code,\n    cp.Customer_City,\n    cp.Customer_State,\n    cp.Customer_Country\nFROM \n    Customer_Policies AS cp\nLEFT JOIN Claims AS c ON cp.Customer_ID = c.Customer_ID\nWHERE \n    cp.Policy_Renewal_Date >= CURRENT_DATE - INTERVAL '1 YEAR'\n    AND cp.Policy_Term > 0\nGROUP BY \n    cp.Customer_ID,\n    cp.Customer_Segment,\n    cp.Customer_Loyalty_Score,\n    cp.Customer_Age,\n    cp.Customer_Gender,\n    cp.Customer_Address_Line1,\n    cp.Customer_Address_Line2,\n    cp.Customer_Postal_Code,\n    cp.Customer_City,\n    cp.Customer_State,\n    cp.Customer_Country\nHAVING \n    COUNT(DISTINCT cp.Policy_ID) >= 2\n    AND SUM(CASE WHEN c.Claim_ID IS NOT NULL THEN 1 ELSE 0 END) = 0;\n```"
    },
    {
        "instance_id": "q_607",
        "db_id": "insurance_policies_new",
        "question": "Find customers who have held more than one active policy in the past year and have not been involved in any claim-related activities during the same period. Provide their detailed profiles, including customer segment, loyalty score, policy renewal date, incident history, age, gender, and full address information. Assess their loyalty scores in descending order to identify potential retention opportunities. Ensure that only customers with no associated claims in the past year are included, based on the incident date.",
        "query": "```sql\nSELECT \n    cp.Customer_ID, \n    cp.Customer_Segment, \n    cp.Customer_Loyalty_Score, \n    cp.Policy_Renewal_Date, \n    cp.Customer_Incident_History, \n    cp.Customer_Age, \n    cp.Customer_Gender, \n    cp.Customer_Address_Line1, \n    cp.Customer_Address_Line2, \n    cp.Customer_Postal_Code, \n    cp.Customer_City, \n    cp.Customer_State, \n    cp.Customer_Country\nFROM \n    Customer_Policies AS cp\nLEFT JOIN \n    Claims AS c\nON \n    cp.Customer_ID = c.Claim_Adjuster AND c.Incident_Date >= CURRENT_DATE - INTERVAL '1 year'\nWHERE \n    c.Claim_ID IS NULL\nAND \n    cp.Customer_ID IN (\n        SELECT \n            Customer_ID\n        FROM \n            Customer_Policies\n        WHERE \n            Policy_Expiry_Date >= CURRENT_DATE - INTERVAL '1 year'\n        GROUP BY \n            Customer_ID\n        HAVING \n            COUNT(DISTINCT Policy_ID) > 1\n    )\nORDER BY \n    cp.Customer_Loyalty_Score DESC;\n```"
    },
    {
        "instance_id": "q_611",
        "db_id": "hospital_1_new",
        "question": "Identify physicians who are actively involved in both surgical and psychiatric care, considering their primary affiliation status and patient interaction records within the past six months. Additionally, determine whether these physicians have demonstrated an increasing trend in patient satisfaction during this period, based on appointment feedback containing the keyword \"satisfied\". Ensure that only physicians with both specialties are included in the final result.",
        "query": "```sql\nWITH ActivePhysicians AS (\n    SELECT DISTINCT p.EmployeeID, p.Name, p.Position, p.SSN, p.PhysicianSpecialty, p.PhysicianAvailability\n    FROM Physician p\n    JOIN Affiliated_With aw ON p.EmployeeID = aw.Physician\n    JOIN Appointment a ON p.EmployeeID = a.Patient\n    WHERE aw.PrimaryAffiliation = TRUE\n      AND p.PhysicianAvailability = TRUE\n      AND p.PhysicianSpecialty IN ('Surgery', 'Psychiatry')\n      AND a.Start >= NOW() - INTERVAL '6 months'\n),\nSatisfactionTrend AS (\n    SELECT ap.EmployeeID, ap.Name,\n           CASE WHEN COUNT(CASE WHEN a.AppointmentFeedback LIKE '%satisfied%' THEN 1 END) > COUNT(CASE WHEN a.AppointmentFeedback NOT LIKE '%satisfied%' THEN 1 END) THEN 'Increasing Satisfaction'\n                ELSE 'Not Increasing Satisfaction' END AS SatisfactionTrend\n    FROM ActivePhysicians ap\n    JOIN Appointment a ON ap.EmployeeID = a.Patient\n    WHERE a.Start >= NOW() - INTERVAL '6 months'\n    GROUP BY ap.EmployeeID, ap.Name\n)\nSELECT DISTINCT sp.EmployeeID, sp.Name, sp.Position, sp.SSN, sp.PhysicianSpecialty, st.SatisfactionTrend\nFROM SatisfactionTrend st\nJOIN Physician sp ON st.EmployeeID = sp.EmployeeID\nWHERE sp.PhysicianSpecialty IN ('Surgery', 'Psychiatry')\nGROUP BY sp.EmployeeID, sp.Name, sp.Position, sp.SSN, sp.PhysicianSpecialty, st.SatisfactionTrend\nHAVING COUNT(DISTINCT sp.PhysicianSpecialty) = 2;\n```"
    },
    {
        "instance_id": "q_612",
        "db_id": "hospital_1_new",
        "question": "Which doctors are affiliated with both the Surgery and Psychiatry departments, and based on their primary affiliation status, what is their likelihood of being assigned to emergency cases? Please provide the names of these doctors, indicating a \"High\" likelihood for those with primary affiliation and a \"Low\" likelihood for those without.",
        "query": "```sql\nSELECT DISTINCT p.Name AS DoctorName, \n       CASE \n           WHEN aw.PrimaryAffiliation = TRUE THEN 'High'\n           ELSE 'Low'\n       END AS EmergencyAssignmentLikelihood\nFROM Physician p\nJOIN Affiliated_With aw ON p.EmployeeID = aw.Physician\nJOIN Department d ON aw.Department = d.DepartmentID\nWHERE (d.Name = 'Surgery' OR d.Name = 'Psychiatry')\nGROUP BY p.EmployeeID, p.Name, aw.PrimaryAffiliation\nHAVING COUNT(DISTINCT d.Name) = 2;\n```"
    },
    {
        "instance_id": "q_614",
        "db_id": "tracking_grants_for_research_new",
        "question": "Identify projects that have achieved both intellectual property milestones and publication milestones, with a project review score of 8.0 or higher, and where detailed staff contributions are documented. Include the project's funding source, technology used, and any associated risk notes. Consider only projects where the grant renewal status is either pending or approved within the last six months.",
        "query": "```sql\nSELECT \n    p.PROJECT_ID,\n    p.PROJECT_FUNDING_SOURCE AS funding_source,\n    p.PROJECT_TECHNOLOGY_USED AS technology_used,\n    p.PROJECT_RISK_NOTES AS risk_notes,\n    pr.STAFF_PROJECT_CONTRIBUTION AS staff_contributions\nFROM \n    Projects p\nJOIN \n    Project_Staff pr ON p.PROJECT_ID = pr.PROJECT_ID\nJOIN \n    Grants g ON p.PROJECT_ID = g.GRANT_ID\nWHERE \n    p.PROJECT_MILESTONE_IP = 'Achieved' \n    AND p.PROJECT_MILESTONE_PUBLICATION = 'Achieved'\n    AND p.PROJECT_REVIEW_SCORE >= 8.0\n    AND g.GRANT_STATUS IN ('Pending Renewal', 'Renewal Approved')\n    AND g.GRANT_REVIEW_DATE >= CURRENT_DATE - INTERVAL '6 months'\n    AND pr.STAFF_PROJECT_CONTRIBUTION IS NOT NULL;\n```"
    },
    {
        "instance_id": "q_615",
        "db_id": "tracking_grants_for_research_new",
        "question": "Which projects have successfully completed with a non-negative budget variance and delivered both intellectual property and research publications within the last six months? For these projects, provide details including project phases (start and end dates), funding sources, review impact scores, as well as the roles and departments of associated staff members. Additionally, include the type, title, and creation date of the related documents, sorted by the project review score in descending order and document creation date in descending order.",
        "query": "```sql\nSELECT \n    p.PROJECT_ID,\n    p.PROJECT_START_DATE,\n    p.PROJECT_END_DATE,\n    p.PROJECT_GRANT_STATUS,\n    p.PROJECT_FUNDING_SOURCE,\n    p.PROJECT_REVIEW_SCORE,\n    ps.STAFF_PROJECT_ROLE,\n    ps.STAFF_DEPARTMENT,\n    ps.STAFF_HIRE_DATE,\n    ps.STAFF_PROJECT_CONTRIBUTION,\n    d.DOCUMENT_TYPE_CODE,\n    d.DOCUMENT_TITLE,\n    d.DOCUMENT_CREATION_DATE\nFROM \n    Projects p\nJOIN \n    Documents d ON p.PROJECT_ID = d.DOCUMENT_GRANT_ID\nJOIN \n    Project_Staff ps ON p.PROJECT_ID = ps.STAFF_ID\nWHERE \n    d.DOCUMENT_TYPE_CODE IN ('Intellectual_Property', 'Research_Publication')\n    AND d.DOCUMENT_CREATION_DATE >= CURRENT_DATE - INTERVAL '6 months'\n    AND p.PROJECT_GRANT_STATUS = 'Completed'\n    AND p.PROJECT_BUDGET_VARIANCE >= 0\nORDER BY \n    p.PROJECT_REVIEW_SCORE DESC, d.DOCUMENT_CREATION_DATE DESC;\n```"
    },
    {
        "instance_id": "q_617",
        "db_id": "tracking_grants_for_research_new",
        "question": "What are the types of organizations that have submitted documents associated with grant amounts exceeding $5,000 within the last 90 days, and what is the average review duration (in days) for these documents? Additionally, indicate whether any of these organization types have had a document titled as a \"renewal reminder\" sent in the past 30 days, specifying \"Yes\" or \"No\" for each organization type.",
        "query": "```sql\nWITH RelevantDocuments AS (\n    SELECT \n        d.DOCUMENT_GRANT_ID,\n        o.ORGANISATION_TYPE,\n        g.GRANT_REVIEW_DATE,\n        g.GRANT_AMOUNT,\n        g.GRANT_REVIEW_DURATION_DAYS\n    FROM \n        Documents d\n    JOIN \n        Grants g ON d.DOCUMENT_GRANT_ID = g.GRANT_ID\n    JOIN \n        Organisations o ON d.DOCUMENT_GRANT_ID = o.ORGANISATION_ID\n    WHERE \n        g.GRANT_AMOUNT > 5000\n        AND d.DOCUMENT_CREATION_DATE >= CURRENT_DATE - INTERVAL '90 DAY'\n), \nAverageLatency AS (\n    SELECT \n        ORGANISATION_TYPE,\n        AVG(GRANT_REVIEW_DURATION_DAYS) AS AVERAGE_LATENCY\n    FROM \n        RelevantDocuments\n    GROUP BY \n        ORGANISATION_TYPE\n), \nRenewalReminders AS (\n    SELECT DISTINCT \n        ORGANISATION_TYPE\n    FROM \n        Documents d\n    JOIN \n        Organisations o ON d.DOCUMENT_GRANT_ID = o.ORGANISATION_ID\n    WHERE \n        d.DOCUMENT_TITLE ILIKE '%renewal reminder%'\n        AND d.DOCUMENT_CREATION_DATE >= CURRENT_DATE - INTERVAL '30 DAY'\n)\nSELECT \n    al.ORGANISATION_TYPE,\n    al.AVERAGE_LATENCY,\n    CASE WHEN rr.ORGANISATION_TYPE IS NOT NULL THEN 'Yes' ELSE 'No' END AS HAS_RENEWAL_REMINDER\nFROM \n    AverageLatency al\nLEFT JOIN \n    RenewalReminders rr ON al.ORGANISATION_TYPE = rr.ORGANISATION_TYPE;\n```"
    },
    {
        "instance_id": "q_619",
        "db_id": "tracking_grants_for_research_new",
        "question": "Which Grant_Submission documents were created for grants with values exceeding 5000, including their titles and creation dates? Additionally, provide the likelihood of these grants being renewed based on their current status (Active or not) and the associated project review scores (categorized as High for scores ≥ 80, Medium for scores between 50 and 79, Low for scores < 50, and Not Eligible for inactive grants). Include the response latency for these grants, indicating whether an alert has been triggered (defined as a review duration exceeding 30 days). Sort the results by document creation date in descending order.",
        "query": "```sql\nSELECT \n    d.DOCUMENT_TITLE, \n    d.DOCUMENT_CREATION_DATE, \n    g.GRANT_ID, \n    g.GRANT_STATUS, \n    g.GRANT_AMOUNT, \n    p.PROJECT_REVIEW_SCORE, \n    g.GRANT_REVIEW_DURATION_DAYS,\n    CASE \n        WHEN g.GRANT_STATUS = 'Active' AND p.PROJECT_REVIEW_SCORE >= 80 THEN 'High'\n        WHEN g.GRANT_STATUS = 'Active' AND p.PROJECT_REVIEW_SCORE BETWEEN 50 AND 79 THEN 'Medium'\n        WHEN g.GRANT_STATUS = 'Active' AND p.PROJECT_REVIEW_SCORE < 50 THEN 'Low'\n        ELSE 'Not Eligible'\n    END AS RENEWAL_LIKELIHOOD,\n    CASE \n        WHEN g.GRANT_REVIEW_DURATION_DAYS > 30 THEN 'Alert Triggered'\n        ELSE 'No Alert'\n    END AS ALERT_STATUS\nFROM \n    Documents d\nJOIN \n    Grants g ON d.DOCUMENT_GRANT_ID = g.GRANT_ID\nLEFT JOIN \n    Projects p ON g.GRANT_ID = p.PROJECT_FUNDING_SOURCE\nWHERE \n    g.GRANT_AMOUNT > 5000\n    AND d.DOCUMENT_TYPE_CODE = 'Grant_Submission'\nORDER BY \n    d.DOCUMENT_CREATION_DATE DESC;\n```"
    },
    {
        "instance_id": "q_610",
        "db_id": "tracking_grants_for_research_new",
        "question": "What are the task details, task IDs, and project IDs for tasks associated with projects that either have a status description mentioning \"high complexity\" or involve multiple staff members with distinct roles within the same project?",
        "query": "```sql\nSELECT \n    p.PROJECT_ID, \n    t.TASK_ID, \n    t.TASK_DETAILS\nFROM \n    Projects p\nJOIN \n    Tasks t ON p.PROJECT_ID = t.PROJECT_ID\nLEFT JOIN \n    Project_Staff ps ON p.PROJECT_ID = ps.STAFF_PROJECT_ID\nLEFT JOIN \n    Staff_Roles sr ON ps.STAFF_ROLE_CODE = sr.ROLE_CODE\nWHERE \n    (p.PROJECT_STATUS_DETAILS ILIKE '%high complexity%' \n     OR (ps.STAFF_ID IS NOT NULL AND sr.STAFF_ROLE_DESCRIPTION IS NOT NULL))\nGROUP BY \n    p.PROJECT_ID, t.TASK_ID, t.TASK_DETAILS\nHAVING \n    COUNT(DISTINCT sr.STAFF_ROLE_DESCRIPTION) > 1;\n```"
    },
    {
        "instance_id": "q_616",
        "db_id": "tracking_grants_for_research_new",
        "question": "Which projects that started within the last six months have tasks with detailed descriptions related to \"objectives\" or \"milestones\"? Provide the associated task IDs, project IDs, and completion statuses. Additionally, include projects where the number of distinct budget statuses exceeds two.",
        "query": "```sql\nSELECT DISTINCT \n    p.PROJECT_ID, \n    d.DOCUMENT_GRANT_ID AS TASK_ID, \n    p.PROJECT_GRANT_STATUS AS COMPLETION_STATUS\nFROM \n    Projects p\nJOIN \n    Documents d ON p.PROJECT_ID = d.DOCUMENT_GRANT_ID\nWHERE \n    (d.DOCUMENT_KEYWORDS @> ARRAY['objectives'] OR d.DOCUMENT_KEYWORDS @> ARRAY['milestones'])\n    OR p.PROJECT_ID IN (\n        SELECT PROJECT_ID\n        FROM Projects\n        GROUP BY PROJECT_ID\n        HAVING COUNT(DISTINCT PROJECT_BUDGET_STATUS) > 2\n    )\n    AND p.PROJECT_START_DATE >= CURRENT_DATE - INTERVAL '6 months'\nORDER BY \n    p.PROJECT_ID;\n```"
    },
    {
        "instance_id": "q_613",
        "db_id": "tracking_grants_for_research_new",
        "question": "Which grants have both 'Regular' and 'Initial Application' documents submitted, and what is the earliest submission date among these documents for each grant? Additionally, provide the current renewal status of each grant and indicate whether a 'Renewal Reminder' document has been sent by checking for the existence of such a document type.",
        "query": "```sql\nSELECT \n    g.GRANT_ID,\n    g.GRANT_STATUS AS grant_renewal_status,\n    CASE \n        WHEN MAX(d2.DOCUMENT_CREATION_DATE) IS NOT NULL THEN 'Yes' \n        ELSE 'No' \n    END AS renewal_reminder_sent,\n    MIN(d1.DOCUMENT_CREATION_DATE) AS earliest_document_date\nFROM \n    Grants g\nJOIN \n    Documents d1 ON g.GRANT_ID = d1.DOCUMENT_GRANT_ID\nLEFT JOIN \n    Documents d2 ON g.GRANT_ID = d2.DOCUMENT_GRANT_ID AND d2.DOCUMENT_TYPE_CODE = 'Renewal Reminder'\nWHERE \n    EXISTS (\n        SELECT 1 \n        FROM Documents d3 \n        WHERE d3.DOCUMENT_GRANT_ID = g.GRANT_ID AND d3.DOCUMENT_TYPE_CODE = 'Regular'\n    )\n    AND EXISTS (\n        SELECT 1 \n        FROM Documents d4 \n        WHERE d4.DOCUMENT_GRANT_ID = g.GRANT_ID AND d4.DOCUMENT_TYPE_CODE = 'Initial Application'\n    )\nGROUP BY \n    g.GRANT_ID, g.GRANT_STATUS;\n```"
    },
    {
        "instance_id": "q_625",
        "db_id": "tracking_grants_for_research_new",
        "question": "Which grants, described in documents as Regular or Initial Applications, have project start dates that fall within the organization's fiscal year quarter from January 1, 2023, to March 31, 2023? Additionally, include only those grants where the response latency alert was triggered (indicated by a review duration exceeding 30 days) and the grant renewal reminder was sent during the same fiscal quarter. Provide the grant IDs, document titles, and corresponding project start dates.",
        "query": "```sql\nSELECT \n    g.GRANT_ID, \n    d.DOCUMENT_TITLE, \n    p.PROJECT_START_DATE\nFROM \n    Grants g\nJOIN \n    Documents d ON g.GRANT_ID = d.DOCUMENT_GRANT_ID\nJOIN \n    Projects p ON g.GRANT_ID = p.PROJECT_ID\nWHERE \n    d.DOCUMENT_TYPE_CODE IN ('Regular', 'Initial')\n    AND p.PROJECT_START_DATE >= '2023-01-01'::DATE -- Assuming fiscal year starts on Jan 1\n    AND p.PROJECT_START_DATE <= '2023-03-31'::DATE -- Last quarter end date\n    AND g.GRANT_REVIEW_DURATION_DAYS > 30 -- Response latency alert triggered (assuming >30 days)\n    AND g.GRANT_REVIEW_DATE >= '2023-01-01'::DATE -- Grant renewal reminder sent in last quarter\n    AND g.GRANT_REVIEW_DATE <= '2023-03-31'::DATE;\n```"
    },
    {
        "instance_id": "q_618",
        "db_id": "document_management_new",
        "question": "What is the average number of access times for documents in the \"Acknowledgement\" category, where the documents have been reviewed within the past 30 days and contain at least one section linked to an image?",
        "query": "```sql\nSELECT AVG(Document_Access_Count) AS Average_Access_Count\nFROM (\n    SELECT d.DOCUMENT_CODE, COUNT(da.ACCESS_TIMESTAMP) AS Document_Access_Count\n    FROM Documents d\n    INNER JOIN Functional_Areas fa ON d.DOCUMENT_CODE = fa.FUNCTIONAL_AREA_CODE\n    INNER JOIN Document_Sections ds ON d.DOCUMENT_CODE = ds.SECTION_PARENT_ID\n    INNER JOIN Images i ON ds.SECTION_CONTENT_HASH = i.IMAGE_ID\n    INNER JOIN Document_Access da ON d.DOCUMENT_CODE = da.DOCUMENT_CODE\n    WHERE fa.FUNCTIONAL_AREA_CATEGORY = 'Acknowledgement'\n      AND d.LAST_MODIFIED_TIMESTAMP >= NOW() - INTERVAL '30 days'\n      AND d.DOCUMENT_STATUS = 'Reviewed'\n    GROUP BY d.DOCUMENT_CODE\n    HAVING COUNT(i.IMAGE_ID) > 0\n) AS Document_Stats;\n```"
    },
    {
        "instance_id": "q_621",
        "db_id": "document_management_new",
        "question": "Which documents, categorized under the functional area \"Acknowledgement,\" have had the highest access frequency over the past 30 days, and what is the average access count for these documents? Consider only those documents that were modified or reviewed at least once during this period, as indicated by a non-null LAST_MODIFIED_TIMESTAMP.",
        "query": "```sql\nWITH Document_Access AS (\n    SELECT \n        d.DOCUMENT_CODE,\n        COUNT(*) AS Access_Count\n    FROM \n        Documents d\n    JOIN \n        Functional_Areas fa ON d.DOCUMENT_CODE = fa.FUNCTIONAL_AREA_CODE\n    WHERE \n        fa.FUNCTIONAL_AREA_DESCRIPTION = 'Acknowledgement'\n        AND d.LAST_MODIFIED_TIMESTAMP >= NOW() - INTERVAL '1 month'\n        AND d.LAST_MODIFIED_TIMESTAMP IS NOT NULL\n    GROUP BY \n        d.DOCUMENT_CODE\n),\nMax_Access_Documents AS (\n    SELECT \n        da.DOCUMENT_CODE,\n        da.Access_Count\n    FROM \n        Document_Access da\n    WHERE \n        da.Access_Count = (SELECT MAX(Access_Count) FROM Document_Access)\n)\nSELECT \n    mad.DOCUMENT_CODE,\n    AVG(mad.Access_Count) AS Average_Access_Count\nFROM \n    Max_Access_Documents mad\nGROUP BY \n    mad.DOCUMENT_CODE;\n```"
    },
    {
        "instance_id": "q_620",
        "db_id": "customers_campaigns_ecommerce_new",
        "question": "Which customers, identified by their payment method and loyalty tier, have both placed successful orders and been targeted by mailshot campaigns without responding within the last quarter? Additionally, provide the names of their customer segments at the time of segment assignment, the date of segment assignment, the count of their successful orders, and the count of non-responsive mailshot campaigns during this period.",
        "query": "```sql\nWITH LastQuarter AS (\n    SELECT \n        CUSTOMER_ID,\n        PAYMENT_METHOD,\n        LOYALTY_TIER,\n        CUSTOMER_SEGMENT_ID,\n        SEGMENT_ASSIGNED_DATE\n    FROM Customers c\n    WHERE SEGMENT_ASSIGNED_DATE >= DATEADD(QUARTER, -1, GETDATE())\n),\nSuccessfulOrders AS (\n    SELECT DISTINCT \n        o.ORDER_ID,\n        o.PAYMENT_METHOD,\n        c.CUSTOMER_ID\n    FROM Customer_Orders o\n    JOIN Customers c ON o.ORDER_APPROVAL_USER_ID = c.CUSTOMER_ID\n    WHERE o.ORDER_STATUS = 'successful'\n      AND o.ORDER_APPROVAL_TIMESTAMP >= DATEADD(QUARTER, -1, GETDATE())\n),\nNonResponsiveOutcomes AS (\n    SELECT DISTINCT \n        mc.MAILSHOT_ID,\n        c.CUSTOMER_ID\n    FROM Mailshot_Campaigns mc\n    JOIN Customers c ON mc.CAMPAIGN_TARGETING_CRITERIA LIKE '%' + CAST(c.CUSTOMER_ID AS VARCHAR) + '%'\n    LEFT JOIN SuccessfulOrders so ON c.CUSTOMER_ID = so.CUSTOMER_ID\n    WHERE so.CUSTOMER_ID IS NULL\n      AND mc.CAMPAIGN_END_DATE >= DATEADD(QUARTER, -1, GETDATE())\n),\nCustomerPatterns AS (\n    SELECT \n        lq.CUSTOMER_ID,\n        lq.PAYMENT_METHOD,\n        lq.LOYALTY_TIER,\n        lq.CUSTOMER_SEGMENT_ID,\n        lq.SEGMENT_ASSIGNED_DATE,\n        COUNT(DISTINCT so.ORDER_ID) AS SuccessfulOrderCount,\n        COUNT(DISTINCT nro.MAILSHOT_ID) AS NonResponsiveCount\n    FROM LastQuarter lq\n    LEFT JOIN SuccessfulOrders so ON lq.CUSTOMER_ID = so.CUSTOMER_ID\n    LEFT JOIN NonResponsiveOutcomes nro ON lq.CUSTOMER_ID = nro.CUSTOMER_ID\n    GROUP BY \n        lq.CUSTOMER_ID,\n        lq.PAYMENT_METHOD,\n        lq.LOYALTY_TIER,\n        lq.CUSTOMER_SEGMENT_ID,\n        lq.SEGMENT_ASSIGNED_DATE\n)\nSELECT \n    cp.CUSTOMER_ID,\n    cp.PAYMENT_METHOD,\n    cp.LOYALTY_TIER,\n    cs.CUSTOMER_SEGMENT_NAME,\n    cp.SEGMENT_ASSIGNED_DATE,\n    cp.SuccessfulOrderCount,\n    cp.NonResponsiveCount\nFROM CustomerPatterns cp\nJOIN Customer_Segments cs ON cp.CUSTOMER_SEGMENT_ID = cs.CUSTOMER_SEGMENT_ID\nWHERE cp.SuccessfulOrderCount > 0\n  AND cp.NonResponsiveCount > 0;\n```"
    },
    {
        "instance_id": "q_629",
        "db_id": "department_store_new",
        "question": "Which customers, belonging to a loyalty tier of \"Gold\" or higher, have placed orders with both \"New\" and \"Pending\" statuses within the past 30 days? Provide their customer IDs, full addresses (formatted as province, city, district), ensuring that each customer has at least one order with \"New\" status and one order with \"Pending\" status during this time period.",
        "query": "```sql\nSELECT \n    c.CUSTOMER_ID,\n    c.PROVINCE || ', ' || c.CITY || ', ' || c.DISTRICT AS FULL_ADDRESS\nFROM \n    Customers c\nJOIN \n    Customer_Orders co1 ON c.CUSTOMER_ID = co1.CUSTOMER_ID\nJOIN \n    Customer_Orders co2 ON c.CUSTOMER_ID = co2.CUSTOMER_ID\nWHERE \n    co1.ORDER_STATUS = 'New'\n    AND co2.ORDER_STATUS = 'Pending'\n    AND co1.PAYMENT_DATE >= CURRENT_DATE - INTERVAL '30' DAY\n    AND co2.PAYMENT_DATE >= CURRENT_DATE - INTERVAL '30' DAY\n    AND c.LOYALTY_PROGRAM_LEVEL IN ('Gold', 'Platinum', 'Diamond')\nGROUP BY \n    c.CUSTOMER_ID, c.PROVINCE, c.CITY, c.DISTRICT;\n```"
    },
    {
        "instance_id": "q_624",
        "db_id": "department_store_new",
        "question": "Which customers have both new and pending orders within the last 30 days, and what are their names, addresses (including province, city, and district), loyalty program tiers? Additionally, identify the type and region of the most recently visited department store for these customers, based on the payment date of their new orders. Ensure that both the new and pending orders were placed within the past 30 days. Present the results sorted by the payment date of the new orders in descending order.",
        "query": "```sql\nSELECT \n    c.CUSTOMER_ID AS Customer_ID,\n    c.PROVINCE AS Province,\n    c.CITY AS City,\n    c.DISTRICT AS District,\n    c.LOYALTY_PROGRAM_LEVEL AS Loyalty_Tier,\n    ds.STORE_TYPE AS Most_Recent_Store_Type,\n    ds.STORE_REGION AS Most_Recent_Store_Region\nFROM \n    Customers c\nJOIN \n    Customer_Orders co_new ON c.CUSTOMER_ID = co_new.CUSTOMER_ID\nJOIN \n    Customer_Orders co_pending ON c.CUSTOMER_ID = co_pending.CUSTOMER_ID\nLEFT JOIN \n    Department_Stores ds ON co_new.DEPT_STORE_ID = ds.DEPT_STORE_ID\nWHERE \n    co_new.ORDER_STATUS = 'new' \n    AND co_pending.ORDER_STATUS = 'pending' \n    AND co_new.PAYMENT_DATE >= CURRENT_DATE - INTERVAL '30 days'\n    AND co_pending.PAYMENT_DATE >= CURRENT_DATE - INTERVAL '30 days'\nGROUP BY \n    c.CUSTOMER_ID, c.PROVINCE, c.CITY, c.DISTRICT, c.LOYALTY_PROGRAM_LEVEL, ds.STORE_TYPE, ds.STORE_REGION\nORDER BY \n    co_new.PAYMENT_DATE DESC;\n```"
    },
    {
        "instance_id": "q_622",
        "db_id": "department_store_new",
        "question": "Which department stores have both marketing and management teams, identified by their store ID and store type? Additionally, provide the sales forecast accuracy for these stores in the first quarter of 2023 (from January 1, 2023, to March 31, 2023), but only include stores with a forecast confidence level greater than 80%. Ensure that each store has distinct marketing and management departments associated with it.",
        "query": "```sql\nSELECT \n    ds.DEPT_STORE_ID AS Store_ID, \n    ds.STORE_TYPE AS Store_Name,\n    sf.FORECASTED_SALES_AMOUNT AS Sales_Forecast_Accuracy\nFROM \n    Department_Stores ds\nJOIN \n    Departments d ON ds.DEPT_STORE_ID = d.DEPARTMENT_ID\nJOIN \n    Staff s ON d.DEPARTMENT_ID = s.STAFF_DEPARTMENT_ID\nJOIN \n    Sales_Forecast sf ON ds.DEPT_STORE_ID = sf.SALES_FORECAST\nWHERE \n    d.DEPARTMENT_TYPE IN ('marketing', 'management')\n    AND sf.FORECAST_MODEL_PARAMETERS->>'confidence_level' > 80\n    AND sf.FORECAST_UPDATED_AT >= '2023-01-01'::timestamp AT TIME ZONE 'UTC'\n    AND sf.FORECAST_UPDATED_AT < '2023-04-01'::timestamp AT TIME ZONE 'UTC'\nGROUP BY \n    ds.DEPT_STORE_ID, ds.STORE_TYPE, sf.FORECASTED_SALES_AMOUNT\nHAVING \n    COUNT(DISTINCT d.DEPARTMENT_TYPE) = 2;\n```"
    },
    {
        "instance_id": "q_623",
        "db_id": "department_store_new",
        "question": "What are the store IDs and types of department stores that have both marketing and management departments? Additionally, provide the most recently forecasted sales amount for these stores within the latest forecast window.",
        "query": "```sql\nSELECT \n    ds.DEPT_STORE_ID AS Store_ID,\n    ds.STORE_TYPE AS Store_Name,\n    sf.FORECASTED_SALES_AMOUNT AS Forecasted_Sales_Accuracy\nFROM \n    Department_Stores ds\nJOIN \n    Departments marketing ON ds.DEPT_STORE_ID = marketing.DEPARTMENT_ID\nJOIN \n    Departments management ON ds.DEPT_STORE_ID = management.DEPARTMENT_ID\nJOIN \n    Sales_Forecast sf ON ds.DEPT_STORE_ID = sf.SALES_FORECAST_DETAIL\nWHERE \n    marketing.DEPARTMENT_TYPE = 'Marketing'\n    AND management.DEPARTMENT_TYPE = 'Management'\n    AND sf.FORECAST_UPDATED_AT = (\n        SELECT MAX(FORECAST_UPDATED_AT) \n        FROM Sales_Forecast \n        WHERE SALES_FORECAST_DETAIL = ds.DEPT_STORE_ID\n    );\n```"
    },
    {
        "instance_id": "q_626",
        "db_id": "department_store_new",
        "question": "Which customers, identified by their unique customer IDs, have made completed purchases that included a product categorized as a keyboard under a promotional offer, and what were their associated loyalty tiers at the time of purchase? Consider only customers who engaged with promotional offers during their transactions, where the payment date falls within the promotion's validity period defined by the promotion start and end dates.",
        "query": "```sql\nSELECT DISTINCT \n    c.CUSTOMER_ID AS Customer_ID,\n    cs.SEGMENT_NAME AS Loyalty_Tier\nFROM \n    Customers c\nJOIN \n    Customer_Segments cs ON c.CUSTOMER_SEGMENT_ID = cs.SEGMENT_NAME\nJOIN \n    Customer_Orders co ON c.CUSTOMER_ID = co.ORDER_ID\nJOIN \n    Order_Approval_Logs oal ON co.ORDER_ID = oal.APPROVER_STAFF_ID\nJOIN \n    Products p ON co.PROMOTION_RULE_ID = p.PRODUCT_ID\nWHERE \n    p.PROMOTION_RULE_TYPE = 'keyboard'\n    AND co.PROMOTION_RULE_ID IS NOT NULL\n    AND co.ORDER_STATUS = 'completed'\n    AND co.PAYMENT_DATE >= p.PROMOTION_START_DATE\n    AND co.PAYMENT_DATE <= p.PROMOTION_END_DATE;\n```"
    },
    {
        "instance_id": "q_630",
        "db_id": "department_store_new",
        "question": "Which customers, identified by their unique customer IDs and loyalty scores, belong to customer segments that include descriptions related to computer accessories, have participated in transactions involving products with promotions or discounts, are eligible for the loyalty program, and have made purchases within the last quarter (from January 1, 2023, to March 31, 2023)? Please list these customers in descending order of their loyalty scores.",
        "query": "```sql\nSELECT DISTINCT c.CUSTOMER_ID, c.LOYALTY_SCORE, cs.SEGMENT_NAME\nFROM Customers c\nJOIN Customer_Segments cs ON c.CUSTOMER_SEGMENT_ID = cs.SEGMENT_NAME\nJOIN Customer_Orders co ON c.CUSTOMER_ID = co.ORDER_ID\nJOIN Products p ON co.PROMOTION_RULE_ID = p.PRODUCT_ID\nWHERE c.LOYALTY_PROGRAM_ELIGIBILITY = TRUE\n  AND co.PAYMENT_DATE >= '2023-01-01'::DATE\n  AND co.PAYMENT_DATE < '2023-04-01'::DATE\n  AND p.PROMOTION_RULE_TYPE IN ('Discount', 'Promotion')\n  AND cs.SEGMENT_DESCRIPTION LIKE '%computer accessories%'\nORDER BY c.LOYALTY_SCORE DESC;\n```"
    },
    {
        "instance_id": "q_628",
        "db_id": "department_store_new",
        "question": "Which staff members currently hold the role of \"Sales Person,\" have never held the role of \"Clerical Staff,\" and belong to departments that have processed at least one order in the past 30 days? Please provide their unique staff IDs, names, and genders.",
        "query": "```sql\nSELECT DISTINCT s.STAFF_ID, s.STAFF_NAME, s.STAFF_GENDER\nFROM Staff s\nJOIN Departments d ON s.STAFF_DEPARTMENT_ID = d.DEPARTMENT_ID\nLEFT JOIN Order_Approval_Logs oal ON s.STAFF_ID = oal.APPROVER_STAFF_ID\nWHERE s.STAFF_ROLE = 'Sales Person'\n  AND s.STAFF_ID NOT IN (\n    SELECT STAFF_ID \n    FROM Staff \n    WHERE STAFF_ROLE = 'Clerical Staff'\n  )\n  AND d.DEPARTMENT_ID IN (\n    SELECT DISTINCT oal.STAFF_DEPARTMENT_ID\n    FROM Order_Approval_Logs oal\n    WHERE oal.APPROVAL_TIMESTAMP >= CURRENT_DATE - INTERVAL '1 MONTH'\n      AND oal.ORDER_APPROVAL_STATUS = 'Processed'\n  );\n```"
    },
    {
        "instance_id": "q_631",
        "db_id": "department_store_new",
        "question": "Which staff members have held a sales-related role within the last year, have never been assigned to a clerical position, and what are their IDs, names, and genders? Ensure that only staff who transitioned out of a sales role within the last year are considered.",
        "query": "```sql\nSELECT \n    s1.STAFF_ID, \n    s1.STAFF_NAME, \n    s1.STAFF_GENDER\nFROM \n    Staff s1\nJOIN \n    Staff_Roles sr1 ON s1.STAFF_ID = sr1.STAFF_ID\nJOIN \n    Departments d1 ON sr1.DEPARTMENT_ID = d1.DEPARTMENT_ID\nLEFT JOIN \n    Staff_Roles sr2 ON s1.STAFF_ID = sr2.STAFF_ID AND sr2.STAFF_ROLE = 'Clerical'\nWHERE \n    sr1.STAFF_ROLE LIKE '%Sales%' \n    AND sr1.ROLE_END_DATE >= CURRENT_DATE - INTERVAL '1 YEAR' \n    AND sr2.STAFF_ROLE IS NULL;\n```"
    },
    {
        "instance_id": "q_634",
        "db_id": "aircraft_new",
        "question": "What are the aircraft models that have served both London Heathrow and London Gatwick airports within the last six months, and what is their average fleet age based on the most recent service history updates? Only include aircraft that have had at least one completed flight to or from both airports during this time period.",
        "query": "```sql\nWITH Recent_Service_Updates AS (\n    SELECT \n        aa.Aircraft_ID,\n        a.AIRPLANE_TYPE,\n        f.FLIGHT_DEPARTURE_AIRPORT_ID,\n        f.FLIGHT_ARRIVAL_AIRPORT_ID,\n        f.FLIGHT_STATUS,\n        f.FLIGHT_DEPARTURE_DELAY_MINUTES,\n        f.FLIGHT_ARRIVAL_DELAY_MINUTES,\n        f.PROMOTION_APPLIED,\n        f.DEPARTURE_TIME\n    FROM \n        airline_new.Flights f\n    INNER JOIN \n        aircraft_new.aircraft_aircraft aa ON f.PILOT_ID = aa.ID\n    INNER JOIN \n        airline_new.Airlines a ON aa.Aircraft_ID = a.AIRLINE_ID\n    WHERE \n        f.DEPARTURE_TIME >= NOW() - INTERVAL '6 months'\n        AND (f.FLIGHT_DEPARTURE_AIRPORT_ID IN (SELECT AIRPORT_ID FROM aircraft_new.airport WHERE Airport_Name = 'London Heathrow')\n             OR f.FLIGHT_ARRIVAL_AIRPORT_ID IN (SELECT AIRPORT_ID FROM aircraft_new.airport WHERE Airport_Name = 'London Heathrow'))\n        AND (f.FLIGHT_DEPARTURE_AIRPORT_ID IN (SELECT AIRPORT_ID FROM aircraft_new.airport WHERE Airport_Name = 'London Gatwick')\n             OR f.FLIGHT_ARRIVAL_AIRPORT_ID IN (SELECT AIRPORT_ID FROM aircraft_new.airport WHERE Airport_Name = 'London Gatwick'))\n        AND f.FLIGHT_STATUS = 'Completed'\n),\nAircraft_Age_Calculation AS (\n    SELECT \n        rsu.AIRPLANE_TYPE,\n        AVG(EXTRACT(YEAR FROM AGE(NOW(), MAX(rsu.DEPARTURE_TIME)))) AS Average_Fleet_Age\n    FROM \n        Recent_Service_Updates rsu\n    GROUP BY \n        rsu.AIRPLANE_TYPE\n)\nSELECT DISTINCT \n    ac.AIRPLANE_TYPE,\n    ac.Average_Fleet_Age\nFROM \n    Aircraft_Age_Calculation ac;\n```"
    },
    {
        "instance_id": "q_627",
        "db_id": "aircraft_new",
        "question": "What are the aircraft models commonly used for flights connecting London Heathrow and Gatwick airports in the past month, and what is the average age of these aircraft models across airlines operating these routes? Additionally, determine the average passenger count for flights using these aircraft models, considering only those flights that were impacted by active promotions in the same time period. If no promotions were applied, assume an average passenger count of zero for such flights.",
        "query": "```sql\nWITH RelevantFlights AS (\n    SELECT DISTINCT f.AIRPLANE_TYPE, f.AIRLINE_ID\n    FROM Flights f\n    INNER JOIN Airports a1 ON f.FLIGHT_DEPARTURE_AIRPORT_ID = a1.AIRPORT_NAME AND a1.AIRPORT_NAME = 'London Heathrow'\n    INNER JOIN Airports a2 ON f.FLIGHT_ARRIVAL_AIRPORT_ID = a2.AIRPORT_NAME AND a2.AIRPORT_NAME = 'Gatwick'\n    WHERE f.DEPARTURE_TIME >= NOW() - INTERVAL '1 MONTH'\n),\nPromotionImpact AS (\n    SELECT f.AIRPLANE_TYPE, AVG(f.PASSENGER_COUNT) AS AvgPassengerCount\n    FROM Flights f\n    INNER JOIN Promotions p ON f.PROMOTION_RULE_ID = p.PROMOTION_RULE_ID\n    INNER JOIN RelevantFlights rf ON f.AIRPLANE_TYPE = rf.AIRPLANE_TYPE AND f.AIRLINE_ID = rf.AIRLINE_ID\n    WHERE p.PROMOTION_START_DATE <= NOW() AND p.PROMOTION_END_DATE >= NOW()\n    GROUP BY f.AIRPLANE_TYPE\n),\nFleetAge AS (\n    SELECT AIRPLANE_TYPE, AVG(EXTRACT(YEAR FROM AGE(CURRENT_DATE, PURCHASE_DATE))) AS AverageFleetAge\n    FROM Airlines\n    GROUP BY AIRPLANE_TYPE\n)\nSELECT rf.AIRPLANE_TYPE, fa.AverageFleetAge, COALESCE(pi.AvgPassengerCount, 0) AS AvgPassengerCountWithPromotions\nFROM RelevantFlights rf\nLEFT JOIN FleetAge fa ON rf.AIRPLANE_TYPE = fa.AIRPLANE_TYPE\nLEFT JOIN PromotionImpact pi ON rf.AIRPLANE_TYPE = pi.AIRPLANE_TYPE;\n```"
    },
    {
        "instance_id": "q_632",
        "db_id": "cre_Drama_Workshop_Groups_new",
        "question": "What are the distinct service type descriptions associated with products in both the \"photo\" and \"film\" categories, considering only active workshop groups that are linked to these products?",
        "query": "```sql\nSELECT DISTINCT rst.Service_Type_Description\nFROM Ref_Service_Types rst\nJOIN Products p ON rst.Service_Type_Subcategory = p.Product_Category\nJOIN Drama_Workshop_Groups dwg ON p.Product_Category_ID = dwg.Workshop_Group_ID\nWHERE p.Product_Category IN ('photo', 'film')\n  AND dwg.Workshop_Group_Type = 'active'\n  AND rst.Service_Type_Category IS NOT NULL\nGROUP BY rst.Service_Type_Description\nHAVING COUNT(DISTINCT p.Product_Category) = 2;\n```"
    },
    {
        "instance_id": "q_638",
        "db_id": "cre_Drama_Workshop_Groups_new",
        "question": "Which service categories include both photo-related items and film-based products, where these items belong to the same service category but different subcategories, and can be bundled together in a single booking? Additionally, provide the descriptions of these service categories and subcategories within the system.",
        "query": "SELECT DISTINCT st.Service_Type_Category\nFROM Ref_Service_Types st\nJOIN Products p ON st.Service_Type_Subcategory = p.Product_Category\nWHERE p.Product_Category LIKE '%photo%' \n  AND p.Product_Category LIKE '%film%'\n  AND st.Service_Type_Category IN (\n    SELECT st_inner.Service_Type_Category\n    FROM Ref_Service_Types st_inner\n    GROUP BY st_inner.Service_Type_Category\n    HAVING COUNT(DISTINCT st_inner.Service_Type_Subcategory) > 1\n)"
    },
    {
        "instance_id": "q_633",
        "db_id": "tracking_software_problems_new",
        "question": "What are the IDs, severity levels, and preventive measures of the problems reported by staff members whose roles include \"Quality Assurance\"? Additionally, provide the details of each problem.",
        "query": "```sql\nSELECT \n    p.problem_id,\n    p.PROBLEM_SEVERITY_CODE AS severity_level,\n    p.PROBLEM_PREVENTION_MEASURES AS preventive_measures,\n    pl.PROBLEM_LOG_DETAILS AS problem_details\nFROM \n    Problems p\nJOIN \n    Problem_Log pl ON p.problem_id = pl.problem_id\nJOIN \n    Staff s ON pl.STAFF_ASSIGNED_ID = s.staff_id\nWHERE \n    s.STAFF_ROLE LIKE '%Quality Assurance%'\n    AND p.PROBLEM_REPORTED_BY = 'Staff';\n```"
    },
    {
        "instance_id": "q_650",
        "db_id": "tracking_software_problems_new",
        "question": "What are the unique issue IDs for problems that were either reported or assigned to staff members whose roles start with \"Dameon\" or \"Jolie\"? Additionally, include any unresolved problems that have been reopened at least once.",
        "query": "```sql\nSELECT DISTINCT p.problem_id\nFROM Problems p\nJOIN Problem_Log pl ON p.problem_id = pl.problem_id\nJOIN Staff s ON s.staff_id = pl.STAFF_ASSIGNED_ID OR s.staff_id = pl.STAFF_APPROVED_ID\nWHERE (s.STAFF_ROLE LIKE 'Dameon%' OR s.STAFF_ROLE LIKE 'Jolie%')\n   OR (p.problem_id IN (\n       SELECT pr.problem_id\n       FROM Problem_Log pr\n       WHERE pr.PROBLEM_LOG_ACTION_TYPE = 'Reopen'\n       GROUP BY pr.problem_id\n       HAVING COUNT(*) >= 1\n   ) AND p.problem_id NOT IN (\n       SELECT pr_resolved.problem_id\n       FROM Problem_Log pr_resolved\n       WHERE pr_resolved.APPROVAL_STATUS = 'Resolved'\n   ));\n```"
    },
    {
        "instance_id": "q_636",
        "db_id": "tracking_software_problems_new",
        "question": "Which product IDs are associated with problems that were initially reported by a staff member with the role \"Christop Berge,\" later reviewed by a staff member with the role \"Ashley Medhurst,\" have a severity level classified as \"High\" or \"Critical,\" impact products with an issue impact score higher than the average score across all products, and were resolved within the last completed quarter?",
        "query": "```sql\nSELECT DISTINCT p.product_id\nFROM Problems pr\nJOIN Product p ON pr.product_id = p.product_id\nJOIN Problem_Log pl ON pr.problem_id = pl.problem_id\nJOIN Staff reporter ON pr.PROBLEM_REPORTED_BY = reporter.staff_id\nJOIN Staff reviewer ON pl.STAFF_REVIEW_COMMENTS = reviewer.staff_id\nWHERE reporter.STAFF_ROLE = 'Christop Berge'\n  AND reviewer.STAFF_ROLE = 'Ashley Medhurst'\n  AND pr.PROBLEM_SEVERITY_CODE IN ('High', 'Critical')\n  AND p.PRODUCT_ISSUE_IMPACT_SCORE > (SELECT AVG(PRODUCT_ISSUE_IMPACT_SCORE) FROM Product)\n  AND pl.PROBLEM_LOG_ACTION_RESOLUTION_DATE >= DATEADD(QUARTER, -1, GETDATE())\n  AND pl.PROBLEM_LOG_ACTION_RESOLUTION_DATE < GETDATE();\n```"
    },
    {
        "instance_id": "q_635",
        "db_id": "tracking_software_problems_new",
        "question": "Which products, identified by their product IDs, have experienced issues reported by Christop Berge and resolved under the authorization of a staff member with the role of Ashley Medhurst, where the problem severity was categorized as high, and the resolution time exceeded the average resolution time for similar issues reported by Christop Berge within the past 90 days? Only consider issues that were resolved within this time frame.",
        "query": "```sql\nWITH AverageResolutionTime AS (\n    SELECT \n        p.product_id,\n        AVG(pl.PROBLEM_LOG_ACTION_DURATION_HOURS) AS avg_resolution_time\n    FROM \n        Problems pr\n    JOIN \n        Problem_Log pl ON pr.problem_id = pl.problem_id\n    JOIN \n        Product p ON pr.product_id = p.product_id\n    WHERE \n        pr.PROBLEM_REPORTED_BY = 'Christop Berge'\n        AND pl.APPROVAL_STATUS = 'Resolved'\n        AND pr.PROBLEM_SEVERITY_CODE = 'High'\n        AND pl.PROBLEM_LOG_ACTION_DATE >= CURRENT_DATE - INTERVAL '90 days'\n    GROUP BY \n        p.product_id\n)\nSELECT DISTINCT \n    p.product_id\nFROM \n    Problems pr\nJOIN \n    Problem_Log pl ON pr.problem_id = pl.problem_id\nJOIN \n    Product p ON pr.product_id = p.product_id\nJOIN \n    Staff s ON pl.STAFF_APPROVED_ID = s.staff_id\nJOIN \n    AverageResolutionTime art ON p.product_id = art.product_id\nWHERE \n    pr.PROBLEM_REPORTED_BY = 'Christop Berge'\n    AND s.STAFF_ROLE = 'Ashley Medhurst'\n    AND pr.PROBLEM_SEVERITY_CODE = 'High'\n    AND pl.PROBLEM_LOG_ACTION_DURATION_HOURS > art.avg_resolution_time\n    AND pl.PROBLEM_LOG_ACTION_DATE >= CURRENT_DATE - INTERVAL '90 days';\n```"
    },
    {
        "instance_id": "q_637",
        "db_id": "tracking_software_problems_new",
        "question": "Which problem IDs were logged before the earliest issue reported by Lysanne Turcotte, specifically for problems associated with the product category \"Specific_Product_Category\" and having a resolution time exceeding the average resolution time of similar issues within the same product category? Additionally, include problems where the department of the assigned staff member was involved in more than five issues during the same period prior to Lysanne Turcotte's first report.",
        "query": "```sql\nWITH ReportedByLysanne AS (\n    SELECT DISTINCT problem_id\n    FROM Problem_Log PL\n    JOIN Problems P ON PL.problem_id = P.problem_id\n    WHERE P.PROBLEM_REPORTED_BY = 'Lysanne Turcotte'\n),\nAverageResolutionTime AS (\n    SELECT \n        P.PRODUCT_CATEGORY AS product_category,\n        AVG(PL.PROBLEM_LOG_ACTION_DURATION_HOURS) AS avg_resolution_time\n    FROM Problem_Log PL\n    JOIN Problems P ON PL.problem_id = P.problem_id\n    GROUP BY P.PRODUCT_CATEGORY\n),\nRelatedIssuesByDepartment AS (\n    SELECT \n        S.STAFF_ROLE AS department,\n        COUNT(DISTINCT PL.problem_id) AS issue_count\n    FROM Problem_Log PL\n    JOIN Staff S ON PL.STAFF_ASSIGNED_ID = S.staff_id\n    WHERE PL.PROBLEM_LOG_ACTION_DATE <= (SELECT MIN(PROBLEM_LOG_ACTION_DATE) FROM ReportedByLysanne)\n    GROUP BY S.STAFF_ROLE\n    HAVING COUNT(DISTINCT PL.problem_id) > 5\n)\nSELECT DISTINCT PL.problem_id\nFROM Problem_Log PL\nJOIN Problems P ON PL.problem_id = P.problem_id\nJOIN Product Pr ON P.product_id = Pr.product_id\nJOIN AverageResolutionTime ART ON Pr.PRODUCT_CATEGORY = ART.product_category\nLEFT JOIN RelatedIssuesByDepartment RID ON RID.department = (SELECT STAFF_ROLE FROM Staff WHERE staff_id = PL.STAFF_ASSIGNED_ID)\nWHERE PL.PROBLEM_LOG_ACTION_DATE < (SELECT MIN(PROBLEM_LOG_ACTION_DATE) FROM ReportedByLysanne)\nAND PL.PROBLEM_LOG_ACTION_DURATION_HOURS > ART.avg_resolution_time\nAND Pr.PRODUCT_CATEGORY = 'Specific_Product_Category'\nAND (RID.issue_count IS NOT NULL OR RID.issue_count > 5);\n```"
    },
    {
        "instance_id": "q_648",
        "db_id": "tracking_software_problems_new",
        "question": "What are the unique problem IDs that were reported before any problem assigned to Lysanne Turcotte, where the problems have a severity level of either 'High' or 'Critical', and were logged within the same calendar quarter as her earliest assignment?",
        "query": "```sql\nSELECT DISTINCT p.problem_id\nFROM Problems p\nJOIN Problem_Log pl ON p.problem_id = pl.problem_id\nJOIN Staff s ON pl.STAFF_ASSIGNED_ID = s.staff_id\nWHERE p.PROBLEM_SEVERITY_CODE IN ('High', 'Critical')\n  AND DATE_TRUNC('quarter', pl.PROBLEM_LOG_ACTION_DATE) = (\n    SELECT DATE_TRUNC('quarter', pl2.PROBLEM_LOG_ACTION_DATE)\n    FROM Problem_Log pl2\n    JOIN Staff s2 ON pl2.STAFF_ASSIGNED_ID = s2.staff_id\n    WHERE s2.STAFF_ROLE = 'Lysanne Turcotte'\n    ORDER BY pl2.PROBLEM_LOG_ACTION_DATE ASC\n    LIMIT 1\n  )\n  AND pl.PROBLEM_LOG_ACTION_DATE < (\n    SELECT MIN(pl3.PROBLEM_LOG_ACTION_DATE)\n    FROM Problem_Log pl3\n    JOIN Staff s3 ON pl3.STAFF_ASSIGNED_ID = s3.staff_id\n    WHERE s3.STAFF_ROLE = 'Lysanne Turcotte'\n  );\n```"
    },
    {
        "instance_id": "q_640",
        "db_id": "tracking_software_problems_new",
        "question": "Which distinct problem IDs have been logged by staff members, considering only those problems reported by Rylan Homenick, assigned a priority level greater than 3, and resolved within the same business week as they were logged? Additionally, include problems where the root cause was identified as \"software defect\" or the resolution involved multiple team reviews, indicated by a review status of \"Reviewed\" or \"Multiple Reviews\".",
        "query": "```sql\nSELECT DISTINCT pl.problem_id\nFROM Problem_Log pl\nJOIN Problems p ON pl.problem_id = p.problem_id\nJOIN Problem_Log pl_action ON pl.problem_log_id = pl_action.problem_log_id\nJOIN Staff s ON pl.STAFF_ASSIGNED_ID = s.staff_id\nWHERE pl.PROBLEM_LOG_ACTION_PRIORITY > 3\n  AND pl.PROBLEM_LOG_ACTION_STATUS = 'Resolved'\n  AND YEAR(pl.PROBLEM_LOG_ACTION_RESOLUTION_DATE) = YEAR(pl.PROBLEM_LOG_ACTION_DATE)\n  AND WEEK(pl.PROBLEM_LOG_ACTION_RESOLUTION_DATE, 1) = WEEK(pl.PROBLEM_LOG_ACTION_DATE, 1)\n  AND p.PROBLEM_REPORTED_BY = 'Rylan Homenick'\n  AND (\n    p.PROBLEM_ROOT_CAUSE = 'software defect' \n    OR pl.PROBLEM_LOG_ACTION_REVIEW_STATUS IN ('Reviewed', 'Multiple Reviews')\n  );\n```"
    },
    {
        "instance_id": "q_644",
        "db_id": "tracking_software_problems_new",
        "question": "Find the unique identifiers of issues that were resolved after being raised by a team member named Rylan Homenick, along with the priority level assigned during the resolution process. Additionally, determine whether each issue was reopened after its initial closure and calculate the time taken from the first resolution action to the final resolution for each issue. Include only issues reported by Rylan Homenick where the staff assigned to the issue has the role of 'team member'. Ensure results are grouped by issue and priority level.",
        "query": "```sql\nSELECT \n    pl.problem_id AS unique_identifier,\n    plc.PROBLEM_LOG_ACTION_PRIORITY AS priority_level,\n    CASE \n        WHEN MAX(CASE WHEN pl.APPROVAL_STATUS = 'REOPENED' THEN 1 ELSE 0 END) > 0 THEN TRUE \n        ELSE FALSE \n    END AS was_reopened,\n    MAX(pl.PROBLEM_LOG_ACTION_RESOLUTION_DATE) - MIN(pl.PROBLEM_LOG_ACTION_DATE) AS time_to_final_resolution\nFROM \n    Problem_Log pl\nJOIN \n    Problems p ON pl.problem_id = p.problem_id\nJOIN \n    Staff s ON pl.STAFF_ASSIGNED_ID = s.staff_id\nLEFT JOIN \n    Problem_Category_Codes plc ON pl.PROBLEM_LOG_ACTION_PRIORITY = plc.problem_category_code\nWHERE \n    s.STAFF_ROLE = 'team member'\n    AND p.PROBLEM_REPORTED_BY = 'Rylan Homenick'\nGROUP BY \n    pl.problem_id, plc.PROBLEM_LOG_ACTION_PRIORITY;\n```"
    },
    {
        "instance_id": "q_639",
        "db_id": "tracking_software_problems_new",
        "question": "Which staff members were assigned to resolve issues for the product \"rem\" with a severity level classified as \"High Impact,\" but were not assigned to handle any issues for the product \"aut\"? Please provide their unique staff IDs and roles.",
        "query": "```sql\nSELECT DISTINCT s.staff_id, s.STAFF_ROLE AS staff_role\nFROM Staff s\nJOIN Problem_Log pl ON s.staff_id = pl.STAFF_ASSIGNED_ID\nJOIN Problems p ON pl.problem_id = p.problem_id\nWHERE p.PRODUCT_ISSUE_ROOT_CAUSE_DETAIL = 'rem'\n  AND p.PROBLEM_SEVERITY_CODE IN (\n    SELECT problem_severity_code\n    FROM Problem_Category_Codes\n    WHERE PROBLEM_CATEGORY_LEVEL_2 = 'High Impact'\n  )\n  AND s.staff_id NOT IN (\n    SELECT DISTINCT s2.staff_id\n    FROM Staff s2\n    JOIN Problem_Log pl2 ON s2.staff_id = pl2.STAFF_ASSIGNED_ID\n    JOIN Problems p2 ON pl2.problem_id = p2.problem_id\n    WHERE p2.PRODUCT_ISSUE_ROOT_CAUSE_DETAIL = 'aut'\n  );\n```"
    },
    {
        "instance_id": "q_641",
        "db_id": "tracking_software_problems_new",
        "question": "Which team members were involved in resolving issues related to the product model \"rem\" but did not handle any incidents for the product model \"aut\"? Please provide their unique staff IDs, roles, the specific actions they took in resolving the issues, and the severity levels of the problems they addressed. Prioritize the results by problem severity level in descending order, followed by staff ID. Include only those staff members who have explicitly resolved problems with higher severity levels for the product model \"rem\".",
        "query": "```sql\nSELECT DISTINCT \n    s.staff_id, \n    s.STAFF_ROLE AS staff_role,\n    pl.PROBLEM_LOG_ACTION_TYPE AS action_taken,\n    pc.PROBLEM_SEVERITY_CODE AS problem_severity\nFROM \n    Staff s\nJOIN \n    Problem_Log pl ON s.staff_id = pl.STAFF_ASSIGNED_ID\nJOIN \n    Problems p ON pl.problem_id = p.problem_id\nJOIN \n    Product pr ON p.product_id = pr.product_id\nLEFT JOIN \n    Problem_Category_Codes pc ON p.PROBLEM_SEVERITY_CODE = pc.problem_category_code\nWHERE \n    pr.PRODUCT_MODEL = 'rem'\n    AND s.staff_id NOT IN (\n        SELECT DISTINCT s2.staff_id\n        FROM Staff s2\n        JOIN Problem_Log pl2 ON s2.staff_id = pl2.STAFF_ASSIGNED_ID\n        JOIN Problems p2 ON pl2.problem_id = p2.problem_id\n        JOIN Product pr2 ON p2.product_id = pr2.product_id\n        WHERE pr2.PRODUCT_MODEL = 'aut'\n    )\nORDER BY \n    pc.PROBLEM_SEVERITY_CODE DESC, \n    s.staff_id;\n```"
    },
    {
        "instance_id": "q_643",
        "db_id": "tracking_software_problems_new",
        "question": "Identify distinct products, specifically their brand, model, and serial number, that meet the following criteria:  \n1. The products belong to the brand \"SpecificBrand\".  \n2. Issues related to these products were reported and resolved by staff members with roles including \"RoleA\" and \"RoleB\".  \n3. The resolution time for these issues exceeded the average resolution time for similar issues affecting the same product.  \n4. The issues were reopened at least once during their resolution process.  \n\nPresent the results sorted by product brand and model.",
        "query": "```sql\nWITH AverageResolutionTime AS (\n    SELECT \n        p.product_id,\n        AVG(pl.PROBLEM_LOG_ACTION_DURATION_HOURS) AS avg_resolution_time\n    FROM \n        Problems p\n    JOIN \n        Problem_Log pl ON p.problem_id = pl.problem_id\n    WHERE \n        pl.PROBLEM_LOG_ACTION_TYPE = 'Resolution'\n    GROUP BY \n        p.product_id\n),\nReopenedProblems AS (\n    SELECT \n        pl.problem_id\n    FROM \n        Problem_Log pl\n    WHERE \n        pl.PROBLEM_LOG_ACTION_TYPE = 'Reopen'\n    GROUP BY \n        pl.problem_id\n    HAVING \n        COUNT(*) >= 1\n)\nSELECT DISTINCT \n    prd.PRODUCT_BRAND, prd.PRODUCT_MODEL, prd.PRODUCT_SERIAL_NUMBER\nFROM \n    Problems prob\nJOIN \n    Product prd ON prob.product_id = prd.product_id\nJOIN \n    Problem_Log pl ON prob.problem_id = pl.problem_id\nJOIN \n    Staff stf ON pl.STAFF_ASSIGNED_ID = stf.staff_id\nJOIN \n    ReopenedProblems rp ON prob.problem_id = rp.problem_id\nJOIN \n    AverageResolutionTime art ON prob.product_id = art.product_id\nWHERE \n    prd.PRODUCT_BRAND = 'SpecificBrand' -- Replace 'SpecificBrand' with the actual brand name\n    AND pl.PROBLEM_LOG_ACTION_DURATION_HOURS > art.avg_resolution_time\n    AND pl.PROBLEM_LOG_ACTION_TYPE = 'Resolution'\n    AND stf.STAFF_ROLE IN ('RoleA', 'RoleB') -- Specify the different roles here\nORDER BY \n    prd.PRODUCT_BRAND, prd.PRODUCT_MODEL;\n```"
    },
    {
        "instance_id": "q_649",
        "db_id": "tracking_software_problems_new",
        "question": "Which products, identified by their model and serial number, experienced critical severity issues that were both reported by staff member Lacey Bosco and resolved by staff member Kenton Champlin within the last quarter (from October 1, 2022, to December 31, 2022)? Additionally, include only those issues where the resolution time exceeded the average resolution time for similar issues affecting the same product.",
        "query": "```sql\nWITH AverageResolutionTime AS (\n    SELECT \n        p.product_id,\n        AVG(pla.PROBLEM_LOG_ACTION_DURATION_HOURS) AS avg_resolution_time\n    FROM \n        Problem_Log pl\n    JOIN \n        Problems pr ON pl.problem_id = pr.problem_id\n    JOIN \n        Product p ON pr.product_id = p.product_id\n    JOIN \n        Problem_Log_Action pla ON pl.problem_log_id = pla.problem_log_id\n    WHERE \n        pr.PROBLEM_SEVERITY_CODE = 'Critical'\n        AND pla.PROBLEM_LOG_ACTION_DATE >= '2022-10-01' \n        AND pla.PROBLEM_LOG_ACTION_DATE < '2023-01-01'\n    GROUP BY \n        p.product_id\n)\nSELECT DISTINCT \n    p.PRODUCT_MODEL, \n    p.PRODUCT_SERIAL_NUMBER\nFROM \n    Problem_Log pl\nJOIN \n    Problems pr ON pl.problem_id = pr.problem_id\nJOIN \n    Product p ON pr.product_id = p.product_id\nJOIN \n    Problem_Log_Action pla ON pl.problem_log_id = pla.problem_log_id\nJOIN \n    Staff s_report ON pla.PROBLEM_LOG_ACTION_ASSIGNEE = s_report.staff_id\nJOIN \n    Staff s_resolve ON pla.PROBLEM_LOG_ACTION_RESOLUTION_STAFF_ID = s_resolve.staff_id\nJOIN \n    AverageResolutionTime art ON p.product_id = art.product_id\nWHERE \n    pr.PROBLEM_SEVERITY_CODE = 'Critical'\n    AND pla.PROBLEM_LOG_ACTION_DATE >= '2022-10-01' \n    AND pla.PROBLEM_LOG_ACTION_DATE < '2023-01-01'\n    AND s_report.STAFF_ROLE = 'Lacey Bosco'\n    AND s_resolve.STAFF_ROLE = 'Kenton Champlin'\n    AND pla.PROBLEM_LOG_ACTION_DURATION_HOURS > art.avg_resolution_time;\n```"
    },
    {
        "instance_id": "q_646",
        "db_id": "customers_and_products_contacts_new",
        "question": "Find customers who have placed at least one completed order and one partially processed order within the past 30 days. For these customers, provide their most recent contact information, including province, city, and district, as well as their loyalty program tier details. Additionally, calculate the total number of orders placed by each of these customers in the past year to evaluate their engagement level. Ensure that all orders considered are approved within the specified timeframes.",
        "query": "```sql\nSELECT \n    c.CUSTOMER_ID,\n    c.LOYALTY_PROGRAM_TIER,\n    a.PROVINCE,\n    a.CITY,\n    a.DISTRICT,\n    COUNT(co.ORDER_ID) AS TOTAL_ORDERS_PAST_YEAR\nFROM \n    Customers c\nJOIN \n    Customer_Orders co ON c.CUSTOMER_ID = co.CUSTOMER_ID\nLEFT JOIN \n    Addresses a ON co.ORDER_SHIPPING_ADDRESS_ID = a.ADDRESS_ID\nWHERE \n    co.APPROVAL_TIMESTAMP >= CURRENT_TIMESTAMP - INTERVAL '30 days'\n    AND EXISTS (\n        SELECT 1 \n        FROM Customer_Orders co_completed \n        WHERE co_completed.CUSTOMER_ID = c.CUSTOMER_ID \n            AND co_completed.ORDER_STATUS_DETAILS = 'Completed'\n            AND co_completed.APPROVAL_TIMESTAMP >= CURRENT_TIMESTAMP - INTERVAL '30 days'\n    )\n    AND EXISTS (\n        SELECT 1 \n        FROM Customer_Orders co_partial \n        WHERE co_partial.CUSTOMER_ID = c.CUSTOMER_ID \n            AND co_partial.ORDER_STATUS_DETAILS = 'Partially Processed'\n            AND co_partial.APPROVAL_TIMESTAMP >= CURRENT_TIMESTAMP - INTERVAL '30 days'\n    )\n    AND co.APPROVAL_TIMESTAMP >= CURRENT_TIMESTAMP - INTERVAL '1 year'\nGROUP BY \n    c.CUSTOMER_ID, c.LOYALTY_PROGRAM_TIER, a.PROVINCE, a.CITY, a.DISTRICT;\n```"
    },
    {
        "instance_id": "q_654",
        "db_id": "customers_and_products_contacts_new",
        "question": "Identify the top 10 customers with the highest likelihood of churn based on their order behavior in the past 90 days. Factors to consider include the frequency of orders, the average value of orders, and the proportion of canceled orders. Provide the full name and primary phone number of these customers for follow-up actions. Ensure that only customers with explicit order activity within the last 90 days are included, and rank them by the highest cancellation rate, lowest order frequency, and lowest average order value.",
        "query": "```sql\nWITH RecentOrders AS (\n    SELECT \n        co.CUSTOMER_ID,\n        COUNT(co.ORDER_ID) AS order_count,\n        AVG(oi.ORDER_ITEM_TOTAL_PRICE) AS avg_order_value,\n        SUM(CASE WHEN co.ORDER_STATUS_DETAILS = 'Canceled' THEN 1 ELSE 0 END) * 1.0 / NULLIF(COUNT(co.ORDER_ID), 0) AS cancel_rate\n    FROM Customer_Orders co\n    JOIN Order_Items oi ON co.ORDER_ID = oi.ORDER_ID\n    WHERE co.APPROVAL_TIMESTAMP >= CURRENT_TIMESTAMP - INTERVAL '90' DAY\n    GROUP BY co.CUSTOMER_ID\n),\nChurnLikelihood AS (\n    SELECT \n        ro.CUSTOMER_ID,\n        ro.order_count,\n        ro.avg_order_value,\n        ro.cancel_rate,\n        RANK() OVER (ORDER BY ro.cancel_rate DESC, ro.order_count ASC, ro.avg_order_value ASC) AS churn_rank\n    FROM RecentOrders ro\n)\nSELECT \n    c.CUSTOMER_ID,\n    cu.FULL_NAME,\n    cu.PRIMARY_PHONE_NUMBER,\n    cl.order_count,\n    cl.avg_order_value,\n    cl.cancel_rate\nFROM ChurnLikelihood cl\nJOIN Customers c ON cl.CUSTOMER_ID = c.CUSTOMER_ID\nJOIN Customer_Contacts cu ON c.CUSTOMER_ID = cu.CUSTOMER_ID\nWHERE cl.churn_rank <= 10\nORDER BY cl.churn_rank;\n```"
    },
    {
        "instance_id": "q_645",
        "db_id": "cre_Theme_park_new",
        "question": "Which tourist attractions, along with their visit dates (based on ATTRACTION_AVAILABILITY_STATUS_CHANGE_DATE), are associated with visitors named Vincent or Vivian, where the attractions were available at the time of the visit (as indicated by ATTRACTION_AVAILABILITY_STATUS = 'Available' and VISIT_ENTRY_TIME >= ATTRACTION_AVAILABILITY_STATUS_CHANGE_DATE)? Additionally, categorize the likelihood of these visitors returning based on their VISITOR_LOYALTY_SCORE: 'High' for scores greater than 4.5, 'Medium' for scores between 3.0 and 4.5, and 'Low' for scores below 3.0. The results should be ordered by the attraction ID and the visit entry time.",
        "query": "```sql\nSELECT \n    ta.Tourist_Attraction_ID,\n    ta.ATTRACTION_AVAILABILITY_STATUS_CHANGE_DATE AS Visit_Date,\n    v.VISITOR_LOYALTY_SCORE,\n    CASE \n        WHEN v.VISITOR_LOYALTY_SCORE > 4.5 THEN 'High'\n        WHEN v.VISITOR_LOYALTY_SCORE BETWEEN 3.0 AND 4.5 THEN 'Medium'\n        ELSE 'Low'\n    END AS Return_Likelihood\nFROM \n    Tourist_Attractions ta\nJOIN \n    Visits vi ON ta.Tourist_Attraction_ID = vi.Tourist_Attraction_ID\nJOIN \n    Visitors v ON vi.Tourist_ID = v.Tourist_ID\nWHERE \n    (v.VISITOR_TYPE = 'Vincent' OR v.VISITOR_TYPE = 'Vivian')\n    AND ta.ATTRACTION_AVAILABILITY_STATUS = 'Available'\n    AND vi.VISIT_ENTRY_TIME >= ta.ATTRACTION_AVAILABILITY_STATUS_CHANGE_DATE\nORDER BY \n    ta.Tourist_Attraction_ID, vi.VISIT_ENTRY_TIME;\n```"
    },
    {
        "instance_id": "q_653",
        "db_id": "cre_Theme_park_new",
        "question": "Which tourist attractions have been visited by tourists named Vincent or Vivian without any visit cancellations, and what is the likelihood of these tourists returning to the same attraction based on their loyalty scores? Additionally, provide the name of the attraction (using the attraction type code as a proxy for the name) and the date of the visit, ordered by the most recent visit first.",
        "query": "```sql\nSELECT \n    TA.ATTRACTION_TYPE_CODE AS Tourist_Attraction_Name,\n    V.VISITOR_TYPE AS Tourist_Name,\n    V.VISITOR_LOYALTY_SCORE AS Likelihood_of_Returning,\n    VIS.VISIT_ENTRY_TIME AS Visit_Date\nFROM \n    Visitors V\nJOIN \n    Visits VIS ON V.Tourist_ID = VIS.Tourist_ID\nJOIN \n    Tourist_Attractions TA ON VIS.Visit_ID = TA.Tourist_Attraction_ID\nWHERE \n    V.VISITOR_TYPE IN ('Vincent', 'Vivian')\n    AND VIS.VISIT_CANCEL_REASON IS NULL\nORDER BY \n    VIS.VISIT_ENTRY_TIME DESC;\n```"
    },
    {
        "instance_id": "q_642",
        "db_id": "cre_Theme_park_new",
        "question": "Which tourist attractions, based on the latest updates, offer features that are currently available, have an attraction type of convenience or shopping, and appeal to visitors looking for convenience or shopping experiences? The results should include the attraction's ID, capacity, type code, operational status, availability status, and the latest status change date, along with the feature description. Additionally, the attractions should be ordered by the most recent availability status change date.",
        "query": "```sql\nSELECT \n    ta.Tourist_Attraction_ID, \n    ta.ATTRACTION_CAPACITY, \n    ta.ATTRACTION_TYPE_CODE, \n    ta.ATTRACTION_OPERATIONAL_STATUS, \n    ta.ATTRACTION_AVAILABILITY_STATUS, \n    ta.ATTRACTION_AVAILABILITY_STATUS_CHANGE_DATE,\n    f.FEATURE_DESCRIPTION\nFROM \n    Tourist_Attractions ta\nJOIN \n    Features f ON ta.Tourist_Attraction_ID = f.Feature_ID\nWHERE \n    f.FEATURE_AVAILABILITY = TRUE\n    AND f.FEATURE_AVAILABILITY_START_DATE <= CURRENT_DATE\n    AND (f.FEATURE_AVAILABILITY_END_DATE >= CURRENT_DATE OR f.FEATURE_AVAILABILITY_END_DATE IS NULL)\n    AND f.FEATURE_AVAILABILITY_STATUS = 'Available'\n    AND f.FEATURE_AVAILABILITY_STATUS_CHANGE_DATE = (\n        SELECT MAX(FEATURE_AVAILABILITY_STATUS_CHANGE_DATE) \n        FROM Features \n        WHERE Feature_ID = ta.Tourist_Attraction_ID\n    )\n    AND (ta.ATTRACTION_TYPE_CODE IN ('Convenience', 'Shopping'))\nORDER BY \n    ta.ATTRACTION_AVAILABILITY_STATUS_CHANGE_DATE DESC;\n```"
    },
    {
        "instance_id": "q_651",
        "db_id": "cre_Theme_park_new",
        "question": "Which tourist attractions are currently operational and offer available features that enhance visitor experience, such as convenient parking or integrated shopping options? Please provide the attraction IDs, their type codes, operational statuses, availability statuses, and the dates when these statuses were last updated, along with detailed descriptions of the features. Only include attractions that have been updated within the last 30 days and whose features are currently available. Sort the results by attraction ID in ascending order and status update date in descending order for each attraction.",
        "query": "```sql\nSELECT \n    ta.Tourist_Attraction_ID, \n    ta.ATTRACTION_TYPE_CODE, \n    ta.ATTRACTION_OPERATIONAL_STATUS, \n    ta.ATTRACTION_AVAILABILITY_STATUS, \n    ta.ATTRACTION_AVAILABILITY_STATUS_CHANGE_DATE, \n    f.FEATURE_DESCRIPTION\nFROM \n    Tourist_Attractions ta\nJOIN \n    Features f ON ta.Tourist_Attraction_ID = f.Feature_ID\nWHERE \n    ta.ATTRACTION_OPERATIONAL_STATUS = 'Operational'\n    AND ta.ATTRACTION_AVAILABILITY_STATUS = 'Available'\n    AND ta.ATTRACTION_AVAILABILITY_STATUS_CHANGE_DATE >= CURRENT_DATE - INTERVAL '30 days'\n    AND f.FEATURE_AVAILABILITY = TRUE\n    AND f.FEATURE_AVAILABILITY_END_DATE > CURRENT_DATE\nORDER BY \n    ta.Tourist_Attraction_ID, \n    ta.ATTRACTION_AVAILABILITY_STATUS_CHANGE_DATE DESC;\n```"
    },
    {
        "instance_id": "q_647",
        "db_id": "cre_Theme_park_new",
        "question": "Which tourist attractions, during the month following their availability status change date, are most frequently visited by returning tourists named Vincent and Marcelle, who have a non-null referral source? Additionally, what features do these attractions offer?",
        "query": "```sql\nSELECT \n    ta.Tourist_Attraction_ID,\n    ta.ATTRACTION_AVAILABILITY_STATUS,\n    f.FEATURE_DESCRIPTION,\n    COUNT(v.Tourist_ID) AS Visit_Count\nFROM \n    Tourist_Attractions ta\nJOIN \n    Visits vi ON ta.Tourist_Attraction_ID = vi.Tourist_Attraction_ID\nJOIN \n    Visitors v ON vi.Tourist_ID = v.Tourist_ID\nLEFT JOIN \n    Features f ON ta.Tourist_Attraction_ID = f.Feature_ID\nWHERE \n    v.VISITOR_REFERRAL_SOURCE IS NOT NULL\n    AND v.VISITOR_TYPE = 'Return'\n    AND (v.VISITOR_SEGMENT = 'Vincent' OR v.VISITOR_SEGMENT = 'Marcelle')\n    AND vi.VISIT_ENTRY_TIME BETWEEN ta.ATTRACTION_AVAILABILITY_STATUS_CHANGE_DATE AND ta.ATTRACTION_AVAILABILITY_STATUS_CHANGE_DATE + INTERVAL '1 MONTH'\nGROUP BY \n    ta.Tourist_Attraction_ID, ta.ATTRACTION_AVAILABILITY_STATUS, f.FEATURE_DESCRIPTION\nORDER BY \n    Visit_Count DESC;\n```"
    },
    {
        "instance_id": "q_657",
        "db_id": "cre_Theme_park_new",
        "question": "What are the names of the tourist attractions visited by tourists Vincent and Marcelle, including the visit durations in minutes and the visitor satisfaction scores? Additionally, indicate whether the probability of returning is high (probability of return greater than or equal to 0.8) for each attraction, and exclude any records where the probability of return is not specified. Present the results ordered by visitor name and attraction name.",
        "query": "```sql\nSELECT \n    ta.ATTRACTION_NAME AS Tourist_Attraction_Name,\n    v.VISITOR_NAME AS Visitor_Name,\n    vi.VISIT_DURATION_MINUTES AS Visit_Duration_Minutes,\n    vi.VISITOR_SATISFACTION_SCORE AS Visitor_Satisfaction_Score,\n    CASE WHEN vi.VISITOR_PROBABILITY_OF_RETURN >= 0.8 THEN 'High Probability of Return' ELSE 'Low Probability of Return' END AS Return_Probability\nFROM \n    Tourist_Attractions ta\nJOIN \n    Visits vi ON ta.Tourist_Attraction_ID = vi.Tourist_Attraction_ID\nJOIN \n    Visitors v ON vi.Tourist_ID = v.Tourist_ID\nWHERE \n    v.VISITOR_NAME IN ('Vincent', 'Marcelle')\n    AND vi.VISITOR_PROBABILITY_OF_RETURN IS NOT NULL\nORDER BY \n    v.VISITOR_NAME, ta.ATTRACTION_NAME;\n```"
    },
    {
        "instance_id": "q_652",
        "db_id": "cre_Theme_park_new",
        "question": "Which tourist attractions, known for having a higher visitor return probability due to a loyalty score greater than 4 and being categorized under the \"High Return Probability\" segment, did Alison explore? Additionally, which of these popular attractions did Rosalind avoid, despite their popularity? Consider only attractions that offer unique features available within specific time windows defined by the current date falling between the feature's availability start and end dates.",
        "query": "```sql\nWITH HighReturnAttractions AS (\n    SELECT ta.Tourist_Attraction_ID, ta.ATTRACTION_TYPE_CODE, ta.ATTRACTION_OPERATIONAL_STATUS, ta.ATTRACTION_AVAILABILITY_STATUS\n    FROM Tourist_Attractions ta\n    JOIN Visitors v ON ta.ATTRACTION_AVAILABILITY_STATUS = 'Available'\n    WHERE v.VISITOR_LOYALTY_SCORE > 4 AND v.VISITOR_SEGMENT = 'High Return Probability'\n      AND EXISTS (\n          SELECT 1\n          FROM Features f\n          WHERE f.Feature_ID = ta.Tourist_Attraction_ID\n            AND CURRENT_DATE BETWEEN f.FEATURE_AVAILABILITY_START_DATE AND f.FEATURE_AVAILABILITY_END_DATE\n      )\n),\nAlisonVisits AS (\n    SELECT DISTINCT va.Tourist_Attraction_ID\n    FROM Visits vi\n    JOIN Visitors vis ON vi.Tourist_ID = vis.Tourist_ID\n    JOIN Tourist_Attractions va ON vi.Visit_ID = va.Tourist_Attraction_ID\n    WHERE vis.VISITOR_TYPE = 'Alison'\n),\nRosalindAvoided AS (\n    SELECT DISTINCT ta.Tourist_Attraction_ID\n    FROM Tourist_Attractions ta\n    LEFT JOIN Visits vi ON ta.Tourist_Attraction_ID = vi.Visit_ID\n    JOIN Visitors vis ON vi.Tourist_ID = vis.Tourist_ID\n    WHERE vis.VISITOR_TYPE = 'Rosalind' AND vi.Visit_ID IS NULL\n)\nSELECT hra.Tourist_Attraction_ID AS Alison_Explored, r.Rosalind_Avoided\nFROM HighReturnAttractions hra\nLEFT JOIN AlisonVisits ali ON hra.Tourist_Attraction_ID = ali.Tourist_Attraction_ID\nLEFT JOIN RosalindAvoided r ON hra.Tourist_Attraction_ID = r.Tourist_Attraction_ID\nWHERE ali.Tourist_Attraction_ID IS NOT NULL OR r.Rosalind_Avoided IS NOT NULL;\n```"
    },
    {
        "instance_id": "q_655",
        "db_id": "cre_Theme_park_new",
        "question": "Which tourist attractions, that are currently unavailable or marked as unavailable due to maintenance, did Alison visit, where the average visit duration across all visits exceeds 30 minutes, and which Rosalind has not visited at all?",
        "query": "```sql\nSELECT DISTINCT ta.Tourist_Attraction_ID, ta.ATTRACTION_AVAILABILITY_STATUS\nFROM Tourist_Attractions ta\nJOIN Visits v ON ta.Tourist_Attraction_ID = v.Tourist_Attraction_ID\nJOIN Visitors vis ON v.Tourist_ID = vis.Tourist_ID\nWHERE (\n    ta.ATTRACTION_AVAILABILITY_STATUS = 'Unavailability' \n    OR ta.ATTRACTION_AVAILABILITY_STATUS = 'Maintenance'\n)\nAND vis.VISITOR_TYPE = 'Alison'\nAND ta.Tourist_Attraction_ID NOT IN (\n    SELECT DISTINCT ta2.Tourist_Attraction_ID\n    FROM Tourist_Attractions ta2\n    JOIN Visits v2 ON ta2.Tourist_Attraction_ID = v2.Tourist_Attraction_ID\n    JOIN Visitors vis2 ON v2.Tourist_ID = vis2.Tourist_ID\n    WHERE vis2.VISITOR_TYPE = 'Rosalind'\n)\nAND ta.Tourist_Attraction_ID IN (\n    SELECT Tourist_Attraction_ID\n    FROM Visits\n    GROUP BY Tourist_Attraction_ID\n    HAVING AVG(VISIT_DURATION_MINUTES) > 30\n);\n```"
    },
    {
        "instance_id": "q_658",
        "db_id": "customers_and_addresses_new",
        "question": "Identify customers who have not participated in any promotions related to the \"Latte\" product category within the past 6 months, based on their order history and considering their loyalty tier. Additionally, determine whether these customers belong to a high-churn-risk segment by evaluating their customer segment, where \"High-Risk\" or \"Medium-Risk\" segments are classified as high churn risk. Ensure the analysis includes only customers with no engagement in \"Latte\"-related promotions during the specified time frame.",
        "query": "```sql\nSELECT \n    c.CUSTOMER_ID,\n    c.LOYALTY_SCORE,\n    c.CUSTOMER_SEGMENT,\n    CASE \n        WHEN c.CUSTOMER_SEGMENT IN ('High-Risk', 'Medium-Risk') THEN 'Yes'\n        ELSE 'No'\n    END AS HIGH_CHURN_RISK\nFROM \n    Customers c\nLEFT JOIN \n    Customer_Orders co ON c.CUSTOMER_ID = co.CUSTOMER_ID\nLEFT JOIN \n    Products p ON co.ORDER_DETAILS LIKE CONCAT('%', p.PRODUCT_ID, '%')\nLEFT JOIN \n    Promotion_Rules pr ON co.ORDER_ID = pr.PROMOTION_RULE_ID\nWHERE \n    c.CUSTOMER_ID NOT IN (\n        SELECT DISTINCT c2.CUSTOMER_ID\n        FROM Customers c2\n        JOIN Customer_Orders co2 ON c2.CUSTOMER_ID = co2.CUSTOMER_ID\n        JOIN Products p2 ON co2.ORDER_DETAILS LIKE CONCAT('%', p2.PRODUCT_ID, '%')\n        JOIN Promotion_Rules pr2 ON co2.ORDER_ID = pr2.PROMOTION_RULE_ID\n        WHERE p2.PRODUCT_CATEGORY = 'Latte'\n          AND pr2.START_DATE >= CURRENT_DATE - INTERVAL '6 MONTH'\n    )\nAND p.PRODUCT_CATEGORY IS NULL\nGROUP BY \n    c.CUSTOMER_ID, c.LOYALTY_SCORE, c.CUSTOMER_SEGMENT;\n```"
    },
    {
        "instance_id": "q_661",
        "db_id": "customers_and_addresses_new",
        "question": "Which customers have not engaged with any product in the category that includes \"Latte,\" and what are their loyalty scores and segmentation statuses? Include customers who may have shown interest by initiating an order but did not complete it within the past 30 days. Specifically, consider only those customers whose orders were neither marked as \"Completed\" nor \"Shipped,\" or who have no associated orders at all.",
        "query": "```sql\nSELECT \n    c.CUSTOMER_ID, \n    c.LOYALTY_SCORE, \n    c.CUSTOMER_SEGMENT, \n    c.SEGMENTATION_DATE\nFROM \n    Customers c\nLEFT JOIN \n    Customer_Orders co ON c.CUSTOMER_ID = co.CUSTOMER_ID\nLEFT JOIN \n    Products p ON co.ORDER_DETAILS LIKE '%' || p.PRODUCT_ID || '%'\nWHERE \n    p.PRODUCT_CATEGORY IS NULL \n    OR p.PRODUCT_CATEGORY NOT LIKE '%Latte%'\n    AND co.ORDER_STATUS NOT IN ('Completed', 'Shipped')\n    AND (co.ORDER_ID IS NULL \n         OR co.ORDER_TIMESTAMP < CURRENT_TIMESTAMP - INTERVAL '30' DAY)\nGROUP BY \n    c.CUSTOMER_ID, \n    c.LOYALTY_SCORE, \n    c.CUSTOMER_SEGMENT, \n    c.SEGMENTATION_DATE;\n```"
    },
    {
        "instance_id": "q_656",
        "db_id": "customers_and_addresses_new",
        "question": "Which customers have purchased both Latte and Americano products in the Beverages category through digital channels in the past 6 months, and what are their latest loyalty scores, customer segments, segmentation dates, and segmentation reasons? Only include customers who have completed orders for both product subcategories.",
        "query": "```sql\nSELECT DISTINCT \n    c.CUSTOMER_ID, \n    c.LOYALTY_SCORE, \n    c.CUSTOMER_SEGMENT, \n    c.SEGMENTATION_DATE, \n    c.SEGMENTATION_REASON\nFROM \n    Customers c\nJOIN \n    Customer_Orders co ON c.CUSTOMER_ID = co.CUSTOMER_ID\nJOIN \n    Products p ON co.PRODUCT_ID = p.PRODUCT_ID\nWHERE \n    p.PRODUCT_CATEGORY = 'Beverages'\n    AND p.PRODUCT_SUBCATEGORY IN ('Latte', 'Americano')\n    AND co.ORDER_STATUS = 'Completed'\n    AND co.ORDER_DETAILS LIKE '%digital%'\n    AND co.ORDER_TIMESTAMP >= NOW() - INTERVAL '6 months'\nGROUP BY \n    c.CUSTOMER_ID, c.LOYALTY_SCORE, c.CUSTOMER_SEGMENT, c.SEGMENTATION_DATE, c.SEGMENTATION_REASON\nHAVING \n    COUNT(DISTINCT CASE WHEN p.PRODUCT_SUBCATEGORY = 'Latte' THEN p.PRODUCT_ID END) > 0\n    AND COUNT(DISTINCT CASE WHEN p.PRODUCT_SUBCATEGORY = 'Americano' THEN p.PRODUCT_ID END) > 0;\n```"
    },
    {
        "instance_id": "q_660",
        "db_id": "customers_and_addresses_new",
        "question": "Which customers have made separate completed purchases that include both Latte and Americano products, as indicated in their order details? For these customers, based on their most recent segmentation date, what are their preferred contact channels (using their email addresses as the primary contact method), and which loyalty tiers or customer segments do they belong to that may influence their purchasing behavior?",
        "query": "```sql\nSELECT \n    c.CUSTOMER_ID,\n    c.FIRST_NAME,\n    c.LAST_NAME,\n    c.EMAIL_ADDRESS AS Preferred_Contact_Channel,\n    c.CUSTOMER_SEGMENT,\n    lp.PROGRAM_NAME AS Loyalty_Tier\nFROM \n    Customers c\nJOIN \n    Customer_Orders co1 ON c.CUSTOMER_ID = co1.CUSTOMER_ID\nJOIN \n    Products p1 ON POSITION(p1.PRODUCT_CATEGORY IN co1.ORDER_DETAILS) > 0 AND p1.PRODUCT_SUBCATEGORY = 'Latte'\nJOIN \n    Customer_Orders co2 ON c.CUSTOMER_ID = co2.CUSTOMER_ID\nJOIN \n    Products p2 ON POSITION(p2.PRODUCT_CATEGORY IN co2.ORDER_DETAILS) > 0 AND p2.PRODUCT_SUBCATEGORY = 'Americano'\nLEFT JOIN \n    Loyalty_Programs lp ON c.LOYALTY_PROGRAM_ID = lp.LOYALTY_PROGRAM_ID\nWHERE \n    co1.ORDER_STATUS = 'Completed' \n    AND co2.ORDER_STATUS = 'Completed'\n    AND c.SEGMENTATION_DATE = (SELECT MAX(c2.SEGMENTATION_DATE) FROM Customers c2 WHERE c2.CUSTOMER_ID = c.CUSTOMER_ID)\nGROUP BY \n    c.CUSTOMER_ID, c.FIRST_NAME, c.LAST_NAME, c.EMAIL_ADDRESS, c.CUSTOMER_SEGMENT, lp.PROGRAM_NAME;\n```"
    },
    {
        "instance_id": "q_659",
        "db_id": "e_government_new",
        "question": "From the organization named \"Labour Party,\" which individual has had the most recent contact activity, considering contact activity as the latest timestamp available in any related record such as form submissions or service interactions, and what is their last name? Specifically, evaluate the most recent activity by comparing the latest form submission date and service start date, ensuring that if either is null, the other is considered for determining recency.",
        "query": "```sql\nSELECT i.LAST_NAME\nFROM Individuals i\nJOIN Organization_Contact_Individuals oci ON i.INDIVIDUAL_ID = oci.ORGANIZATION_CONTACT_INDIVIDUALS_INDIVIDUAL_ID\nJOIN Organizations o ON oci.ORGANIZATION_CONTACT_ROLE = o.ORGANIZATION_TYPE\nLEFT JOIN Forms f ON i.INDIVIDUAL_ID = f.FORM_SUBMITTER_ID\nLEFT JOIN Party_Services ps ON i.INDIVIDUAL_ID = ps.PARTY_SERVICES_BOOKING_ID\nWHERE o.ORGANIZATION_TYPE = 'Labour Party'\n  AND (f.FORM_SUBMISSION_DATE IS NULL OR ps.SERVICE_START_DATE IS NULL OR f.FORM_SUBMISSION_DATE >= ps.SERVICE_START_DATE)\nORDER BY GREATEST(f.FORM_SUBMISSION_DATE, ps.SERVICE_START_DATE) DESC\nLIMIT 1;\n```"
    },
    {
        "instance_id": "q_662",
        "db_id": "e_government_new",
        "question": "Among individuals associated with organizations classified as political entities, who had the most recent form submission within the past year, and what is their last name? The determination should consider both the latest form submission date and the individual's loyalty score as a measure of contact frequency, giving precedence to higher loyalty scores in case of ties.",
        "query": "```sql\nSELECT i.LAST_NAME\nFROM Individuals i\nJOIN Organization_Contact_Individuals oci ON i.INDIVIDUAL_ID = oci.ORGANIZATION_CONTACT_INDIVIDUALS_INDIVIDUAL_ID\nJOIN Organizations o ON oci.ORGANIZATION_CONTACT_ROLE = o.ORGANIZATION_TYPE\nJOIN Forms f ON i.INDIVIDUAL_ID = f.FORM_SUBMITTER_ID\nWHERE o.ORGANIZATION_TYPE = 'Political Entity'\n  AND f.FORM_SUBMISSION_DATE >= CURRENT_DATE - INTERVAL '1 YEAR'\n  AND f.FORM_SUBMISSION_DATE = (\n    SELECT MAX(f2.FORM_SUBMISSION_DATE)\n    FROM Forms f2\n    JOIN Individuals i2 ON f2.FORM_SUBMITTER_ID = i2.INDIVIDUAL_ID\n    JOIN Organization_Contact_Individuals oci2 ON i2.INDIVIDUAL_ID = oci2.ORGANIZATION_CONTACT_INDIVIDUALS_INDIVIDUAL_ID\n    JOIN Organizations o2 ON oci2.ORGANIZATION_CONTACT_ROLE = o2.ORGANIZATION_TYPE\n    WHERE o2.ORGANIZATION_TYPE = 'Political Entity'\n      AND f2.FORM_SUBMISSION_DATE >= CURRENT_DATE - INTERVAL '1 YEAR'\n  )\nORDER BY i.LOYALTY_SCORE DESC, f.FORM_SUBMISSION_DATE DESC\nLIMIT 1;\n```"
    },
    {
        "instance_id": "q_665",
        "db_id": "e_government_new",
        "question": "What is the last name of the individual who was the earliest contact person for the organization with the highest UK VAT number, considering the contact frequency and total duration of services provided as indicators of the most significant initial interaction?",
        "query": "```sql\nSELECT i.LAST_NAME\nFROM Individuals i\nJOIN Organization_Contact_Individuals oci ON i.INDIVIDUAL_ID = oci.ORGANIZATION_CONTACT_INDIVIDUALS_INDIVIDUAL_ID\nJOIN Organizations o ON oci.ORGANIZATION_CONTACT_ROLE = o.ORGANIZATION_TYPE\nJOIN Party_Services ps ON i.INDIVIDUAL_ID = ps.PARTY_SERVICES_BOOKING_ID\nWHERE o.ORGANIZATION_LEGAL_ENTITY_ID = (\n    SELECT MAX(o2.ORGANIZATION_LEGAL_ENTITY_ID)\n    FROM Organizations o2\n    WHERE o2.ORGANIZATION_TYPE = 'UK VAT'\n)\nAND oci.ORGANIZATION_CONTACT_ROLE_START_DATE = (\n    SELECT MIN(oci2.ORGANIZATION_CONTACT_ROLE_START_DATE)\n    FROM Organization_Contact_Individuals oci2\n    JOIN Organizations o2 ON oci2.ORGANIZATION_CONTACT_ROLE = o2.ORGANIZATION_TYPE\n    WHERE o2.ORGANIZATION_TYPE = 'UK VAT'\n)\nORDER BY COUNT(ps.SERVICE_STATUS) DESC, SUM(DATEDIFF(ps.SERVICE_END_DATE, ps.SERVICE_START_DATE)) DESC\nLIMIT 1;\n```"
    },
    {
        "instance_id": "q_663",
        "db_id": "e_government_new",
        "question": "Which individual, associated with the organization having the largest size (acting as a proxy for highest annual revenue), was most recently assigned an active contact role? Provide the last name of this individual, considering only those who have submitted at least one form and have a loyalty score above the average loyalty score of all individuals. Ensure that the contact role is currently active, meaning it has no end date or an end date in the future, and the start date is on or before the current date.",
        "query": "```sql\nWITH OrganizationRevenueRank AS (\n    SELECT \n        ORGANIZATION_ID, \n        ROW_NUMBER() OVER (ORDER BY ORGANIZATION_SIZE DESC) AS RevenueRank\n    FROM Organizations\n),\nIndividualFormSubmission AS (\n    SELECT DISTINCT \n        FORM_SUBMITTER_ID\n    FROM Forms\n    WHERE FORM_SUBMITTER_ID IS NOT NULL\n),\nAverageLoyaltyScore AS (\n    SELECT \n        AVG(LOYALTY_SCORE) AS AvgLoyaltyScore\n    FROM Individuals\n),\nEligibleIndividuals AS (\n    SELECT \n        I.INDIVIDUAL_ID, \n        I.LAST_NAME, \n        I.LOYALTY_SCORE, \n        OCI.ORGANIZATION_CONTACT_ROLE_END_DATE\n    FROM Individuals I\n    JOIN Organization_Contact_Individuals OCI \n        ON I.INDIVIDUAL_ID = OCI.ORGANIZATION_CONTACT_INDIVIDUALS_INDIVIDUAL_ID\n    JOIN OrganizationRevenueRank ORR \n        ON OCI.ORGANIZATION_CONTACT_ROLE_STATUS = 'Active' \n        AND OCI.ORGANIZATION_CONTACT_ROLE_END_DATE IS NULL \n        AND OCI.ORGANIZATION_CONTACT_ROLE_START_DATE <= CURRENT_DATE\n        AND ORR.ORGANIZATION_ID = OCI.ORGANIZATION_ID\n    JOIN IndividualFormSubmission IFS \n        ON I.INDIVIDUAL_ID = IFS.FORM_SUBMITTER_ID\n    CROSS JOIN AverageLoyaltyScore ALS\n    WHERE I.LOYALTY_SCORE > ALS.AvgLoyaltyScore\n)\nSELECT \n    EI.LAST_NAME\nFROM EligibleIndividuals EI\nWHERE EI.ORGANIZATION_CONTACT_ROLE_END_DATE = (\n    SELECT MAX(EI2.ORGANIZATION_CONTACT_ROLE_END_DATE) \n    FROM EligibleIndividuals EI2\n)\nLIMIT 1;\n```"
    },
    {
        "instance_id": "q_671",
        "db_id": "tracking_orders_new",
        "question": "Find the distinct customers who have experienced both \"On Road\" and \"Shipped\" shipment statuses for their orders, ensuring their loyalty score exceeds the average loyalty score of all customers within their respective province. Include the customer IDs in the result.",
        "query": "```sql\nWITH Customer_Order_Status AS (\n    SELECT \n        c.customer_id,\n        c.province,\n        c.loyalty_score,\n        AVG(c.loyalty_score) OVER (PARTITION BY c.province) AS avg_loyalty_score_province,\n        STRING_AGG(DISTINCT o.order_shipment_status, ',') AS order_statuses\n    FROM \n        Customers c\n    JOIN \n        Orders o ON c.customer_id = o.customer_id\n    WHERE \n        o.order_shipment_status IN ('On Road', 'Shipped')\n    GROUP BY \n        c.customer_id, c.province, c.loyalty_score\n), Eligible_Customers AS (\n    SELECT \n        customer_id\n    FROM \n        Customer_Order_Status\n    WHERE \n        order_statuses LIKE '%On Road%' \n        AND order_statuses LIKE '%Shipped%' \n        AND loyalty_score > avg_loyalty_score_province\n)\nSELECT \n    DISTINCT c.customer_id\nFROM \n    Eligible_Customers e\nJOIN \n    Customers c ON e.customer_id = c.customer_id;\n```"
    },
    {
        "instance_id": "q_664",
        "db_id": "tracking_orders_new",
        "question": "Which customers, belonging to the loyalty tiers of 'Gold' or 'Platinum' which qualify for advanced shipping options, have had orders with both \"On Road\" and \"Shipped\" shipment statuses within their order lifecycle? Provide the customer IDs and their full addresses (province, city, and district).",
        "query": "```sql\nSELECT DISTINCT c.customer_id, c.province || ', ' || c.city || ', ' || c.district AS customer_name\nFROM Customers c\nJOIN Orders o ON c.customer_id = o.shipping_address_id\nJOIN Shipments s ON o.order_id = s.shipment_id\nWHERE c.loyalty_tier IN ('Gold', 'Platinum') -- Assuming these tiers qualify for advanced shipping options\n  AND EXISTS (\n    SELECT 1\n    FROM Shipments s1\n    JOIN Orders o1 ON s1.shipment_id = o1.order_id\n    WHERE o1.shipping_address_id = c.customer_id\n      AND s1.shipment_status = 'On Road'\n  )\n  AND EXISTS (\n    SELECT 1\n    FROM Shipments s2\n    JOIN Orders o2 ON s2.shipment_id = o2.order_id\n    WHERE o2.shipping_address_id = c.customer_id\n      AND s2.shipment_status = 'Shipped'\n  );\n```"
    },
    {
        "instance_id": "q_667",
        "db_id": "tracking_orders_new",
        "question": "Identify the customers who have had orders with both \"On Road\" and \"Shipped\" statuses within the past 30 days, where the payment dates of these orders fall between 30 days ago and today. Additionally, ensure that these customers' loyalty scores are above the average loyalty score for their respective cities. For each qualifying customer, provide the total number of orders placed during this 30-day period.",
        "query": "```sql\nWITH Relevant_Orders AS (\n    SELECT DISTINCT o.order_id, o.customer_id\n    FROM Orders o\n    WHERE o.order_shipment_status IN ('On Road', 'Shipped')\n      AND o.payment_date >= CURRENT_DATE - INTERVAL '30 days'\n      AND o.payment_date < CURRENT_DATE\n),\nCustomer_Cities AS (\n    SELECT c.customer_id, c.city, AVG(c.loyalty_score) OVER (PARTITION BY c.city) AS city_avg_loyalty_score\n    FROM Customers c\n),\nEligible_Customers AS (\n    SELECT ro.customer_id\n    FROM Relevant_Orders ro\n    JOIN Orders o1 ON ro.customer_id = o1.customer_id\n    JOIN Orders o2 ON ro.customer_id = o2.customer_id\n    WHERE o1.order_shipment_status = 'On Road'\n      AND o2.order_shipment_status = 'Shipped'\n      AND o1.payment_date >= CURRENT_DATE - INTERVAL '30 days'\n      AND o1.payment_date < CURRENT_DATE\n      AND o2.payment_date >= CURRENT_DATE - INTERVAL '30 days'\n      AND o2.payment_date < CURRENT_DATE\n    GROUP BY ro.customer_id\n),\nFiltered_Customers AS (\n    SELECT ec.customer_id\n    FROM Eligible_Customers ec\n    JOIN Customers c ON ec.customer_id = c.customer_id\n    JOIN Customer_Cities cc ON c.city = cc.city\n    WHERE c.loyalty_score > cc.city_avg_loyalty_score\n)\nSELECT fc.customer_id, COUNT(ro.order_id) AS total_orders\nFROM Filtered_Customers fc\nJOIN Relevant_Orders ro ON fc.customer_id = ro.customer_id\nGROUP BY fc.customer_id;\n```"
    },
    {
        "instance_id": "q_668",
        "db_id": "tracking_orders_new",
        "question": "List the distinct customer IDs and their loyalty tiers for customers who have had both \"On Road\" and \"Shipped\" shipment statuses within their order lifecycle, and whose loyalty score is above the average loyalty score of all customers.",
        "query": "```sql\nSELECT DISTINCT c.customer_id, c.loyalty_tier\nFROM Customers c\nJOIN Orders o ON c.customer_id = o.customer_id\nJOIN Shipments s ON o.order_id = s.order_id\nWHERE c.loyalty_score > (SELECT AVG(loyalty_score) FROM Customers)\n  AND EXISTS (\n    SELECT 1\n    FROM Shipments s1\n    WHERE s1.order_id = o.order_id\n      AND s1.shipment_status = 'On Road'\n  )\n  AND EXISTS (\n    SELECT 1\n    FROM Shipments s2\n    WHERE s2.order_id = o.order_id\n      AND s2.shipment_status = 'Shipped'\n  );\n```"
    },
    {
        "instance_id": "q_666",
        "db_id": "tracking_orders_new",
        "question": "Find the customers who are part of a loyalty program and have purchased \"food\" category products, ensuring that their most recent order was approved within the past 30 days. Additionally, indicate whether these customers belong to a high-value segment based on their current segmentation criteria. Include the customer ID, loyalty score, loyalty tier, and segment name in the results. For the high-value segment indication, classify customers as \"Yes\" if they belong to the 'High-Value' segment and \"No\" otherwise. Ensure that only active segmentation records (where the segment end date is null) are considered.",
        "query": "```sql\nSELECT \n    c.customer_id,\n    c.loyalty_score,\n    c.loyalty_tier,\n    cs.customer_segment AS segment_name,\n    CASE WHEN cs.customer_segment = 'High-Value' THEN 'Yes' ELSE 'No' END AS is_high_value_segment\nFROM \n    Customers c\nJOIN \n    Customer_Segments cs \n    ON c.customer_group_id = cs.customer_segment AND cs.segment_end_date IS NULL\nJOIN \n    Orders o \n    ON c.customer_id = o.order_id\nJOIN \n    Order_Approval_Logs oal \n    ON o.order_id = oal.order_approval_user_id\nJOIN \n    Order_Items oi \n    ON o.order_id = oi.order_item_id\nJOIN \n    Products p \n    ON oi.product_id = p.product_id\nWHERE \n    c.loyalty_tier IS NOT NULL\n    AND p.product_category = 'food'\n    AND oal.approval_timestamp >= CURRENT_TIMESTAMP - INTERVAL '30 days'\n    AND o.order_payment_status = 'approved'\nGROUP BY \n    c.customer_id, c.loyalty_score, c.loyalty_tier, cs.customer_segment;\n```"
    },
    {
        "instance_id": "q_669",
        "db_id": "tracking_orders_new",
        "question": "Which customers, categorized by their loyalty tier, have made at least one purchase of a product classified as \"food\" during the last completed quarter? Additionally, provide the likelihood of these customers repeating a similar purchase, based on their historical behavior and sales forecasts from the most recent quarter.",
        "query": "```sql\nSELECT \n    c.customer_id,\n    c.loyalty_tier,\n    COUNT(DISTINCT o.order_id) AS purchase_count,\n    MAX(CASE WHEN pf.forecast_period_end >= CURRENT_DATE - INTERVAL '1 QUARTER' THEN pf.sales_forecast ELSE NULL END) AS recent_purchase_likelihood\nFROM \n    Customers c\nJOIN \n    Orders o ON c.customer_id = o.customer_id\nJOIN \n    Order_Items oi ON o.order_id = oi.order_id\nJOIN \n    Products p ON oi.product_id = p.product_id\nLEFT JOIN \n    Sales_Forecast pf ON c.customer_id = pf.customer_id\nWHERE \n    p.product_category = 'food'\n    AND o.payment_date >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '1 QUARTER'\n    AND o.payment_date < DATE_TRUNC('quarter', CURRENT_DATE)\nGROUP BY \n    c.customer_id, c.loyalty_tier\nHAVING \n    COUNT(DISTINCT o.order_id) > 0;\n```"
    },
    {
        "instance_id": "q_672",
        "db_id": "tracking_orders_new",
        "question": "Find customers who have canceled orders involving food items, specifically focusing on those with higher engagement loyalty tiers ('Gold' or 'Platinum'). Include details about their customer segmentation and the specific reasons for cancellation if available. Ensure that only orders with a valid cancellation reason are considered, and confirm that the associated order items include products categorized as 'Food'.",
        "query": "```sql\nSELECT \n    c.customer_id,\n    c.loyalty_tier,\n    c.customer_group_id,\n    cs.customer_segment,\n    cs.segment_reason,\n    o.cancellation_reason\nFROM \n    Customers c\nJOIN \n    Orders o ON c.customer_id = o.order_id\nLEFT JOIN \n    Customer_Segments cs ON c.customer_group_id = cs.customer_segment\nWHERE \n    c.loyalty_tier IN ('Gold', 'Platinum') -- Higher engagement tiers\n    AND o.cancellation_reason IS NOT NULL\n    AND EXISTS (\n        SELECT 1\n        FROM Order_Items oi\n        JOIN Products p ON oi.order_item_id = p.product_id\n        WHERE oi.order_id = o.order_id\n          AND p.product_category = 'Food' -- Assuming a column for product category exists in Products table\n    );\n```"
    },
    {
        "instance_id": "q_670",
        "db_id": "tracking_orders_new",
        "question": "Which customers, grouped by their loyalty tier, have had their food-related purchases canceled within the last quarter, including the associated cancellation reasons? Additionally, analyze the timing patterns of these cancellations relative to the order placement dates, ordered by loyalty tier and payment date.",
        "query": "```sql\nSELECT \n    c.customer_id,\n    c.loyalty_tier,\n    o.order_id,\n    o.cancellation_reason,\n    oi.order_item_id,\n    pr.promotion_type AS product_category,\n    o.payment_date AS order_placement_date,\n    o.payment_date - INTERVAL '1 QUARTER' AS quarter_start_date,\n    o.payment_date AS quarter_end_date\nFROM \n    Customers c\nJOIN \n    Orders o ON c.customer_id = o.customer_id\nJOIN \n    Order_Items oi ON o.order_id = oi.order_item_id\nLEFT JOIN \n    Promotion_Rules pr ON oi.promotion_rule_id = pr.promotion_rule_id\nWHERE \n    o.cancellation_reason IS NOT NULL\n    AND pr.promotion_type = 'Food'\n    AND o.payment_date >= CURRENT_DATE - INTERVAL '1 QUARTER'\n    AND o.payment_date < CURRENT_DATE\nORDER BY \n    c.loyalty_tier, \n    o.payment_date;\n```"
    },
    {
        "instance_id": "q_673",
        "db_id": "geo_new",
        "question": "Which city in the state with the highest elevation range has the lowest population density, and how does its urbanization status compare to the average urbanization status of the state? Specifically, determine whether the city is less urbanized, more urbanized, or average compared to the state's average population density.",
        "query": "```sql\nWITH StateElevationRange AS (\n    SELECT \n        s.state_name,\n        MAX(m.mountain_altitude) - MIN(m.mountain_altitude) AS elevation_range\n    FROM state s\n    JOIN mountain m ON s.state_name = m.state_code\n    GROUP BY s.state_name\n    ORDER BY elevation_range DESC\n    LIMIT 1\n),\nCityPopulationDensity AS (\n    SELECT \n        c.city_name,\n        c.city_population_density,\n        c.city_classification,\n        s.state_name\n    FROM city c\n    JOIN state s ON c.city_state_code = s.state_name\n    WHERE s.state_name = (SELECT state_name FROM StateElevationRange)\n    ORDER BY c.city_population_density ASC\n    LIMIT 1\n),\nStateAverageUrbanization AS (\n    SELECT \n        AVG(city_population_density) AS avg_population_density\n    FROM city\n    WHERE city_state_code = (SELECT state_name FROM StateElevationRange)\n)\nSELECT \n    cpd.city_name,\n    cpd.city_population_density,\n    cpd.city_classification,\n    se.state_name,\n    sa.avg_population_density,\n    CASE \n        WHEN cpd.city_population_density < sa.avg_population_density THEN 'Less urbanized than average'\n        WHEN cpd.city_population_density > sa.avg_population_density THEN 'More urbanized than average'\n        ELSE 'Average urbanization'\n    END AS urbanization_status_comparison\nFROM CityPopulationDensity cpd\nJOIN StateElevationRange se ON cpd.state_name = se.state_name\nJOIN StateAverageUrbanization sa;\n```"
    },
    {
        "instance_id": "q_676",
        "db_id": "geo_new",
        "question": "Which states have a higher elevation (in feet) than the highest population density among capital cities in the USA, while also having an average annual rainfall greater than the maximum average annual precipitation of their respective states? Additionally, list these states in ascending order of their average annual temperature to assess potential environmental impacts based on climate conditions.",
        "query": "SELECT DISTINCT s.state_name, s.state_average_annual_temperature \nFROM state s \nJOIN city c ON s.state_name = c.city_state_code \nJOIN highlow hl ON s.state_name = hl.highlow_region \nWHERE s.average_annual_rainfall > (SELECT MAX(state_average_annual_precipitation) FROM state WHERE state_name = c.city_state_code) \nAND hl.elevation_ft > (SELECT MAX(city_population_density) FROM city WHERE city_classification = 'Capital' AND country_name = 'USA') \nORDER BY s.state_average_annual_temperature ASC;"
    },
    {
        "instance_id": "q_675",
        "db_id": "geo_new",
        "question": "Which city has the highest population density among cities located in the state with the smallest area that the Mississippi River passes through, and what is the projected population growth rate of that city over the next decade?",
        "query": "```sql\nSELECT \n    c.city_name, \n    c.city_population_density, \n    s.state_population_growth_rate AS projected_population_growth_rate\nFROM \n    city c\nJOIN \n    state s ON c.city_state_code = s.state_name\nJOIN \n    river r ON s.state_name = r.river_state_code\nWHERE \n    r.river_name = 'Mississippi'\n    AND s.area = (\n        SELECT MIN(s2.area)\n        FROM state s2\n        JOIN river r2 ON s2.state_name = r2.river_state_code\n        WHERE r2.river_name = 'Mississippi'\n    )\nORDER BY \n    c.city_population_density DESC\nLIMIT 1;\n```"
    },
    {
        "instance_id": "q_679",
        "db_id": "geo_new",
        "question": "Which city in the state with the smallest land area has experienced the highest population growth rate over the past decade, and how does its urbanization status (as indicated by city classification and population density) compare to the average urbanization status of other cities within the same state?",
        "query": "```sql\nWITH state_min_area AS (\n    SELECT state_state_code, state_name\n    FROM state\n    ORDER BY area ASC\n    LIMIT 1\n),\ncity_growth_rate AS (\n    SELECT \n        city.city_name, \n        city.city_state_code, \n        (city.population - LAG(city.population) OVER (PARTITION BY city.city_state_code ORDER BY city.city_name)) / LAG(city.population) OVER (PARTITION BY city.city_state_code ORDER BY city.city_name) * 100 AS population_growth_rate,\n        city.city_classification\n    FROM city\n    WHERE city.city_state_code = (SELECT state_state_code FROM state_min_area)\n)\nSELECT \n    cgr.city_name, \n    cgr.city_state_code, \n    cgr.population_growth_rate, \n    cgr.city_classification,\n    AVG(c.city_population_density) OVER (PARTITION BY c.city_state_code) AS avg_city_population_density_state\nFROM city_growth_rate cgr\nJOIN city c ON cgr.city_name = c.city_name AND cgr.city_state_code = c.city_state_code\nWHERE cgr.population_growth_rate = (\n    SELECT MAX(population_growth_rate)\n    FROM city_growth_rate\n)\nORDER BY cgr.population_growth_rate DESC\nLIMIT 1;\n```"
    },
    {
        "instance_id": "q_682",
        "db_id": "geo_new",
        "question": "Which city in the state with the smallest land area has experienced the highest population growth rate over the past decade, and how does its urbanization status and population density compare to the average population density of other cities within the same state?",
        "query": "```sql\nWITH state_smallest_area AS (\n    SELECT state_state_code\n    FROM state\n    ORDER BY area ASC\n    LIMIT 1\n),\ncity_growth_rate AS (\n    SELECT \n        city.city_name, \n        city.city_state_code, \n        (city.population - LAG(city.population) OVER (PARTITION BY city.city_name ORDER BY city.city_code)) / CAST(LAG(city.population) OVER (PARTITION BY city.city_name ORDER BY city.city_code) AS FLOAT) AS population_growth_rate,\n        city.city_classification\n    FROM city\n    WHERE city.city_state_code = (SELECT state_state_code FROM state_smallest_area)\n)\nSELECT \n    cgr.city_name, \n    cgr.city_state_code, \n    cgr.population_growth_rate, \n    cgr.city_classification,\n    AVG(c.city_population_density) OVER (PARTITION BY c.city_state_code) AS avg_state_population_density\nFROM city_growth_rate cgr\nJOIN city c ON cgr.city_name = c.city_name AND cgr.city_state_code = c.city_state_code\nWHERE cgr.population_growth_rate = (\n    SELECT MAX(population_growth_rate)\n    FROM city_growth_rate\n)\nORDER BY cgr.population_growth_rate DESC\nLIMIT 1;\n```"
    },
    {
        "instance_id": "q_674",
        "db_id": "geo_new",
        "question": "Which state, sharing a border with California through common river systems, exhibits the greatest difference between its highest and lowest elevations? Additionally, compare the average population density of this state to that of California, providing both values explicitly.",
        "query": "```sql\nWITH state_elevation_variations AS (\n    SELECT \n        h.region_name AS state_name,\n        MAX(mountain_elevation) - MIN(mountain_elevation) AS elevation_variation\n    FROM highlow h\n    JOIN mountain m ON h.mountain_name = m.mountain_name\n    WHERE h.highlow_region = 'California'\n    GROUP BY h.region_name\n    ORDER BY elevation_variation DESC\n    LIMIT 1\n),\ncalifornia_density AS (\n    SELECT \n        state_population_density\n    FROM state\n    WHERE state_name = 'California'\n),\nneighboring_state_density AS (\n    SELECT \n        s.state_name,\n        s.state_population_density\n    FROM state s\n    WHERE s.state_name IN (\n        SELECT DISTINCT state_name \n        FROM river \n        WHERE river_state_code IN (\n            SELECT DISTINCT river_state_code \n            FROM river \n            WHERE state_name = 'California'\n        )\n    )\n)\nSELECT \n    sev.state_name,\n    sev.elevation_variation,\n    nsd.state_population_density AS neighboring_state_density,\n    cd.state_population_density AS california_density\nFROM state_elevation_variations sev\nJOIN neighboring_state_density nsd ON sev.state_name = nsd.state_name\nCROSS JOIN california_density cd;\n```"
    },
    {
        "instance_id": "q_678",
        "db_id": "geo_new",
        "question": "Which state that shares a border with California has the highest population density and also experiences the greatest difference between its average annual temperature and the temperature of its highest income quarter?",
        "query": "SELECT s.state_name, s.state_population_density, ABS(s.state_average_annual_temperature - s.state_highest_income_quarter) AS annual_temperature_variance\nFROM state s\nJOIN state ca ON ST_Intersects(PolygonFromText('POLYGON((ca.capital_longitude ca.capital_latitude, ...))', s.Polygon)\nWHERE ca.state_name = 'California'\nORDER BY s.state_population_density DESC, annual_temperature_variance DESC\nLIMIT 1;"
    },
    {
        "instance_id": "q_683",
        "db_id": "geo_new",
        "question": "Which state, sharing a border with California, has the highest population density, contains the largest lake by surface area, and has a capital city with above-average annual sunshine hours compared to other capital cities in the United States?",
        "query": "```sql\nSELECT s.state_name, s.state_population_density, l.lake_name, l.lake_surface_area_change\nFROM state s\nJOIN lake l ON s.state_name = l.lake_state_code\nJOIN city c ON s.state_name = c.city_state_code\nWHERE s.state_name IN (\n    SELECT DISTINCT st.state_name\n    FROM state st\n    JOIN state ca ON ST_GeometryType(ca.capital_latitude, ca.capital_longitude) = 'POINT'\n    WHERE ST_Touches(ST_GeometryType(st.capital_latitude, st.capital_longitude), ST_GeometryType(ca.capital_latitude, ca.capital_longitude))\n      AND ca.state_name = 'California'\n)\nAND c.city_name = s.capital\nAND c.average_annual_solar_radiation > (\n    SELECT AVG(c2.average_annual_solar_radiation)\n    FROM city c2\n    WHERE c2.city_state_code IN (\n        SELECT state_name\n        FROM state\n        WHERE country_name = 'United States'\n    )\n)\nAND l.lake_surface_area_change = (\n    SELECT MAX(l2.lake_surface_area_change)\n    FROM lake l2\n)\nORDER BY s.state_population_density DESC\nLIMIT 1;\n```"
    },
    {
        "instance_id": "q_677",
        "db_id": "geo_new",
        "question": "In the state with the highest population density, which river has the greatest impact on local navigation traffic, considering both its length in miles and average discharge volume in cubic feet per second?",
        "query": "SELECT r.river_name\nFROM river r\nJOIN state s ON r.river_state_code = s.state_name\nWHERE s.state_population_density = (SELECT MAX(state_population_density) FROM state)\nORDER BY r.river_length_miles DESC, r.river_discharge_cubicft_sec DESC\nLIMIT 1;"
    },
    {
        "instance_id": "q_680",
        "db_id": "geo_new",
        "question": "Which river passing through Tennessee and its neighboring states has the greatest length? Provide its navigation capacity compared to other major rivers in the region. Additionally, assess the flood risk level based on pollution sources along the river. Determine the number of nearby lakes with a high biodiversity index (greater than 70) within the same states. Consider only states whose capitals are within 500 units of distance from the coordinates (-86.667, 35.517) when defining neighboring states. Ensure the results are sorted by river length in descending order.",
        "query": "```sql\nWITH region_rivers AS (\n    SELECT \n        r.river_name, \n        r.river_length_miles, \n        r.river_navigation_capacity, \n        r.river_pollution_sources, \n        r.river_state_code, \n        s.state_name\n    FROM \n        river r\n    JOIN \n        state s ON r.river_state_code = s.state_code\n    WHERE \n        s.state_name = 'Tennessee' OR s.state_name IN (\n            SELECT DISTINCT s2.state_name\n            FROM state s2\n            WHERE ST_Distance(ST_Point(s2.capital_longitude, s2.capital_latitude), ST_Point(-86.667, 35.517)) < 500\n        )\n),\nflood_risk AS (\n    SELECT \n        rr.river_name, \n        rr.river_length_miles, \n        rr.river_navigation_capacity,\n        CASE \n            WHEN rr.river_pollution_sources LIKE '%flood%' THEN 'High'\n            ELSE 'Low'\n        END AS flood_risk_level\n    FROM \n        region_rivers rr\n),\nwildlife_diversity AS (\n    SELECT \n        l.lake_name, \n        l.lake_ecosystem_biodiversity_index, \n        l.lake_state_code\n    FROM \n        lake l\n    WHERE \n        l.lake_ecosystem_biodiversity_index > 70\n)\nSELECT \n    fr.river_name, \n    fr.river_length_miles, \n    fr.river_navigation_capacity, \n    fr.flood_risk_level,\n    COUNT(wd.lake_name) AS nearby_lakes_with_high_biodiversity\nFROM \n    flood_risk fr\nLEFT JOIN \n    wildlife_diversity wd ON fr.river_state_code = wd.lake_state_code\nWHERE \n    fr.river_length_miles = (\n        SELECT MAX(rr2.river_length_miles)\n        FROM region_rivers rr2\n    )\nGROUP BY \n    fr.river_name, fr.river_length_miles, fr.river_navigation_capacity, fr.flood_risk_level\nORDER BY \n    fr.river_length_miles DESC;\n```"
    },
    {
        "instance_id": "q_684",
        "db_id": "geo_new",
        "question": "Which river, passing through a state in the USA that shares a border with Tennessee (excluding Tennessee itself), has the greatest impact on the growth rates of cities within that state, as determined by the river's length and navigation capacity, while considering the total population of cities and the average state population growth rate?",
        "query": "SELECT r.river_name, s.state_name, SUM(c.population) AS total_city_population, AVG(s.state_population_growth_rate) AS avg_state_population_growth_rate\nFROM river r\nJOIN state s ON r.river_state_code = s.state_code\nJOIN city c ON c.city_state_code = s.state_code\nWHERE s.state_name IN (\n    SELECT DISTINCT s1.state_name\n    FROM state s1\n    WHERE s1.country_name = 'USA' AND s1.state_name != 'Tennessee'\n    AND EXISTS (\n        SELECT 1\n        FROM state s2\n        WHERE s2.state_name = 'Tennessee' AND ST_Intersects(s1.geometry, s2.geometry)\n    )\n)\nGROUP BY r.river_name, s.state_name\nORDER BY r.river_length_miles DESC, r.river_navigation_capacity DESC\nLIMIT 1;"
    },
    {
        "instance_id": "q_681",
        "db_id": "geo_new",
        "question": "Which river, flowing through a state that either exports to or has industries related to Tennessee, has the greatest impact on urban development as measured by its length, the total population of cities it passes through, and the average population density of those cities?",
        "query": "SELECT r.river_name, SUM(c.population) AS total_population, AVG(c.city_population_density) AS avg_population_density, r.length AS river_length\nFROM river r\nJOIN city c ON r.river_state_code = c.city_state_code\nJOIN state s ON r.river_state_code = s.state_name\nWHERE s.state_name IN (\n    SELECT DISTINCT s1.state_name\n    FROM state s1\n    WHERE 'Tennessee' = ANY(STRING_TO_ARRAY(s1.state_major_export_products, ','))\n       OR 'Tennessee' = ANY(STRING_TO_ARRAY(s1.state_major_industries, ','))\n)\nGROUP BY r.river_name, r.length\nORDER BY river_length DESC, total_population DESC, avg_population_density DESC\nLIMIT 1;"
    },
    {
        "instance_id": "q_685",
        "db_id": "geo_new",
        "question": "Which state along the Mississippi River has experienced the highest population growth rate over the past decade, and what is the urbanization status of its cities?",
        "query": "SELECT s.state_name, s.state_population_growth_rate, c.city_classification \nFROM state s \nLEFT JOIN city c ON s.state_name = c.city_state_code \nWHERE s.state_name IN (\n    SELECT DISTINCT r.river_state_code \n    FROM river r \n    WHERE r.river_name = 'Mississippi'\n) \nORDER BY s.state_population_growth_rate DESC \nLIMIT 1;"
    },
    {
        "instance_id": "q_687",
        "db_id": "geo_new",
        "question": "Among the states along the Mississippi River, which state has experienced the highest population growth rate over the past decade, and what is its current population density as an indicator of urbanization status?",
        "query": "SELECT s.state_name, s.state_population_growth_rate, s.state_population_density\nFROM state s\nJOIN river r ON s.state_name = r.river_state_code\nWHERE r.river_name = 'Mississippi'\nORDER BY s.state_population_growth_rate DESC\nLIMIT 1;"
    },
    {
        "instance_id": "q_688",
        "db_id": "geo_new",
        "question": "Which city in the state with the highest diversity of lake ecosystems has the greatest population density? Additionally, compare the population growth rate of this city to the average population growth rate of all cities located within the same climate zone, as defined by their average annual temperature.",
        "query": "```sql\nWITH StateEcosystemDiversity AS (\n    SELECT \n        s.state_name,\n        COUNT(DISTINCT l.lake_ecosystem) AS ecosystem_diversity\n    FROM state s\n    LEFT JOIN lake l ON s.state_name = l.lake_state_code\n    GROUP BY s.state_name\n    ORDER BY ecosystem_diversity DESC\n    LIMIT 1\n),\nCityPopulationDensity AS (\n    SELECT \n        c.city_name,\n        c.city_population_density,\n        c.city_state_code,\n        s.state_name,\n        s.state_average_annual_temperature\n    FROM city c\n    JOIN state s ON c.city_state_code = s.state_name\n    WHERE s.state_name = (SELECT state_name FROM StateEcosystemDiversity)\n    ORDER BY c.city_population_density DESC\n    LIMIT 1\n),\nAverageGrowthRate AS (\n    SELECT \n        AVG(s.state_population_growth_rate) AS avg_growth_rate\n    FROM state s\n    JOIN CityPopulationDensity cpd ON s.state_average_annual_temperature = cpd.state_average_annual_temperature\n)\nSELECT \n    cpd.city_name,\n    cpd.city_population_density,\n    cpd.state_name,\n    s.state_population_growth_rate AS city_growth_rate,\n    ag.avg_growth_rate AS average_zone_growth_rate\nFROM CityPopulationDensity cpd\nJOIN state s ON cpd.city_state_code = s.state_name\nCROSS JOIN AverageGrowthRate ag;\n```"
    },
    {
        "instance_id": "q_692",
        "db_id": "geo_new",
        "question": "Which state, excluding Idaho, that geographically borders Idaho based on proximity of capital coordinates within a 0.5-degree latitude and longitude range of Idaho's capital, has the lowest natural elevation point considering both geographical features and urban development impacts on terrain?",
        "query": "SELECT s.state_name, MIN(h.lowest_point) AS lowest_elevation_point\nFROM state s\nJOIN highlow h ON s.state_name = h.region_name\nWHERE s.state_name IN (\n    SELECT state_name\n    FROM state\n    WHERE state_name != 'Idaho'\n    AND state_name IN (\n        SELECT state_name\n        FROM state\n        WHERE capital_latitude BETWEEN (\n            SELECT MIN(capital_latitude) - 0.5\n            FROM state\n            WHERE state_name = 'Idaho'\n        ) AND (\n            SELECT MAX(capital_latitude) + 0.5\n            FROM state\n            WHERE state_name = 'Idaho'\n        )\n        AND capital_longitude BETWEEN (\n            SELECT MIN(capital_longitude) - 0.5\n            FROM state\n            WHERE state_name = 'Idaho'\n        ) AND (\n            SELECT MAX(capital_longitude) + 0.5\n            FROM state\n            WHERE state_name = 'Idaho'\n        )\n    )\n)\nGROUP BY s.state_name\nORDER BY lowest_elevation_point ASC\nLIMIT 1;"
    },
    {
        "instance_id": "q_689",
        "db_id": "geo_new",
        "question": "Which city has the highest population density among cities located in states that share a border with California, and how does its population density compare to the average population density of its corresponding state?",
        "query": "```sql\nWITH BorderingStates AS (\n    SELECT DISTINCT s.state_name, s.state_population_density\n    FROM state s\n    WHERE s.state_name IN (\n        SELECT st1.state_name\n        FROM state st1\n        JOIN state st2\n        ON ST_Intersects(POLYGON(st1.geometry), POLYGON(st2.geometry)) = 1\n        WHERE st2.state_name = 'California'\n    )\n),\nCityDensity AS (\n    SELECT c.city_name, c.city_population_density, c.city_state_code\n    FROM city c\n    WHERE c.city_state_code IN (SELECT SUBSTRING(state_name, 1, 2) FROM BorderingStates)\n)\nSELECT cd.city_name, cd.city_population_density, bs.state_population_density AS state_avg_density\nFROM CityDensity cd\nJOIN BorderingStates bs\nON cd.city_state_code = SUBSTRING(bs.state_name, 1, 2)\nWHERE cd.city_population_density = (\n    SELECT MAX(city_population_density)\n    FROM CityDensity\n);\n```"
    },
    {
        "instance_id": "q_693",
        "db_id": "geo_new",
        "question": "Among the states that share a border with California in the United States, which city has the highest population density? Additionally, compare the urbanization status of this city to the major cities of the other bordering states, indicating whether it has higher, lower, or similar urbanization.",
        "query": "```sql\nWITH BorderingStates AS (\n    SELECT DISTINCT s.state_name, s.state_code\n    FROM state s\n    WHERE s.state_name IN (\n        SELECT st.state_name\n        FROM state st\n        WHERE st.country_name = 'United States'\n          AND ST_Intersects(\n              ST_GeomFromText(CONCAT('LINESTRING(', st.capital_longitude, ' ', st.capital_latitude, ')')),\n              ST_GeomFromText(CONCAT('POLYGON((', \n                  (SELECT GROUP_CONCAT(c.longitude, ' ', c.latitude SEPARATOR ',') \n                   FROM city c \n                   WHERE c.city_state_code = 'CA'), \n                  '))'))\n          )\n    )\n),\nCityDensity AS (\n    SELECT \n        c.city_name, \n        c.city_population_density, \n        c.city_classification,\n        c.city_state_code\n    FROM city c\n    JOIN BorderingStates b ON c.city_state_code = b.state_code\n),\nMaxDensityCity AS (\n    SELECT \n        cd.city_name, \n        cd.city_population_density, \n        cd.city_classification\n    FROM CityDensity cd\n    WHERE cd.city_population_density = (\n        SELECT MAX(city_population_density) \n        FROM CityDensity\n    )\n)\nSELECT \n    mc.city_name, \n    mc.city_population_density, \n    mc.city_classification,\n    CASE \n        WHEN mc.city_classification = 'Urban' THEN 'Higher urbanization compared to other bordering states'' major cities'\n        WHEN mc.city_classification = 'Rural' THEN 'Lower urbanization compared to other bordering states'' major cities'\n        ELSE 'Similar urbanization compared to other bordering states'' major cities'\n    END AS UrbanizationComparison\nFROM MaxDensityCity mc;\n```"
    },
    {
        "instance_id": "q_690",
        "db_id": "geo_new",
        "question": "Which urbanized city, located in the state with the lowest population density, has the smallest urban area and is experiencing the highest rate of population decline in 2022?",
        "query": "SELECT c.city_name, c.area_km2, s.state_population_density, s.state_population_change_2022\nFROM city AS c\nJOIN state AS s ON c.city_state_code = s.state_name\nWHERE s.state_population_density = (SELECT MIN(state_population_density) FROM state)\nAND c.city_classification = 'Urban'\nAND c.area_km2 = (SELECT MIN(area_km2) FROM city WHERE city_state_code = s.state_name AND city_classification = 'Urban')\nAND s.state_population_change_2022 = (SELECT MIN(state_population_change_2022) FROM state WHERE state_population_density = s.state_population_density)\nLIMIT 1;"
    },
    {
        "instance_id": "q_686",
        "db_id": "geo_new",
        "question": "Which state, having the longest border length, surrounds the region with the highest population density, calculated as the total population divided by the total area in square kilometers?",
        "query": "SELECT s.state_name \nFROM state s\nJOIN city c ON s.state_name = c.city_state_code\nGROUP BY s.state_name\nORDER BY SUM(c.population) / SUM(c.area_km2) DESC, PERIMETER(s.geometry) DESC\nLIMIT 1;"
    },
    {
        "instance_id": "q_691",
        "db_id": "geo_new",
        "question": "Which is the longest river in the state with the lowest population density, and how does its navigation capacity compare to other rivers located in states with the same average annual temperature and precipitation levels?",
        "query": "```sql\nWITH StateLowestDensity AS (\n    SELECT state_code, state_name\n    FROM state\n    WHERE state_population_density = (SELECT MIN(state_population_density) FROM state)\n),\nLongestRiverInState AS (\n    SELECT r.river_name, r.river_length_miles, r.river_navigation_capacity, s.state_name\n    FROM river r\n    JOIN StateLowestDensity s ON r.river_state_code = s.state_code\n    ORDER BY r.river_length_miles DESC\n    LIMIT 1\n),\nClimateZoneRivers AS (\n    SELECT r.river_name, r.river_navigation_capacity, s.state_average_annual_temperature, s.state_average_annual_precipitation\n    FROM river r\n    JOIN state s ON r.river_state_code = s.state_code\n    WHERE s.state_average_annual_temperature = (\n        SELECT state_average_annual_temperature\n        FROM state\n        WHERE state_name = (SELECT state_name FROM StateLowestDensity)\n    )\n    AND s.state_average_annual_precipitation = (\n        SELECT state_average_annual_precipitation\n        FROM state\n        WHERE state_name = (SELECT state_name FROM StateLowestDensity)\n    )\n)\nSELECT \n    lr.river_name AS Longest_River_Name,\n    lr.river_length_miles AS Longest_River_Length_Miles,\n    lr.river_navigation_capacity AS Longest_River_Navigation_Capacity,\n    czr.river_name AS Other_River_Name,\n    czr.river_navigation_capacity AS Other_River_Navigation_Capacity\nFROM LongestRiverInState lr\nJOIN ClimateZoneRivers czr ON lr.state_name = czr.state_name;\n```"
    },
    {
        "instance_id": "q_694",
        "db_id": "geo_new",
        "question": "Which state has the smallest area and contains the longest cumulative river length within its borders, considering the total river length contributed by all rivers in the state and ensuring this total length is the maximum among all states?",
        "query": "SELECT s.state_name  \nFROM state s  \nJOIN river r ON s.state_code = r.river_state_code  \nGROUP BY s.state_name  \nHAVING SUM(r.river_length_miles) = (  \n    SELECT MAX(total_length)  \n    FROM (  \n        SELECT s2.state_name, SUM(r2.river_length_miles) AS total_length  \n        FROM state s2  \n        JOIN river r2 ON s2.state_code = r2.river_state_code  \n        GROUP BY s2.state_name  \n    ) sub  \n)  \nORDER BY s.area ASC  \nLIMIT 1;"
    },
    {
        "instance_id": "q_697",
        "db_id": "geo_new",
        "question": "Which state that borders Wyoming has the lowest population density, and what is the population of its largest city? Additionally, what is the average annual temperature of this state, and does it contain any lakes larger than 100 square kilometers in area?",
        "query": "```sql\nWITH wyoming_neighbors AS (\n    SELECT DISTINCT s.state_name, s.state_population_density, s.population, s.capital\n    FROM state s\n    JOIN city c ON s.state_name = c.city_state_code\n    WHERE s.state_name IN (\n        SELECT DISTINCT c2.city_state_code\n        FROM city c1\n        JOIN city c2 \n            ON ST_Distance_Sphere(\n                point(c1.longitude, c1.latitude), \n                point(c2.longitude, c2.latitude)\n            ) < 50000\n        WHERE c1.city_state_code = 'WY' AND c2.city_state_code != 'WY'\n    )\n    ORDER BY s.state_population_density ASC\n    LIMIT 1\n),\nlargest_city AS (\n    SELECT city_name, population\n    FROM city\n    WHERE city_state_code = (SELECT state_name FROM wyoming_neighbors)\n    ORDER BY population DESC\n    LIMIT 1\n),\nstate_avg_temp AS (\n    SELECT state_average_annual_temperature\n    FROM state\n    WHERE state_name = (SELECT state_name FROM wyoming_neighbors)\n),\nlarge_lakes AS (\n    SELECT COUNT(*) AS lake_count\n    FROM lake\n    WHERE lake_state_code = (SELECT state_name FROM wyoming_neighbors)\n      AND lake_area_acres / 247.105 > 100\n)\nSELECT \n    wn.state_name AS state_with_lowest_density,\n    lc.population AS largest_city_population,\n    sat.state_average_annual_temperature AS average_temperature,\n    ll.lake_count > 0 AS has_large_lakes\nFROM wyoming_neighbors wn\nCROSS JOIN largest_city lc\nCROSS JOIN state_avg_temp sat\nCROSS JOIN large_lakes ll;\n```"
    },
    {
        "instance_id": "q_695",
        "db_id": "geo_new",
        "question": "Which state, sharing a border with the state that contains the lowest elevation point in the USA, has exhibited the highest population growth from 2012 to 2022?",
        "query": "```sql\nWITH lowest_elevation_state AS (\n    SELECT \n        state.state_name \n    FROM \n        highlow \n    JOIN \n        state ON highlow.region_name = state.state_name \n    WHERE \n        highlow.lowest_point IS NOT NULL \n    ORDER BY \n        mountain_elevation ASC \n    LIMIT 1\n),\nbordering_states AS (\n    SELECT \n        s2.state_name, \n        s2.state_population_change_2022 \n    FROM \n        state s1 \n    JOIN \n        state s2 ON s1.state_name != s2.state_name \n    WHERE \n        s1.state_name = (SELECT state_name FROM lowest_elevation_state) \n        AND ST_Intersects(ST_Boundary(ST_GeomFromText(CONCAT('POLYGON((', REPLACE(s1.capital_longitude, ',', ' '), ' ', REPLACE(s1.capital_latitude, ',', ' '), ')'))), ST_Boundary(ST_GeomFromText(CONCAT('POLYGON((', REPLACE(s2.capital_longitude, ',', ' '), ' ', REPLACE(s2.capital_latitude, ',', ' '), ')')))) = 1\n)\nSELECT \n    state_name \nFROM \n    bordering_states \nORDER BY \n    state_population_change_2022 DESC \nLIMIT 1;\n``` \n\n**Note**: The SQL assumes the existence of spatial functions like `ST_Intersects` and `ST_GeomFromText` for determining if two states share a border based on their capital coordinates. If such functions are not available in the database, an alternative method for determining borders would be required."
    },
    {
        "instance_id": "q_707",
        "db_id": "scholar_new",
        "question": "Which papers co-authored by Peter Mertens and Dina Barbian have the highest normalized paper quality scores, listed in descending order of these scores? For each of these papers, provide the title, publication year, venue name, and citation trend across different venues and years, including the source of these citations. Additionally, identify the datasets most frequently used in these papers, showing the total usage count for each dataset and the last update time of the dataset, sorted first by the paper's quality score in descending order, then by dataset usage count in descending order, and finally by publication year in ascending order.",
        "query": "```sql\nWITH co_authored_papers AS (\n    SELECT DISTINCT p.paperId, p.title, p.year, p.venueId, p.paper_quality_score_normalized, p.paper_keywords_similarity_score\n    FROM paper p\n    JOIN writes w1 ON p.paperId = w1.paperId\n    JOIN writes w2 ON p.paperId = w2.paperId\n    JOIN author a1 ON w1.authorId = a1.authorId AND a1.authorName = 'Peter Mertens'\n    JOIN author a2 ON w2.authorId = a2.authorId AND a2.authorName = 'Dina Barbian'\n),\ncitation_trends AS (\n    SELECT cp.citedPaperId, c.paper_citation_trend, c.paper_citation_source, v.venueName, cp.citedPaperId AS paperId\n    FROM cite c\n    JOIN co_authored_papers cap ON c.citedPaperId = cap.paperId\n    JOIN paper p ON cap.paperId = p.paperId\n    JOIN venue v ON p.venueId = v.venueId\n),\ndataset_usage AS (\n    SELECT pd.paperId, d.datasetName, SUM(pd.dataset_paper_count) AS total_usage, d.dataset_last_updated\n    FROM paperDataset pd\n    JOIN dataset d ON pd.datasetId = d.datasetId\n    JOIN co_authored_papers cap ON pd.paperId = cap.paperId\n    GROUP BY pd.paperId, d.datasetName, d.dataset_last_updated\n)\nSELECT \n    cap.title, \n    cap.year, \n    v.venueName, \n    cap.paper_quality_score_normalized, \n    ct.paper_citation_trend, \n    ct.paper_citation_source, \n    du.datasetName, \n    du.total_usage, \n    du.dataset_last_updated\nFROM co_authored_papers cap\nJOIN venue v ON cap.venueId = v.venueId\nLEFT JOIN citation_trends ct ON cap.paperId = ct.paperId\nLEFT JOIN dataset_usage du ON cap.paperId = du.paperId\nORDER BY cap.paper_quality_score_normalized DESC, du.total_usage DESC, cap.year ASC;\n```"
    },
    {
        "instance_id": "q_698",
        "db_id": "scholar_new",
        "question": "Identify the top 10 research papers authored by Peter Mertens or Dina Barbian, ranked by their normalized citation quality scores. For each of these papers, provide the following details: title, publication year, venue name (if available), paper quality score, and normalized cited paper quality score. Additionally, compare the citation trends of these papers across different venues and years by listing the distinct venues and years in which they were cited. Identify any datasets or keyphrases frequently associated with these papers and evaluate their potential impact on the overall paper quality by including the names of associated datasets and keyphrases for each paper.",
        "query": "WITH target_authors AS (\n    SELECT authorId \n    FROM author \n    WHERE authorName = 'Peter Mertens' OR authorName = 'Dina Barbian'\n),\ntarget_papers AS (\n    SELECT DISTINCT p.paperId, p.title, p.year, v.venueName, p.paper_quality_score, c.cited_paper_quality_score_normalized\n    FROM writes w\n    JOIN target_authors ta ON w.authorId = ta.authorId\n    JOIN paper p ON w.paperId = p.paperId\n    JOIN cite c ON p.paperId = c.citedPaperId\n    LEFT JOIN venue v ON p.venueId = v.venueId\n    ORDER BY c.cited_paper_quality_score_normalized DESC\n    LIMIT 10\n),\ncitation_trends AS (\n    SELECT tp.paperId, STRING_AGG(DISTINCT v.venueName, ', ') AS venues, STRING_AGG(DISTINCT CAST(tp.year AS TEXT), ', ') AS years\n    FROM target_papers tp\n    LEFT JOIN cite c ON tp.paperId = c.citedPaperId\n    LEFT JOIN paper p ON c.citingPaperId = p.paperId\n    LEFT JOIN venue v ON p.venueId = v.venueId\n    GROUP BY tp.paperId\n),\nassociated_datasets AS (\n    SELECT pd.paperId, STRING_AGG(DISTINCT d.datasetName, ', ') AS datasets\n    FROM target_papers tp\n    JOIN paperDataset pd ON tp.paperId = pd.paperId\n    JOIN dataset d ON pd.datasetId = d.datasetId\n    GROUP BY pd.paperId\n),\nassociated_keyphrases AS (\n    SELECT pk.paperId, STRING_AGG(DISTINCT k.keyphraseName, ', ') AS keyphrases\n    FROM target_papers tp\n    JOIN paperKeyphrase pk ON tp.paperId = pk.paperId\n    JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId\n    GROUP BY pk.paperId\n)\nSELECT tp.paperId, tp.title, tp.year, tp.venueName, tp.paper_quality_score, tp.cited_paper_quality_score_normalized,\n       ct.venues, ct.years, ad.datasets, ak.keyphrases\nFROM target_papers tp\nLEFT JOIN citation_trends ct ON tp.paperId = ct.paperId\nLEFT JOIN associated_datasets ad ON tp.paperId = ad.paperId\nLEFT JOIN associated_keyphrases ak ON tp.paperId = ak.paperId;"
    },
    {
        "instance_id": "q_700",
        "db_id": "scholar_new",
        "question": "Which research papers, published in venues with a citation density threshold exceeding 50 or closely aligned with the primary research interests of Peter Mertens and Dina Barbian, feature collaborations between these two authors, have received high-quality citations (normalized paper quality score greater than 0.8), or exhibit notable dataset usage trends (dataset download count exceeding 1,000)? Please include the paper ID, title, publication year, number of citations, paper quality score, associated dataset name, and dataset download count, ordered by the number of citations in descending order and then by paper quality score in descending order.",
        "query": "```sql\nSELECT DISTINCT p.paperId, p.title, p.year, p.numCiting, p.paper_quality_score, d.datasetName, d.dataset_download_count\nFROM writes w1\nJOIN writes w2 ON w1.paperId = w2.paperId\nJOIN author a1 ON w1.authorId = a1.authorId AND LOWER(a1.authorName) = 'peter mertens'\nJOIN author a2 ON w2.authorId = a2.authorId AND LOWER(a2.authorName) = 'dina barbian'\nJOIN paper p ON w1.paperId = p.paperId\nLEFT JOIN paperDataset pd ON p.paperId = pd.paperId\nLEFT JOIN dataset d ON pd.datasetId = d.datasetId\nJOIN venue v ON p.venueId = v.venueId\nWHERE (p.paper_quality_score_normalized > 0.8 OR (d.dataset_download_count IS NOT NULL AND d.dataset_download_count > 1000))\n  AND (v.citation_threshold > 50 OR p.paper_keywords_normalized && ARRAY(SELECT unnest(author_research_interests_normalized) FROM author WHERE authorId IN (a1.authorId, a2.authorId)))\nORDER BY p.numCiting DESC, p.paper_quality_score DESC;\n```"
    },
    {
        "instance_id": "q_699",
        "db_id": "scholar_new",
        "question": "Which research papers authored by Peter Mertens and Dina Barbian have received the highest normalized quality citations, categorized by citation source type, over the years? Additionally, for these papers, which datasets are most frequently associated, and what is the trend in their usage over time, measured by total dataset usage and the number of distinct years they have been updated?",
        "query": "```sql\nWITH cited_papers AS (\n    SELECT \n        p.paperId,\n        p.title,\n        p.year,\n        c.cited_paper_quality_score_normalized,\n        c.paper_citation_source,\n        c.paper_citation_trend_normalized,\n        d.datasetId,\n        d.datasetName,\n        pd.dataset_paper_count\n    FROM \n        paper p\n    JOIN \n        writes w ON p.paperId = w.paperId\n    JOIN \n        author a ON w.authorId = a.authorId\n    JOIN \n        cite c ON p.paperId = c.citedPaperId\n    LEFT JOIN \n        paperDataset pd ON p.paperId = pd.paperId\n    LEFT JOIN \n        dataset d ON pd.datasetId = d.datasetId\n    WHERE \n        a.authorName IN ('Peter Mertens', 'Dina Barbian')\n),\nranked_citations AS (\n    SELECT \n        cp.paperId,\n        cp.title,\n        cp.year,\n        cp.cited_paper_quality_score_normalized,\n        cp.paper_citation_source,\n        cp.paper_citation_trend_normalized,\n        RANK() OVER (PARTITION BY cp.paperId ORDER BY cp.cited_paper_quality_score_normalized DESC) AS citation_rank\n    FROM \n        cited_papers cp\n),\ndataset_usage_trend AS (\n    SELECT \n        cp.paperId,\n        cp.title,\n        cp.year,\n        d.datasetName,\n        SUM(cp.dataset_paper_count) AS total_dataset_usage,\n        COUNT(DISTINCT EXTRACT(YEAR FROM d.dataset_last_updated)) AS years_of_usage\n    FROM \n        cited_papers cp\n    JOIN \n        dataset d ON cp.datasetId = d.datasetId\n    GROUP BY \n        cp.paperId, cp.title, cp.year, d.datasetName\n)\nSELECT \n    rc.paperId,\n    rc.title,\n    rc.year,\n    rc.cited_paper_quality_score_normalized,\n    rc.paper_citation_source,\n    rc.paper_citation_trend_normalized,\n    dt.datasetName,\n    dt.total_dataset_usage,\n    dt.years_of_usage\nFROM \n    ranked_citations rc\nLEFT JOIN \n    dataset_usage_trend dt ON rc.paperId = dt.paperId\nWHERE \n    rc.citation_rank = 1\nORDER BY \n    rc.cited_paper_quality_score_normalized DESC, rc.year;\n```"
    },
    {
        "instance_id": "q_696",
        "db_id": "scholar_new",
        "question": "Which research papers co-authored by Peter Mertens and Dina Barbian have received the highest normalized quality citations, and how do these citations vary by source type and year? Specifically, list the paper IDs, titles, normalized quality citation scores, citation sources, and citation years, ordered first by descending normalized quality citation score and then by ascending citation year. Ensure that each author contributes distinctly to the co-authorship.",
        "query": "```sql\nSELECT \n    p.paperId,\n    p.title,\n    c.cited_paper_quality_score_normalized AS quality_citation_score,\n    c.paper_citation_source AS citation_source,\n    c.year AS citation_year\nFROM \n    paper p\nJOIN \n    writes w1 ON p.paperId = w1.paperId\nJOIN \n    writes w2 ON p.paperId = w2.paperId\nJOIN \n    author a1 ON w1.authorId = a1.authorId\nJOIN \n    author a2 ON w2.authorId = a2.authorId\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nWHERE \n    a1.authorName = 'Peter Mertens' \n    AND a2.authorName = 'Dina Barbian' \n    AND w1.authorId != w2.authorId\nORDER BY \n    c.cited_paper_quality_score_normalized DESC,\n    c.year ASC;\n```"
    },
    {
        "instance_id": "q_703",
        "db_id": "scholar_new",
        "question": "What is the average citation quality trend of papers co-authored by Peter Mertens and Dina Barbian over the past five years, and how does it compare to the average citation quality trends of their individually authored papers during the same period?",
        "query": "```sql\nWITH co_authored_papers AS (\n    SELECT DISTINCT p.paperId\n    FROM writes w1\n    JOIN writes w2 ON w1.paperId = w2.paperId\n    JOIN author a1 ON w1.authorId = a1.authorId AND a1.authorName = 'Peter Mertens'\n    JOIN author a2 ON w2.authorId = a2.authorId AND a2.authorName = 'Dina Barbian'\n    JOIN paper p ON w1.paperId = p.paperId\n    WHERE p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n),\nindividual_papers_peter AS (\n    SELECT DISTINCT p.paperId\n    FROM writes w\n    JOIN author a ON w.authorId = a.authorId AND a.authorName = 'Peter Mertens'\n    JOIN paper p ON w.paperId = p.paperId\n    WHERE p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n),\nindividual_papers_dina AS (\n    SELECT DISTINCT p.paperId\n    FROM writes w\n    JOIN author a ON w.authorId = a.authorId AND a.authorName = 'Dina Barbian'\n    JOIN paper p ON w.paperId = p.paperId\n    WHERE p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n),\ncitation_trends AS (\n    SELECT \n        c.citedPaperId,\n        AVG(c.citing_paper_quality_score_normalized) AS avg_citation_quality\n    FROM cite c\n    JOIN co_authored_papers cap ON c.citedPaperId = cap.paperId\n    GROUP BY c.citedPaperId\n),\nindividual_citation_trends_peter AS (\n    SELECT \n        c.citedPaperId,\n        AVG(c.citing_paper_quality_score_normalized) AS avg_citation_quality_peter\n    FROM cite c\n    JOIN individual_papers_peter ipp ON c.citedPaperId = ipp.paperId\n    GROUP BY c.citedPaperId\n),\nindividual_citation_trends_dina AS (\n    SELECT \n        c.citedPaperId,\n        AVG(c.citing_paper_quality_score_normalized) AS avg_citation_quality_dina\n    FROM cite c\n    JOIN individual_papers_dina ipd ON c.citedPaperId = ipd.paperId\n    GROUP BY c.citedPaperId\n)\nSELECT \n    ct.citedPaperId,\n    ct.avg_citation_quality AS co_author_citation_quality,\n    pct.avg_citation_quality_peter AS peter_citation_quality,\n    dct.avg_citation_quality_dina AS dina_citation_quality\nFROM citation_trends ct\nLEFT JOIN individual_citation_trends_peter pct ON ct.citedPaperId = pct.citedPaperId\nLEFT JOIN individual_citation_trends_dina dct ON ct.citedPaperId = dct.citedPaperId;\n```"
    },
    {
        "instance_id": "q_701",
        "db_id": "scholar_new",
        "question": "Which papers authored by Peter Mertens and Dina Barbian have the highest normalized paper quality scores, and how do these scores vary across different venues and datasets? Additionally, identify the research keywords associated with these papers, their frequency of occurrence, and analyze the relevance trends of these keywords over time, ordered by year. Ensure that the analysis includes the paper titles, their normalized quality scores, venue names, dataset names, average quality scores across venues and datasets, keyword frequencies, and the years associated with these papers.",
        "query": "```sql\nWITH authored_papers AS (\n    SELECT \n        w.paperId,\n        p.title,\n        p.paper_quality_score,\n        p.paper_quality_score_normalized,\n        v.venueName,\n        d.datasetName,\n        pk.keyphraseName,\n        p.year\n    FROM \n        writes w\n    JOIN \n        author a ON w.authorId = a.authorId\n    JOIN \n        paper p ON w.paperId = p.paperId\n    LEFT JOIN \n        venue v ON p.venueId = v.venueId\n    LEFT JOIN \n        paperDataset pd ON p.paperId = pd.paperId\n    LEFT JOIN \n        dataset d ON pd.datasetId = d.datasetId\n    LEFT JOIN \n        paperKeyphrase pk ON p.paperId = pk.paperId\n    WHERE \n        a.authorName IN ('Peter Mertens', 'Dina Barbian')\n),\nhighest_quality_scores AS (\n    SELECT \n        paperId,\n        title,\n        paper_quality_score_normalized,\n        venueName,\n        datasetName,\n        keyphraseName,\n        year\n    FROM \n        authored_papers\n    WHERE \n        paper_quality_score_normalized IS NOT NULL\n    ORDER BY \n        paper_quality_score_normalized DESC\n    LIMIT 10\n),\nscore_variations AS (\n    SELECT \n        hqs.venueName,\n        hqs.datasetName,\n        AVG(hqs.paper_quality_score_normalized) AS avg_quality_score\n    FROM \n        highest_quality_scores hqs\n    GROUP BY \n        hqs.venueName, hqs.datasetName\n),\nrelevance_trends AS (\n    SELECT \n        hqs.keyphraseName,\n        hqs.year,\n        COUNT(*) AS keyword_frequency\n    FROM \n        highest_quality_scores hqs\n    GROUP BY \n        hqs.keyphraseName, hqs.year\n    ORDER BY \n        hqs.year\n)\nSELECT \n    hqs.title,\n    hqs.paper_quality_score_normalized,\n    hqs.venueName,\n    hqs.datasetName,\n    sv.avg_quality_score,\n    rt.keyphraseName,\n    rt.keyword_frequency,\n    rt.year\nFROM \n    highest_quality_scores hqs\nLEFT JOIN \n    score_variations sv ON hqs.venueName = sv.venueName AND hqs.datasetName = sv.datasetName\nLEFT JOIN \n    relevance_trends rt ON hqs.keyphraseName = rt.keyphraseName;\n```"
    },
    {
        "instance_id": "q_702",
        "db_id": "scholar_new",
        "question": "Which papers authored by Peter Mertens and Dina Barbian have the highest paper quality scores, and what are their citation trends across different venues and years? Additionally, identify any datasets or keyphrases associated with these papers, and evaluate the normalized quality scores of these datasets and the weighted frequency of these keyphrases. Include the paper ID, title, publication year, venue name, venue type, and paper quality score in the results. Ensure that citation trends include the paper citation trend, citation source, citation category, normalized citing paper quality score, and normalized cited paper quality score. Provide dataset details such as dataset name, dataset paper count, and normalized paper dataset quality score. For keyphrases, include the keyphrase name and its normalized paper keyphrase weighted frequency.",
        "query": "```sql\nWITH authored_papers AS (\n    SELECT \n        p.paperId, \n        p.title, \n        p.year, \n        p.venueId, \n        p.paper_quality_score, \n        p.paper_keywords_normalized_vector,\n        v.venueName,\n        v.venue_type\n    FROM \n        paper p\n    JOIN \n        writes w ON p.paperId = w.paperId\n    JOIN \n        author a ON w.authorId = a.authorId\n    JOIN \n        venue v ON p.venueId = v.venueId\n    WHERE \n        a.authorName IN ('Peter Mertens', 'Dina Barbian')\n),\nhighest_quality_papers AS (\n    SELECT \n        ap.paperId, \n        ap.title, \n        ap.year, \n        ap.venueName, \n        ap.venue_type, \n        ap.paper_quality_score\n    FROM \n        authored_papers ap\n    WHERE \n        ap.paper_quality_score = (\n            SELECT MAX(paper_quality_score) \n            FROM authored_papers\n        )\n),\ncitation_trends AS (\n    SELECT \n        hqp.paperId, \n        c.paper_citation_trend, \n        c.paper_citation_source, \n        c.paper_citation_category, \n        c.citing_paper_quality_score_normalized, \n        c.cited_paper_quality_score_normalized\n    FROM \n        highest_quality_papers hqp\n    JOIN \n        cite c ON hqp.paperId = c.citedPaperId\n),\ndataset_associations AS (\n    SELECT \n        hqp.paperId, \n        d.datasetName, \n        pd.dataset_paper_count, \n        pd.paper_dataset_quality_score_normalized\n    FROM \n        highest_quality_papers hqp\n    JOIN \n        paperDataset pd ON hqp.paperId = pd.paperId\n    JOIN \n        dataset d ON pd.datasetId = d.datasetId\n),\nkeyphrase_associations AS (\n    SELECT \n        hqp.paperId, \n        k.keyphraseName, \n        pk.paper_keyphrase_weighted_frequency_normalized\n    FROM \n        highest_quality_papers hqp\n    JOIN \n        paperKeyphrase pk ON hqp.paperId = pk.paperId\n    JOIN \n        keyphrase k ON pk.keyphraseId = k.keyphraseId\n)\nSELECT \n    hqp.paperId, \n    hqp.title, \n    hqp.year, \n    hqp.venueName, \n    hqp.venue_type, \n    hqp.paper_quality_score,\n    ct.paper_citation_trend, \n    ct.paper_citation_source, \n    ct.paper_citation_category, \n    ct.citing_paper_quality_score_normalized, \n    ct.cited_paper_quality_score_normalized,\n    da.datasetName, \n    da.dataset_paper_count, \n    da.paper_dataset_quality_score_normalized,\n    ka.keyphraseName, \n    ka.paper_keyphrase_weighted_frequency_normalized\nFROM \n    highest_quality_papers hqp\nLEFT JOIN \n    citation_trends ct ON hqp.paperId = ct.paperId\nLEFT JOIN \n    dataset_associations da ON hqp.paperId = da.paperId\nLEFT JOIN \n    keyphrase_associations ka ON hqp.paperId = ka.paperId;\n```"
    },
    {
        "instance_id": "q_705",
        "db_id": "scholar_new",
        "question": "Which research papers authored by Peter Mertens and Dina Barbian within the last five years have been cited by papers published in high-impact journals (with an impact factor greater than 5) or influential conferences? What is the average normalized quality score of these citations over time for each paper? Additionally, identify any datasets referenced by these papers, providing the dataset names and the number of times these datasets have been referenced. Evaluate the significance of these datasets based on their usage trends in subsequent research by counting the number of references they receive from other papers.",
        "query": "```sql\nWITH RelevantPapers AS (\n    SELECT DISTINCT p.paperId, p.title, p.year, p.paper_quality_score_normalized\n    FROM paper p\n    JOIN writes w ON p.paperId = w.paperId\n    JOIN author a ON w.authorId = a.authorId\n    WHERE a.authorName IN ('Peter Mertens', 'Dina Barbian')\n      AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5\n), CitingPapers AS (\n    SELECT DISTINCT c.citedPaperId\n    FROM cite c\n    JOIN paper p ON c.citingPaperId = p.paperId\n    JOIN venue v ON p.venueId = v.venueId\n    LEFT JOIN journal j ON v.venueId = j.journalId\n    WHERE (j.impact_factor > 5 OR v.venue_type IN ('influential conference'))\n      AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5\n), PaperCitationTrend AS (\n    SELECT rp.paperId, rp.title, AVG(c.cited_paper_quality_score_normalized) AS avg_citation_quality\n    FROM RelevantPapers rp\n    JOIN cite c ON rp.paperId = c.citedPaperId\n    GROUP BY rp.paperId, rp.title\n), ReferencedDatasets AS (\n    SELECT pd.datasetId, d.datasetName, COUNT(pd.paperId) AS reference_count\n    FROM RelevantPapers rp\n    JOIN paperDataset pd ON rp.paperId = pd.paperId\n    JOIN dataset d ON pd.datasetId = d.datasetId\n    GROUP BY pd.datasetId, d.datasetName\n)\nSELECT \n    pct.paperId, \n    pct.title, \n    pct.avg_citation_quality, \n    rd.datasetName, \n    rd.reference_count\nFROM PaperCitationTrend pct\nLEFT JOIN ReferencedDatasets rd ON pct.paperId = rd.paperId;\n```"
    },
    {
        "instance_id": "q_711",
        "db_id": "scholar_new",
        "question": "Which papers authored by Peter Mertens and Dina Barbian have the highest paper quality scores for each venue and year? Additionally, list any associated datasets with these papers and their usage counts. Provide the results ordered by year and venue, including the last updated year of the papers in UTC time zone.",
        "query": "```sql\nWITH authored_papers AS (\n    SELECT \n        p.paperId,\n        p.title,\n        p.year,\n        p.paper_quality_score,\n        v.venueName,\n        d.datasetName,\n        pd.dataset_paper_count,\n        p.paper_last_updated AT TIME ZONE 'UTC' AS paper_last_updated_utc\n    FROM \n        writes w\n    JOIN \n        author a ON w.authorId = a.authorId\n    JOIN \n        paper p ON w.paperId = p.paperId\n    LEFT JOIN \n        venue v ON p.venueId = v.venueId\n    LEFT JOIN \n        paperDataset pd ON p.paperId = pd.paperId\n    LEFT JOIN \n        dataset d ON pd.datasetId = d.datasetId\n    WHERE \n        a.authorName IN ('Peter Mertens', 'Dina Barbian')\n),\nranked_papers AS (\n    SELECT \n        ap.paperId,\n        ap.title,\n        ap.year,\n        ap.paper_quality_score,\n        ap.venueName,\n        ap.datasetName,\n        ap.dataset_paper_count,\n        ROW_NUMBER() OVER (PARTITION BY ap.year, ap.venueName ORDER BY ap.paper_quality_score DESC) AS rank\n    FROM \n        authored_papers ap\n)\nSELECT \n    rp.paperId,\n    rp.title,\n    rp.year,\n    rp.paper_quality_score,\n    rp.venueName,\n    rp.datasetName,\n    rp.dataset_paper_count,\n    EXTRACT(YEAR FROM rp.paper_last_updated_utc) AS last_updated_year\nFROM \n    ranked_papers rp\nWHERE \n    rp.rank = 1\nORDER BY \n    rp.year, rp.venueName;\n```"
    },
    {
        "instance_id": "q_706",
        "db_id": "scholar_new",
        "question": "Which papers authored by Peter Mertens and Dina Barbian have received citations from journals with above-average impact factors over the past five years, and what is the total normalized citation quality score contributed by these citations for each paper? List the results in descending order of the total citation quality score.",
        "query": "```sql\nSELECT \n    p.paperId, \n    p.title, \n    SUM(c.cited_paper_quality_score_normalized) AS total_citation_quality_score\nFROM \n    paper p\nJOIN \n    writes w ON p.paperId = w.paperId\nJOIN \n    author a ON w.authorId = a.authorId\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nJOIN \n    journal j ON c.citingPaperId = j.journalId\nWHERE \n    a.authorName IN ('Peter Mertens', 'Dina Barbian')\n    AND j.impact_factor > (SELECT AVG(impact_factor) FROM journal)\n    AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\nGROUP BY \n    p.paperId, p.title\nORDER BY \n    total_citation_quality_score DESC;\n```"
    },
    {
        "instance_id": "q_708",
        "db_id": "scholar_new",
        "question": "In which year did Peter Mertens and Dina Barbian co-author at least one paper, and how many distinct citations did these papers receive from high-impact journals (defined as journals with an impact factor greater than the average impact factor across all journals)? Additionally, list the names of the distinct high-impact journals that cited these papers, and present the results in chronological order based on the publication year.",
        "query": "```sql\nSELECT \n    p.year AS publication_year,\n    COUNT(DISTINCT c.citedPaperId) AS citation_count,\n    STRING_AGG(DISTINCT j.journalName, ', ') AS citing_journals\nFROM \n    paper p\nJOIN \n    writes w1 ON p.paperId = w1.paperId\nJOIN \n    writes w2 ON p.paperId = w2.paperId\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nJOIN \n    paper cp ON c.citingPaperId = cp.paperId\nJOIN \n    journal j ON cp.venueId = j.journalId\nJOIN \n    author a1 ON w1.authorId = a1.authorId\nJOIN \n    author a2 ON w2.authorId = a2.authorId\nWHERE \n    a1.authorName = 'Peter Mertens'\n    AND a2.authorName = 'Dina Barbian'\n    AND w1.authorId != w2.authorId\n    AND j.impact_factor > (SELECT AVG(impact_factor) FROM journal)\nGROUP BY \n    p.year\nORDER BY \n    p.year;\n```"
    },
    {
        "instance_id": "q_704",
        "db_id": "scholar_new",
        "question": "What are the commonly explored research topics by Peter Mertens and Dina Barbian in their joint publications, ranked by topic frequency? Additionally, how have the citation trends and research impact of these topics evolved over time, presented chronologically by year?",
        "query": "```sql\nWITH joint_publications AS (\n    SELECT w1.paperId\n    FROM writes w1\n    JOIN writes w2 ON w1.paperId = w2.paperId\n    JOIN author a1 ON w1.authorId = a1.authorId\n    JOIN author a2 ON w2.authorId = a2.authorId\n    WHERE a1.authorName = 'Peter Mertens' AND a2.authorName = 'Dina Barbian'\n),\nresearch_topics AS (\n    SELECT pk.keyphraseId, k.keyphraseName, COUNT(*) AS topic_frequency\n    FROM joint_publications jp\n    JOIN paperKeyphrase pk ON jp.paperId = pk.paperId\n    JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId\n    GROUP BY pk.keyphraseId, k.keyphraseName\n    ORDER BY topic_frequency DESC\n),\ncitation_trends AS (\n    SELECT p.year, pk.keyphraseId, AVG(c.citing_paper_quality_score_normalized) AS avg_citation_impact\n    FROM joint_publications jp\n    JOIN paper p ON jp.paperId = p.paperId\n    JOIN paperKeyphrase pk ON jp.paperId = pk.paperId\n    JOIN cite c ON jp.paperId = c.citedPaperId\n    GROUP BY p.year, pk.keyphraseId\n    ORDER BY p.year\n)\nSELECT rt.keyphraseName, rt.topic_frequency, ct.year, ct.avg_citation_impact\nFROM research_topics rt\nLEFT JOIN citation_trends ct ON rt.keyphraseId = ct.keyphraseId\nORDER BY rt.topic_frequency DESC, ct.year;\n```"
    },
    {
        "instance_id": "q_710",
        "db_id": "scholar_new",
        "question": "What is the average citation quality trend for papers co-authored by Peter Mertens and Dina Barbian over the past five years, and how does it compare to the average citation quality trends of their individually authored papers within the same period? Specifically, provide the count of papers and the average normalized citation quality score for each category: co-authored papers, papers solely authored by Peter Mertens, and papers solely authored by Dina Barbian.",
        "query": "```sql\nWITH co_authored_papers AS (\n    SELECT DISTINCT w1.paperId\n    FROM writes w1\n    JOIN writes w2 ON w1.paperId = w2.paperId\n    JOIN author a1 ON w1.authorId = a1.authorId AND a1.authorName = 'Peter Mertens'\n    JOIN author a2 ON w2.authorId = a2.authorId AND a2.authorName = 'Dina Barbian'\n    JOIN paper p ON w1.paperId = p.paperId\n    WHERE p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n),\nindividual_papers_peter AS (\n    SELECT DISTINCT w.paperId\n    FROM writes w\n    JOIN author a ON w.authorId = a.authorId AND a.authorName = 'Peter Mertens'\n    JOIN paper p ON w.paperId = p.paperId\n    WHERE p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n    AND w.paperId NOT IN (SELECT paperId FROM co_authored_papers)\n),\nindividual_papers_dina AS (\n    SELECT DISTINCT w.paperId\n    FROM writes w\n    JOIN author a ON w.authorId = a.authorId AND a.authorName = 'Dina Barbian'\n    JOIN paper p ON w.paperId = p.paperId\n    WHERE p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n    AND w.paperId NOT IN (SELECT paperId FROM co_authored_papers)\n),\ncitation_trends_co_authored AS (\n    SELECT c.citedPaperId, AVG(c.citing_paper_quality_score_normalized) AS avg_citation_quality\n    FROM cite c\n    JOIN co_authored_papers cap ON c.citedPaperId = cap.paperId\n    GROUP BY c.citedPaperId\n),\ncitation_trends_peter_individual AS (\n    SELECT c.citedPaperId, AVG(c.citing_paper_quality_score_normalized) AS avg_citation_quality\n    FROM cite c\n    JOIN individual_papers_peter ipp ON c.citedPaperId = ipp.paperId\n    GROUP BY c.citedPaperId\n),\ncitation_trends_dina_individual AS (\n    SELECT c.citedPaperId, AVG(c.citing_paper_quality_score_normalized) AS avg_citation_quality\n    FROM cite c\n    JOIN individual_papers_dina ipd ON c.citedPaperId = ipd.paperId\n    GROUP BY c.citedPaperId\n)\nSELECT \n    'Co-Authored' AS paper_type,\n    COUNT(*) AS paper_count,\n    AVG(avg_citation_quality) AS avg_citation_quality\nFROM citation_trends_co_authored\nUNION ALL\nSELECT \n    'Peter Individual' AS paper_type,\n    COUNT(*) AS paper_count,\n    AVG(avg_citation_quality) AS avg_citation_quality\nFROM citation_trends_peter_individual\nUNION ALL\nSELECT \n    'Dina Individual' AS paper_type,\n    COUNT(*) AS paper_count,\n    AVG(avg_citation_quality) AS avg_citation_quality\nFROM citation_trends_dina_individual;\n```"
    },
    {
        "instance_id": "q_713",
        "db_id": "scholar_new",
        "question": "Which papers co-authored by Peter Mertens and Dina Barbian have the highest normalized citation quality scores, ranked separately by venue and year? For these papers, identify any associated datasets and evaluate their impact based on download counts and user ratings. Additionally, analyze the citation trends of these papers by calculating the average normalized quality score and total citation count of citing papers. Present the results ordered by descending normalized citation quality score, including the venue names for context.",
        "query": "```sql\nWITH co_authored_papers AS (\n    SELECT \n        p.paperId,\n        p.title,\n        p.year,\n        p.venueId,\n        p.paper_quality_score_normalized AS citation_quality_score,\n        d.datasetId,\n        d.datasetName,\n        d.dataset_download_count,\n        d.dataset_user_rating\n    FROM \n        writes w1\n    JOIN \n        writes w2 ON w1.paperId = w2.paperId\n    JOIN \n        author a1 ON w1.authorId = a1.authorId AND a1.authorName = 'Peter Mertens'\n    JOIN \n        author a2 ON w2.authorId = a2.authorId AND a2.authorName = 'Dina Barbian'\n    JOIN \n        paper p ON w1.paperId = p.paperId\n    LEFT JOIN \n        paperDataset pd ON p.paperId = pd.paperId\n    LEFT JOIN \n        dataset d ON pd.datasetId = d.datasetId\n),\nranked_papers AS (\n    SELECT \n        paperId,\n        title,\n        year,\n        venueId,\n        citation_quality_score,\n        datasetId,\n        datasetName,\n        dataset_download_count,\n        dataset_user_rating,\n        RANK() OVER (PARTITION BY venueId ORDER BY citation_quality_score DESC) AS venue_rank,\n        RANK() OVER (PARTITION BY year ORDER BY citation_quality_score DESC) AS year_rank\n    FROM \n        co_authored_papers\n),\ncitation_trends AS (\n    SELECT \n        c.citedPaperId,\n        AVG(c.citing_paper_quality_score_normalized) AS avg_citation_quality,\n        COUNT(c.citingPaperId) AS citation_count\n    FROM \n        cite c\n    JOIN \n        ranked_papers rp ON c.citedPaperId = rp.paperId\n    GROUP BY \n        c.citedPaperId\n)\nSELECT \n    rp.paperId,\n    rp.title,\n    rp.year,\n    v.venueName AS venue,\n    rp.citation_quality_score,\n    rp.datasetName,\n    rp.dataset_download_count,\n    rp.dataset_user_rating,\n    ct.avg_citation_quality,\n    ct.citation_count\nFROM \n    ranked_papers rp\nJOIN \n    venue v ON rp.venueId = v.venueId\nLEFT JOIN \n    citation_trends ct ON rp.paperId = ct.citedPaperId\nWHERE \n    rp.venue_rank = 1 OR rp.year_rank = 1\nORDER BY \n    rp.citation_quality_score DESC;\n```"
    },
    {
        "instance_id": "q_716",
        "db_id": "scholar_new",
        "question": "Have Peter Mertens and Dina Barbian collaborated on any papers over the past five years that have significantly influenced the usage trends of specific datasets? If so, what are the average paper quality scores and normalized paper quality scores of these collaborations, as well as their average citation impact based on normalized cited paper quality scores, grouped by the influenced datasets?",
        "query": "```sql\nWITH relevant_papers AS (\n    SELECT \n        w1.paperId\n    FROM \n        writes w1\n    JOIN \n        author a1 ON w1.authorId = a1.authorId\n    JOIN \n        writes w2 ON w1.paperId = w2.paperId\n    JOIN \n        author a2 ON w2.authorId = a2.authorId\n    WHERE \n        a1.authorName = 'Peter Mertens' \n        AND a2.authorName = 'Dina Barbian'\n),\ndataset_influenced_papers AS (\n    SELECT \n        pd.paperId, pd.datasetId\n    FROM \n        paperDataset pd\n    JOIN \n        dataset d ON pd.datasetId = d.datasetId\n    WHERE \n        d.dataset_last_updated >= NOW() - INTERVAL '5 years'\n),\ninfluential_collaborations AS (\n    SELECT \n        rp.paperId, dic.datasetId, p.paper_quality_score, p.paper_quality_score_normalized, c.cited_paper_quality_score_normalized\n    FROM \n        relevant_papers rp\n    JOIN \n        dataset_influenced_papers dic ON rp.paperId = dic.paperId\n    JOIN \n        paper p ON rp.paperId = p.paperId\n    LEFT JOIN \n        cite c ON p.paperId = c.citedPaperId\n)\nSELECT \n    ic.datasetId, \n    AVG(ic.paper_quality_score) AS avg_paper_quality_score, \n    AVG(ic.paper_quality_score_normalized) AS avg_paper_quality_score_normalized, \n    AVG(ic.cited_paper_quality_score_normalized) AS avg_citation_impact\nFROM \n    influential_collaborations ic\nGROUP BY \n    ic.datasetId;\n```"
    },
    {
        "instance_id": "q_709",
        "db_id": "scholar_new",
        "question": "Which research papers involve collaborations between Peter Mertens and Dina Barbian, where the papers have a normalized paper quality score greater than 0.8 and are published in venues with an impact factor greater than 5.0?",
        "query": "```sql\nSELECT DISTINCT p.paperId, p.title, p.year, p.venueId, p.numCiting, p.paper_quality_score \nFROM writes w1 \nJOIN writes w2 ON w1.paperId = w2.paperId AND w1.authorId != w2.authorId \nJOIN author a1 ON w1.authorId = a1.authorId AND a1.authorName = 'Peter Mertens' \nJOIN author a2 ON w2.authorId = a2.authorId AND a2.authorName = 'Dina Barbian' \nJOIN paper p ON w1.paperId = p.paperId \nJOIN venue v ON p.venueId = v.venueId \nWHERE p.paper_quality_score_normalized > 0.8 \n  AND v.impact_factor > 5.0;\n```"
    },
    {
        "instance_id": "q_714",
        "db_id": "scholar_new",
        "question": "哪些研究论文同时涉及“用户行为分析”和“机器学习模型优化”，并且这些论文的作者中至少有一位在顶级会议或顶级期刊上发表过10篇以上高质量且被引用过的文章（高质量定义为论文质量归一化评分不低于0.8）？",
        "query": "```sql\nSELECT DISTINCT p.paperId, p.title\nFROM paper p\nJOIN paperKeyphrase pk1 ON p.paperId = pk1.paperId\nJOIN keyphrase k1 ON pk1.keyphraseId = k1.keyphraseId AND k1.keyphraseName = '用户行为分析'\nJOIN paperKeyphrase pk2 ON p.paperId = pk2.paperId\nJOIN keyphrase k2 ON pk2.keyphraseId = k2.keyphraseId AND k2.keyphraseName = '机器学习模型优化'\nJOIN writes w ON p.paperId = w.paperId\nJOIN author a ON w.authorId = a.authorId\nWHERE EXISTS (\n    SELECT 1\n    FROM writes w2\n    JOIN paper p2 ON w2.paperId = p2.paperId\n    JOIN venue v ON p2.venueId = v.venueId\n    WHERE w2.authorId = a.authorId\n      AND (v.venue_type = '顶级会议' OR v.venue_type = '顶级期刊')\n      AND p2.numCitedBy > 0\n      AND p2.paper_quality_score_normalized >= 0.8\n    GROUP BY w2.authorId\n    HAVING COUNT(DISTINCT p2.paperId) >= 10\n);\n```"
    },
    {
        "instance_id": "q_712",
        "db_id": "scholar_new",
        "question": "What are the research papers co-authored by Peter Mertens and Dina Barbian, including their citation trends over the past five years specifically from high-impact journals and conferences? Additionally, provide the quality ranking of these papers based on their average normalized quality score, the count of citations in venues with an impact factor greater than 5, and the count of citations in conference or journal venues, sorted primarily by descending average paper quality, then by descending high-impact citation count, and finally by descending conference/journal citation count.",
        "query": "```sql\nWITH co_authored_papers AS (\n    SELECT DISTINCT w1.paperId\n    FROM writes w1\n    JOIN author a1 ON w1.authorId = a1.authorId AND LOWER(a1.authorName) = 'peter mertens'\n    JOIN writes w2 ON w1.paperId = w2.paperId\n    JOIN author a2 ON w2.authorId = a2.authorId AND LOWER(a2.authorName) = 'dina barbian'\n),\ncitation_trends AS (\n    SELECT \n        cp.paperId,\n        c.citedPaperId,\n        c.paper_citation_trend,\n        j.impact_factor,\n        v.venue_type\n    FROM co_authored_papers cp\n    JOIN cite c ON cp.paperId = c.citedPaperId\n    JOIN paper p ON c.citingPaperId = p.paperId\n    JOIN venue v ON p.venueId = v.venueId\n    LEFT JOIN journal j ON v.venueId = j.journalId\n    WHERE p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5\n),\nquality_ranking AS (\n    SELECT \n        ct.paperId,\n        AVG(p.paper_quality_score_normalized) AS avg_paper_quality,\n        COUNT(CASE WHEN ct.impact_factor > 5 THEN 1 END) AS high_impact_count,\n        COUNT(CASE WHEN ct.venue_type IN ('conference', 'journal') THEN 1 END) AS conference_journal_count\n    FROM citation_trends ct\n    JOIN paper p ON ct.paperId = p.paperId\n    GROUP BY ct.paperId\n)\nSELECT \n    p.paperId,\n    p.title,\n    STRING_AGG(DISTINCT ct.paper_citation_trend, ', ') AS citation_trends,\n    qr.avg_paper_quality,\n    qr.high_impact_count,\n    qr.conference_journal_count\nFROM co_authored_papers cap\nJOIN paper p ON cap.paperId = p.paperId\nLEFT JOIN citation_trends ct ON p.paperId = ct.paperId\nLEFT JOIN quality_ranking qr ON p.paperId = qr.paperId\nGROUP BY p.paperId, p.title, qr.avg_paper_quality, qr.high_impact_count, qr.conference_journal_count\nORDER BY qr.avg_paper_quality DESC, qr.high_impact_count DESC, qr.conference_journal_count DESC;\n```"
    },
    {
        "instance_id": "q_720",
        "db_id": "scholar_new",
        "question": "Which research papers have both Peter Mertens and Dina Barbian co-authored within the past five years, considering only those papers that have received citations with a normalized quality score greater than 0.8? Additionally, identify papers published in journals or conferences with an impact factor greater than 5 or specifically in 'High-Impact Journal A', 'High-Impact Journal B', or 'Top Conference C'. Rank the results by paper quality score in descending order, and then by keyword similarity score in descending order.",
        "query": "```sql\nSELECT DISTINCT p.paperId, p.title, p.year, p.paper_quality_score, p.paper_keywords_similarity_score\nFROM writes w1\nJOIN writes w2 ON w1.paperId = w2.paperId\nJOIN paper p ON w1.paperId = p.paperId\nLEFT JOIN cite c ON p.paperId = c.citedPaperId\nLEFT JOIN journal j ON p.venueId = j.journalId\nWHERE w1.authorId = (\n    SELECT authorId FROM author WHERE authorName = 'Peter Mertens'\n)\nAND w2.authorId = (\n    SELECT authorId FROM author WHERE authorName = 'Dina Barbian'\n)\nAND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\nAND c.cited_paper_quality_score_normalized > 0.8\nAND (j.impact_factor > 5 OR j.journalName IN ('High-Impact Journal A', 'High-Impact Journal B', 'Top Conference C'))\nORDER BY p.paper_quality_score DESC, p.paper_keywords_similarity_score DESC;\n```"
    },
    {
        "instance_id": "q_724",
        "db_id": "scholar_new",
        "question": "Which research papers authored by Peter Mertens and Dina Barbian have been cited by papers published in high-impact journals, where high-impact is defined as having an impact factor greater than the average impact factor of all journals? For these cited papers, provide their titles and quality scores (both raw and normalized). Additionally, identify any trends in the usage of datasets associated with these papers over the past five years, including the names of the datasets and the count of their usage. If a paper has not been cited by any high-impact journal, include it with a corresponding indicator.",
        "query": "```sql\nWITH cited_papers AS (\n    SELECT DISTINCT p.paperId, p.title, p.paper_quality_score, p.paper_quality_score_normalized\n    FROM paper p\n    JOIN writes w ON p.paperId = w.paperId\n    JOIN author a ON w.authorId = a.authorId\n    WHERE a.authorName IN ('Peter Mertens', 'Dina Barbian')\n), citing_journals AS (\n    SELECT c.citedPaperId\n    FROM cite c\n    JOIN paper p ON c.citingPaperId = p.paperId\n    JOIN venue v ON p.venueId = v.venueId\n    WHERE v.impact_factor > (SELECT AVG(impact_factor) FROM journal)\n), dataset_trends AS (\n    SELECT pd.paperId, d.datasetName, COUNT(*) AS usage_count\n    FROM paperDataset pd\n    JOIN dataset d ON pd.datasetId = d.datasetId\n    WHERE pd.paperId IN (SELECT paperId FROM cited_papers)\n      AND pd.dataset_paper_count > 0\n      AND d.dataset_last_updated >= NOW() - INTERVAL '5 years'\n    GROUP BY pd.paperId, d.datasetName\n)\nSELECT cp.paperId, cp.title, cj.citedPaperId IS NOT NULL AS cited_by_high_impact_journal,\n       cp.paper_quality_score, cp.paper_quality_score_normalized,\n       dt.datasetName, dt.usage_count\nFROM cited_papers cp\nLEFT JOIN citing_journals cj ON cp.paperId = cj.citedPaperId\nLEFT JOIN dataset_trends dt ON cp.paperId = dt.paperId;\n```"
    },
    {
        "instance_id": "q_715",
        "db_id": "scholar_new",
        "question": "Which authors have the highest influence in the field of syntactic parsing, considering both the total number of citations received and the count of papers published in the last five years? Please list the top 10 authors based on these criteria, prioritizing total citations in descending order and using paper count as a tiebreaker.",
        "query": "```sql\nSELECT \n    a.authorId,\n    a.authorName,\n    SUM(p.numCiting) AS total_citations,\n    COUNT(p.paperId) AS paper_count\nFROM \n    author a\nJOIN \n    writes w ON a.authorId = w.authorId\nJOIN \n    paper p ON w.paperId = p.paperId\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nWHERE \n    p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5\n    AND 'syntactic parsing' = ANY(a.author_research_interests_normalized)\nGROUP BY \n    a.authorId, a.authorName\nORDER BY \n    total_citations DESC, paper_count DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_718",
        "db_id": "scholar_new",
        "question": "Which authors have the highest influence in the field of syntactic parsing, considering both their publication count and the normalized quality of citations received over the past five years, excluding any papers without open access status? Additionally, how does their research impact vary when measured through normalized citation quality specifically from venues classified as top-tier conferences or top-tier journals within the same time frame? Provide results for the top 10 authors ranked by total citations and average citation quality.",
        "query": "```sql\nWITH influential_authors AS (\n    SELECT \n        w.authorId,\n        a.authorName,\n        SUM(p.numCitedBy) AS total_citations,\n        COUNT(w.paperId) AS publication_count,\n        AVG(c.cited_paper_quality_score_normalized) AS avg_citation_quality\n    FROM \n        writes w\n    JOIN \n        author a ON w.authorId = a.authorId\n    JOIN \n        paper p ON w.paperId = p.paperId\n    LEFT JOIN \n        cite c ON p.paperId = c.citedPaperId\n    WHERE \n        a.author_research_interests @> ARRAY['syntactic parsing']\n        AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5\n        AND p.is_open_access IS NOT NULL\n    GROUP BY \n        w.authorId, a.authorName\n    ORDER BY \n        total_citations DESC, avg_citation_quality DESC\n    LIMIT 10\n),\ntop_tier_impact AS (\n    SELECT \n        ia.authorId,\n        ia.authorName,\n        SUM(CASE WHEN v.venue_type IN ('top-tier conference', 'top-tier journal') THEN c.cited_paper_quality_score_normalized ELSE 0 END) AS top_tier_citations\n    FROM \n        influential_authors ia\n    JOIN \n        writes w ON ia.authorId = w.authorId\n    JOIN \n        paper p ON w.paperId = p.paperId\n    LEFT JOIN \n        cite c ON p.paperId = c.citedPaperId\n    LEFT JOIN \n        venue v ON p.venueId = v.venueId\n    WHERE \n        p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5\n    GROUP BY \n        ia.authorId, ia.authorName\n)\nSELECT \n    tti.authorId,\n    tti.authorName,\n    ia.total_citations,\n    ia.publication_count,\n    ia.avg_citation_quality,\n    tti.top_tier_citations\nFROM \n    top_tier_impact tti\nJOIN \n    influential_authors ia ON tti.authorId = ia.authorId\nORDER BY \n    ia.total_citations DESC, ia.avg_citation_quality DESC;\n```"
    },
    {
        "instance_id": "q_717",
        "db_id": "scholar_new",
        "question": "Which authors have the highest influence in their respective research areas, based on both the total quality of their publications and the total impact of citations received over the past five years, considering only papers published from 2018 to the present? Please rank the authors by descending order of their total publication quality and total citation impact, and return the top 10 results.",
        "query": "```sql\nSELECT \n    a.authorId,\n    a.authorName,\n    a.author_research_interests,\n    SUM(p.paper_quality_score_normalized) AS total_paper_quality,\n    SUM(c.cited_paper_quality_score_normalized) AS total_citation_impact\nFROM \n    author a\nJOIN \n    writes w ON a.authorId = w.authorId\nJOIN \n    paper p ON w.paperId = p.paperId\nLEFT JOIN \n    cite c ON p.paperId = c.citedPaperId\nWHERE \n    p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\nGROUP BY \n    a.authorId, a.authorName, a.author_research_interests\nORDER BY \n    total_paper_quality DESC, total_citation_impact DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_723",
        "db_id": "scholar_new",
        "question": "Which authors have the highest influence in the field of syntactic parsing, considering both the quality and quantity of their publications in the past 10 years, as well as the impact of their cited works in venues with above-average impact factors? Please rank the authors by total citations in descending order, followed by average paper quality in descending order, and then by publication count in descending order, and return the top 10 authors.",
        "query": "```sql\nSELECT \n    a.authorId,\n    a.authorName,\n    SUM(p.numCiting) AS total_citations,\n    COUNT(w.paperId) AS publication_count,\n    AVG(p.paper_quality_score_normalized) AS avg_paper_quality\nFROM \n    author a\nJOIN \n    writes w ON a.authorId = w.authorId\nJOIN \n    paper p ON w.paperId = p.paperId\nJOIN \n    venue v ON p.venueId = v.venueId\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nWHERE \n    a.author_research_interests_normalized @> ARRAY['syntactic parsing']\n    AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 10\n    AND v.impact_factor > (SELECT AVG(impact_factor) FROM journal)\nGROUP BY \n    a.authorId, a.authorName\nORDER BY \n    total_citations DESC, avg_paper_quality DESC, publication_count DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_719",
        "db_id": "scholar_new",
        "question": "Identify leading researchers in the field of syntactic parsing by evaluating their contributions over the past five years, considering the following criteria:  \n1. The number of papers published in top-tier journals, assessed by the normalized quality score of the papers and the average impact factor of the journals.  \n2. The total citations received for these papers.  \n3. The venues where these papers were published.  \n4. The extent of dataset usage in their research, measured by the count and quality of datasets associated with their papers.  \n5. The relevance of keyphrases related to \"syntactic parsing\" in their recent publications, evaluated by the weighted frequency of such keyphrases.  \n\nRank the researchers based on the total citations in descending order, followed by the average paper quality, total dataset quality, and total keyphrase weight, respectively. Include researchers who may not have dataset usage or keyphrase relevance by assigning zero values for those metrics.",
        "query": "```sql\nWITH recent_papers AS (\n    SELECT \n        p.paperId,\n        p.title,\n        p.year,\n        p.paper_quality_score_normalized,\n        p.numCiting,\n        p.paper_keywords_normalized,\n        v.venueName,\n        j.impact_factor\n    FROM \n        paper p\n    JOIN \n        venue v ON p.venueId = v.venueId\n    LEFT JOIN \n        journal j ON v.venueId = j.journalId\n    WHERE \n        p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5\n        AND 'syntactic parsing' = ANY(p.paper_keywords_normalized)\n        AND j.impact_factor IS NOT NULL\n),\nresearcher_contribution AS (\n    SELECT \n        w.authorId,\n        a.authorName,\n        COUNT(DISTINCT rp.paperId) AS paper_count,\n        AVG(rp.paper_quality_score_normalized) AS avg_paper_quality,\n        SUM(rp.numCiting) AS total_citations,\n        STRING_AGG(DISTINCT rp.venueName, ', ') AS venues,\n        AVG(j.impact_factor) AS avg_journal_impact\n    FROM \n        writes w\n    JOIN \n        author a ON w.authorId = a.authorId\n    JOIN \n        recent_papers rp ON w.paperId = rp.paperId\n    LEFT JOIN \n        journal j ON rp.venueId = j.journalId\n    GROUP BY \n        w.authorId, a.authorName\n),\ndataset_usage AS (\n    SELECT \n        w.authorId,\n        COUNT(DISTINCT pd.datasetId) AS dataset_count,\n        SUM(pd.paper_dataset_quality_score_normalized) AS total_dataset_quality\n    FROM \n        writes w\n    JOIN \n        paperDataset pd ON w.paperId = pd.paperId\n    JOIN \n        recent_papers rp ON w.paperId = rp.paperId\n    GROUP BY \n        w.authorId\n),\nkeyphrase_relevance AS (\n    SELECT \n        w.authorId,\n        COUNT(DISTINCT pk.keyphraseId) AS keyphrase_count,\n        SUM(pk.paper_keyphrase_weighted_frequency_normalized) AS total_keyphrase_weight\n    FROM \n        writes w\n    JOIN \n        paperKeyphrase pk ON w.paperId = pk.paperId\n    JOIN \n        recent_papers rp ON w.paperId = rp.paperId\n    WHERE \n        pk.keyphraseId IN (SELECT keyphraseId FROM keyphrase WHERE keyphraseName ILIKE '%syntactic parsing%')\n    GROUP BY \n        w.authorId\n)\nSELECT \n    rc.authorId,\n    rc.authorName,\n    rc.paper_count,\n    rc.avg_paper_quality,\n    rc.total_citations,\n    rc.venues,\n    rc.avg_journal_impact,\n    COALESCE(du.dataset_count, 0) AS dataset_count,\n    COALESCE(du.total_dataset_quality, 0) AS total_dataset_quality,\n    COALESCE(kr.keyphrase_count, 0) AS keyphrase_count,\n    COALESCE(kr.total_keyphrase_weight, 0) AS total_keyphrase_weight\nFROM \n    researcher_contribution rc\nLEFT JOIN \n    dataset_usage du ON rc.authorId = du.authorId\nLEFT JOIN \n    keyphrase_relevance kr ON rc.authorId = kr.authorId\nORDER BY \n    rc.total_citations DESC, rc.avg_paper_quality DESC, du.total_dataset_quality DESC, kr.total_keyphrase_weight DESC;\n```"
    },
    {
        "instance_id": "q_727",
        "db_id": "scholar_new",
        "question": "Which researchers, whose research interests include syntactic parsing, have the highest influence in this field over the past decade (2013 to present)? Influence should be measured by the total number of citations received across their publications, the count of their published papers, the average quality score of their papers (normalized), the number of distinct datasets they have engaged with, and their participation in conferences related to syntactic parsing. Please rank the results first by total citations in descending order, then by average paper quality, dataset engagement, and conference engagement, respectively, and limit the output to the top 10 researchers.",
        "query": "```sql\nSELECT \n    a.authorId,\n    a.authorName,\n    SUM(p.numCiting) AS total_citations,\n    COUNT(p.paperId) AS paper_count,\n    AVG(p.paper_quality_score_normalized) AS avg_paper_quality,\n    COUNT(DISTINCT pd.datasetId) AS dataset_engagement,\n    COUNT(DISTINCT w.paperId) FILTER (WHERE v.venueName ILIKE '%syntactic parsing%' AND p.year >= 2013) AS conference_engagement\nFROM \n    author a\nJOIN \n    writes w ON a.authorId = w.authorId\nJOIN \n    paper p ON w.paperId = p.paperId\nLEFT JOIN \n    paperDataset pd ON p.paperId = pd.paperId\nLEFT JOIN \n    venue v ON p.venueId = v.venueId\nWHERE \n    p.year >= 2013\n    AND 'syntactic parsing' = ANY(a.author_research_interests_normalized)\nGROUP BY \n    a.authorId, a.authorName\nORDER BY \n    total_citations DESC, avg_paper_quality DESC, dataset_engagement DESC, conference_engagement DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_725",
        "db_id": "scholar_new",
        "question": "Which authors have the highest influence in the field of syntactic parsing, considering both the quantity and quality of their publications over the past five years, as well as the normalized trend of citations received by their papers? Please rank the authors based on the total number of citations, average normalized paper quality score, and the sum of normalized citation trend scores, and return the top 10 results.",
        "query": "```sql\nSELECT \n    a.authorId,\n    a.authorName,\n    SUM(p.numCiting) AS total_citations,\n    AVG(p.paper_quality_score_normalized) AS avg_paper_quality,\n    SUM(c.paper_citation_trend_normalized) AS citation_trend_score\nFROM \n    author a\nJOIN \n    writes w ON a.authorId = w.authorId\nJOIN \n    paper p ON w.paperId = p.paperId\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nWHERE \n    a.author_research_interests_normalized @> ARRAY['syntactic parsing']\n    AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5\nGROUP BY \n    a.authorId, a.authorName\nORDER BY \n    total_citations DESC, avg_paper_quality DESC, citation_trend_score DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_721",
        "db_id": "scholar_new",
        "question": "在最近三年内，哪些作者的研究成果被高影响力的期刊或会议广泛引用，并且这些作者在其研究领域中展现出最高的平均论文质量趋势？具体来说，高影响力期刊或会议的定义为影响因子高于所有期刊平均影响因子的那些；同时，要求作者的规范化研究兴趣与论文的规范化关键词存在交集。请按平均论文质量趋势从高到低排序，并返回排名前10的作者及其对应的平均论文质量分数。",
        "query": "```sql\nSELECT \n    a.authorId,\n    a.authorName,\n    AVG(p.paper_quality_score_normalized) AS avg_paper_quality_score\nFROM \n    author a\nJOIN \n    writes w ON a.authorId = w.authorId\nJOIN \n    paper p ON w.paperId = p.paperId\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nJOIN \n    journal j ON p.venueId = j.journalId\nWHERE \n    p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 3\n    AND j.impact_factor > (SELECT AVG(impact_factor) FROM journal)\n    AND a.author_research_interests_normalized && p.paper_keywords_normalized\nGROUP BY \n    a.authorId, a.authorName\nORDER BY \n    avg_paper_quality_score DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_722",
        "db_id": "scholar_new",
        "question": "Which authors have the highest combined quality of publications and citations in their respective research areas, based on papers published in the past five years? The results should consider the normalized quality scores of both the papers and their citations, and list the top 10 authors by descending order of total paper quality and total citation quality.",
        "query": "```sql\nSELECT \n    a.authorId,\n    a.authorName,\n    a.author_research_interests,\n    SUM(p.paper_quality_score_normalized) AS total_paper_quality,\n    SUM(c.cited_paper_quality_score_normalized) AS total_citation_quality\nFROM \n    author a\nJOIN \n    writes w ON a.authorId = w.authorId\nJOIN \n    paper p ON w.paperId = p.paperId\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nWHERE \n    p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5\nGROUP BY \n    a.authorId, a.authorName, a.author_research_interests\nORDER BY \n    total_paper_quality DESC, total_citation_quality DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_736",
        "db_id": "scholar_new",
        "question": "Which researchers in the field of syntactic parsing have the highest overall research impact, considering their total publication count, the quality of citations received over the past five years, and their average contribution to collaborations with other authors? Please provide the top 10 researchers ranked by their overall research impact, calculated as the product of their publication count, citation quality score, and average co-author contribution.",
        "query": "```sql\nWITH recent_citations AS (\n    SELECT \n        c.citedPaperId,\n        SUM(c.citing_paper_quality_score_normalized) AS total_citation_quality\n    FROM \n        cite c\n    JOIN \n        paper p ON c.citedPaperId = p.paperId\n    WHERE \n        p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n    GROUP BY \n        c.citedPaperId\n),\nauthor_influence AS (\n    SELECT \n        w.authorId,\n        a.authorName,\n        a.publication_count,\n        COALESCE(SUM(rc.total_citation_quality), 0) AS citation_quality_score,\n        COUNT(DISTINCT w.paperId) AS recent_paper_count,\n        AVG(w.writes_co_author_contribution_normalized) AS avg_co_author_contribution\n    FROM \n        writes w\n    JOIN \n        author a ON w.authorId = a.authorId\n    LEFT JOIN \n        recent_citations rc ON w.paperId = rc.citedPaperId\n    JOIN \n        paper p ON w.paperId = p.paperId\n    WHERE \n        'syntactic parsing' = ANY(p.paper_keywords_normalized)\n    GROUP BY \n        w.authorId, a.authorName, a.publication_count\n)\nSELECT \n    ai.authorId,\n    ai.authorName,\n    ai.publication_count,\n    ai.citation_quality_score,\n    ai.recent_paper_count,\n    ai.avg_co_author_contribution,\n    (ai.publication_count * ai.citation_quality_score * ai.avg_co_author_contribution) AS overall_research_impact\nFROM \n    author_influence ai\nORDER BY \n    overall_research_impact DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_730",
        "db_id": "scholar_new",
        "question": "Which researchers have the highest influence in the field of syntactic parsing, considering both the quantity and quality of their publications over the past five years, as well as the average impact factor of the venues where their papers were published? Influence is measured by the sum of normalized quality-weighted citations across all papers, the total number of co-authors, and the count of distinct publications. Results are limited to the top 10 researchers, ranked first by weighted citation score, then by average impact factor, and finally by publication count.",
        "query": "```sql\nSELECT \n    a.authorId,\n    a.authorName,\n    SUM(p.numCiting * p.paper_quality_score_normalized) AS weighted_citation_score,\n    SUM(w.co_author_count) AS total_co_authors,\n    COUNT(DISTINCT p.paperId) AS paper_count,\n    AVG(j.impact_factor) AS avg_impact_factor\nFROM \n    author a\nJOIN \n    writes w ON a.authorId = w.authorId\nJOIN \n    paper p ON w.paperId = p.paperId\nJOIN \n    venue v ON p.venueId = v.venueId\nLEFT JOIN \n    journal j ON v.venueId = j.journalId\nWHERE \n    a.author_research_interests_normalized @> ARRAY['syntactic parsing']\n    AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\nGROUP BY \n    a.authorId, a.authorName\nORDER BY \n    weighted_citation_score DESC, avg_impact_factor DESC, paper_count DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_726",
        "db_id": "scholar_new",
        "question": "How many distinct research articles has David M. Blei contributed to in conferences over the past 5 years, where he was among the top 3 cited authors for each article?",
        "query": "```sql\nSELECT COUNT(DISTINCT p.paperId) AS article_count\nFROM paper p\nJOIN writes w ON p.paperId = w.paperId\nJOIN author a ON w.authorId = a.authorId\nJOIN venue v ON p.venueId = v.venueId\nWHERE a.authorName = 'David M. Blei'\nAND v.venue_type = 'conference'\nAND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5\nAND w.paperId IN (\n    SELECT wc.paperId\n    FROM writes wc\n    JOIN (\n        SELECT w2.paperId, w2.authorId, RANK() OVER (PARTITION BY w2.paperId ORDER BY SUM(w2.co_author_network) DESC) as citation_rank\n        FROM writes w2\n        JOIN paper p2 ON w2.paperId = p2.paperId\n        WHERE p2.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5\n        GROUP BY w2.paperId, w2.authorId\n    ) ranked_authors ON wc.paperId = ranked_authors.paperId AND wc.authorId = ranked_authors.authorId\n    WHERE ranked_authors.citation_rank <= 3\n);\n```"
    },
    {
        "instance_id": "q_728",
        "db_id": "scholar_new",
        "question": "How many research articles has David M. Blei contributed to in conferences, specifically within the AISTATS venue, where the papers have a citation quality score above the average paper quality score of all papers published in AISTATS?",
        "query": "```sql\nWITH avg_citation_quality_score AS (\n    SELECT AVG(paper_quality_score) AS avg_score\n    FROM paper\n    WHERE venueId IN (SELECT venueId FROM venue WHERE venueName = 'AISTATS')\n)\nSELECT COUNT(*) AS article_count\nFROM paper p\nJOIN writes w ON p.paperId = w.paperId\nJOIN author a ON w.authorId = a.authorId\nJOIN venue v ON p.venueId = v.venueId\nJOIN avg_citation_quality_score acqs ON TRUE\nWHERE a.authorName = 'David M. Blei'\nAND v.venue_type = 'conference'\nAND p.paper_quality_score > acqs.avg_score;\n```"
    },
    {
        "instance_id": "q_729",
        "db_id": "scholar_new",
        "question": "What is the yearly trend of David M. Blei's research impact from 2000 to 2023, measured by the number of publications, the average quality score of these publications in venues with an impact factor of 3.0 or higher, and the total number of co-authors involved in these publications?",
        "query": "```sql\nSELECT \n    p.year AS publication_year,\n    COUNT(p.paperId) AS publication_count,\n    AVG(p.paper_quality_score_normalized) AS avg_paper_quality_score,\n    SUM(w.co_author_count) AS total_co_author_count\nFROM \n    paper p\nJOIN \n    writes w ON p.paperId = w.paperId\nJOIN \n    venue v ON p.venueId = v.venueId\nJOIN \n    author a ON w.authorId = a.authorId\nWHERE \n    a.authorName = 'David M. Blei'\n    AND v.impact_factor >= 3.0\nGROUP BY \n    p.year\nORDER BY \n    p.year ASC;\n```"
    },
    {
        "instance_id": "q_733",
        "db_id": "scholar_new",
        "question": "How many research papers has David M. Blei published in the last five years in conferences or journals with a citation threshold higher than the average citation threshold of all journals? Additionally, provide the year-wise trend of citations received by these papers over the same five-year period.",
        "query": "```sql\nWITH high_citation_density_venues AS (\n    SELECT venueId\n    FROM venue\n    WHERE venue_type IN ('conference', 'journal') \n      AND citation_threshold > (SELECT AVG(citation_threshold) FROM journal)\n),\ndavid_blei_papers AS (\n    SELECT w.paperId, p.year\n    FROM writes w\n    JOIN author a ON w.authorId = a.authorId\n    JOIN paper p ON w.paperId = p.paperId\n    WHERE a.authorName = 'David M. Blei'\n      AND p.venueId IN (SELECT venueId FROM high_citation_density_venues)\n      AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5\n),\ncitation_trends AS (\n    SELECT c.citedPaperId, SUM(c.paper_citation_trend_normalized) AS citation_trend\n    FROM cite c\n    JOIN david_blei_papers dbp ON c.citedPaperId = dbp.paperId\n    GROUP BY c.citedPaperId\n)\nSELECT COUNT(*) AS paper_count, JSON_OBJECT_AGG(dbp.year, ct.citation_trend) AS citation_trend_over_years\nFROM david_blei_papers dbp\nLEFT JOIN citation_trends ct ON dbp.paperId = ct.citedPaperId;\n```"
    },
    {
        "instance_id": "q_731",
        "db_id": "scholar_new",
        "question": "How many distinct research papers has David M. Blei published in conferences or journals with a normalized citation quality score greater than 0.8 over the past five years, and what is the citation trend of these papers?",
        "query": "```sql\nSELECT \n    COUNT(DISTINCT p.paperId) AS paper_count,\n    c.paper_citation_trend AS citation_trend\nFROM \n    author a\nJOIN \n    writes w ON a.authorId = w.authorId\nJOIN \n    paper p ON w.paperId = p.paperId\nLEFT JOIN \n    cite c ON p.paperId = c.citedPaperId\nJOIN \n    venue v ON p.venueId = v.venueId\nWHERE \n    a.authorName = 'David M. Blei'\n    AND (v.venue_type = 'conference' OR v.venue_type = 'journal')\n    AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n    AND c.cited_paper_quality_score_normalized > 0.8\nGROUP BY \n    c.paper_citation_trend;\n```"
    },
    {
        "instance_id": "q_735",
        "db_id": "scholar_new",
        "question": "How many distinct papers authored by David M. Blei have been cited by papers in datasets with a normalized quality score higher than 0.8, where the citing papers also have a normalized quality score higher than 0.8 and a positive citation trend over the past five years? Additionally, provide the citation trend for these papers.",
        "query": "```sql\nSELECT COUNT(DISTINCT p.paperId) AS paper_count, c.paper_citation_trend\nFROM writes w\nJOIN author a ON w.authorId = a.authorId\nJOIN paper p ON w.paperId = p.paperId\nJOIN cite c ON p.paperId = c.citedPaperId\nJOIN paperDataset pd ON c.citingPaperId = pd.paperId\nWHERE a.authorName = 'David M. Blei'\n  AND pd.paper_dataset_quality_score_normalized > 0.8\n  AND c.cited_paper_quality_score_normalized > 0.8\n  AND c.paper_citation_trend_normalized > 0\n  AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\nGROUP BY c.paper_citation_trend;\n```"
    },
    {
        "instance_id": "q_738",
        "db_id": "scholar_new",
        "question": "What is the yearly trend of David M. Blei's research impact from 2000 to 2023, measured by the number of publications in conferences and journals, the average quality score of these publications, and the total quality score of citations received, considering only citations from papers published in conferences and journals?",
        "query": "```sql\nSELECT \n    p.year AS publication_year,\n    COUNT(DISTINCT p.paperId) AS publication_count,\n    AVG(p.paper_quality_score_normalized) AS avg_paper_quality_score,\n    SUM(c.cited_paper_quality_score_normalized) AS total_citation_quality_score\nFROM \n    writes w\nJOIN \n    author a ON w.authorId = a.authorId\nJOIN \n    paper p ON w.paperId = p.paperId\nLEFT JOIN \n    cite c ON p.paperId = c.citedPaperId\nWHERE \n    a.authorName = 'David M. Blei'\n    AND p.venueId IN (\n        SELECT v.venueId \n        FROM venue v \n        WHERE v.venue_type IN ('conference', 'journal')\n    )\nGROUP BY \n    p.year\nORDER BY \n    p.year ASC;\n```"
    },
    {
        "instance_id": "q_732",
        "db_id": "scholar_new",
        "question": "How many research papers has David M. Blei published in conferences over his entire career, and what is the year-by-year trend of his citations for the past five years?",
        "query": "```sql\nWITH david_m_blei_papers AS (\n    SELECT \n        p.paperId, \n        p.year, \n        p.numCiting\n    FROM \n        paper p\n    JOIN \n        writes w ON p.paperId = w.paperId\n    JOIN \n        author a ON w.authorId = a.authorId\n    JOIN \n        venue v ON p.venueId = v.venueId\n    WHERE \n        a.authorName = 'David M. Blei' \n        AND v.venue_type = 'conference'\n),\ncitation_trend AS (\n    SELECT \n        year, \n        SUM(numCiting) AS total_citations\n    FROM \n        david_m_blei_papers\n    WHERE \n        year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n    GROUP BY \n        year\n    ORDER BY \n        year\n)\nSELECT \n    (SELECT COUNT(*) FROM david_m_blei_papers) AS total_conference_papers,\n    array_agg(ARRAY[year, total_citations] ORDER BY year) AS citation_trend_over_five_years\nFROM \n    citation_trend;\n```"
    },
    {
        "instance_id": "q_734",
        "db_id": "scholar_new",
        "question": "Which papers published in EMNLP in the year 2010 have the highest average quality of citations, considering both the normalized quality score of citing papers and the normalized trend of citations over time, ranked first by average citation quality and second by citation trend?",
        "query": "```sql\nSELECT \n    p.paperId, \n    p.title, \n    AVG(c.citing_paper_quality_score_normalized) AS avg_citation_quality,\n    c.paper_citation_trend_normalized AS citation_trend\nFROM \n    paper p\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nJOIN \n    venue v ON p.venueId = v.venueId\nWHERE \n    v.venueName = 'EMNLP' \n    AND p.year = 2010\nGROUP BY \n    p.paperId, p.title, c.paper_citation_trend_normalized\nORDER BY \n    avg_citation_quality DESC, citation_trend DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_737",
        "db_id": "scholar_new",
        "question": "Which paper published in EMNLP in 2010 received the highest weighted citation quality, calculated as the sum of the normalized quality scores of citing papers multiplied by their normalized citation trends over time?",
        "query": "```sql\nSELECT \n    p.paperId,\n    p.title,\n    SUM(c.citing_paper_quality_score_normalized * c.paper_citation_trend_normalized) AS weighted_citation_quality\nFROM \n    paper p\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nJOIN \n    venue v ON p.venueId = v.venueId\nWHERE \n    v.venueName = 'EMNLP' \n    AND p.year = 2010\nGROUP BY \n    p.paperId, p.title\nORDER BY \n    weighted_citation_quality DESC\nLIMIT 1;\n```"
    },
    {
        "instance_id": "q_739",
        "db_id": "scholar_new",
        "question": "Which papers published in EMNLP in 2010 have the highest citation quality scores and are most frequently associated with datasets that have a user rating of 4.5 or higher?",
        "query": "```sql\nSELECT \n    p.paperId, \n    p.title, \n    p.paper_quality_score AS citation_quality_score, \n    SUM(pd.dataset_paper_count) AS total_dataset_associations\nFROM \n    paper p\nJOIN \n    venue v ON p.venueId = v.venueId\nJOIN \n    paperDataset pd ON p.paperId = pd.paperId\nJOIN \n    dataset d ON pd.datasetId = d.datasetId\nWHERE \n    v.venueName = 'EMNLP' \n    AND p.year = 2010 \n    AND d.dataset_user_rating >= 4.5\nGROUP BY \n    p.paperId, p.title, p.paper_quality_score\nORDER BY \n    p.paper_quality_score DESC, \n    total_dataset_associations DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_741",
        "db_id": "scholar_new",
        "question": "Which papers published in EMNLP in 2010 have received the highest total quality citations, considering only citations with a positive trend over time, and ranked by the sum of normalized quality scores of citing papers?",
        "query": "```sql\nSELECT \n    p.paperId, \n    p.title, \n    SUM(c.citing_paper_quality_score_normalized) AS total_quality_citations\nFROM \n    paper p\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nJOIN \n    venue v ON p.venueId = v.venueId\nWHERE \n    v.venueName = 'EMNLP' \n    AND p.year = 2010\n    AND c.paper_citation_trend_normalized > 0\nGROUP BY \n    p.paperId, p.title\nORDER BY \n    total_quality_citations DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_744",
        "db_id": "scholar_new",
        "question": "Which research articles in the field of computer vision, specifically those discussing multi-modal data fusion techniques with binary features applied to RGB-D datasets, were presented at conferences held in North America in 2016? Additionally, what was the influence of these papers over the subsequent years, as measured by the total normalized quality score of citing papers and the average h-index of their authors? Only include papers that have been cited at least once, and rank the results first by descending total citation influence and then by descending average author h-index.",
        "query": "```sql\nSELECT \n    p.paperId,\n    p.title,\n    p.year,\n    v.venueName,\n    SUM(c.citing_paper_quality_score_normalized) AS total_citation_influence,\n    AVG(a.h_index) AS avg_author_h_index\nFROM \n    paper p\nJOIN \n    venue v ON p.venueId = v.venueId\nJOIN \n    writes w ON p.paperId = w.paperId\nJOIN \n    author a ON w.authorId = a.authorId\nLEFT JOIN \n    cite c ON p.paperId = c.citedPaperId\nJOIN \n    paperKeyphrase pk ON p.paperId = pk.paperId\nJOIN \n    keyphrase k ON pk.keyphraseId = k.keyphraseId\nWHERE \n    v.venue_type = 'conference'\n    AND v.venue_location = 'North America'\n    AND p.year = 2016\n    AND p.paper_keywords @> ARRAY['computer vision', 'multi-modal data fusion', 'binary features', 'RGB-D datasets']\n    AND k.keyphraseName IN ('computer vision', 'multi-modal data fusion', 'binary features', 'RGB-D datasets')\nGROUP BY \n    p.paperId, p.title, p.year, v.venueName\nHAVING \n    COUNT(DISTINCT c.citingPaperId) > 0\nORDER BY \n    total_citation_influence DESC, avg_author_h_index DESC;\n```"
    },
    {
        "instance_id": "q_740",
        "db_id": "scholar_new",
        "question": "Which research articles published at CVPR in 2016 explored the integration of binary features for multi-modal fusion, specifically focusing on their application to RGB-D object datasets? Additionally, compare the citation trends of these papers with similar works over time, considering both the quality scores and dataset usage details. Provide results sorted by the number of citations in descending order, followed by paper quality score in descending order.",
        "query": "```sql\nSELECT \n    p.paperId,\n    p.title,\n    p.numCiting,\n    p.paper_quality_score,\n    p.paper_keywords,\n    c.paper_citation_trend,\n    d.datasetName\nFROM \n    paper p\nJOIN \n    venue v ON p.venueId = v.venueId\nJOIN \n    paperDataset pd ON p.paperId = pd.paperId\nJOIN \n    dataset d ON pd.datasetId = d.datasetId\nLEFT JOIN \n    cite c ON p.paperId = c.citedPaperId\nWHERE \n    v.venueName = 'CVPR' \n    AND p.year = 2016 \n    AND d.datasetName LIKE '%RGB-D%' \n    AND p.paper_keywords @> ARRAY['binary features', 'multi-modal fusion', 'object datasets']\nGROUP BY \n    p.paperId, p.title, p.numCiting, p.paper_quality_score, p.paper_keywords, c.paper_citation_trend, d.datasetName\nORDER BY \n    p.numCiting DESC, p.paper_quality_score DESC;\n```"
    },
    {
        "instance_id": "q_742",
        "db_id": "scholar_new",
        "question": "Which research topics and datasets are most frequently associated with publications authored by Luke Zettlemoyer over the past five years, and how have the citation quality and usage trends of these publications evolved during this period, ordered by year in descending order, citation count in descending order, and average citation quality in descending order?",
        "query": "```sql\nWITH luke_papers AS (\n    SELECT p.paperId, p.year, p.paper_quality_score_normalized, p.numCiting, p.numCitedBy\n    FROM paper p\n    INNER JOIN writes w ON p.paperId = w.paperId\n    INNER JOIN author a ON w.authorId = a.authorId\n    WHERE a.authorName = 'Luke Zettlemoyer' AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n),\npaper_topics AS (\n    SELECT pk.paperId, STRING_AGG(DISTINCT k.keyphraseName, ', ') AS research_topics\n    FROM paperKeyphrase pk\n    INNER JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId\n    GROUP BY pk.paperId\n),\npaper_datasets AS (\n    SELECT pd.paperId, STRING_AGG(DISTINCT d.datasetName, ', ') AS associated_datasets\n    FROM paperDataset pd\n    INNER JOIN dataset d ON pd.datasetId = d.datasetId\n    GROUP BY pd.paperId\n),\ncitation_quality_trends AS (\n    SELECT \n        l.paperId, \n        AVG(c.citing_paper_quality_score_normalized) AS avg_citation_quality,\n        COUNT(c.citingPaperId) AS citation_count\n    FROM luke_papers l\n    LEFT JOIN cite c ON l.paperId = c.citedPaperId\n    GROUP BY l.paperId\n)\nSELECT \n    lt.paperId, \n    pt.research_topics, \n    pd.associated_datasets, \n    lt.year, \n    ct.avg_citation_quality, \n    ct.citation_count, \n    lt.paper_quality_score_normalized\nFROM luke_papers lt\nLEFT JOIN paper_topics pt ON lt.paperId = pt.paperId\nLEFT JOIN paper_datasets pd ON lt.paperId = pd.paperId\nLEFT JOIN citation_quality_trends ct ON lt.paperId = ct.paperId\nORDER BY lt.year DESC, ct.citation_count DESC, ct.avg_citation_quality DESC;\n```"
    },
    {
        "instance_id": "q_750",
        "db_id": "scholar_new",
        "question": "Which keyphrases are most frequently associated with papers written by authors whose normalized research interests include \"machine learning\" over the past five years, categorized by venue? Additionally, compare the average quality of citations received by these papers across venues, and rank the results first by keyphrase usage frequency in descending order and then by the average citation quality in descending order within each venue.",
        "query": "```sql\nWITH ml_authors AS (\n    SELECT DISTINCT authorId\n    FROM author\n    WHERE 'machine learning' = ANY(author_research_interests_normalized)\n),\nml_papers AS (\n    SELECT DISTINCT p.paperId\n    FROM paper p\n    JOIN writes w ON p.paperId = w.paperId\n    JOIN ml_authors a ON w.authorId = a.authorId\n    WHERE p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n),\nkeyphrase_usage AS (\n    SELECT pk.keyphraseId, COUNT(*) AS usage_count, p.venueId\n    FROM ml_papers mp\n    JOIN paperKeyphrase pk ON mp.paperId = pk.paperId\n    JOIN paper p ON mp.paperId = p.paperId\n    GROUP BY pk.keyphraseId, p.venueId\n),\ncitation_quality AS (\n    SELECT c.citedPaperId, AVG(c.citing_paper_quality_score_normalized) AS avg_citation_quality, p.venueId\n    FROM cite c\n    JOIN ml_papers mp ON c.citedPaperId = mp.paperId\n    JOIN paper p ON mp.paperId = p.paperId\n    GROUP BY c.citedPaperId, p.venueId\n),\nvenue_impact AS (\n    SELECT ku.keyphraseId, ku.venueId, ku.usage_count, AVG(cq.avg_citation_quality) AS avg_venue_citation_quality\n    FROM keyphrase_usage ku\n    JOIN citation_quality cq ON ku.venueId = cq.venueId\n    GROUP BY ku.keyphraseId, ku.venueId, ku.usage_count\n)\nSELECT k.keyphraseName, vi.venueId, vi.usage_count, vi.avg_venue_citation_quality\nFROM venue_impact vi\nJOIN keyphrase k ON vi.keyphraseId = k.keyphraseId\nORDER BY vi.usage_count DESC, vi.avg_venue_citation_quality DESC;\n```"
    },
    {
        "instance_id": "q_743",
        "db_id": "scholar_new",
        "question": "What are the key research topics that Luke Zettlemoyer has focused on in his publications, and how have these topics evolved over the years in terms of total citations, average paper quality, and average citation impact? Specifically, identify the first and last publication years for each topic, along with their respective citation trends and research impact metrics.",
        "query": "```sql\nWITH luke_publications AS (\n    SELECT p.paperId, p.title, p.year, p.numCiting, p.paper_quality_score, pk.keyphraseName, pk.paper_keyphrase_weighted_frequency_normalized\n    FROM paper p\n    JOIN writes w ON p.paperId = w.paperId\n    JOIN author a ON w.authorId = a.authorId\n    JOIN paperKeyphrase pk ON p.paperId = pk.paperId\n    WHERE a.authorName = 'Luke Zettlemoyer'\n), citation_trends AS (\n    SELECT lp.paperId, lp.keyphraseName, c.citing_paper_quality_score_normalized, lp.year\n    FROM luke_publications lp\n    JOIN cite c ON lp.paperId = c.citedPaperId\n)\nSELECT keyphraseName AS research_topic, \n       MIN(year) AS first_year, \n       MAX(year) AS last_year, \n       SUM(numCiting) AS total_citations, \n       AVG(paper_quality_score) AS avg_paper_quality, \n       AVG(citing_paper_quality_score_normalized) AS avg_citation_impact\nFROM citation_trends\nGROUP BY keyphraseName\nORDER BY total_citations DESC;\n```"
    },
    {
        "instance_id": "q_745",
        "db_id": "scholar_new",
        "question": "哪些作者的研究兴趣与其发表的论文中使用的数据集高度相关，且这些论文在高质量期刊（影响因子高于所有期刊平均值）中的引用量呈现逐年增长趋势（年份从2010年起，且至少跨越两个年份，年份与引用量的相关性大于0.8）？请列出这些作者的ID、姓名、研究兴趣，以及相关的数据集名称、论文ID、标题、发表年份和引用次数，并注明期刊名称及其影响因子。分析时需结合作者的研究领域、数据集的使用情况以及论文的引用质量。",
        "query": "```sql\nSELECT \n    a.authorId,\n    a.authorName,\n    a.author_research_interests,\n    d.datasetName,\n    p.paperId,\n    p.title,\n    p.year,\n    p.numCitedBy,\n    j.journalName,\n    j.impact_factor\nFROM \n    author a\nJOIN \n    writes w ON a.authorId = w.authorId\nJOIN \n    paper p ON w.paperId = p.paperId\nJOIN \n    venue v ON p.venueId = v.venueId\nJOIN \n    journal j ON v.venueId = j.journalId\nLEFT JOIN \n    paperDataset pd ON p.paperId = pd.paperId\nLEFT JOIN \n    dataset d ON pd.datasetId = d.datasetId\nWHERE \n    j.impact_factor > (SELECT AVG(impact_factor) FROM journal)\n    AND p.numCitedBy > 0\n    AND p.year >= 2010\n    AND EXISTS (\n        SELECT 1\n        FROM paperKeyphrase pk\n        JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId\n        WHERE p.paperId = pk.paperId\n        AND k.keyphraseName IN (SELECT unnest(a.author_research_interests))\n    )\nGROUP BY \n    a.authorId, a.authorName, a.author_research_interests, d.datasetName, p.paperId, p.title, p.year, p.numCitedBy, j.journalName, j.impact_factor\nHAVING \n    COUNT(DISTINCT p.year) > 1\n    AND CORR(p.year, p.numCitedBy) > 0.8;\n```"
    },
    {
        "instance_id": "q_751",
        "db_id": "scholar_new",
        "question": "What are the key research topics that Luke Zettlemoyer has focused on in the past five years, and how have these topics evolved in terms of total normalized citation scores and citation counts, ranked by their research impact within the academic community?",
        "query": "```sql\nWITH recent_papers AS (\n    SELECT \n        p.paperId,\n        p.title,\n        p.year,\n        p.numCiting,\n        p.paper_quality_score,\n        pk.keyphraseId,\n        k.keyphraseName\n    FROM \n        paper p\n    JOIN \n        writes w ON p.paperId = w.paperId\n    JOIN \n        author a ON w.authorId = a.authorId\n    LEFT JOIN \n        paperKeyphrase pk ON p.paperId = pk.paperId\n    LEFT JOIN \n        keyphrase k ON pk.keyphraseId = k.keyphraseId\n    WHERE \n        a.authorName = 'Luke Zettlemoyer' \n        AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n),\ncitation_trends AS (\n    SELECT \n        rp.keyphraseName,\n        SUM(c.cited_paper_quality_score_normalized) AS total_citation_score,\n        COUNT(c.citedPaperId) AS citation_count\n    FROM \n        recent_papers rp\n    LEFT JOIN \n        cite c ON rp.paperId = c.citedPaperId\n    GROUP BY \n        rp.keyphraseName\n)\nSELECT \n    ct.keyphraseName AS research_topic,\n    ct.total_citation_score,\n    ct.citation_count,\n    ROW_NUMBER() OVER (ORDER BY ct.total_citation_score DESC) AS impact_rank\nFROM \n    citation_trends ct\nWHERE \n    ct.keyphraseName IS NOT NULL\nORDER BY \n    ct.total_citation_score DESC;\n```"
    },
    {
        "instance_id": "q_754",
        "db_id": "scholar_new",
        "question": "Which keyphrases have experienced a significant increase in usage over the past five years, specifically those with more than 50% of their total usage occurring in this period? Additionally, evaluate the correlation between these keyphrases' usage trends and the citation quality of papers that employ them, particularly in journals with an impact factor exceeding the 80th percentile. Identify notable authors who frequently use these keyphrases in their publications (with at least 10 usages) and assess their research impact based on their h-index and total citation counts. Present the results sorted by the recent usage count of the keyphrases in descending order, and by the authors' h-index in descending order as a tiebreaker.",
        "query": "```sql\nWITH keyphrase_trend AS (\n    SELECT \n        pk.keyphraseId,\n        k.keyphraseName,\n        COUNT(CASE WHEN p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5 THEN 1 END) AS recent_usage_count,\n        COUNT(*) AS total_usage_count\n    FROM paperKeyphrase pk\n    JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId\n    JOIN paper p ON pk.paperId = p.paperId\n    WHERE p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 10\n    GROUP BY pk.keyphraseId, k.keyphraseName\n    HAVING COUNT(CASE WHEN p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5 THEN 1 END) > 0.5 * COUNT(*)\n),\ncitation_quality AS (\n    SELECT \n        pk.keyphraseId,\n        AVG(p.paper_quality_score_normalized) AS avg_paper_quality_score,\n        AVG(c.cited_paper_quality_score_normalized) AS avg_citation_quality_score\n    FROM paperKeyphrase pk\n    JOIN paper p ON pk.paperId = p.paperId\n    LEFT JOIN cite c ON p.paperId = c.citedPaperId\n    JOIN journal j ON p.venueId = j.journalId\n    WHERE j.impact_factor > (SELECT PERCENTILE_CONT(0.8) WITHIN GROUP (ORDER BY impact_factor) FROM journal)\n    GROUP BY pk.keyphraseId\n),\nauthor_impact AS (\n    SELECT \n        w.authorId,\n        a.authorName,\n        kt.keyphraseId,\n        kt.keyphraseName,\n        COUNT(w.paperId) AS usage_count,\n        MAX(a.h_index) AS h_index,\n        SUM(p.numCitedBy) AS total_citations\n    FROM writes w\n    JOIN author a ON w.authorId = a.authorId\n    JOIN paper p ON w.paperId = p.paperId\n    JOIN paperKeyphrase pk ON w.paperId = pk.paperId\n    JOIN keyphrase_trend kt ON pk.keyphraseId = kt.keyphraseId\n    GROUP BY w.authorId, a.authorName, kt.keyphraseId, kt.keyphraseName\n    HAVING COUNT(w.paperId) > 10\n)\nSELECT \n    kt.keyphraseName,\n    kt.recent_usage_count,\n    kt.total_usage_count,\n    cq.avg_paper_quality_score,\n    cq.avg_citation_quality_score,\n    ai.authorName,\n    ai.usage_count,\n    ai.h_index,\n    ai.total_citations\nFROM keyphrase_trend kt\nLEFT JOIN citation_quality cq ON kt.keyphraseId = cq.keyphraseId\nLEFT JOIN author_impact ai ON kt.keyphraseId = ai.keyphraseId\nORDER BY kt.recent_usage_count DESC, ai.h_index DESC;\n```"
    },
    {
        "instance_id": "q_749",
        "db_id": "scholar_new",
        "question": "在过去五年中，哪些研究领域的关键词在高影响力期刊中的引用趋势最为显著？这些关键词与数据集的使用趋势之间是否存在相关性？进一步分析显示这些关键词的相关论文是否更倾向于出现在特定类型的会议或期刊中？同时，评估撰写这些论文的作者的研究兴趣变化对这一趋势的影响程度。",
        "query": "```sql\nWITH high_impact_journals AS (\n    SELECT journalId, journalName\n    FROM journal\n    WHERE impact_factor > (SELECT AVG(impact_factor) FROM journal)\n),\nsignificant_keywords AS (\n    SELECT pk.paperId, pk.keyphraseId, k.keyphraseName\n    FROM paperKeyphrase pk\n    JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId\n    JOIN paper p ON pk.paperId = p.paperId\n    JOIN venue v ON p.venueId = v.venueId\n    JOIN high_impact_journals hj ON v.venueId = hj.journalId\n    WHERE p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5\n      AND pk.paper_keyphrase_weighted_frequency_normalized > (SELECT AVG(paper_keyphrase_weighted_frequency_normalized) FROM paperKeyphrase)\n),\ndataset_trends AS (\n    SELECT pd.paperId, d.datasetName, COUNT(*) AS dataset_usage_count\n    FROM paperDataset pd\n    JOIN dataset d ON pd.datasetId = d.datasetId\n    GROUP BY pd.paperId, d.datasetName\n),\ncitation_trends AS (\n    SELECT c.citedPaperId, COUNT(*) AS citation_count\n    FROM cite c\n    JOIN significant_keywords sk ON c.citedPaperId = sk.paperId\n    GROUP BY c.citedPaperId\n),\nvenue_analysis AS (\n    SELECT p.paperId, v.venueName, v.venue_type\n    FROM paper p\n    JOIN venue v ON p.venueId = v.venueId\n    WHERE p.paperId IN (SELECT paperId FROM significant_keywords)\n      AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5\n),\nauthor_interest_changes AS (\n    SELECT w.authorId, a.author_research_interests, COUNT(*) AS interest_paper_count\n    FROM writes w\n    JOIN author a ON w.authorId = a.authorId\n    JOIN significant_keywords sk ON w.paperId = sk.paperId\n    GROUP BY w.authorId, a.author_research_interests\n)\nSELECT \n    sk.keyphraseName,\n    AVG(ct.citation_count) AS avg_citation_trend,\n    dt.datasetName,\n    SUM(dt.dataset_usage_count) AS total_dataset_usage,\n    va.venueName,\n    va.venue_type,\n    ai.author_research_interests,\n    ai.interest_paper_count\nFROM significant_keywords sk\nLEFT JOIN citation_trends ct ON sk.paperId = ct.citedPaperId\nLEFT JOIN dataset_trends dt ON sk.paperId = dt.paperId\nLEFT JOIN venue_analysis va ON sk.paperId = va.paperId\nLEFT JOIN author_interest_changes ai ON sk.paperId = ANY(writes.paperId)\nGROUP BY sk.keyphraseName, dt.datasetName, va.venueName, va.venue_type, ai.author_research_interests, ai.interest_paper_count\nORDER BY avg_citation_trend DESC;\n```"
    },
    {
        "instance_id": "q_748",
        "db_id": "scholar_new",
        "question": "What are the key research topics and associated datasets explored by Luke Zettlemoyer in his publications from the past three years, along with the citation trends and quality scores (including normalized quality scores) of these works, ordered by the most recently updated papers first and then by their normalized quality scores in descending order?",
        "query": "```sql\nSELECT \n    pk.keyphraseName AS key_research_topic,\n    d.datasetName AS associated_dataset,\n    c.paper_citation_trend AS citation_trend,\n    p.paper_quality_score AS quality_score,\n    p.paper_quality_score_normalized AS normalized_quality_score\nFROM \n    writes w\nJOIN \n    author a ON w.authorId = a.authorId\nJOIN \n    paper p ON w.paperId = p.paperId\nLEFT JOIN \n    paperKeyphrase pk ON p.paperId = pk.paperId\nLEFT JOIN \n    paperDataset pd ON p.paperId = pd.paperId\nLEFT JOIN \n    dataset d ON pd.datasetId = d.datasetId\nLEFT JOIN \n    cite c ON p.paperId = c.citedPaperId\nWHERE \n    a.authorName = 'Luke Zettlemoyer'\n    AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 3\nORDER BY \n    p.paper_last_updated DESC, \n    p.paper_quality_score_normalized DESC;\n```"
    },
    {
        "instance_id": "q_752",
        "db_id": "scholar_new",
        "question": "What are the main research areas of Luke Zettlemoyer, along with the citation trends of his papers published since the year 2000, including the normalized quality of citations and the total number of citations received, ordered by publication year in descending order and citation trend quality in descending order where available?",
        "query": "```sql\nSELECT \n    a.author_research_interests AS main_research_areas,\n    c.paper_citation_trend AS citation_trends,\n    p.year AS publication_year,\n    c.citing_paper_quality_score_normalized AS normalized_citation_quality,\n    p.numCitedBy AS total_citations\nFROM \n    author a\nJOIN \n    writes w ON a.authorId = w.authorId\nJOIN \n    paper p ON w.paperId = p.paperId\nLEFT JOIN \n    cite c ON p.paperId = c.citedPaperId\nWHERE \n    a.authorName = 'Luke Zettlemoyer'\n    AND p.paper_last_updated >= '2000-01-01'::timestamp\nORDER BY \n    p.year DESC, \n    c.paper_citation_trend_normalized DESC NULLS LAST;\n```"
    },
    {
        "instance_id": "q_747",
        "db_id": "scholar_new",
        "question": "What are the research areas and key topics that Luke Zettlemoyer has most actively contributed to in the past three years, considering only his publications in venues with above-average impact factors and papers with a normalized quality score greater than 0.8, ranked by the total number of publications and the total number of citations received?",
        "query": "```sql\nSELECT \n    a.author_research_interests_normalized AS research_areas,\n    STRING_AGG(DISTINCT k.keyphraseName, ', ') AS key_topics\nFROM \n    author a\nJOIN \n    writes w ON a.authorId = w.authorId\nJOIN \n    paper p ON w.paperId = p.paperId\nJOIN \n    venue v ON p.venueId = v.venueId\nJOIN \n    paperKeyphrase pk ON p.paperId = pk.paperId\nJOIN \n    keyphrase k ON pk.keyphraseId = k.keyphraseId\nWHERE \n    a.authorName = 'Luke Zettlemoyer'\n    AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 3\n    AND v.impact_factor > (SELECT AVG(impact_factor) FROM journal)\n    AND p.paper_quality_score_normalized > 0.8\nGROUP BY \n    a.author_research_interests_normalized\nORDER BY \n    COUNT(p.paperId) DESC, SUM(p.numCitedBy) DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_746",
        "db_id": "scholar_new",
        "question": "What are the key research topics (as indicated by keyphrases) in the papers authored by Luke Zettlemoyer over the last five years, along with their average paper relevance scores, total citation quality scores, and venue impact factors, considering the normalized quality scores of citations and the impact factor of the journals where the papers were published? Please rank the results first by the total citation quality score in descending order and then by the venue impact factor in descending order.",
        "query": "```sql\nSELECT \n    pk.keyphraseName AS research_topic,\n    AVG(p.paper_quality_score_normalized) AS paper_relevance_score,\n    SUM(c.cited_paper_quality_score_normalized) AS total_citation_quality_score,\n    j.impact_factor AS venue_impact_factor\nFROM \n    writes w\nJOIN \n    author a ON w.authorId = a.authorId\nJOIN \n    paper p ON w.paperId = p.paperId\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nJOIN \n    venue v ON p.venueId = v.venueId\nJOIN \n    journal j ON v.venueId = j.journalId\nJOIN \n    paperKeyphrase pk ON p.paperId = pk.paperId\nWHERE \n    a.authorName = 'Luke Zettlemoyer'\n    AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\nGROUP BY \n    pk.keyphraseName, j.impact_factor\nORDER BY \n    total_citation_quality_score DESC, venue_impact_factor DESC;\n```"
    },
    {
        "instance_id": "q_755",
        "db_id": "scholar_new",
        "question": "What are the keyphrases most frequently associated with authors who have published papers with a normalized quality score greater than 0.8 in top-tier journals (defined as journals in the top 10% by impact factor) within the last five years? Additionally, how does the usage and relevance of these keyphrases trend over time across different venues, measured by the count of papers using each keyphrase and the sum of their weighted frequency scores? Provide the total usage and relevance for each keyphrase, along with the venues where they appear and yearly trends for both usage and relevance.",
        "query": "```sql\nWITH high_quality_authors AS (\n    SELECT DISTINCT w.authorId\n    FROM writes w\n    JOIN paper p ON w.paperId = p.paperId\n    JOIN journal j ON p.venueId = j.journalId\n    WHERE p.paper_quality_score_normalized > 0.8\n      AND j.impact_factor >= (SELECT PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY impact_factor) FROM journal)\n      AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5\n),\nkeyphrase_trends AS (\n    SELECT pk.keyphraseId,\n           k.keyphraseName,\n           COUNT(*) AS usage_count,\n           SUM(pk.paper_keyphrase_weighted_frequency_normalized) AS relevance_score,\n           p.year,\n           v.venueName\n    FROM paperKeyphrase pk\n    JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId\n    JOIN paper p ON pk.paperId = p.paperId\n    JOIN venue v ON p.venueId = v.venueId\n    JOIN high_quality_authors hqa ON EXISTS (\n        SELECT 1\n        FROM writes w\n        WHERE w.paperId = p.paperId\n          AND w.authorId = hqa.authorId\n    )\n    GROUP BY pk.keyphraseId, k.keyphraseName, p.year, v.venueName\n)\nSELECT keyphraseName,\n       SUM(usage_count) AS total_usage,\n       SUM(relevance_score) AS total_relevance,\n       ARRAY_AGG(DISTINCT venueName) AS venues,\n       JSON_OBJECT_AGG(year, usage_count) AS usage_trend,\n       JSON_OBJECT_AGG(year, relevance_score) AS relevance_trend\nFROM keyphrase_trends\nGROUP BY keyphraseName\nORDER BY total_relevance DESC, total_usage DESC;\n```"
    },
    {
        "instance_id": "q_753",
        "db_id": "scholar_new",
        "question": "在最近五年内，哪些研究领域展现出最高的引用质量增长趋势？对于这些领域的关键作者，他们的共同学术特征包括哪些（如h指数、发表论文数量、所在国家以及研究兴趣置信度）？",
        "query": "```sql\nWITH recent_citations AS (\n    SELECT \n        p.paperId,\n        p.year,\n        p.numCitedBy,\n        p.paper_quality_score_normalized,\n        a.author_research_interests_normalized\n    FROM \n        paper p\n    JOIN \n        writes w ON p.paperId = w.paperId\n    JOIN \n        author a ON w.authorId = a.authorId\n    WHERE \n        p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n),\ncitation_growth AS (\n    SELECT \n        unnest(author_research_interests_normalized) AS research_interest,\n        AVG(paper_quality_score_normalized) AS avg_quality_score,\n        COUNT(*) AS citation_count\n    FROM \n        recent_citations\n    GROUP BY \n        research_interest\n    ORDER BY \n        avg_quality_score DESC\n    LIMIT 10\n),\nauthor_features AS (\n    SELECT \n        DISTINCT a.authorId,\n        a.h_index,\n        a.publication_count,\n        a.author_country,\n        a.author_research_interests_confidence\n    FROM \n        author a\n    JOIN \n        writes w ON a.authorId = w.authorId\n    JOIN \n        paper p ON w.paperId = p.paperId\n    WHERE \n        p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n        AND EXISTS (\n            SELECT 1 \n            FROM citation_growth cg \n            WHERE cg.research_interest = ANY(a.author_research_interests_normalized)\n        )\n)\nSELECT \n    cg.research_interest,\n    cg.avg_quality_score,\n    cg.citation_count,\n    af.h_index,\n    af.publication_count,\n    af.author_country,\n    af.author_research_interests_confidence\nFROM \n    citation_growth cg\nJOIN \n    author_features af ON cg.research_interest = ANY(af.author_research_interests_normalized);\n```"
    },
    {
        "instance_id": "q_764",
        "db_id": "scholar_new",
        "question": "In which venues has Ed Desmond published papers discussing \"Semantic Parsing\" over the past five years, and what is the citation density ranking of these venues during the same period? Additionally, what is the average relevance score of the keyphrase \"Semantic Parsing\" in these papers, and how does this compare to the author's overall research focus over time?",
        "query": "```sql\nWITH ed_desmond_papers AS (\n    SELECT p.paperId, p.venueId, p.year, pk.paper_keyphrase_weighted_frequency_normalized AS relevance_score\n    FROM paper p\n    JOIN writes w ON p.paperId = w.paperId\n    JOIN author a ON w.authorId = a.authorId\n    JOIN paperKeyphrase pk ON p.paperId = pk.paperId\n    JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId\n    WHERE a.authorName = 'Ed Desmond'\n      AND k.keyphraseName = 'Semantic Parsing'\n      AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5\n),\nvenue_citation_density AS (\n    SELECT v.venueId, v.venueName, AVG(p.numCiting::float / NULLIF(p.numCitedBy, 0)) AS citation_density\n    FROM venue v\n    JOIN paper p ON v.venueId = p.venueId\n    WHERE p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5\n    GROUP BY v.venueId, v.venueName\n),\ned_desmond_venues AS (\n    SELECT DISTINCT ep.venueId\n    FROM ed_desmond_papers ep\n)\nSELECT vc.venueName, vc.citation_density, AVG(ep.relevance_score) AS avg_relevance_score\nFROM venue_citation_density vc\nJOIN ed_desmond_venues ev ON vc.venueId = ev.venueId\nJOIN ed_desmond_papers ep ON vc.venueId = ep.venueId\nGROUP BY vc.venueName, vc.citation_density\nORDER BY vc.citation_density DESC;\n```"
    },
    {
        "instance_id": "q_756",
        "db_id": "scholar_new",
        "question": "How many distinct research contributions has Ed Desmond made in the field of Semantic Parsing over the past five years, considering both the papers he authored and the quality of citations received, where the normalized quality score of citing papers is greater than 0.5 or the paper has not been cited?",
        "query": "```sql\nSELECT COUNT(DISTINCT p.paperId) AS research_contributions\nFROM writes w\nJOIN author a ON w.authorId = a.authorId\nJOIN paper p ON w.paperId = p.paperId\nLEFT JOIN cite c ON p.paperId = c.citedPaperId\nWHERE a.authorName = 'Ed Desmond'\n  AND unnest(a.author_research_interests_normalized) ILIKE '%Semantic Parsing%'\n  AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5\n  AND (c.citing_paper_quality_score_normalized > 0.5 OR c.citing_paper_quality_score_normalized IS NULL);\n```"
    },
    {
        "instance_id": "q_758",
        "db_id": "scholar_new",
        "question": "How many distinct research papers in the field of Semantic Parsing has the author Ed Desmond written, considering only papers with a paper quality score above the average score of all papers published in the last five years?",
        "query": "```sql\nSELECT COUNT(DISTINCT p.paperId) AS paper_count\nFROM writes w\nJOIN author a ON w.authorId = a.authorId\nJOIN paper p ON w.paperId = p.paperId\nJOIN paperKeyphrase pk ON p.paperId = pk.paperId\nJOIN keyphrase k ON pk.keyphraseId = k.keyphraseId\nWHERE a.authorName = 'Ed Desmond'\n  AND k.keyphraseName ILIKE '%semantic parsing%'\n  AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n  AND p.paper_quality_score > (\n    SELECT AVG(paper_quality_score)\n    FROM paper\n    WHERE year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n  );\n```"
    },
    {
        "instance_id": "q_757",
        "db_id": "scholar_new",
        "question": "How many distinct research papers has Ed Desmond authored that are specifically focused on Semantic Parsing, where the papers have a quality score above the average citation quality score across all papers, and were published in venues with an average citation count higher than the global average citation count per venue?",
        "query": "```sql\nSELECT COUNT(DISTINCT p.paperId) AS paper_count\nFROM author a\nJOIN writes w ON a.authorId = w.authorId\nJOIN paper p ON w.paperId = p.paperId\nJOIN venue v ON p.venueId = v.venueId\nWHERE a.authorName = 'Ed Desmond'\n  AND unnest(a.author_research_interests_normalized) @> array['Semantic Parsing']\n  AND p.paper_quality_score > (\n    SELECT AVG(paper_quality_score)\n    FROM paper\n  )\n  AND v.venueId IN (\n    SELECT venueId\n    FROM paper\n    GROUP BY venueId\n    HAVING AVG(numCitedBy) > (\n      SELECT AVG(numCitedBy)\n      FROM paper\n    )\n  );\n```"
    },
    {
        "instance_id": "q_763",
        "db_id": "scholar_new",
        "question": "Which research papers published in 2012 have the highest total normalized citation quality score, maximum keyphrase relevance score for topics related to \"Parsing,\" and average normalized citation trend score over subsequent years? Only consider papers with at least 6 distinct citing papers that have a normalized citation quality score greater than 0.8. Rank the results by descending order of total citation quality, followed by keyphrase relevance, and then citation trend, and return the top 10 papers.",
        "query": "```sql\nSELECT \n    p.paperId,\n    p.title,\n    SUM(c.cited_paper_quality_score_normalized) AS total_citation_quality,\n    MAX(p.paper_keywords_similarity_score) AS max_keyphrase_relevance,\n    AVG(c.paper_citation_trend_normalized) AS avg_citation_trend\nFROM \n    paper p\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nJOIN \n    paperKeyphrase pk ON p.paperId = pk.paperId\nJOIN \n    keyphrase k ON pk.keyphraseId = k.keyphraseId\nWHERE \n    p.year = 2012\n    AND k.keyphraseName ILIKE '%parsing%'\n    AND c.cited_paper_quality_score_normalized > 0.8\nGROUP BY \n    p.paperId, p.title\nHAVING \n    COUNT(DISTINCT c.citingPaperId) > 5\nORDER BY \n    total_citation_quality DESC,\n    max_keyphrase_relevance DESC,\n    avg_citation_trend DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_760",
        "db_id": "scholar_new",
        "question": "Which research articles in the field of Parsing were published at the venue \"acl\" in 2012, have a paper quality score higher than the average quality score of all papers published in 2012, and also consider the trend of their dataset usage over time, ranked first by the number of citations in descending order and then by the dataset quality score associated with the paper in descending order?",
        "query": "```sql\nSELECT \n    p.paperId, \n    p.title, \n    p.numCiting, \n    p.paper_quality_score, \n    pd.dataset_paper_count, \n    pd.paper_dataset_quality_score\nFROM \n    paper p\nJOIN \n    venue v ON p.venueId = v.venueId\nJOIN \n    writes w ON p.paperId = w.paperId\nJOIN \n    author a ON w.authorId = a.authorId\nLEFT JOIN \n    paperDataset pd ON p.paperId = pd.paperId\nWHERE \n    v.venueName = 'acl' \n    AND p.year = 2012 \n    AND a.author_research_interests_normalized @> ARRAY['Parsing'] \n    AND p.paper_quality_score > (SELECT AVG(paper_quality_score) FROM paper WHERE year = 2012)\nORDER BY \n    p.numCiting DESC, \n    pd.paper_dataset_quality_score DESC;\n```"
    },
    {
        "instance_id": "q_768",
        "db_id": "scholar_new",
        "question": "Which authors published papers on the topic of Parsing at the ACL venue in the past year, have a paper quality score higher than 0.8, and cite datasets with a growing citation trend (above the average trend for the same citations over the last three years)? Additionally, provide their research interests and affiliation details, ordered by the paper quality score in descending order.",
        "query": "```sql\nSELECT \n    a.authorId,\n    a.authorName,\n    a.affiliation,\n    a.author_research_interests,\n    p.paper_quality_score\nFROM \n    author a\nJOIN \n    writes w ON a.authorId = w.authorId\nJOIN \n    paper p ON w.paperId = p.paperId\nJOIN \n    venue v ON p.venueId = v.venueId\nJOIN \n    cite c ON p.paperId = c.citingPaperId\nJOIN \n    paperDataset pd ON c.citedPaperId = pd.paperId\nWHERE \n    v.venueName = 'acl'\n    AND p.year = EXTRACT(YEAR FROM CURRENT_DATE) - 1\n    AND 'Parsing' = ANY(a.author_research_interests_normalized)\n    AND c.paper_citation_trend_normalized > 0\n    AND c.paper_citation_trend_normalized >= (\n        SELECT AVG(c2.paper_citation_trend_normalized)\n        FROM cite c2\n        WHERE c2.citingPaperId = c.citingPaperId\n          AND c2.citedPaperId = c.citedPaperId\n          AND c2.paper_citation_trend_normalized IS NOT NULL\n    )\n    AND p.paper_quality_score_normalized > 0.8\n    AND pd.dataset_paper_count > 0\nORDER BY \n    p.paper_quality_score DESC;\n```"
    },
    {
        "instance_id": "q_762",
        "db_id": "scholar_new",
        "question": "Which authors who published papers in conferences in 2012 have the highest average normalized citation quality scores? For these authors, how have their research interests evolved over the past five years, as indicated by changes in their normalized research interests? Additionally, identify trends in dataset usage within their publications by counting the number of datasets associated with each paper written by these authors.",
        "query": "```sql\nWITH conference_papers_2012 AS (\n    SELECT DISTINCT w.authorId\n    FROM writes w\n    JOIN paper p ON w.paperId = p.paperId\n    JOIN venue v ON p.venueId = v.venueId\n    WHERE v.venue_type = 'conference'\n      AND p.year = 2012\n),\nauthor_citation_quality AS (\n    SELECT cp.authorId, AVG(p.paper_quality_score_normalized) AS avg_citation_quality\n    FROM conference_papers_2012 cp\n    JOIN writes w ON cp.authorId = w.authorId\n    JOIN paper p ON w.paperId = p.paperId\n    GROUP BY cp.authorId\n    ORDER BY avg_citation_quality DESC\n),\nresearch_interest_evolution AS (\n    SELECT authorId, author_research_interests_normalized, author_last_updated\n    FROM author\n    WHERE authorId IN (SELECT authorId FROM conference_papers_2012)\n      AND author_last_updated >= NOW() - INTERVAL '5 years'\n),\ndataset_usage_trends AS (\n    SELECT pd.paperId, COUNT(pd.datasetId) AS dataset_count\n    FROM paperDataset pd\n    JOIN writes w ON pd.paperId = w.paperId\n    WHERE w.authorId IN (SELECT authorId FROM conference_papers_2012)\n    GROUP BY pd.paperId\n)\nSELECT acq.authorId, a.authorName, acq.avg_citation_quality,\n       ri.author_research_interests_normalized, ri.author_last_updated,\n       dut.dataset_count\nFROM author_citation_quality acq\nJOIN author a ON acq.authorId = a.authorId\nLEFT JOIN research_interest_evolution ri ON acq.authorId = ri.authorId\nLEFT JOIN dataset_usage_trends dut ON acq.authorId = dut.paperId\nORDER BY acq.avg_citation_quality DESC;\n```"
    },
    {
        "instance_id": "q_759",
        "db_id": "scholar_new",
        "question": "在2012年的ACL会议上，哪些研究者发表了与“Parsing”相关的论文，并且这些研究者的H指数在过去五年中有显著增长？同时，请列出这些论文引用的高质量数据集名称及其下载量趋势（作为使用趋势的指标），其中高质量数据集定义为数据集质量评分归一化值大于0.8。结果按研究者姓名、论文标题和数据集名称排序。",
        "query": "```sql\nWITH significant_h_index_growth AS (\n    SELECT \n        authorId, \n        h_index,\n        LAG(h_index) OVER (PARTITION BY authorId ORDER BY author_last_updated) AS prev_h_index\n    FROM author\n    WHERE author_last_updated >= NOW() - INTERVAL '5 years'\n),\neligible_authors AS (\n    SELECT DISTINCT w.authorId\n    FROM writes w\n    JOIN paper p ON w.paperId = p.paperId\n    JOIN venue v ON p.venueId = v.venueId\n    WHERE v.venueName = 'ACL'\n      AND p.year = 2012\n      AND EXISTS (\n          SELECT 1\n          FROM paperKeyphrase pk\n          JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId\n          WHERE pk.paperId = p.paperId\n            AND LOWER(k.keyphraseName) LIKE '%parsing%'\n      )\n      AND w.authorId IN (\n          SELECT sag.authorId\n          FROM significant_h_index_growth sag\n          WHERE sag.h_index > COALESCE(sag.prev_h_index, 0)\n      )\n),\nhigh_quality_datasets AS (\n    SELECT DISTINCT pd.datasetId, d.datasetName\n    FROM paperDataset pd\n    JOIN dataset d ON pd.datasetId = d.datasetId\n    WHERE pd.paper_dataset_quality_score_normalized > 0.8\n)\nSELECT \n    a.authorName,\n    p.title,\n    d.datasetName,\n    d.dataset_download_count AS usage_trend\nFROM eligible_authors ea\nJOIN writes w ON ea.authorId = w.authorId\nJOIN paper p ON w.paperId = p.paperId\nLEFT JOIN paperDataset pd ON p.paperId = pd.paperId\nLEFT JOIN high_quality_datasets hd ON pd.datasetId = hd.datasetId\nLEFT JOIN dataset d ON hd.datasetId = d.datasetId\nJOIN author a ON ea.authorId = a.authorId\nWHERE d.datasetName IS NOT NULL\nORDER BY a.authorName, p.title, d.datasetName;\n```"
    },
    {
        "instance_id": "q_766",
        "db_id": "scholar_new",
        "question": "In the Parsing research domain during the year 2012, identify papers with the highest normalized citation quality scores across different citation sources. Specifically, determine how these scores vary by citation source. Additionally, for these papers, list the most frequently associated keyphrases and evaluate their relevance trends over time based on the last update year of the papers. Ensure results are ordered primarily by descending average citation quality score and secondarily by descending keyphrase frequency.",
        "query": "```sql\nWITH parsing_papers AS (\n    SELECT \n        p.paperId, \n        p.title, \n        p.year, \n        p.paper_quality_score, \n        c.cited_paper_quality_score_normalized, \n        c.paper_citation_source\n    FROM \n        paper p\n    JOIN \n        cite c ON p.paperId = c.citedPaperId\n    JOIN \n        writes w ON p.paperId = w.paperId\n    JOIN \n        author a ON w.authorId = a.authorId\n    WHERE \n        p.year = 2012 \n        AND 'Parsing' = ANY(a.author_research_interests_normalized)\n),\ncitation_quality_scores AS (\n    SELECT \n        paperId, \n        AVG(cited_paper_quality_score_normalized) AS avg_quality_score, \n        paper_citation_source\n    FROM \n        parsing_papers\n    GROUP BY \n        paperId, paper_citation_source\n),\nkeyphrase_frequency AS (\n    SELECT \n        pk.paperId, \n        k.keyphraseName, \n        SUM(pk.keyphrase_frequency) AS total_frequency\n    FROM \n        paperKeyphrase pk\n    JOIN \n        keyphrase k ON pk.keyphraseId = k.keyphraseId\n    WHERE \n        pk.paperId IN (SELECT DISTINCT paperId FROM parsing_papers)\n    GROUP BY \n        pk.paperId, k.keyphraseName\n    ORDER BY \n        total_frequency DESC\n),\nrelevance_trends AS (\n    SELECT \n        kp.paperId, \n        kp.keyphraseName, \n        EXTRACT(YEAR FROM p.paper_last_updated) AS update_year\n    FROM \n        keyphrase_frequency kp\n    JOIN \n        paper p ON kp.paperId = p.paperId\n)\nSELECT \n    pp.paperId, \n    pp.title, \n    cq.avg_quality_score, \n    cq.paper_citation_source, \n    kf.keyphraseName, \n    kf.total_frequency, \n    rt.update_year\nFROM \n    parsing_papers pp\nJOIN \n    citation_quality_scores cq ON pp.paperId = cq.paperId\nLEFT JOIN \n    keyphrase_frequency kf ON pp.paperId = kf.paperId\nLEFT JOIN \n    relevance_trends rt ON pp.paperId = rt.paperId\nORDER BY \n    cq.avg_quality_score DESC, \n    kf.total_frequency DESC;\n```"
    },
    {
        "instance_id": "q_765",
        "db_id": "scholar_new",
        "question": "In 2012, which papers in the field of Parsing are the most influential when considering both the quality of citations and the trend of dataset usage over time? Specifically, identify the top 10 most influential papers based on their total citation quality, average dataset quality, and number of citations. Additionally, list the key authors contributing to these papers along with their H-index and normalized research interest areas. Present the results ordered by paper ID and author H-index in descending order.",
        "query": "```sql\nWITH influential_papers AS (\n    SELECT \n        p.paperId,\n        p.title,\n        p.numCiting,\n        p.paper_quality_score_normalized,\n        SUM(c.cited_paper_quality_score_normalized) AS total_citation_quality,\n        AVG(pd.paper_dataset_quality_score_normalized) AS avg_dataset_quality\n    FROM \n        paper p\n    JOIN \n        cite c ON p.paperId = c.citedPaperId\n    LEFT JOIN \n        paperDataset pd ON p.paperId = pd.paperId\n    WHERE \n        p.year = 2012\n        AND 'Parsing' = ANY(p.paper_keywords_normalized)\n    GROUP BY \n        p.paperId, p.title, p.numCiting, p.paper_quality_score_normalized\n),\nranked_papers AS (\n    SELECT \n        ip.paperId,\n        ip.title,\n        ip.numCiting,\n        ip.paper_quality_score_normalized,\n        ip.total_citation_quality,\n        ip.avg_dataset_quality,\n        ROW_NUMBER() OVER (ORDER BY ip.total_citation_quality DESC, ip.avg_dataset_quality DESC, ip.numCiting DESC) AS influence_rank\n    FROM \n        influential_papers ip\n),\nkey_authors AS (\n    SELECT \n        r.paperId,\n        r.title,\n        w.authorId,\n        a.authorName,\n        a.h_index,\n        a.author_research_interests_normalized\n    FROM \n        ranked_papers r\n    JOIN \n        writes w ON r.paperId = w.paperId\n    JOIN \n        author a ON w.authorId = a.authorId\n    WHERE \n        r.influence_rank <= 10\n)\nSELECT \n    ka.paperId,\n    ka.title,\n    ka.authorId,\n    ka.authorName,\n    ka.h_index,\n    ka.author_research_interests_normalized\nFROM \n    key_authors ka\nORDER BY \n    ka.paperId, ka.h_index DESC;\n```"
    },
    {
        "instance_id": "q_767",
        "db_id": "scholar_new",
        "question": "Which research articles in the field of Parsing were presented at the ACL conference in 2012 and have received citations from papers with a normalized citation quality score greater than 0.8? Additionally, provide the citation trends over time for these articles and identify any relevant keyphrases containing the term \"parsing\" to assess their relevance to key research topics within the domain. Finally, rank the results by the number of citations received in descending order and then by the normalized citation quality score in descending order.",
        "query": "```sql\nSELECT \n    p.paperId,\n    p.title,\n    p.numCiting,\n    p.paper_quality_score AS paper_quality_score,\n    c.citing_paper_quality_score_normalized AS avg_citation_quality_score,\n    c.paper_citation_trend AS citation_trend,\n    pk.keyphraseName AS relevant_keyphrases\nFROM \n    paper p\nJOIN \n    venue v ON p.venueId = v.venueId\nJOIN \n    writes w ON p.paperId = w.paperId\nJOIN \n    author a ON w.authorId = a.authorId\nLEFT JOIN \n    cite c ON p.paperId = c.citedPaperId\nLEFT JOIN \n    paperKeyphrase pk ON p.paperId = pk.paperId\nJOIN \n    keyphrase k ON pk.keyphraseId = k.keyphraseId\nWHERE \n    v.venueName = 'acl'\n    AND p.year = 2012\n    AND a.author_research_interests_normalized @> ARRAY['Parsing']\n    AND c.citing_paper_quality_score_normalized > 0.8\n    AND k.keyphraseName ILIKE '%parsing%'\nGROUP BY \n    p.paperId, p.title, p.numCiting, p.paper_quality_score, c.citing_paper_quality_score_normalized, c.paper_citation_trend, pk.keyphraseName\nORDER BY \n    p.numCiting DESC, c.citing_paper_quality_score_normalized DESC;\n```"
    },
    {
        "instance_id": "q_770",
        "db_id": "scholar_new",
        "question": "Which papers on \"Parsing\" were published in the venue \"acl\" during the year 2012? For these papers, provide their citation trends in subsequent years. Additionally, list the keyphrases associated with these papers and evaluate their relevance using the normalized weighted frequency of the keyphrases. Ensure that only papers with a non-null citation trend are included in the results. Present the information ordered by paper ID and keyphrase name.",
        "query": "```sql\nSELECT \n    p.paperId,\n    p.title,\n    c.paper_citation_trend,\n    kp.keyphraseName,\n    pk.paper_keyphrase_weighted_frequency_normalized AS relevance_score\nFROM \n    paper p\nJOIN \n    venue v ON p.venueId = v.venueId\nJOIN \n    writes w ON p.paperId = w.paperId\nJOIN \n    author a ON w.authorId = a.authorId\nLEFT JOIN \n    cite c ON p.paperId = c.citedPaperId\nLEFT JOIN \n    paperKeyphrase pk ON p.paperId = pk.paperId\nLEFT JOIN \n    keyphrase k ON pk.keyphraseId = k.keyphraseId\nWHERE \n    v.venueName = 'acl'\n    AND p.year = 2012\n    AND 'Parsing' = ANY(a.author_research_interests_normalized)\n    AND c.paper_citation_trend IS NOT NULL\nORDER BY \n    p.paperId, kp.keyphraseName;\n```"
    },
    {
        "instance_id": "q_761",
        "db_id": "scholar_new",
        "question": "What was the yearly trend of papers related to Parsing research published in venues with 'acl' in their names, in terms of the number of papers, average citations received, and average paper quality? Additionally, how did the citation quality of these papers evolve over the years compared to other conferences, as measured by the total citations received and the average quality of citing papers?",
        "query": "```sql\nWITH parsing_papers AS (\n    SELECT \n        p.paperId,\n        p.year,\n        p.numCiting,\n        p.paper_quality_score_normalized AS paper_quality,\n        v.venueName\n    FROM \n        paper p\n    JOIN \n        venue v ON p.venueId = v.venueId\n    JOIN \n        writes w ON p.paperId = w.paperId\n    JOIN \n        author a ON w.authorId = a.authorId\n    WHERE \n        v.venueName LIKE '%acl%'\n        AND 'Parsing' = ANY(a.author_research_interests_normalized)\n),\ncitation_trends AS (\n    SELECT \n        pp.year,\n        COUNT(pp.paperId) AS paper_count,\n        AVG(pp.numCiting) AS avg_citations,\n        AVG(pp.paper_quality) AS avg_paper_quality\n    FROM \n        parsing_papers pp\n    GROUP BY \n        pp.year\n),\ncomparison_trends AS (\n    SELECT \n        c.year,\n        COUNT(c.citedPaperId) AS total_citations,\n        AVG(c.cited_paper_quality_score_normalized) AS avg_cited_paper_quality\n    FROM \n        cite c\n    JOIN \n        parsing_papers pp ON c.citedPaperId = pp.paperId\n    GROUP BY \n        c.year\n)\nSELECT \n    ct.year,\n    ct.paper_count,\n    ct.avg_citations,\n    ct.avg_paper_quality,\n    cmp.total_citations AS total_citations_received,\n    cmp.avg_cited_paper_quality\nFROM \n    citation_trends ct\nLEFT JOIN \n    comparison_trends cmp ON ct.year = cmp.year\nORDER BY \n    ct.year;\n```"
    },
    {
        "instance_id": "q_769",
        "db_id": "scholar_new",
        "question": "Which researchers, affiliated with institutions in the United States, have authored papers on the topic of Parsing that received high-quality citations (with normalized quality score greater than 0.8) at ACL conferences between the years 2010 and 2015? Additionally, provide the count of distinct papers they contributed to, their average normalized citation quality score across these papers, and the years in which they were active during this period, sorted by the average citation quality in descending order.",
        "query": "```sql\nSELECT \n    a.authorName, \n    COUNT(DISTINCT p.paperId) AS paper_count, \n    AVG(c.cited_paper_quality_score_normalized) AS avg_citation_quality, \n    STRING_AGG(DISTINCT CAST(p.year AS TEXT), ',') AS years_active\nFROM \n    author a\nJOIN \n    writes w ON a.authorId = w.authorId\nJOIN \n    paper p ON w.paperId = p.paperId\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nJOIN \n    venue v ON p.venueId = v.venueId\nWHERE \n    a.author_country = 'United States' \n    AND 'Parsing' = ANY(p.paper_keywords_normalized) \n    AND c.citing_paper_quality_score_normalized > 0.8 \n    AND v.venueName = 'ACL' \n    AND p.year BETWEEN 2010 AND 2015\nGROUP BY \n    a.authorName\nORDER BY \n    avg_citation_quality DESC;\n```"
    },
    {
        "instance_id": "q_772",
        "db_id": "scholar_new",
        "question": "What were the research papers published in ACL 2012 that focused on Parsing, including their citation counts? How many of these papers were cited by other high-quality papers (with a normalized quality score greater than 0.8) published in the same year? Additionally, which datasets and keyphrases were most frequently associated with these Parsing-related papers, ranked by their association strength?",
        "query": "```sql\nWITH parsing_papers AS (\n    SELECT \n        p.paperId,\n        p.title,\n        p.numCiting,\n        p.numCitedBy,\n        p.paper_quality_score\n    FROM \n        paper p\n    JOIN \n        venue v ON p.venueId = v.venueId\n    JOIN \n        paperKeyphrase pk ON p.paperId = pk.paperId\n    JOIN \n        keyphrase k ON pk.keyphraseId = k.keyphraseId\n    WHERE \n        v.venueName = 'ACL' \n        AND p.year = 2012 \n        AND LOWER(k.keyphraseName) LIKE '%parsing%'\n),\ncitations_by_high_quality AS (\n    SELECT \n        c.citedPaperId,\n        COUNT(c.citingPaperId) AS high_quality_citations\n    FROM \n        cite c\n    JOIN \n        paper cp ON c.citingPaperId = cp.paperId\n    WHERE \n        cp.year = 2012 \n        AND cp.paper_quality_score_normalized > 0.8\n    GROUP BY \n        c.citedPaperId\n),\ndatasets_associated AS (\n    SELECT \n        pd.paperId,\n        d.datasetName,\n        SUM(pd.dataset_paper_count) AS total_dataset_count\n    FROM \n        paperDataset pd\n    JOIN \n        dataset d ON pd.datasetId = d.datasetId\n    WHERE \n        pd.paperId IN (SELECT paperId FROM parsing_papers)\n    GROUP BY \n        pd.paperId, d.datasetName\n),\nkeyphrases_associated AS (\n    SELECT \n        pk.paperId,\n        k.keyphraseName,\n        SUM(pk.keyphrase_frequency) AS total_keyphrase_frequency\n    FROM \n        paperKeyphrase pk\n    JOIN \n        keyphrase k ON pk.keyphraseId = k.keyphraseId\n    WHERE \n        pk.paperId IN (SELECT paperId FROM parsing_papers)\n    GROUP BY \n        pk.paperId, k.keyphraseName\n)\nSELECT \n    pp.paperId,\n    pp.title,\n    COALESCE(cq.high_quality_citations, 0) AS high_quality_citations,\n    da.datasetName AS associated_dataset,\n    da.total_dataset_count,\n    ka.keyphraseName AS associated_keyphrase,\n    ka.total_keyphrase_frequency\nFROM \n    parsing_papers pp\nLEFT JOIN \n    citations_by_high_quality cq ON pp.paperId = cq.citedPaperId\nLEFT JOIN \n    datasets_associated da ON pp.paperId = da.paperId\nLEFT JOIN \n    keyphrases_associated ka ON pp.paperId = ka.paperId\nORDER BY \n    pp.paperId, da.total_dataset_count DESC, ka.total_keyphrase_frequency DESC;\n```"
    },
    {
        "instance_id": "q_778",
        "db_id": "scholar_new",
        "question": "Which research papers published in ACL 2012 that focus on Parsing techniques have had a significant impact on subsequent studies, as evidenced by receiving more than 5 citations with an average normalized quality score of citing papers greater than the general threshold? Additionally, which authors of these papers have demonstrated a sustained interest in Parsing-related topics, as indicated by publishing more than one paper on Parsing and having \"Parsing\" explicitly listed in their research interests? Please provide the titles of the papers, their average citation quality scores, total citation counts, author names, the number of Parsing-focused papers they have written, and the distinct keywords associated with their Parsing-related publications, sorted by descending average citation quality and then by descending citation count.",
        "query": "```sql\nWITH parsing_papers AS (\n    SELECT \n        p.paperId,\n        p.title,\n        p.numCiting,\n        p.paper_quality_score,\n        p.paper_keywords,\n        p.year\n    FROM \n        paper p\n    INNER JOIN \n        venue v ON p.venueId = v.venueId\n    INNER JOIN \n        paperKeyphrase pk ON p.paperId = pk.paperId\n    INNER JOIN \n        keyphrase k ON pk.keyphraseId = k.keyphraseId\n    WHERE \n        v.venueName = 'ACL' \n        AND p.year = 2012 \n        AND LOWER(k.keyphraseName) LIKE '%parsing%'\n),\ncitation_impact AS (\n    SELECT \n        cp.citedPaperId,\n        AVG(cp.citing_paper_quality_score_normalized) AS avg_citation_quality,\n        COUNT(cp.citingPaperId) AS citation_count\n    FROM \n        cite cp\n    INNER JOIN \n        parsing_papers pp ON cp.citedPaperId = pp.paperId\n    GROUP BY \n        cp.citedPaperId\n    HAVING \n        COUNT(cp.citingPaperId) > 5\n),\nauthor_interest AS (\n    SELECT \n        w.authorId,\n        a.authorName,\n        COUNT(w.paperId) AS parsing_paper_count,\n        ARRAY_AGG(DISTINCT p.paper_keywords) AS author_parsing_keywords\n    FROM \n        writes w\n    INNER JOIN \n        parsing_papers p ON w.paperId = p.paperId\n    INNER JOIN \n        author a ON w.authorId = a.authorId\n    WHERE \n        LOWER(a.author_research_interests)::text LIKE '%parsing%'\n    GROUP BY \n        w.authorId, a.authorName\n    HAVING \n        COUNT(w.paperId) > 1\n)\nSELECT \n    pi.title,\n    ci.avg_citation_quality,\n    ci.citation_count,\n    ai.authorName,\n    ai.parsing_paper_count,\n    ai.author_parsing_keywords\nFROM \n    parsing_papers pi\nINNER JOIN \n    citation_impact ci ON pi.paperId = ci.citedPaperId\nINNER JOIN \n    writes w ON pi.paperId = w.paperId\nINNER JOIN \n    author_interest ai ON w.authorId = ai.authorId\nORDER BY \n    ci.avg_citation_quality DESC, ci.citation_count DESC;\n```"
    },
    {
        "instance_id": "q_773",
        "db_id": "scholar_new",
        "question": "What are the key research topics mentioned in the publications of author Luke S Zettlemoyer, including their usage trends over the years, as measured by the frequency of topic mentions and their relevance scores based on normalized paper quality scores? Additionally, how do these topics compare in terms of average citation counts, distribution across different publication venues, and association with various datasets, providing both the venue-wise and dataset-wise topic counts?",
        "query": "```sql\nWITH author_papers AS (\n    SELECT \n        p.paperId,\n        p.paper_keywords,\n        p.paper_keywords_normalized,\n        p.paper_quality_score_normalized,\n        p.numCiting,\n        p.venueId,\n        p.year\n    FROM \n        writes w\n    JOIN \n        paper p ON w.paperId = p.paperId\n    JOIN \n        author a ON w.authorId = a.authorId\n    WHERE \n        a.authorName = 'Luke S Zettlemoyer'\n),\ntopic_frequency AS (\n    SELECT \n        unnest(paper_keywords) AS topic,\n        COUNT(*) AS mention_count,\n        SUM(paper_quality_score_normalized) AS relevance_score,\n        AVG(numCiting) AS avg_citations\n    FROM \n        author_papers\n    GROUP BY \n        topic\n),\ntopic_trends AS (\n    SELECT \n        ap.year,\n        ak.topic,\n        COUNT(*) AS yearly_mentions\n    FROM \n        author_papers ap\n    CROSS JOIN \n        unnest(ap.paper_keywords) AS ak(topic)\n    GROUP BY \n        ap.year, ak.topic\n),\nvenue_distribution AS (\n    SELECT \n        v.venueName,\n        ak.topic,\n        COUNT(*) AS venue_topic_count\n    FROM \n        author_papers ap\n    JOIN \n        venue v ON ap.venueId = v.venueId\n    CROSS JOIN \n        unnest(ap.paper_keywords) AS ak(topic)\n    GROUP BY \n        v.venueName, ak.topic\n),\ndataset_distribution AS (\n    SELECT \n        d.datasetName,\n        ak.topic,\n        COUNT(*) AS dataset_topic_count\n    FROM \n        author_papers ap\n    JOIN \n        paperDataset pd ON ap.paperId = pd.paperId\n    JOIN \n        dataset d ON pd.datasetId = d.datasetId\n    CROSS JOIN \n        unnest(ap.paper_keywords) AS ak(topic)\n    GROUP BY \n        d.datasetName, ak.topic\n)\nSELECT \n    tf.topic,\n    tf.mention_count,\n    tf.relevance_score,\n    tf.avg_citations,\n    tt.yearly_mentions,\n    vd.venueName,\n    vd.venue_topic_count,\n    dd.datasetName,\n    dd.dataset_topic_count\nFROM \n    topic_frequency tf\nLEFT JOIN \n    topic_trends tt ON tf.topic = tt.topic\nLEFT JOIN \n    venue_distribution vd ON tf.topic = vd.topic\nLEFT JOIN \n    dataset_distribution dd ON tf.topic = dd.topic\nORDER BY \n    tf.relevance_score DESC, tf.mention_count DESC;\n```"
    },
    {
        "instance_id": "q_777",
        "db_id": "scholar_new",
        "question": "What are the evolving research trends of Sanjeev Arora over the past decade, specifically analyzing the citation quality of his papers, the impact factor of the journals he published in, and the relevant keyphrases associated with his work? Additionally, how do these trends vary across the different venues and datasets he has contributed to, ordered by the publication year in descending order?",
        "query": "```sql\nWITH sanjeev_papers AS (\n    SELECT \n        p.paperId, \n        p.title, \n        p.year, \n        p.numCiting, \n        p.numCitedBy, \n        p.paper_quality_score, \n        p.paper_keywords_normalized, \n        j.impact_factor, \n        v.venueName, \n        d.datasetName\n    FROM \n        writes w\n    JOIN \n        paper p ON w.paperId = p.paperId\n    LEFT JOIN \n        journal j ON p.venueId = j.journalId\n    LEFT JOIN \n        venue v ON p.venueId = v.venueId\n    LEFT JOIN \n        paperDataset pd ON p.paperId = pd.paperId\n    LEFT JOIN \n        dataset d ON pd.datasetId = d.datasetId\n    WHERE \n        w.authorId = (SELECT authorId FROM author WHERE authorName = 'Sanjeev Arora')\n        AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 10\n), \ncitation_quality AS (\n    SELECT \n        sp.paperId, \n        AVG(c.cited_paper_quality_score_normalized) AS avg_citation_quality\n    FROM \n        sanjeev_papers sp\n    JOIN \n        cite c ON sp.paperId = c.citedPaperId\n    GROUP BY \n        sp.paperId\n), \nkeyphrase_relevance AS (\n    SELECT \n        sp.paperId, \n        STRING_AGG(kp.keyphraseName, ', ') AS relevant_keyphrases\n    FROM \n        sanjeev_papers sp\n    JOIN \n        paperKeyphrase pk ON sp.paperId = pk.paperId\n    JOIN \n        keyphrase kp ON pk.keyphraseId = kp.keyphraseId\n    GROUP BY \n        sp.paperId\n)\nSELECT \n    sp.title, \n    sp.year, \n    sp.numCiting, \n    sp.numCitedBy, \n    sp.paper_quality_score, \n    sp.impact_factor, \n    sp.venueName, \n    sp.datasetName, \n    cq.avg_citation_quality, \n    kr.relevant_keyphrases\nFROM \n    sanjeev_papers sp\nLEFT JOIN \n    citation_quality cq ON sp.paperId = cq.paperId\nLEFT JOIN \n    keyphrase_relevance kr ON sp.paperId = kr.paperId\nORDER BY \n    sp.year DESC;\n```"
    },
    {
        "instance_id": "q_775",
        "db_id": "scholar_new",
        "question": "What are the trending research topics of Sanjeev Arora in the last five years, specifically focusing on papers that are open access, and analyzing the quality of citations and the prestige of publication venues? Additionally, identify how these topics align with high-impact journals (with an impact factor greater than 10) and conferences, and determine the growth trend of his work's influence in these areas based on the frequency of topic mentions and citation quality. Provide results for topics mentioned more than five times, ordered by the frequency of mentions and average citation quality.",
        "query": "```sql\nWITH recent_papers AS (\n    SELECT \n        w.paperId,\n        p.title,\n        p.year,\n        p.paper_quality_score_normalized,\n        v.venueName,\n        v.impact_factor,\n        p.paper_keywords_normalized\n    FROM \n        writes w\n    JOIN \n        paper p ON w.paperId = p.paperId\n    JOIN \n        venue v ON p.venueId = v.venueId\n    WHERE \n        w.authorId = (SELECT authorId FROM author WHERE authorName = 'Sanjeev Arora')\n        AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n        AND p.is_open_access = TRUE\n),\ncitation_quality AS (\n    SELECT \n        cp.citedPaperId,\n        AVG(cp.citing_paper_quality_score_normalized) AS avg_citation_quality\n    FROM \n        cite cp\n    JOIN \n        recent_papers rp ON cp.citedPaperId = rp.paperId\n    GROUP BY \n        cp.citedPaperId\n),\ntopic_trends AS (\n    SELECT \n        UNNEST(paper_keywords_normalized) AS keyword,\n        COUNT(*) AS mention_count,\n        AVG(avg_citation_quality) AS avg_citation_quality,\n        STRING_AGG(DISTINCT venueName, ', ') AS venues\n    FROM \n        recent_papers rp\n    JOIN \n        citation_quality cq ON rp.paperId = cq.citedPaperId\n    GROUP BY \n        keyword\n    ORDER BY \n        mention_count DESC, avg_citation_quality DESC\n),\nhigh_impact_alignment AS (\n    SELECT \n        tt.keyword,\n        tt.mention_count,\n        tt.avg_citation_quality,\n        tt.venues,\n        COUNT(vj.journalId) AS high_impact_count\n    FROM \n        topic_trends tt\n    LEFT JOIN \n        paper pj ON POSITION(tt.keyword IN pj.paper_keywords_normalized) > 0\n    LEFT JOIN \n        journal vj ON pj.venueId = vj.journalId AND vj.impact_factor > 10\n    GROUP BY \n        tt.keyword, tt.mention_count, tt.avg_citation_quality, tt.venues\n)\nSELECT \n    keyword,\n    mention_count,\n    avg_citation_quality,\n    venues,\n    high_impact_count,\n    CASE \n        WHEN mention_count > LAG(mention_count) OVER (ORDER BY keyword) THEN 'Growing'\n        WHEN mention_count < LAG(mention_count) OVER (ORDER BY keyword) THEN 'Declining'\n        ELSE 'Stable'\n    END AS growth_trend\nFROM \n    high_impact_alignment\nWHERE \n    mention_count > 5\nORDER BY \n    mention_count DESC, avg_citation_quality DESC;\n```"
    },
    {
        "instance_id": "q_776",
        "db_id": "scholar_new",
        "question": "What are the high-quality research papers authored by Sanjeev Arora in the past five years, where the papers have a normalized paper quality score greater than 0.8 and are published in venues with an impact factor exceeding 2.5? Additionally, list the trending research topics associated with these papers based on the distinct keyphrases used, ordered by the paper quality score in descending order.",
        "query": "```sql\nSELECT \n    p.paperId,\n    p.title,\n    p.year,\n    p.paper_quality_score,\n    v.venueName,\n    v.impact_factor,\n    STRING_AGG(DISTINCT k.keyphraseName, ', ') AS trending_topics\nFROM \n    paper p\nJOIN \n    writes w ON p.paperId = w.paperId\nJOIN \n    author a ON w.authorId = a.authorId\nJOIN \n    venue v ON p.venueId = v.venueId\nLEFT JOIN \n    paperKeyphrase pk ON p.paperId = pk.paperId\nLEFT JOIN \n    keyphrase k ON pk.keyphraseId = k.keyphraseId\nWHERE \n    a.authorName = 'Sanjeev Arora'\n    AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n    AND p.paper_quality_score_normalized > 0.8\n    AND v.impact_factor > 2.5\nGROUP BY \n    p.paperId, p.title, p.year, p.paper_quality_score, v.venueName, v.impact_factor\nORDER BY \n    p.paper_quality_score DESC;\n```"
    },
    {
        "instance_id": "q_771",
        "db_id": "scholar_new",
        "question": "How many papers related to the keyphrase \"parsing\" were published in venues with \"ACL\" in their name over the past 10 years, broken down by year? Additionally, what is the average normalized quality score trend of these papers compared to the average normalized quality score trend of papers from other NLP-related conferences (identified by keyphrases \"NLP\" or \"natural language processing\") over the same time period?",
        "query": "```sql\nWITH acl_parsing_papers AS (\n    SELECT \n        p.paperId,\n        p.title,\n        p.year,\n        p.numCiting,\n        p.paper_quality_score_normalized\n    FROM \n        paper p\n    JOIN \n        venue v ON p.venueId = v.venueId\n    JOIN \n        paperKeyphrase pk ON p.paperId = pk.paperId\n    JOIN \n        keyphrase k ON pk.keyphraseId = k.keyphraseId\n    WHERE \n        v.venueName LIKE '%ACL%'\n        AND k.keyphraseName = 'parsing'\n        AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 10\n),\ncitation_quality_trend AS (\n    SELECT \n        year,\n        COUNT(*) AS paper_count,\n        AVG(paper_quality_score_normalized) AS avg_quality_score\n    FROM \n        acl_parsing_papers\n    GROUP BY \n        year\n),\nnlp_conference_comparison AS (\n    SELECT \n        p.year,\n        AVG(p.paper_quality_score_normalized) AS avg_nlp_quality_score\n    FROM \n        paper p\n    JOIN \n        venue v ON p.venueId = v.venueId\n    JOIN \n        paperKeyphrase pk ON p.paperId = pk.paperId\n    JOIN \n        keyphrase k ON pk.keyphraseId = k.keyphraseId\n    WHERE \n        v.venue_type = 'conference'\n        AND k.keyphraseName IN ('NLP', 'natural language processing')\n        AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 10\n    GROUP BY \n        p.year\n)\nSELECT \n    cpt.year,\n    cpt.paper_count,\n    cpt.avg_quality_score,\n    ncc.avg_nlp_quality_score\nFROM \n    citation_quality_trend cpt\nLEFT JOIN \n    nlp_conference_comparison ncc ON cpt.year = ncc.year\nORDER BY \n    cpt.year;\n```"
    },
    {
        "instance_id": "q_779",
        "db_id": "scholar_new",
        "question": "How many papers with \"parsing\" as a keyphrase were published in conferences in the year 2014, and what is the yearly trend of their citations from 2015 to 2019?",
        "query": "```sql\nWITH parsing_papers AS (\n    SELECT \n        p.paperId,\n        p.title,\n        p.year,\n        p.numCiting,\n        pk.keyphraseName\n    FROM \n        paper p\n    JOIN \n        paperKeyphrase pkp ON p.paperId = pkp.paperId\n    JOIN \n        keyphrase k ON pkp.keyphraseId = k.keyphraseId\n    JOIN \n        venue v ON p.venueId = v.venueId\n    WHERE \n        k.keyphraseName ILIKE '%parsing%'\n        AND v.venue_type = 'conference'\n        AND p.year = 2014\n),\ncitation_trend AS (\n    SELECT \n        cp.citedPaperId,\n        c.citingPaperId,\n        EXTRACT(YEAR FROM c.paper_citation_trend_normalized) AS citation_year,\n        COUNT(c.citingPaperId) AS citation_count\n    FROM \n        cite c\n    JOIN \n        parsing_papers pp ON c.citedPaperId = pp.paperId\n    WHERE \n        EXTRACT(YEAR FROM c.paper_citation_trend_normalized) BETWEEN 2015 AND 2019\n    GROUP BY \n        cp.citedPaperId, citation_year\n)\nSELECT \n    COUNT(pp.paperId) AS paper_count,\n    ct.citation_year,\n    SUM(ct.citation_count) AS total_citations\nFROM \n    parsing_papers pp\nLEFT JOIN \n    citation_trend ct ON pp.paperId = ct.citedPaperId\nGROUP BY \n    ct.citation_year\nORDER BY \n    ct.citation_year;\n```"
    },
    {
        "instance_id": "q_774",
        "db_id": "scholar_new",
        "question": "How many papers with the keyword \"parsing\" were published in 2014, and what is the yearly trend of citations these papers received from papers published in subsequent years? Additionally, identify the top 10 venues with the highest citation density for these \"parsing\"-related papers, defined as the average number of citations per paper.",
        "query": "```sql\nWITH parsing_papers AS (\n    SELECT \n        p.paperId,\n        p.title,\n        p.year,\n        p.numCitedBy,\n        v.venueName\n    FROM \n        paper p\n    JOIN \n        venue v ON p.venueId = v.venueId\n    WHERE \n        p.year = 2014\n        AND 'parsing' = ANY(p.paper_keywords_normalized)\n),\ncitation_trend AS (\n    SELECT \n        c.citedPaperId,\n        EXTRACT(YEAR FROM CURRENT_DATE) - p.year AS years_since_publication,\n        COUNT(c.citingPaperId) AS citations_received\n    FROM \n        cite c\n    JOIN \n        parsing_papers pp ON c.citedPaperId = pp.paperId\n    JOIN \n        paper p ON c.citingPaperId = p.paperId\n    WHERE \n        p.year > 2014\n    GROUP BY \n        c.citedPaperId, years_since_publication\n),\nvenue_citation_density AS (\n    SELECT \n        pp.venueName,\n        SUM(pp.numCitedBy) / COUNT(pp.paperId) AS citation_density\n    FROM \n        parsing_papers pp\n    GROUP BY \n        pp.venueName\n    ORDER BY \n        citation_density DESC\n    LIMIT 10\n)\nSELECT \n    (SELECT COUNT(*) FROM parsing_papers) AS papers_published_in_2014,\n    ct.years_since_publication,\n    SUM(ct.citations_received) AS total_citations_received,\n    vcd.venueName,\n    vcd.citation_density\nFROM \n    citation_trend ct\nRIGHT JOIN \n    venue_citation_density vcd ON ct.citedPaperId = vcd.venueName\nGROUP BY \n    ct.years_since_publication, vcd.venueName, vcd.citation_density;\n```"
    },
    {
        "instance_id": "q_782",
        "db_id": "scholar_new",
        "question": "在过去五年中，哪些专注于卷积相关领域的作者表现出较高的影响力？请统计这些作者的论文数量、总引用次数以及平均论文引用趋势，并分析他们的论文在顶级会议和期刊中的分布情况（包括具体会议或期刊名称及对应论文数量）。此外，请进一步探究这些作者是否倾向于使用特定的数据集支持其研究（包括数据集名称及对应论文数量）。最终结果请按照总引用次数降序排列，若引用次数相同，则按平均引用趋势降序排列。",
        "query": "```sql\nWITH influential_authors AS (\n    SELECT \n        w.authorId,\n        a.authorName,\n        COUNT(DISTINCT p.paperId) AS paper_count,\n        SUM(p.numCitedBy) AS total_citations,\n        AVG(c.paper_citation_trend_normalized) AS avg_citation_trend\n    FROM \n        writes w\n    JOIN \n        author a ON w.authorId = a.authorId\n    JOIN \n        paper p ON w.paperId = p.paperId\n    JOIN \n        cite c ON p.paperId = c.citedPaperId\n    WHERE \n        'convolution' = ANY(a.author_research_interests_normalized)\n        AND p.year BETWEEN EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5 AND EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC')\n        AND c.paper_citation_trend_normalized > 0\n    GROUP BY \n        w.authorId, a.authorName\n    HAVING \n        AVG(c.paper_citation_trend_normalized) > 0\n),\ntop_venues_distribution AS (\n    SELECT \n        ia.authorId,\n        ia.authorName,\n        v.venueName,\n        COUNT(p.paperId) AS paper_in_venue_count\n    FROM \n        influential_authors ia\n    JOIN \n        writes w ON ia.authorId = w.authorId\n    JOIN \n        paper p ON w.paperId = p.paperId\n    JOIN \n        venue v ON p.venueId = v.venueId\n    WHERE \n        v.venue_type IN ('conference', 'journal')\n        AND (v.impact_factor > 3 OR v.venue_establishment_year < 1990)\n    GROUP BY \n        ia.authorId, ia.authorName, v.venueName\n),\ndataset_usage AS (\n    SELECT \n        ia.authorId,\n        ia.authorName,\n        d.datasetName,\n        COUNT(pd.paperId) AS paper_using_dataset_count\n    FROM \n        influential_authors ia\n    JOIN \n        writes w ON ia.authorId = w.authorId\n    JOIN \n        paper p ON w.paperId = p.paperId\n    JOIN \n        paperDataset pd ON p.paperId = pd.paperId\n    JOIN \n        dataset d ON pd.datasetId = d.datasetId\n    GROUP BY \n        ia.authorId, ia.authorName, d.datasetName\n)\nSELECT \n    ia.authorId,\n    ia.authorName,\n    ia.paper_count,\n    ia.total_citations,\n    ia.avg_citation_trend,\n    COALESCE(tv.paper_in_venue_count, 0) AS top_venue_paper_count,\n    tv.venueName AS top_venue_name,\n    COALESCE(du.paper_using_dataset_count, 0) AS dataset_paper_count,\n    du.datasetName AS dataset_name\nFROM \n    influential_authors ia\nLEFT JOIN \n    top_venues_distribution tv ON ia.authorId = tv.authorId\nLEFT JOIN \n    dataset_usage du ON ia.authorId = du.authorId\nORDER BY \n    ia.total_citations DESC, ia.avg_citation_trend DESC;\n```"
    },
    {
        "instance_id": "q_785",
        "db_id": "scholar_new",
        "question": "在最近三年内，哪些作者发表了高质量的研究论文（论文质量评分归一化值大于0.8），并且这些论文引用了下载量超过1000次的高影响力数据库？请按照作者的综合影响力进行排序，综合影响力的计算依据为：论文总被引次数、作者发表论文所在期刊的平均影响因子以及引用数据集的质量评分总和。同时，请提供每位作者的主要研究领域（以归一化研究兴趣的第一个值为准）和最新的机构隶属关系。",
        "query": "```sql\nSELECT \n    a.authorId,\n    a.authorName,\n    a.affiliation AS latest_affiliation,\n    a.h_index,\n    a.author_research_interests_normalized[1] AS primary_research_field,\n    SUM(p.numCitedBy) AS total_citations,\n    AVG(j.impact_factor) AS avg_journal_impact_factor,\n    COUNT(DISTINCT pd.datasetId) AS dataset_count,\n    SUM(pd.paper_dataset_quality_score_normalized) AS total_dataset_quality\nFROM \n    author a\nJOIN \n    writes w ON a.authorId = w.authorId\nJOIN \n    paper p ON w.paperId = p.paperId\nLEFT JOIN \n    paperDataset pd ON p.paperId = pd.paperId\nLEFT JOIN \n    dataset d ON pd.datasetId = d.datasetId\nLEFT JOIN \n    venue v ON p.venueId = v.venueId\nLEFT JOIN \n    journal j ON v.venueId = j.journalId\nWHERE \n    p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 3\n    AND p.paper_quality_score_normalized > 0.8\n    AND d.dataset_download_count > 1000\nGROUP BY \n    a.authorId, a.authorName, a.affiliation, a.h_index, a.author_research_interests_normalized\nORDER BY \n    total_citations DESC, avg_journal_impact_factor DESC, total_dataset_quality DESC;\n```"
    },
    {
        "instance_id": "q_781",
        "db_id": "scholar_new",
        "question": "What are the high-quality research papers authored by Brian Curless that include convolution techniques as key topics, published or updated in the past five years, with a normalized paper quality score greater than 0.8? Additionally, provide their citation counts and trends from citing papers over the past five years, along with any related datasets and the quality scores of those datasets. The results should be ordered by descending citation count and then by the most recently updated papers.",
        "query": "```sql\nSELECT \n    p.paperId,\n    p.title,\n    p.year,\n    p.numCiting AS citation_count,\n    c.paper_citation_trend AS citation_trend,\n    d.datasetName AS related_dataset,\n    pd.paper_dataset_quality_score AS dataset_quality_score\nFROM \n    paper p\nJOIN \n    writes w ON p.paperId = w.paperId\nJOIN \n    author a ON w.authorId = a.authorId\nJOIN \n    paperKeyphrase pk ON p.paperId = pk.paperId\nJOIN \n    keyphrase k ON pk.keyphraseId = k.keyphraseId\nLEFT JOIN \n    cite c ON p.paperId = c.citedPaperId\nLEFT JOIN \n    paperDataset pd ON p.paperId = pd.paperId\nLEFT JOIN \n    dataset d ON pd.datasetId = d.datasetId\nWHERE \n    a.authorName = 'Brian Curless'\n    AND k.keyphraseName ILIKE '%convolution%'\n    AND p.paper_last_updated >= NOW() - INTERVAL '5 years'\n    AND p.paper_quality_score_normalized > 0.8\nORDER BY \n    p.numCiting DESC, \n    p.paper_last_updated DESC;\n```"
    },
    {
        "instance_id": "q_780",
        "db_id": "scholar_new",
        "question": "在卷积相关领域的高质量论文中，哪些研究者的论文被引用最多？这些论文使用了哪些数据集，以及这些数据集的下载趋势如何？同时，请分析这些研究者与其合作者之间的合作网络对其论文质量的影响，包括合作者的数量、平均合作者贡献度以及论文的平均质量评分。结果请按照总引用次数从高到低排序。",
        "query": "```sql\nWITH high_quality_convolution_papers AS (\n    SELECT \n        p.paperId,\n        p.title,\n        p.numCitedBy,\n        p.paper_quality_score_normalized,\n        pd.dataset_paper_count,\n        d.datasetName,\n        d.dataset_download_count\n    FROM \n        paper p\n    JOIN \n        paperDataset pd ON p.paperId = pd.paperId\n    JOIN \n        dataset d ON pd.datasetId = d.datasetId\n    JOIN \n        paperKeyphrase pk ON p.paperId = pk.paperId\n    JOIN \n        keyphrase k ON pk.keyphraseId = k.keyphraseId\n    WHERE \n        k.keyphraseName ILIKE '%convolution%'\n        AND p.paper_quality_score_normalized > 0.8\n),\ncited_authors AS (\n    SELECT \n        w.authorId,\n        COUNT(DISTINCT hqcp.paperId) AS cited_paper_count,\n        SUM(hqcp.numCitedBy) AS total_citations\n    FROM \n        writes w\n    JOIN \n        high_quality_convolution_papers hqcp ON w.paperId = hqcp.paperId\n    GROUP BY \n        w.authorId\n    ORDER BY \n        total_citations DESC\n),\nco_author_network_analysis AS (\n    SELECT \n        w1.authorId,\n        AVG(w2.writes_co_author_contribution_normalized) AS avg_co_author_contribution,\n        COUNT(DISTINCT w2.authorId) AS co_author_count,\n        AVG(p.paper_quality_score_normalized) AS avg_paper_quality\n    FROM \n        writes w1\n    JOIN \n        writes w2 ON w1.paperId = w2.paperId AND w1.authorId != w2.authorId\n    JOIN \n        paper p ON w1.paperId = p.paperId\n    GROUP BY \n        w1.authorId\n)\nSELECT \n    ca.authorId,\n    a.authorName,\n    ca.avg_co_author_contribution,\n    ca.co_author_count,\n    ca.avg_paper_quality,\n    ca.total_citations,\n    hqcp.datasetName,\n    hqcp.dataset_download_count\nFROM \n    co_author_network_analysis ca\nJOIN \n    cited_authors c ON ca.authorId = c.authorId\nJOIN \n    author a ON ca.authorId = a.authorId\nLEFT JOIN \n    high_quality_convolution_papers hqcp ON c.authorId = hqcp.paperId\nORDER BY \n    ca.total_citations DESC;\n```"
    },
    {
        "instance_id": "q_783",
        "db_id": "scholar_new",
        "question": "Which research works authored by Brian Curless that are associated with convolution techniques have been published, and how have these publications influenced the field over time in terms of citation trends and quality scores? Specifically, provide the publication year, total citations, quality score, and normalized quality score for each paper. Additionally, explore the citing papers' quality scores and citation trends, including their normalized values. Investigate the datasets used in these papers, listing the dataset names along with their quality scores and normalized quality scores. Finally, analyze the relevance of these papers to key research phrases by providing the keyphrase names, their frequencies, weighted frequencies, and normalized weighted frequencies, sorted by publication year in ascending order and by total citations in descending order within each year.",
        "query": "```sql\nWITH RelevantPapers AS (\n    SELECT \n        p.paperId,\n        p.title,\n        p.year,\n        p.numCiting,\n        p.numCitedBy,\n        p.paper_quality_score,\n        p.paper_quality_score_normalized,\n        p.paper_last_updated\n    FROM \n        paper p\n    INNER JOIN \n        writes w ON p.paperId = w.paperId\n    INNER JOIN \n        author a ON w.authorId = a.authorId\n    INNER JOIN \n        paperKeyphrase pk ON p.paperId = pk.paperId\n    INNER JOIN \n        keyphrase k ON pk.keyphraseId = k.keyphraseId\n    WHERE \n        a.authorName = 'Brian Curless' \n        AND LOWER(k.keyphraseName) LIKE '%convolution%'\n),\nCitationTrends AS (\n    SELECT \n        r.paperId,\n        c.citingPaperId,\n        c.cited_paper_quality_score,\n        c.cited_paper_quality_score_normalized,\n        c.paper_citation_trend,\n        c.paper_citation_trend_normalized\n    FROM \n        RelevantPapers r\n    INNER JOIN \n        cite c ON r.paperId = c.citedPaperId\n),\nDatasetUsage AS (\n    SELECT \n        r.paperId,\n        pd.datasetId,\n        d.datasetName,\n        pd.paper_dataset_quality_score,\n        pd.paper_dataset_quality_score_normalized\n    FROM \n        RelevantPapers r\n    INNER JOIN \n        paperDataset pd ON r.paperId = pd.paperId\n    INNER JOIN \n        dataset d ON pd.datasetId = d.datasetId\n),\nKeyphraseRelevance AS (\n    SELECT \n        r.paperId,\n        pk.keyphraseId,\n        k.keyphraseName,\n        pk.keyphrase_frequency,\n        pk.paper_keyphrase_weighted_frequency,\n        pk.paper_keyphrase_weighted_frequency_normalized\n    FROM \n        RelevantPapers r\n    INNER JOIN \n        paperKeyphrase pk ON r.paperId = pk.paperId\n    INNER JOIN \n        keyphrase k ON pk.keyphraseId = k.keyphraseId\n)\nSELECT \n    rp.title AS PaperTitle,\n    rp.year AS PublicationYear,\n    rp.numCiting AS TotalCitations,\n    rp.paper_quality_score AS QualityScore,\n    rp.paper_quality_score_normalized AS NormalizedQualityScore,\n    ct.citingPaperId AS CitingPaperId,\n    ct.cited_paper_quality_score AS CitedPaperQualityScore,\n    ct.paper_citation_trend AS CitationTrend,\n    ct.paper_citation_trend_normalized AS NormalizedCitationTrend,\n    du.datasetName AS DatasetUsed,\n    du.paper_dataset_quality_score AS DatasetQualityScore,\n    du.paper_dataset_quality_score_normalized AS NormalizedDatasetQualityScore,\n    kr.keyphraseName AS KeyResearchPhrase,\n    kr.keyphrase_frequency AS KeyphraseFrequency,\n    kr.paper_keyphrase_weighted_frequency AS WeightedKeyphraseFrequency,\n    kr.paper_keyphrase_weighted_frequency_normalized AS NormalizedWeightedKeyphraseFrequency\nFROM \n    RelevantPapers rp\nLEFT JOIN \n    CitationTrends ct ON rp.paperId = ct.paperId\nLEFT JOIN \n    DatasetUsage du ON rp.paperId = du.paperId\nLEFT JOIN \n    KeyphraseRelevance kr ON rp.paperId = kr.paperId\nORDER BY \n    rp.year ASC, rp.numCiting DESC;\n```"
    },
    {
        "instance_id": "q_792",
        "db_id": "scholar_new",
        "question": "Which papers authored by Brian Curless in the past five years focus on convolution techniques? For these papers, compare their citation counts to the average citation counts of all papers published in the same venues over the same five-year period. Additionally, evaluate the quality of datasets used in these papers by examining the dataset names, download counts, user ratings, and paper-specific dataset quality scores.",
        "query": "```sql\nWITH brian_curless_papers AS (\n    SELECT \n        p.paperId, \n        p.title, \n        p.venueId, \n        p.year, \n        p.numCiting, \n        p.paper_quality_score\n    FROM \n        paper p\n    JOIN \n        writes w ON p.paperId = w.paperId\n    JOIN \n        author a ON w.authorId = a.authorId\n    WHERE \n        a.authorName = 'Brian Curless'\n        AND 'convolution' = ANY(p.paper_keywords_normalized)\n        AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5\n),\nvenue_avg_citations AS (\n    SELECT \n        bp.venueId, \n        AVG(p.numCiting) AS avg_citations\n    FROM \n        brian_curless_papers bp\n    JOIN \n        paper p ON bp.venueId = p.venueId\n    WHERE \n        p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5\n    GROUP BY \n        bp.venueId\n),\ndataset_quality AS (\n    SELECT \n        pd.paperId, \n        d.datasetName, \n        d.dataset_download_count, \n        d.dataset_user_rating, \n        pd.paper_dataset_quality_score\n    FROM \n        paperDataset pd\n    JOIN \n        dataset d ON pd.datasetId = d.datasetId\n    WHERE \n        pd.paperId IN (SELECT paperId FROM brian_curless_papers)\n)\nSELECT \n    bcp.title, \n    bcp.numCiting AS paper_citations, \n    vac.avg_citations AS venue_avg_citations, \n    dq.datasetName, \n    dq.dataset_download_count, \n    dq.dataset_user_rating, \n    dq.paper_dataset_quality_score\nFROM \n    brian_curless_papers bcp\nLEFT JOIN \n    venue_avg_citations vac ON bcp.venueId = vac.venueId\nLEFT JOIN \n    dataset_quality dq ON bcp.paperId = dq.paperId;\n```"
    },
    {
        "instance_id": "q_788",
        "db_id": "scholar_new",
        "question": "哪些研究者在其研究兴趣包含卷积相关领域的情况下发表了高质量的论文（论文质量评分趋势大于0.8），并且这些论文引用了自2020年1月1日以来更新过的特定数据集？请列出研究者的姓名和所属机构，同时提供他们论文的质量评分趋势。此外，分析所引用数据集的名称、使用频率（以下载次数衡量）以及数据集的质量评分趋势，并按照论文质量评分趋势降序排列，若相同则按数据集使用频率降序排列。",
        "query": "```sql\nSELECT \n    a.authorName,\n    a.affiliation,\n    p.paper_quality_score_normalized AS paper_quality_trend,\n    d.datasetName,\n    d.dataset_download_count AS dataset_usage_frequency,\n    pd.paper_dataset_quality_score_normalized AS dataset_quality_trend\nFROM \n    author a\nJOIN \n    writes w ON a.authorId = w.authorId\nJOIN \n    paper p ON w.paperId = p.paperId\nJOIN \n    paperDataset pd ON p.paperId = pd.paperId\nJOIN \n    dataset d ON pd.datasetId = d.datasetId\nWHERE \n    a.author_research_interests_normalized @> ARRAY['convolution']::text[]\n    AND p.paper_quality_score_normalized > 0.8\n    AND d.dataset_last_updated AT TIME ZONE 'UTC' >= '2020-01-01'\nORDER BY \n    p.paper_quality_score_normalized DESC, \n    d.dataset_download_count DESC;\n```"
    },
    {
        "instance_id": "q_784",
        "db_id": "scholar_new",
        "question": "Which are the top 10 research topics related to \"convolution\" that Brian Curless has most frequently explored, and how have these topics evolved over time in terms of average citation counts and publication quality scores? Additionally, identify any datasets and keyphrases that are prominently associated with his work on these convolution-related topics.",
        "query": "```sql\nWITH convolution_topics AS (\n    SELECT \n        w.authorId,\n        p.paperId,\n        unnest(p.paper_keywords_normalized) AS topic,\n        p.year,\n        p.numCiting AS citation_count,\n        p.paper_quality_score_normalized AS quality_score,\n        pd.datasetId,\n        pk.keyphraseId\n    FROM \n        writes w\n    JOIN \n        paper p ON w.paperId = p.paperId\n    LEFT JOIN \n        paperDataset pd ON p.paperId = pd.paperId\n    LEFT JOIN \n        paperKeyphrase pk ON p.paperId = pk.paperId\n    WHERE \n        w.authorId = (SELECT authorId FROM author WHERE authorName = 'Brian Curless')\n        AND EXISTS (SELECT 1 FROM unnest(p.paper_keywords_normalized) AS t WHERE t ILIKE '%convolution%')\n),\ntopic_frequency AS (\n    SELECT \n        topic,\n        COUNT(*) AS frequency\n    FROM \n        convolution_topics\n    GROUP BY \n        topic\n    ORDER BY \n        frequency DESC\n    LIMIT 10\n),\ntopic_evolution AS (\n    SELECT \n        ct.topic,\n        ct.year,\n        AVG(ct.citation_count) AS avg_citations,\n        AVG(ct.quality_score) AS avg_quality\n    FROM \n        convolution_topics ct\n    JOIN \n        topic_frequency tf ON ct.topic = tf.topic\n    GROUP BY \n        ct.topic, ct.year\n    ORDER BY \n        ct.topic, ct.year\n),\ndataset_association AS (\n    SELECT \n        DISTINCT ct.topic, d.datasetName\n    FROM \n        convolution_topics ct\n    JOIN \n        dataset d ON ct.datasetId = d.datasetId\n),\nkeyphrase_association AS (\n    SELECT \n        DISTINCT ct.topic, k.keyphraseName\n    FROM \n        convolution_topics ct\n    JOIN \n        keyphrase k ON ct.keyphraseId = k.keyphraseId\n)\nSELECT \n    tf.topic,\n    tf.frequency,\n    te.year,\n    te.avg_citations,\n    te.avg_quality,\n    da.datasetName,\n    ka.keyphraseName\nFROM \n    topic_frequency tf\nLEFT JOIN \n    topic_evolution te ON tf.topic = te.topic\nLEFT JOIN \n    dataset_association da ON tf.topic = da.topic\nLEFT JOIN \n    keyphrase_association ka ON tf.topic = ka.topic\nORDER BY \n    tf.frequency DESC, te.year;\n```"
    },
    {
        "instance_id": "q_786",
        "db_id": "scholar_new",
        "question": "Which papers authored by Brian Curless are most closely associated with the topic of convolution, considering the weighted frequency of keyphrases related to convolution techniques? Additionally, evaluate these papers based on their citation trends from 2010 onwards, including the average quality of citing papers. Further, assess the impact of these papers by counting citations from high-impact journals and conferences (with an impact factor greater than 5), and rank the results by the relevance of keyphrases, average citation quality, and paper quality score in descending order. Include papers with no high-impact citations in the results, showing zero as their high-impact citation count.",
        "query": "```sql\nWITH convolution_keyphrases AS (\n    SELECT keyphraseId \n    FROM keyphrase \n    WHERE keyphraseName ILIKE '%convolution%'\n),\nauthor_papers AS (\n    SELECT p.paperId, p.title, p.numCiting, p.paper_quality_score, p.paper_keywords_similarity_score, p.year\n    FROM paper p\n    JOIN writes w ON p.paperId = w.paperId\n    JOIN author a ON w.authorId = a.authorId\n    WHERE a.authorName = 'Brian Curless'\n),\npaper_convolution_relevance AS (\n    SELECT ap.paperId, ap.title, ap.numCiting, ap.paper_quality_score, ap.paper_keywords_similarity_score, SUM(pkw.paper_keyphrase_weighted_frequency_normalized) AS keyphrase_relevance_score\n    FROM author_papers ap\n    JOIN paperKeyphrase pkw ON ap.paperId = pkw.paperId\n    JOIN convolution_keyphrases ck ON pkw.keyphraseId = ck.keyphraseId\n    GROUP BY ap.paperId, ap.title, ap.numCiting, ap.paper_quality_score, ap.paper_keywords_similarity_score\n),\ncitation_trends AS (\n    SELECT cp.citedPaperId, AVG(cp.citing_paper_quality_score_normalized) AS avg_citation_quality, COUNT(cp.citingPaperId) AS citation_count\n    FROM cite cp\n    JOIN paper citer ON cp.citingPaperId = citer.paperId\n    WHERE citer.year >= 2010\n    GROUP BY cp.citedPaperId\n),\nhigh_impact_venues AS (\n    SELECT v.venueId \n    FROM venue v\n    JOIN journal j ON v.venueId = j.journalId\n    WHERE j.impact_factor > 5\n),\npaper_high_impact_citations AS (\n    SELECT c.citedPaperId, COUNT(c.citingPaperId) AS high_impact_citations\n    FROM cite c\n    JOIN paper p ON c.citingPaperId = p.paperId\n    JOIN high_impact_venues hiv ON p.venueId = hiv.venueId\n    GROUP BY c.citedPaperId\n)\nSELECT pcr.paperId, pcr.title, pcr.numCiting, pcr.paper_quality_score, pcr.paper_keywords_similarity_score, pcr.keyphrase_relevance_score, ct.avg_citation_quality, ct.citation_count, COALESCE(phic.high_impact_citations, 0) AS high_impact_citations\nFROM paper_convolution_relevance pcr\nLEFT JOIN citation_trends ct ON pcr.paperId = ct.citedPaperId\nLEFT JOIN paper_high_impact_citations phic ON pcr.paperId = phic.citedPaperId\nORDER BY pcr.keyphrase_relevance_score DESC, ct.avg_citation_quality DESC, pcr.paper_quality_score DESC;\n```"
    },
    {
        "instance_id": "q_793",
        "db_id": "scholar_new",
        "question": "What are the keyphrases most relevant to Brian Curless's research, considering the citation trends and quality of papers he has authored in the past five years, specifically focusing on open-access papers? Additionally, compare the usage frequency of these keyphrases across conferences versus journals, using weighted frequency as the comparison metric. Provide results ordered by the average normalized paper quality score in descending order, followed by the total keyphrase frequency in descending order.",
        "query": "```sql\nWITH RelevantPapers AS (\n    SELECT \n        p.paperId, \n        p.title, \n        p.numCiting, \n        p.paper_quality_score_normalized, \n        c.paper_citation_trend_normalized\n    FROM \n        writes w\n    JOIN \n        author a ON w.authorId = a.authorId\n    JOIN \n        paper p ON w.paperId = p.paperId\n    LEFT JOIN \n        cite c ON p.paperId = c.citedPaperId\n    WHERE \n        a.authorName = 'Brian Curless' \n        AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n        AND p.is_open_access IS NOT NULL\n), KeyphraseRelevance AS (\n    SELECT \n        pk.keyphraseId, \n        k.keyphraseName, \n        AVG(rp.numCiting) AS avg_numCiting, \n        AVG(rp.paper_quality_score_normalized) AS avg_paper_quality_score_normalized, \n        AVG(rp.paper_citation_trend_normalized) AS avg_paper_citation_trend_normalized, \n        SUM(pk.keyphrase_frequency) AS total_keyphrase_frequency\n    FROM \n        RelevantPapers rp\n    JOIN \n        paperKeyphrase pk ON rp.paperId = pk.paperId\n    JOIN \n        keyphrase k ON pk.keyphraseId = k.keyphraseId\n    GROUP BY \n        pk.keyphraseId, \n        k.keyphraseName\n), VenueComparison AS (\n    SELECT \n        kr.keyphraseName, \n        SUM(CASE WHEN v.venue_type = 'conference' THEN pkw.paper_keyphrase_weighted_frequency ELSE 0 END) AS conference_usage,\n        SUM(CASE WHEN v.venue_type = 'journal' THEN pkw.paper_keyphrase_weighted_frequency ELSE 0 END) AS journal_usage\n    FROM \n        KeyphraseRelevance kr\n    JOIN \n        paperKeyphrase pkw ON kr.keyphraseName = (SELECT keyphraseName FROM keyphrase WHERE keyphraseId = pkw.keyphraseId)\n    JOIN \n        paper p ON pkw.paperId = p.paperId\n    JOIN \n        venue v ON p.venueId = v.venueId\n    GROUP BY \n        kr.keyphraseName\n)\nSELECT \n    kc.keyphraseName, \n    kc.avg_numCiting, \n    kc.avg_paper_quality_score_normalized, \n    kc.avg_paper_citation_trend_normalized, \n    vc.conference_usage, \n    vc.journal_usage\nFROM \n    KeyphraseRelevance kc\nJOIN \n    VenueComparison vc ON kc.keyphraseName = vc.keyphraseName\nORDER BY \n    kc.avg_paper_quality_score_normalized DESC, \n    kc.total_keyphrase_frequency DESC;\n```"
    },
    {
        "instance_id": "q_787",
        "db_id": "scholar_new",
        "question": "在过去五年中，哪些研究者的兴趣领域包含卷积神经网络，并且其发表的论文引用质量评分超过所有论文的平均值？请进一步分析这些研究者在顶级期刊和会议（定义为影响因子大于5）中的论文分布情况，以及他们对数据集的使用趋势。最终结果需按照研究者的H指数降序排列，若H指数相同，则按平均论文质量评分降序排列。",
        "query": "```sql\nWITH influential_authors AS (\n    SELECT \n        a.authorId,\n        a.authorName,\n        a.h_index,\n        AVG(p.paper_quality_score) AS avg_paper_quality_score\n    FROM \n        author a\n    JOIN \n        writes w ON a.authorId = w.authorId\n    JOIN \n        paper p ON w.paperId = p.paperId\n    WHERE \n        'convolutional neural network' = ANY(a.author_research_interests_normalized)\n        AND p.paper_quality_score > (SELECT AVG(paper_quality_score) FROM paper)\n    GROUP BY \n        a.authorId, a.authorName, a.h_index\n    HAVING \n        COUNT(DISTINCT p.paperId) > 0\n),\ntop_venues_distribution AS (\n    SELECT \n        ia.authorId,\n        v.venueName,\n        COUNT(p.paperId) AS paper_count\n    FROM \n        influential_authors ia\n    JOIN \n        writes w ON ia.authorId = w.authorId\n    JOIN \n        paper p ON w.paperId = p.paperId\n    JOIN \n        venue v ON p.venueId = v.venueId\n    WHERE \n        v.impact_factor > 5 -- Assuming top journals/conferences have an impact factor > 5\n    GROUP BY \n        ia.authorId, v.venueName\n),\ndataset_usage_trend AS (\n    SELECT \n        ia.authorId,\n        d.datasetName,\n        SUM(pd.dataset_paper_count) AS total_dataset_usage\n    FROM \n        influential_authors ia\n    JOIN \n        writes w ON ia.authorId = w.authorId\n    JOIN \n        paper p ON w.paperId = p.paperId\n    JOIN \n        paperDataset pd ON p.paperId = pd.paperId\n    JOIN \n        dataset d ON pd.datasetId = d.datasetId\n    WHERE \n        p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n    GROUP BY \n        ia.authorId, d.datasetName\n)\nSELECT \n    ia.authorName,\n    ia.h_index,\n    ia.avg_paper_quality_score,\n    COALESCE(tv.venueName, 'No Top Venue') AS top_venue,\n    COALESCE(tv.paper_count, 0) AS papers_in_top_venue,\n    COALESCE(dut.datasetName, 'No Dataset Used') AS dataset_used,\n    COALESCE(dut.total_dataset_usage, 0) AS dataset_usage_count\nFROM \n    influential_authors ia\nLEFT JOIN \n    top_venues_distribution tv ON ia.authorId = tv.authorId\nLEFT JOIN \n    dataset_usage_trend dut ON ia.authorId = dut.authorId\nORDER BY \n    ia.h_index DESC, ia.avg_paper_quality_score DESC;\n```"
    },
    {
        "instance_id": "q_796",
        "db_id": "scholar_new",
        "question": "Which research papers authored by Brian Curless include \"convolution\" in their keyphrases? For these papers, compare their citation trends across different venues and publication years, considering the quality of citations received over time as indicated by the normalized quality score of cited papers. Additionally, identify any shifts in research interest by analyzing the associated keyphrases and datasets linked to these papers, and present the results ordered by publication year in descending order and by the number of citations in descending order within each year.",
        "query": "```sql\nWITH convolution_papers AS (\n    SELECT \n        p.paperId,\n        p.title,\n        p.venueId,\n        p.year,\n        p.numCiting,\n        p.paper_quality_score,\n        p.paper_last_updated\n    FROM \n        paper p\n    INNER JOIN \n        writes w ON p.paperId = w.paperId\n    INNER JOIN \n        author a ON w.authorId = a.authorId\n    INNER JOIN \n        paperKeyphrase pk ON p.paperId = pk.paperId\n    INNER JOIN \n        keyphrase k ON pk.keyphraseId = k.keyphraseId\n    WHERE \n        a.authorName = 'Brian Curless' \n        AND LOWER(k.keyphraseName) LIKE '%convolution%'\n),\ncitation_trends AS (\n    SELECT \n        cp.paperId,\n        cp.title,\n        cp.venueId,\n        cp.year,\n        cp.numCiting,\n        cp.paper_quality_score,\n        v.venueName,\n        c.paper_citation_trend,\n        c.cited_paper_quality_score_normalized\n    FROM \n        convolution_papers cp\n    INNER JOIN \n        cite c ON cp.paperId = c.citedPaperId\n    INNER JOIN \n        venue v ON cp.venueId = v.venueId\n),\nkeyphrase_analysis AS (\n    SELECT \n        cp.paperId,\n        STRING_AGG(DISTINCT k.keyphraseName, ', ') AS associated_keyphrases\n    FROM \n        convolution_papers cp\n    INNER JOIN \n        paperKeyphrase pk ON cp.paperId = pk.paperId\n    INNER JOIN \n        keyphrase k ON pk.keyphraseId = k.keyphraseId\n    GROUP BY \n        cp.paperId\n),\ndataset_analysis AS (\n    SELECT \n        cp.paperId,\n        STRING_AGG(DISTINCT d.datasetName, ', ') AS associated_datasets\n    FROM \n        convolution_papers cp\n    INNER JOIN \n        paperDataset pd ON cp.paperId = pd.paperId\n    INNER JOIN \n        dataset d ON pd.datasetId = d.datasetId\n    GROUP BY \n        cp.paperId\n)\nSELECT \n    ct.paperId,\n    ct.title,\n    ct.venueName,\n    ct.year,\n    ct.numCiting,\n    ct.paper_quality_score,\n    ct.paper_citation_trend,\n    ct.cited_paper_quality_score_normalized,\n    COALESCE(ka.associated_keyphrases, '') AS associated_keyphrases,\n    COALESCE(da.associated_datasets, '') AS associated_datasets\nFROM \n    citation_trends ct\nLEFT JOIN \n    keyphrase_analysis ka ON ct.paperId = ka.paperId\nLEFT JOIN \n    dataset_analysis da ON ct.paperId = da.paperId\nORDER BY \n    ct.year DESC, ct.numCiting DESC;\n```"
    },
    {
        "instance_id": "q_791",
        "db_id": "scholar_new",
        "question": "In the past decade, which research papers authored by Brian Curless focus on convolution techniques? For these papers, compare their citation trends across different venues and datasets, ranking them based on the number of citations received. Additionally, evaluate the relevance of keyphrases associated with these papers by considering their weighted frequency normalized scores, to understand their impact within the academic community. Provide results ordered by the number of citations in descending order and then by publication year in descending order.",
        "query": "```sql\nWITH convolution_papers AS (\n    SELECT \n        p.paperId,\n        p.title,\n        p.year,\n        p.numCiting,\n        p.numCitedBy,\n        p.venueId,\n        p.paper_quality_score,\n        p.paper_keywords_normalized,\n        v.venueName,\n        v.venue_type,\n        d.datasetName,\n        d.dataset_size,\n        pk.keyphraseName,\n        pk.paper_keyphrase_weighted_frequency_normalized\n    FROM \n        paper p\n    JOIN \n        writes w ON p.paperId = w.paperId\n    JOIN \n        author a ON w.authorId = a.authorId\n    LEFT JOIN \n        venue v ON p.venueId = v.venueId\n    LEFT JOIN \n        paperDataset pd ON p.paperId = pd.paperId\n    LEFT JOIN \n        dataset d ON pd.datasetId = d.datasetId\n    LEFT JOIN \n        paperKeyphrase pk ON p.paperId = pk.paperId\n    LEFT JOIN \n        keyphrase k ON pk.keyphraseId = k.keyphraseId\n    WHERE \n        a.authorName = 'Brian Curless'\n        AND 'convolution' = ANY(p.paper_keywords_normalized)\n        AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE - INTERVAL '10 years')\n),\ncitation_trends AS (\n    SELECT \n        cp.paperId,\n        cp.title,\n        cp.year,\n        cp.numCiting,\n        cp.numCitedBy,\n        cp.venueName,\n        cp.venue_type,\n        cp.datasetName,\n        cp.dataset_size,\n        cp.keyphraseName,\n        cp.paper_keyphrase_weighted_frequency_normalized,\n        ROW_NUMBER() OVER (PARTITION BY cp.venueName ORDER BY cp.numCiting DESC) AS venue_citation_rank,\n        ROW_NUMBER() OVER (PARTITION BY cp.datasetName ORDER BY cp.numCiting DESC) AS dataset_citation_rank\n    FROM \n        convolution_papers cp\n)\nSELECT \n    ct.paperId,\n    ct.title,\n    ct.year,\n    ct.numCiting,\n    ct.numCitedBy,\n    ct.venueName,\n    ct.venue_type,\n    ct.datasetName,\n    ct.dataset_size,\n    ct.keyphraseName,\n    ct.paper_keyphrase_weighted_frequency_normalized,\n    ct.venue_citation_rank,\n    ct.dataset_citation_rank\nFROM \n    citation_trends ct\nORDER BY \n    ct.numCiting DESC, ct.year DESC;\n```"
    },
    {
        "instance_id": "q_790",
        "db_id": "scholar_new",
        "question": "哪些研究者在其发表的论文中涉及“卷积技术”领域，且这些论文的引用质量得分高于所有论文的平均引用质量得分？请进一步分析这些研究者的以下信息：\n\n1. 每位研究者的论文在顶级期刊和会议中的分布情况，其中顶级期刊和会议定义为影响因子高于所有期刊平均影响因子的出版物。\n2. 这些研究者使用数据集的频率（即使用不同数据集的数量）以及这些数据集的质量趋势（通过数据集质量得分的平均值衡量）。\n\n最终结果请按照研究者的总引用次数从高到低排序，并包含以下具体指标：\n- 研究者的ID和姓名\n- 该研究者论文的平均引用质量得分\n- 该研究者的总引用次数\n- 研究者论文在每个顶级期刊或会议中的数量及对应的期刊/会议名称\n- 研究者使用数据集的数量及这些数据集的平均质量得分",
        "query": "```sql\nWITH influential_authors AS (\n    SELECT \n        w.authorId,\n        a.authorName,\n        AVG(p.paper_quality_score) AS avg_paper_quality_score,\n        COUNT(DISTINCT p.paperId) AS paper_count,\n        SUM(p.numCitedBy) AS total_citations\n    FROM \n        writes w\n    JOIN \n        author a ON w.authorId = a.authorId\n    JOIN \n        paper p ON w.paperId = p.paperId\n    WHERE \n        '卷积技术' = ANY(a.author_research_interests_normalized)\n        AND p.paper_quality_score > (SELECT AVG(paper_quality_score) FROM paper)\n    GROUP BY \n        w.authorId, a.authorName\n    HAVING \n        COUNT(DISTINCT p.paperId) > 0\n),\ntop_venues AS (\n    SELECT \n        v.venueId,\n        v.venueName\n    FROM \n        venue v\n    WHERE \n        v.impact_factor > (SELECT AVG(impact_factor) FROM journal)\n),\nauthor_venue_distribution AS (\n    SELECT \n        ia.authorId,\n        ia.authorName,\n        v.venueName,\n        COUNT(p.paperId) AS paper_count_in_venue\n    FROM \n        influential_authors ia\n    JOIN \n        paper p ON ia.authorId = ANY(SELECT w.authorId FROM writes w WHERE w.paperId = p.paperId)\n    JOIN \n        venue v ON p.venueId = v.venueId\n    WHERE \n        v.venueId IN (SELECT venueId FROM top_venues)\n    GROUP BY \n        ia.authorId, ia.authorName, v.venueName\n),\ndataset_usage AS (\n    SELECT \n        ia.authorId,\n        ia.authorName,\n        COUNT(pd.datasetId) AS dataset_count,\n        AVG(pd.paper_dataset_quality_score) AS avg_dataset_quality_score\n    FROM \n        influential_authors ia\n    JOIN \n        writes w ON ia.authorId = w.authorId\n    JOIN \n        paperDataset pd ON w.paperId = pd.paperId\n    GROUP BY \n        ia.authorId, ia.authorName\n)\nSELECT \n    ia.authorId,\n    ia.authorName,\n    ia.avg_paper_quality_score,\n    ia.total_citations,\n    avd.venueName,\n    avd.paper_count_in_venue,\n    du.dataset_count,\n    du.avg_dataset_quality_score\nFROM \n    influential_authors ia\nLEFT JOIN \n    author_venue_distribution avd ON ia.authorId = avd.authorId\nLEFT JOIN \n    dataset_usage du ON ia.authorId = du.authorId\nORDER BY \n    ia.total_citations DESC;\n```"
    },
    {
        "instance_id": "q_789",
        "db_id": "scholar_new",
        "question": "What is the annual trend of Brian Curless's research impact over the past five years, measured by the number of publications, average citations received, average quality of citations, and average relevance of keyphrases in his papers?",
        "query": "```sql\nWITH recent_papers AS (\n    SELECT \n        p.paperId, \n        p.title, \n        p.year, \n        p.numCiting, \n        p.paper_quality_score_normalized,\n        pk.paper_keyphrase_weighted_frequency_normalized\n    FROM \n        paper p\n    JOIN \n        writes w ON p.paperId = w.paperId\n    JOIN \n        author a ON w.authorId = a.authorId\n    LEFT JOIN \n        paperKeyphrase pk ON p.paperId = pk.paperId\n    WHERE \n        a.authorName = 'Brian Curless' \n        AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n),\ncitation_quality AS (\n    SELECT \n        rp.paperId, \n        AVG(c.cited_paper_quality_score_normalized) AS avg_citation_quality\n    FROM \n        recent_papers rp\n    JOIN \n        cite c ON rp.paperId = c.citedPaperId\n    GROUP BY \n        rp.paperId\n),\nkeyphrase_relevance AS (\n    SELECT \n        rp.paperId, \n        AVG(rp.paper_keyphrase_weighted_frequency_normalized) AS avg_keyphrase_relevance\n    FROM \n        recent_papers rp\n    GROUP BY \n        rp.paperId\n)\nSELECT \n    rp.year, \n    COUNT(rp.paperId) AS paper_count, \n    AVG(rp.numCiting) AS avg_citations, \n    AVG(cq.avg_citation_quality) AS avg_citation_quality, \n    AVG(kr.avg_keyphrase_relevance) AS avg_keyphrase_relevance\nFROM \n    recent_papers rp\nLEFT JOIN \n    citation_quality cq ON rp.paperId = cq.paperId\nLEFT JOIN \n    keyphrase_relevance kr ON rp.paperId = kr.paperId\nGROUP BY \n    rp.year\nORDER BY \n    rp.year;\n```"
    },
    {
        "instance_id": "q_799",
        "db_id": "scholar_new",
        "question": "Which papers published in NIPS have a normalized citation quality score greater than 0.8 and are associated with datasets that have been updated at least monthly, weekly, or daily over the past three years, showing an increasing trend in usage during this period? Additionally, include only those papers where the primary author has a research interest in machine learning and has published at least five papers in the last two years.",
        "query": "```sql\nSELECT DISTINCT p.paperId, p.title\nFROM paper p\nJOIN venue v ON p.venueId = v.venueId\nJOIN paperDataset pd ON p.paperId = pd.paperId\nJOIN dataset d ON pd.datasetId = d.datasetId\nJOIN writes w ON p.paperId = w.paperId\nJOIN author a ON w.authorId = a.authorId\nWHERE v.venueName = 'NIPS'\n  AND p.cited_paper_quality_score_normalized > 0.8\n  AND d.dataset_update_frequency IN ('Monthly', 'Weekly', 'Daily')\n  AND d.dataset_last_updated >= NOW() - INTERVAL '3 years'\n  AND EXISTS (\n    SELECT 1\n    FROM dataset_usage du\n    WHERE du.datasetId = d.datasetId\n      AND du.usage_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 3\n      AND du.usage_count > LAG(du.usage_count) OVER (PARTITION BY du.datasetId ORDER BY du.usage_year)\n  )\n  AND a.author_research_interests @> ARRAY['machine learning']\n  AND a.authorId = (\n    SELECT wa.authorId\n    FROM writes wa\n    JOIN paper pa ON wa.paperId = pa.paperId\n    WHERE pa.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 2\n    GROUP BY wa.authorId\n    HAVING COUNT(DISTINCT pa.paperId) >= 5\n  )\n  AND w.co_author_count = (\n    SELECT MIN(w2.co_author_count)\n    FROM writes w2\n    WHERE w2.paperId = p.paperId\n  );\n```"
    },
    {
        "instance_id": "q_794",
        "db_id": "scholar_new",
        "question": "Analyze the trend of dataset usage in research articles discussing TAIL that were presented at NIPS over the past five years, focusing on papers with a higher-than-average citation quality score. Specifically, identify the number of such papers each year, the datasets used in these papers (considering only datasets with a user rating greater than 4.0 and download count exceeding 1,000), and the average quality score of dataset usage in these papers. Present the results in descending order of year.",
        "query": "```sql\nWITH tail_nips_papers AS (\n    SELECT \n        p.paperId,\n        p.title,\n        p.paper_quality_score_normalized,\n        p.numCiting,\n        p.year\n    FROM \n        paper p\n    INNER JOIN \n        venue v ON p.venueId = v.venueId\n    INNER JOIN \n        paperKeyphrase pk ON p.paperId = pk.paperId\n    INNER JOIN \n        keyphrase k ON pk.keyphraseId = k.keyphraseId\n    WHERE \n        LOWER(k.keyphraseName) LIKE '%tail%'\n        AND LOWER(v.venueName) LIKE '%nips%'\n        AND p.paper_quality_score_normalized > (SELECT AVG(paper_quality_score_normalized) FROM paper)\n),\nsignificant_datasets AS (\n    SELECT \n        datasetId,\n        datasetName\n    FROM \n        dataset\n    WHERE \n        dataset_user_rating > 4.0\n        AND dataset_download_count > 1000\n),\npaper_dataset_usage AS (\n    SELECT \n        pd.paperId,\n        d.datasetName,\n        pd.paper_dataset_quality_score_normalized,\n        p.year\n    FROM \n        paperDataset pd\n    INNER JOIN \n        significant_datasets d ON pd.datasetId = d.datasetId\n    INNER JOIN \n        tail_nips_papers p ON pd.paperId = p.paperId\n    WHERE \n        p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n)\nSELECT \n    pn.year,\n    COUNT(DISTINCT pn.paperId) AS paper_count,\n    STRING_AGG(DISTINCT pn.datasetName, ', ') AS datasets_used,\n    AVG(pn.paper_dataset_quality_score_normalized) AS avg_dataset_quality\nFROM \n    paper_dataset_usage pn\nGROUP BY \n    pn.year\nORDER BY \n    pn.year DESC;\n```"
    },
    {
        "instance_id": "q_800",
        "db_id": "scholar_new",
        "question": "What are the research papers published in NIPS that discuss the concept of TAIL over the past five years, and how do their citation trends and citation quality compare to papers on the same topic published in other venues during the same period? Additionally, consider the relevance of keyphrases associated with these papers and their overall quality scores.",
        "query": "```sql\nWITH nips_papers AS (\n    SELECT \n        p.paperId,\n        p.title,\n        p.year,\n        p.numCiting,\n        p.paper_quality_score,\n        p.paper_keywords_normalized\n    FROM \n        paper p\n    JOIN \n        venue v ON p.venueId = v.venueId\n    WHERE \n        v.venueName = 'NIPS' \n        AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5\n        AND 'TAIL' = ANY(p.paper_keywords_normalized)\n),\nother_venue_papers AS (\n    SELECT \n        p.paperId,\n        p.title,\n        p.year,\n        p.numCiting,\n        p.paper_quality_score,\n        p.paper_keywords_normalized\n    FROM \n        paper p\n    JOIN \n        venue v ON p.venueId = v.venueId\n    WHERE \n        v.venueName != 'NIPS' \n        AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5\n        AND 'TAIL' = ANY(p.paper_keywords_normalized)\n),\ncitation_trends AS (\n    SELECT \n        c.citedPaperId,\n        AVG(c.citing_paper_quality_score_normalized) AS avg_citation_quality,\n        COUNT(*) AS total_citations\n    FROM \n        cite c\n    WHERE \n        c.citing_paper_quality_score_normalized IS NOT NULL\n        AND c.cited_paper_quality_score_normalized IS NOT NULL\n    GROUP BY \n        c.citedPaperId\n),\nnips_with_citations AS (\n    SELECT \n        np.paperId,\n        np.title,\n        np.year,\n        np.numCiting,\n        np.paper_quality_score,\n        ct.total_citations,\n        ct.avg_citation_quality\n    FROM \n        nips_papers np\n    LEFT JOIN \n        citation_trends ct ON np.paperId = ct.citedPaperId\n),\nother_with_citations AS (\n    SELECT \n        op.paperId,\n        op.title,\n        op.year,\n        op.numCiting,\n        op.paper_quality_score,\n        ct.total_citations,\n        ct.avg_citation_quality\n    FROM \n        other_venue_papers op\n    LEFT JOIN \n        citation_trends ct ON op.paperId = ct.citedPaperId\n)\nSELECT \n    'NIPS' AS venue_type,\n    nwc.paperId,\n    nwc.title,\n    nwc.year,\n    nwc.numCiting,\n    nwc.paper_quality_score,\n    nwc.total_citations,\n    nwc.avg_citation_quality\nFROM \n    nips_with_citations nwc\nUNION ALL\nSELECT \n    'Other Venues' AS venue_type,\n    owc.paperId,\n    owc.title,\n    owc.year,\n    owc.numCiting,\n    owc.paper_quality_score,\n    owc.total_citations,\n    owc.avg_citation_quality\nFROM \n    other_with_citations owc;\n```"
    },
    {
        "instance_id": "q_795",
        "db_id": "scholar_new",
        "question": "Which authors have published papers with \"TAIL\"-related keyphrases in NIPS conferences over the past five years, and what are their average citation quality trends based on high or medium quality citations? Additionally, consider the average user ratings of datasets used in these papers, excluding datasets with fewer than 100 downloads. Provide the results sorted by the number of papers in descending order, and then by the average citation quality trend in descending order.",
        "query": "```sql\nWITH tail_related_papers AS (\n    SELECT DISTINCT p.paperId\n    FROM paper p\n    JOIN venue v ON p.venueId = v.venueId\n    JOIN paperKeyphrase pk ON p.paperId = pk.paperId\n    JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId\n    WHERE LOWER(k.keyphraseName) LIKE '%tail%'\n      AND LOWER(v.venueName) LIKE '%nips%'\n      AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5\n),\ncitation_quality_trend AS (\n    SELECT \n        c.citedPaperId,\n        AVG(c.citing_paper_quality_score_normalized) AS avg_citation_quality\n    FROM cite c\n    JOIN tail_related_papers trp ON c.citedPaperId = trp.paperId\n    WHERE c.citing_paper_quality_score_normalized IS NOT NULL\n      AND c.citing_paper_quality_score_category IN ('High', 'Medium')\n    GROUP BY c.citedPaperId\n),\ndataset_impact AS (\n    SELECT \n        pd.paperId,\n        AVG(d.dataset_user_rating) AS avg_dataset_rating\n    FROM paperDataset pd\n    JOIN dataset d ON pd.datasetId = d.datasetId\n    WHERE d.dataset_download_count > 100\n    GROUP BY pd.paperId\n)\nSELECT \n    a.authorName,\n    COUNT(DISTINCT w.paperId) AS paper_count,\n    COALESCE(AVG(cqt.avg_citation_quality), 0) AS avg_citation_quality_trend,\n    COALESCE(AVG(di.avg_dataset_rating), 0) AS avg_dataset_impact\nFROM author a\nJOIN writes w ON a.authorId = w.authorId\nJOIN tail_related_papers trp ON w.paperId = trp.paperId\nLEFT JOIN citation_quality_trend cqt ON trp.paperId = cqt.citedPaperId\nLEFT JOIN dataset_impact di ON trp.paperId = di.paperId\nGROUP BY a.authorName\nORDER BY paper_count DESC, avg_citation_quality_trend DESC;\n```"
    },
    {
        "instance_id": "q_797",
        "db_id": "scholar_new",
        "question": "Which authors have published papers containing the keyword \"TAIL\" at the NIPS venue in the past five years, and what is their average research impact based on paper quality scores? Additionally, which datasets are associated with these papers, and what is the average quality score of these datasets as reflected by the papers that use them?",
        "query": "```sql\nWITH relevant_papers AS (\n    SELECT DISTINCT p.paperId, p.paper_quality_score, p.year\n    FROM paper p\n    JOIN venue v ON p.venueId = v.venueId\n    JOIN paperKeyphrase pk ON p.paperId = pk.paperId\n    JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId\n    WHERE LOWER(k.keyphraseName) LIKE '%tail%'\n      AND LOWER(v.venueName) = 'nips'\n      AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5\n),\nauthor_impact AS (\n    SELECT w.authorId, AVG(p.paper_quality_score) AS avg_paper_quality_score\n    FROM writes w\n    JOIN relevant_papers p ON w.paperId = p.paperId\n    GROUP BY w.authorId\n),\ndataset_involvement AS (\n    SELECT pd.paperId, d.datasetId, d.datasetName, AVG(pd.paper_dataset_quality_score) AS avg_dataset_quality_score\n    FROM paperDataset pd\n    JOIN dataset d ON pd.datasetId = d.datasetId\n    WHERE pd.paperId IN (SELECT paperId FROM relevant_papers)\n    GROUP BY pd.paperId, d.datasetId, d.datasetName\n)\nSELECT \n    a.authorName, \n    ai.avg_paper_quality_score AS research_impact, \n    STRING_AGG(DISTINCT di.datasetName, ', ') AS involved_datasets, \n    AVG(di.avg_dataset_quality_score) AS avg_dataset_quality\nFROM author a\nJOIN writes w ON a.authorId = w.authorId\nJOIN relevant_papers rp ON w.paperId = rp.paperId\nLEFT JOIN author_impact ai ON a.authorId = ai.authorId\nLEFT JOIN dataset_involvement di ON rp.paperId = di.paperId\nGROUP BY a.authorName, ai.avg_paper_quality_score;\n```"
    },
    {
        "instance_id": "q_805",
        "db_id": "scholar_new",
        "question": "Which authors have written papers about TAIL at NIPS in the past five years, where their average normalized paper quality score is greater than 0.8? Additionally, provide the average citation quality trend of these authors' papers over the same time period, considering only citations from papers with available quality scores. Include the relevance of keyphrases related to TAIL in their publications by ensuring that the papers are associated with keyphrases containing \"tail\". List the results in descending order of the authors' average normalized paper quality score.",
        "query": "```sql\nWITH tail_related_papers AS (\n    SELECT DISTINCT p.paperId\n    FROM paper p\n    JOIN paperKeyphrase pk ON p.paperId = pk.paperId\n    JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId\n    WHERE LOWER(k.keyphraseName) LIKE '%tail%'\n),\nnips_venues AS (\n    SELECT venueId\n    FROM venue\n    WHERE LOWER(venueName) = 'nips'\n),\nauthor_paper_quality AS (\n    SELECT \n        w.authorId,\n        AVG(p.paper_quality_score_normalized) AS avg_paper_quality_score\n    FROM writes w\n    JOIN paper p ON w.paperId = p.paperId\n    JOIN nips_venues nv ON p.venueId = nv.venueId\n    JOIN tail_related_papers trp ON p.paperId = trp.paperId\n    WHERE p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n    GROUP BY w.authorId\n    HAVING AVG(p.paper_quality_score_normalized) > 0.8\n),\ncitation_quality_trend AS (\n    SELECT \n        c.citedPaperId,\n        AVG(c.citing_paper_quality_score_normalized) AS avg_citation_quality_score\n    FROM cite c\n    JOIN paper p ON c.citedPaperId = p.paperId\n    WHERE p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n    GROUP BY c.citedPaperId\n)\nSELECT \n    apq.authorId,\n    a.authorName,\n    apq.avg_paper_quality_score,\n    COALESCE(AVG(cqt.avg_citation_quality_score), 0) AS avg_citation_quality_trend\nFROM author_paper_quality apq\nJOIN author a ON apq.authorId = a.authorId\nLEFT JOIN citation_quality_trend cqt ON apq.authorId = ANY(\n    SELECT w.authorId\n    FROM writes w\n    WHERE w.paperId = cqt.citedPaperId\n)\nGROUP BY apq.authorId, a.authorName, apq.avg_paper_quality_score\nORDER BY apq.avg_paper_quality_score DESC;\n```"
    },
    {
        "instance_id": "q_801",
        "db_id": "scholar_new",
        "question": "哪些研究论文在引用时表现出高于平均值的质量趋势（引用质量归一化分数大于0.8），并且这些论文的作者在其研究领域中具有显著的影响力（H指数不低于50）？同时，考虑这些论文是否与特定数据集存在强关联性（数据集相关论文数量大于10），以及它们是否发表在顶级期刊或会议中（期刊影响因子不低于2.0）。请按照引用质量归一化分数降序排列，若分数相同则按作者H指数降序排列。",
        "query": "```sql\nSELECT \n    p.paperId,\n    p.title,\n    p.year,\n    p.numCiting,\n    p.paper_quality_score_normalized AS paper_quality,\n    c.cited_paper_quality_score_normalized AS cited_paper_quality,\n    a.authorName,\n    a.h_index,\n    d.datasetName,\n    j.journalName,\n    j.impact_factor\nFROM \n    paper p\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nJOIN \n    writes w ON p.paperId = w.paperId\nJOIN \n    author a ON w.authorId = a.authorId\nLEFT JOIN \n    paperDataset pd ON p.paperId = pd.paperId\nLEFT JOIN \n    dataset d ON pd.datasetId = d.datasetId\nJOIN \n    venue v ON p.venueId = v.venueId\nLEFT JOIN \n    journal j ON v.venueId = j.journalId\nWHERE \n    c.cited_paper_quality_score_normalized > 0.8\n    AND a.h_index >= 50\n    AND (d.dataset_paper_count IS NULL OR d.dataset_paper_count > 10)\n    AND (j.journalName IS NULL OR j.impact_factor >= 2.0)\nORDER BY \n    c.cited_paper_quality_score_normalized DESC,\n    a.h_index DESC;\n```"
    },
    {
        "instance_id": "q_798",
        "db_id": "scholar_new",
        "question": "Which authors have demonstrated a higher likelihood of influencing future research trends in the last three years, based on their recent publication activity, citation quality, and engagement with high-impact datasets (rated above 4.0)? Additionally, consider only those whose research interests are relevant to emerging fields such as artificial intelligence or machine learning, and ensure that their average normalized paper quality score exceeds 0.8. Present the results sorted by total citations in descending order, followed by average paper quality and the count of high-impact datasets engaged with, also in descending order.",
        "query": "```sql\nSELECT \n    a.authorId,\n    a.authorName,\n    a.publication_count,\n    a.h_index,\n    a.author_research_interests,\n    SUM(p.numCiting) AS total_citations,\n    AVG(p.paper_quality_score_normalized) AS avg_paper_quality,\n    COUNT(DISTINCT pd.datasetId) AS high_impact_datasets_count\nFROM \n    author a\nJOIN \n    writes w ON a.authorId = w.authorId\nJOIN \n    paper p ON w.paperId = p.paperId\nLEFT JOIN \n    paperDataset pd ON p.paperId = pd.paperId\nJOIN \n    dataset d ON pd.datasetId = d.datasetId\nWHERE \n    p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 3\n    AND d.dataset_user_rating > 4.0\n    AND (a.author_research_interests @> ARRAY['artificial intelligence'] \n         OR a.author_research_interests @> ARRAY['machine learning'])\nGROUP BY \n    a.authorId, a.authorName, a.publication_count, a.h_index, a.author_research_interests\nHAVING \n    AVG(p.paper_quality_score_normalized) > 0.8\nORDER BY \n    total_citations DESC, avg_paper_quality DESC, high_impact_datasets_count DESC;\n```"
    },
    {
        "instance_id": "q_803",
        "db_id": "scholar_new",
        "question": "Which datasets have been most frequently utilized by papers published in venues with above-average impact factors over the past five years, and what is the trend of their usage? Additionally, identify the keyphrases associated with these papers, evaluate their relevance scores based on weighted frequency, and present the results ordered by dataset usage count in descending order and keyphrase relevance score in descending order.",
        "query": "```sql\nWITH high_impact_venues AS (\n    SELECT venueId\n    FROM journal\n    WHERE impact_factor > (SELECT AVG(impact_factor) FROM journal)\n),\nrecent_papers AS (\n    SELECT p.paperId, p.venueId, p.year, pd.datasetId, pk.keyphraseId, pk.paper_keyphrase_weighted_frequency_normalized\n    FROM paper p\n    INNER JOIN writes w ON p.paperId = w.paperId\n    INNER JOIN author a ON w.authorId = a.authorId\n    INNER JOIN paperDataset pd ON p.paperId = pd.paperId\n    INNER JOIN paperKeyphrase pk ON p.paperId = pk.paperId\n    INNER JOIN high_impact_venues hiv ON p.venueId = hiv.venueId\n    WHERE p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5\n),\ndataset_usage AS (\n    SELECT datasetId, COUNT(paperId) AS usage_count\n    FROM recent_papers\n    GROUP BY datasetId\n    ORDER BY usage_count DESC\n    LIMIT 10\n),\nkeyphrase_relevance AS (\n    SELECT rp.paperId, rp.keyphraseId, AVG(rp.paper_keyphrase_weighted_frequency_normalized) AS relevance_score\n    FROM recent_papers rp\n    INNER JOIN dataset_usage du ON rp.datasetId = du.datasetId\n    GROUP BY rp.paperId, rp.keyphraseId\n)\nSELECT d.datasetName, du.usage_count, k.keyphraseName, kr.relevance_score\nFROM dataset_usage du\nINNER JOIN dataset d ON du.datasetId = d.datasetId\nINNER JOIN keyphrase_relevance kr ON du.datasetId = kr.datasetId\nINNER JOIN keyphrase k ON kr.keyphraseId = k.keyphraseId\nORDER BY du.usage_count DESC, kr.relevance_score DESC;\n```"
    },
    {
        "instance_id": "q_802",
        "db_id": "scholar_new",
        "question": "How many unique co-authors has Mark Steedman collaborated with in the past 10 years, and what is the average quality score of the papers they have jointly published?",
        "query": "```sql\nSELECT \n    COUNT(DISTINCT w2.authorId) AS unique_coauthors_count,\n    AVG(p.paper_quality_score) AS avg_paper_quality_score\nFROM \n    writes w1\nJOIN \n    writes w2 ON w1.paperId = w2.paperId AND w1.authorId != w2.authorId\nJOIN \n    author a1 ON w1.authorId = a1.authorId\nJOIN \n    paper p ON w1.paperId = p.paperId\nWHERE \n    a1.authorName = 'Mark Steedman'\n    AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 10;\n```"
    },
    {
        "instance_id": "q_804",
        "db_id": "scholar_new",
        "question": "What are the top 10 keyphrases most frequently associated with papers written by Christof Dallermassl in the year 2000, and how has the usage trend of these keyphrases evolved in terms of citation count and average relevance score from high-quality citing papers over the years 2001 to 2005? Specifically, for each keyphrase, provide the yearly citation count and the average normalized quality score of citing papers within this time range.",
        "query": "```sql\nWITH ChristofPapers AS (\n    SELECT \n        p.paperId\n    FROM \n        author a\n    JOIN writes w ON a.authorId = w.authorId\n    JOIN paper p ON w.paperId = p.paperId\n    WHERE \n        a.authorName = 'Christof Dallermassl' \n        AND p.year = 2000\n),\nFrequentKeyphrases AS (\n    SELECT \n        pk.keyphraseId, \n        k.keyphraseName, \n        SUM(pk.keyphrase_frequency) AS total_frequency\n    FROM \n        ChristofPapers cp\n    JOIN paperKeyphrase pk ON cp.paperId = pk.paperId\n    JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId\n    GROUP BY \n        pk.keyphraseId, k.keyphraseName\n    ORDER BY \n        total_frequency DESC\n    LIMIT 10\n),\nCitationTrend AS (\n    SELECT \n        fk.keyphraseId, \n        fk.keyphraseName, \n        c.citingPaperId, \n        c.citedPaperId, \n        c.citing_paper_quality_score_normalized, \n        EXTRACT(YEAR FROM p.paper_last_updated) AS citation_year\n    FROM \n        FrequentKeyphrases fk\n    JOIN paperKeyphrase pk ON fk.keyphraseId = pk.keyphraseId\n    JOIN paper p ON pk.paperId = p.paperId\n    JOIN cite c ON p.paperId = c.citedPaperId\n    WHERE \n        EXTRACT(YEAR FROM p.paper_last_updated) BETWEEN 2001 AND 2005\n)\nSELECT \n    ct.keyphraseId, \n    ct.keyphraseName, \n    ct.citation_year, \n    COUNT(ct.citingPaperId) AS citation_count, \n    AVG(ct.citing_paper_quality_score_normalized) AS avg_relevance_score\nFROM \n    CitationTrend ct\nGROUP BY \n    ct.keyphraseId, ct.keyphraseName, ct.citation_year\nORDER BY \n    ct.keyphraseId, ct.citation_year;\n```"
    },
    {
        "instance_id": "q_807",
        "db_id": "scholar_new",
        "question": "What were the key research topics explored by Christof Dallermassl in his publications during the year 2000, including the frequency of each topic in his papers, the number of subsequent citations these topics received in later years, the average quality score of the related papers, and representative titles for each topic, ordered by the topic's frequency in 2000 and the number of subsequent citations in descending order?",
        "query": "```sql\nSELECT \n    pk.keyphraseName AS key_research_topics,\n    COUNT(p.paperId) AS topic_frequency_in_2000,\n    SUM(CASE WHEN p.year > 2000 THEN 1 ELSE 0 END) AS subsequent_citations_count,\n    AVG(p.paper_quality_score) AS avg_paper_quality_score,\n    STRING_AGG(DISTINCT p.title, ', ') AS representative_papers\nFROM \n    paper p\nJOIN \n    writes w ON p.paperId = w.paperId\nJOIN \n    author a ON w.authorId = a.authorId\nJOIN \n    paperKeyphrase pk ON p.paperId = pk.paperId\nWHERE \n    a.authorName = 'Christof Dallermassl'\n    AND p.year = 2000\nGROUP BY \n    pk.keyphraseName\nORDER BY \n    topic_frequency_in_2000 DESC, \n    subsequent_citations_count DESC;\n```"
    },
    {
        "instance_id": "q_809",
        "db_id": "scholar_new",
        "question": "What are the top 5 keyphrases most frequently associated with papers authored by Christof Dallermassl in the past year, broken down by venue? Additionally, how do these keyphrases rank in terms of usage frequency across different venues, ordered by venue name and usage count in descending order?",
        "query": "```sql\nWITH recent_papers AS (\n    SELECT \n        w.paperId\n    FROM \n        writes w\n    JOIN \n        author a ON w.authorId = a.authorId\n    WHERE \n        a.authorName = 'Christof Dallermassl'\n        AND a.author_last_updated >= NOW() - INTERVAL '1 year'\n),\nkeyphrase_usage AS (\n    SELECT \n        pk.keyphraseId,\n        k.keyphraseName,\n        COUNT(pk.paperId) AS usage_count,\n        p.venueId\n    FROM \n        paperKeyphrase pk\n    JOIN \n        keyphrase k ON pk.keyphraseId = k.keyphraseId\n    JOIN \n        recent_papers rp ON pk.paperId = rp.paperId\n    JOIN \n        paper p ON pk.paperId = p.paperId\n    GROUP BY \n        pk.keyphraseId, k.keyphraseName, p.venueId\n),\nranked_keyphrases AS (\n    SELECT \n        ku.keyphraseName,\n        ku.venueId,\n        v.venueName,\n        ku.usage_count,\n        ROW_NUMBER() OVER (PARTITION BY ku.venueId ORDER BY ku.usage_count DESC) AS rank\n    FROM \n        keyphrase_usage ku\n    JOIN \n        venue v ON ku.venueId = v.venueId\n)\nSELECT \n    rk.keyphraseName,\n    rk.venueName,\n    rk.usage_count\nFROM \n    ranked_keyphrases rk\nWHERE \n    rk.rank <= 5\nORDER BY \n    rk.venueName, rk.usage_count DESC;\n```"
    },
    {
        "instance_id": "q_808",
        "db_id": "scholar_new",
        "question": "What were the prominent research topics associated with Christof Dallermassl's publications in the year 2000, measured by the normalized weighted frequency of keyphrases across his works, and ranked in descending order of their relevance scores?",
        "query": "```sql\nSELECT \n    pk.keyphraseName AS research_topic,\n    SUM(pkw.paper_keyphrase_weighted_frequency_normalized) AS relevance_score\nFROM \n    scholar_new.paperKeyphrase pkw\nJOIN \n    scholar_new.keyphrase kp ON pkw.keyphraseId = kp.keyphraseId\nJOIN \n    scholar_new.paper p ON pkw.paperId = p.paperId\nJOIN \n    scholar_new.writes w ON p.paperId = w.paperId\nJOIN \n    scholar_new.author a ON w.authorId = a.authorId\nWHERE \n    a.authorName = 'Christof Dallermassl' \n    AND p.year = 2000\nGROUP BY \n    pk.keyphraseName\nORDER BY \n    relevance_score DESC;\n```"
    },
    {
        "instance_id": "q_806",
        "db_id": "scholar_new",
        "question": "Which papers published in TACL in 2014 have the highest citation quality scores and are most frequently associated with datasets that have a growing usage trend over time, as indicated by positive download counts and update frequencies of at least weekly, monthly, or daily?",
        "query": "```sql\nSELECT \n    p.paperId, \n    p.title, \n    p.paper_quality_score AS citation_quality_score, \n    SUM(pds.dataset_paper_count) AS total_dataset_associations\nFROM \n    paper p\nJOIN \n    venue v ON p.venueId = v.venueId\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nJOIN \n    paperDataset pds ON p.paperId = pds.paperId\nJOIN \n    dataset d ON pds.datasetId = d.datasetId\nWHERE \n    v.venueName = 'TACL' \n    AND p.year = 2014 \n    AND d.dataset_download_count > 0 \n    AND d.dataset_update_frequency IN ('Monthly', 'Weekly', 'Daily')\nGROUP BY \n    p.paperId, p.title, p.paper_quality_score\nORDER BY \n    p.paper_quality_score DESC, \n    total_dataset_associations DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_813",
        "db_id": "scholar_new",
        "question": "Which paper published in TACL in 2014 received the highest total normalized quality score of citations, considering all citing papers' quality scores?",
        "query": "```sql\nSELECT \n    p.paperId,\n    p.title,\n    SUM(c.citing_paper_quality_score_normalized) AS total_quality_citations\nFROM \n    paper p\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nJOIN \n    venue v ON p.venueId = v.venueId\nWHERE \n    v.venueName = 'TACL'\n    AND p.year = 2014\nGROUP BY \n    p.paperId, p.title\nORDER BY \n    total_quality_citations DESC\nLIMIT 1;\n```"
    },
    {
        "instance_id": "q_812",
        "db_id": "scholar_new",
        "question": "What is the yearly trend of research on \"Multiuser Receiver\" in papers mentioning \"Decision Feedback\" over the past year, in terms of both the number of publications and the average normalized citation quality of these papers?",
        "query": "```sql\nSELECT \n    p.year AS publication_year,\n    COUNT(p.paperId) AS number_of_publications,\n    AVG(p.paper_quality_score_normalized) AS avg_citation_quality\nFROM \n    paper p\nJOIN \n    writes w ON p.paperId = w.paperId\nJOIN \n    author a ON w.authorId = a.authorId\nJOIN \n    paperKeyphrase pk ON p.paperId = pk.paperId\nJOIN \n    keyphrase k ON pk.keyphraseId = k.keyphraseId\nWHERE \n    k.keyphraseName ILIKE '%Multiuser Receiver%'\n    AND p.paper_abstract ILIKE '%Decision Feedback%'\n    AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE - INTERVAL '1 year')\nGROUP BY \n    p.year\nORDER BY \n    p.year DESC;\n```"
    },
    {
        "instance_id": "q_811",
        "db_id": "scholar_new",
        "question": "In the past decade, which conference venues have featured papers co-authored by Michael Stonebraker, and how has the citation density of these venues evolved year by year? Additionally, among the datasets associated with these papers, which ones have seen the highest usage trends, measured by total usage across papers and download counts, and what are their names?",
        "query": "```sql\nWITH michael_papers AS (\n    SELECT DISTINCT p.paperId, p.venueId, p.year\n    FROM writes w\n    JOIN author a ON w.authorId = a.authorId\n    JOIN paper p ON w.paperId = p.paperId\n    WHERE a.authorName = 'Michael Stonebraker'\n      AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP - INTERVAL '10 years')\n), venue_citation_density AS (\n    SELECT mv.venueId, v.venueName, mv.year, COUNT(c.citedPaperId) AS citation_count, COUNT(mv.paperId) AS paper_count\n    FROM michael_papers mv\n    JOIN paper p ON mv.paperId = p.paperId\n    LEFT JOIN cite c ON p.paperId = c.citedPaperId\n    JOIN venue v ON mv.venueId = v.venueId\n    WHERE v.venue_type = 'conference'\n    GROUP BY mv.venueId, v.venueName, mv.year\n), dataset_usage_trends AS (\n    SELECT pd.datasetId, d.datasetName, SUM(pd.dataset_paper_count) AS total_usage, d.dataset_download_count\n    FROM michael_papers mp\n    JOIN paperDataset pd ON mp.paperId = pd.paperId\n    JOIN dataset d ON pd.datasetId = d.datasetId\n    GROUP BY pd.datasetId, d.datasetName\n    ORDER BY total_usage DESC, d.dataset_download_count DESC\n    LIMIT 10\n)\nSELECT vc.venueId, vc.venueName, vc.year, vc.citation_count, vc.paper_count, \n       CASE WHEN vc.paper_count > 0 THEN vc.citation_count::float / vc.paper_count ELSE 0 END AS citation_density\nFROM venue_citation_density vc\nUNION ALL\nSELECT NULL AS venueId, NULL AS venueName, NULL AS year, NULL AS citation_count, NULL AS paper_count, \n       d.datasetName AS citation_density\nFROM dataset_usage_trends d;\n```"
    },
    {
        "instance_id": "q_810",
        "db_id": "scholar_new",
        "question": "在过去五年内，哪些作者的研究领域发生了显著变化，且其论文的引用质量呈现上升趋势？请进一步分析这些作者的主要合作机构，并统计他们在高影响力期刊（影响因子高于所有期刊平均值）上的发表数量及期刊名称。",
        "query": "```sql\nWITH recent_authors AS (\n    SELECT \n        w.authorId,\n        a.authorName,\n        a.author_research_interests_normalized,\n        a.author_last_updated\n    FROM \n        writes w\n    JOIN \n        author a ON w.authorId = a.authorId\n    WHERE \n        a.author_last_updated >= NOW() - INTERVAL '5 years'\n),\ninterest_change AS (\n    SELECT \n        ra.authorId,\n        ra.authorName,\n        BOOL_OR(\n            NOT ARRAY_OVERLAP(\n                ra.author_research_interests_normalized,\n                LAG(ra.author_research_interests_normalized) OVER (PARTITION BY ra.authorId ORDER BY ra.author_last_updated)\n            )\n        ) AS has_interest_change\n    FROM \n        recent_authors ra\n    GROUP BY \n        ra.authorId, ra.authorName\n    HAVING \n        BOOL_OR(\n            NOT ARRAY_OVERLAP(\n                ra.author_research_interests_normalized,\n                LAG(ra.author_research_interests_normalized) OVER (PARTITION BY ra.authorId ORDER BY ra.author_last_updated)\n            )\n        )\n),\ncitation_trend AS (\n    SELECT \n        w.authorId,\n        c.cited_paper_quality_score_normalized,\n        CASE \n            WHEN LAG(c.cited_paper_quality_score_normalized) OVER (PARTITION BY w.authorId ORDER BY p.year) < c.cited_paper_quality_score_normalized THEN TRUE\n            ELSE FALSE\n        END AS quality_increasing\n    FROM \n        writes w\n    JOIN \n        paper p ON w.paperId = p.paperId\n    JOIN \n        cite c ON p.paperId = c.citedPaperId\n    WHERE \n        p.year >= EXTRACT(YEAR FROM NOW()) - 5\n),\ntop_journals AS (\n    SELECT \n        w.authorId,\n        j.journalName,\n        COUNT(w.paperId) AS publication_count\n    FROM \n        writes w\n    JOIN \n        paper p ON w.paperId = p.paperId\n    JOIN \n        venue v ON p.venueId = v.venueId\n    JOIN \n        journal j ON v.venueId = j.journalId\n    WHERE \n        j.impact_factor > (SELECT AVG(impact_factor) FROM journal)\n        AND p.year >= EXTRACT(YEAR FROM NOW()) - 5\n    GROUP BY \n        w.authorId, j.journalName\n),\ncollaborations AS (\n    SELECT \n        w.authorId,\n        STRING_AGG(DISTINCT a.affiliation, ', ') AS main_collaborating_institutions\n    FROM \n        writes w\n    JOIN \n        author a ON w.authorId = a.authorId\n    WHERE \n        a.affiliation IS NOT NULL\n    GROUP BY \n        w.authorId\n)\nSELECT \n    ic.authorId,\n    ic.authorName,\n    ct.quality_increasing,\n    tj.journalName,\n    tj.publication_count,\n    c.main_collaborating_institutions\nFROM \n    interest_change ic\nJOIN \n    citation_trend ct ON ic.authorId = ct.authorId\nLEFT JOIN \n    top_journals tj ON ic.authorId = tj.authorId\nLEFT JOIN \n    collaborations c ON ic.authorId = c.authorId\nWHERE \n    ct.quality_increasing = TRUE\nGROUP BY \n    ic.authorId, ic.authorName, ct.quality_increasing, tj.journalName, tj.publication_count, c.main_collaborating_institutions;\n```"
    },
    {
        "instance_id": "q_815",
        "db_id": "scholar_new",
        "question": "Which researchers have demonstrated a consistent year-over-year increase in the normalized quality score of their cited papers over the past five years? For these researchers, provide their names, the count of their publications in high-impact journals (with an impact factor greater than 5) or prestigious conferences during the same period, and any shifts in their primary research areas as reflected by changes in their normalized research interests over the past five years. Include the current and previous research interests for comparison.",
        "query": "```sql\nWITH citation_trend AS (\n    SELECT \n        w.authorId,\n        p.paperId,\n        p.year,\n        p.paper_quality_score_normalized AS quality_score,\n        ROW_NUMBER() OVER (PARTITION BY w.authorId ORDER BY p.year) AS row_num\n    FROM \n        writes w\n    JOIN \n        paper p ON w.paperId = p.paperId\n    WHERE \n        p.year BETWEEN EXTRACT(YEAR FROM CURRENT_DATE) - 5 AND EXTRACT(YEAR FROM CURRENT_DATE)\n),\nconsistent_increase AS (\n    SELECT \n        ct1.authorId\n    FROM \n        citation_trend ct1\n    JOIN \n        citation_trend ct2 ON ct1.authorId = ct2.authorId AND ct1.row_num + 1 = ct2.row_num\n    WHERE \n        ct2.quality_score > ct1.quality_score\n    GROUP BY \n        ct1.authorId\n    HAVING \n        COUNT(*) = 4\n),\npublication_activity AS (\n    SELECT \n        w.authorId,\n        j.journalName,\n        COUNT(w.paperId) AS publication_count\n    FROM \n        writes w\n    JOIN \n        paper p ON w.paperId = p.paperId\n    JOIN \n        venue v ON p.venueId = v.venueId\n    LEFT JOIN \n        journal j ON v.venueId = j.journalId\n    WHERE \n        p.year BETWEEN EXTRACT(YEAR FROM CURRENT_DATE) - 5 AND EXTRACT(YEAR FROM CURRENT_DATE)\n        AND (j.impact_factor > 5 OR v.venue_type = 'prestigious conference')\n    GROUP BY \n        w.authorId, j.journalName\n),\nresearch_interest_shift AS (\n    SELECT \n        a.authorId,\n        a.author_research_interests_normalized,\n        LAG(a.author_research_interests_normalized) OVER (PARTITION BY a.authorId ORDER BY a.author_last_updated) AS prev_interests\n    FROM \n        author a\n    WHERE \n        a.author_last_updated >= CURRENT_DATE - INTERVAL '5 years'\n)\nSELECT \n    c.authorId,\n    a.authorName,\n    pa.journalName,\n    pa.publication_count,\n    ri.author_research_interests_normalized AS current_interests,\n    ri.prev_interests\nFROM \n    consistent_increase c\nJOIN \n    author a ON c.authorId = a.authorId\nLEFT JOIN \n    publication_activity pa ON c.authorId = pa.authorId\nLEFT JOIN \n    research_interest_shift ri ON c.authorId = ri.authorId;\n```"
    },
    {
        "instance_id": "q_814",
        "db_id": "scholar_new",
        "question": "Which datasets have been most impactful in research papers published over the past five years, considering only open-access papers? Impact should be measured by the total quality of datasets (normalized paper-dataset quality scores), the average quality of citing papers (normalized citation quality scores), and the frequency of usage in these papers. Additionally, how do the usage patterns of these top 10 datasets vary across different conferences and journals, including the count of papers associated with each venue type? Please provide results ordered by dataset impact (total quality descending), usage frequency (count descending), and venue-specific paper counts (descending).",
        "query": "```sql\nWITH recent_papers AS (\n    SELECT \n        p.paperId,\n        p.venueId,\n        p.paper_quality_score_normalized,\n        c.cited_paper_quality_score_normalized,\n        pd.datasetId,\n        pd.paper_dataset_quality_score_normalized\n    FROM \n        paper p\n    JOIN \n        cite c ON p.paperId = c.citingPaperId\n    JOIN \n        paperDataset pd ON p.paperId = pd.paperId\n    WHERE \n        p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n        AND p.is_open_access = TRUE\n),\ndataset_impact AS (\n    SELECT \n        r.datasetId,\n        d.datasetName,\n        COUNT(r.paperId) AS usage_count,\n        AVG(r.paper_quality_score_normalized) AS avg_paper_quality,\n        AVG(r.cited_paper_quality_score_normalized) AS avg_citation_quality,\n        SUM(pd.paper_dataset_quality_score_normalized) AS total_dataset_quality\n    FROM \n        recent_papers r\n    JOIN \n        dataset d ON r.datasetId = d.datasetId\n    GROUP BY \n        r.datasetId, d.datasetName\n    ORDER BY \n        total_dataset_quality DESC, usage_count DESC\n    LIMIT 10\n),\nusage_pattern AS (\n    SELECT \n        di.datasetId,\n        v.venueName,\n        v.venue_type,\n        COUNT(rp.paperId) AS paper_count\n    FROM \n        dataset_impact di\n    JOIN \n        recent_papers rp ON di.datasetId = rp.datasetId\n    JOIN \n        venue v ON rp.venueId = v.venueId\n    GROUP BY \n        di.datasetId, v.venueName, v.venue_type\n)\nSELECT \n    di.datasetName,\n    di.usage_count,\n    di.avg_paper_quality,\n    di.avg_citation_quality,\n    di.total_dataset_quality,\n    up.venueName,\n    up.venue_type,\n    up.paper_count\nFROM \n    dataset_impact di\nJOIN \n    usage_pattern up ON di.datasetId = up.datasetId\nORDER BY \n    di.total_dataset_quality DESC, di.usage_count DESC, up.paper_count DESC;\n```"
    },
    {
        "instance_id": "q_822",
        "db_id": "scholar_new",
        "question": "在过去五年内，哪些作者发表了高质量的论文（论文质量评分归一化值大于0.8），并且这些论文引用了高影响力期刊（期刊影响因子大于3.0）中的其他论文，同时使用了数据集？请按照作者的研究兴趣领域和所属机构进行分类，并提供每位作者的H指数、总引用次数，以及他们所使用数据集的平均质量评分。",
        "query": "```sql\nWITH recent_high_quality_papers AS (\n    SELECT \n        w.authorId,\n        p.paperId,\n        p.numCitedBy AS citation_count,\n        pd.dataset_paper_count,\n        pd.paper_dataset_quality_score\n    FROM \n        paper p\n    INNER JOIN \n        writes w ON p.paperId = w.paperId\n    INNER JOIN \n        cite c ON p.paperId = c.citingPaperId\n    INNER JOIN \n        dataset d ON d.datasetId = ANY(\n            ARRAY(SELECT pd.datasetId FROM paperDataset pd WHERE pd.paperId = p.paperId)\n        )\n    INNER JOIN \n        journal j ON p.venueId = j.journalId\n    WHERE \n        p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n        AND p.paper_quality_score_normalized > 0.8\n        AND j.impact_factor > 3.0\n),\nauthor_stats AS (\n    SELECT \n        a.authorId,\n        a.authorName,\n        a.h_index,\n        a.affiliation,\n        a.author_research_interests,\n        SUM(rhq.citation_count) AS total_citations,\n        AVG(rhq.paper_dataset_quality_score) AS avg_dataset_quality_score\n    FROM \n        author a\n    INNER JOIN \n        recent_high_quality_papers rhq ON a.authorId = rhq.authorId\n    GROUP BY \n        a.authorId, a.authorName, a.h_index, a.affiliation, a.author_research_interests\n)\nSELECT \n    authorName,\n    affiliation,\n    author_research_interests,\n    h_index,\n    total_citations,\n    avg_dataset_quality_score\nFROM \n    author_stats\nORDER BY \n    author_research_interests, affiliation;\n```"
    },
    {
        "instance_id": "q_816",
        "db_id": "scholar_new",
        "question": "Which researchers have demonstrated an above-average increase in their normalized citation quality over the past five years, specifically among those with consistent publication activity in high-impact journals (defined as journals with an impact factor greater than the average impact factor across all journals)? Additionally, identify whether these researchers have experienced any shifts in their primary research areas during this period, by comparing their normalized research interests at the beginning and end of the five-year timeframe. Provide the researcher's name, their average normalized citation quality, the count of their publications in high-impact journals, and whether a shift in research interests has occurred (\"Shift Detected\" or \"No Shift\").",
        "query": "```sql\nWITH citation_quality_trend AS (\n    SELECT \n        w.authorId,\n        p.year,\n        AVG(p.paper_quality_score_normalized) AS avg_citation_quality\n    FROM \n        writes w\n    JOIN \n        paper p ON w.paperId = p.paperId\n    WHERE \n        p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n        AND p.is_open_access IS NOT NULL\n    GROUP BY \n        w.authorId, p.year\n    ORDER BY \n        w.authorId, p.year\n),\npublication_in_high_impact_journals AS (\n    SELECT \n        w.authorId,\n        j.impact_factor,\n        COUNT(p.paperId) AS high_impact_publications\n    FROM \n        writes w\n    JOIN \n        paper p ON w.paperId = p.paperId\n    JOIN \n        venue v ON p.venueId = v.venueId\n    JOIN \n        journal j ON v.venueId = j.journalId\n    WHERE \n        p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n        AND j.impact_factor > (SELECT AVG(impact_factor) FROM journal)\n    GROUP BY \n        w.authorId, j.impact_factor\n),\nresearch_interest_shift AS (\n    SELECT \n        a.authorId,\n        a.author_research_interests_normalized,\n        LAG(a.author_research_interests_normalized) OVER (PARTITION BY a.authorId ORDER BY a.author_last_updated) AS prev_research_interests\n    FROM \n        author a\n    WHERE \n        a.author_last_updated >= CURRENT_DATE - INTERVAL '5 years'\n)\nSELECT \n    cqt.authorId,\n    a.authorName,\n    cqt.avg_citation_quality,\n    pihij.high_impact_publications,\n    CASE \n        WHEN ri.prev_research_interests IS DISTINCT FROM ri.author_research_interests_normalized THEN 'Shift Detected'\n        ELSE 'No Shift'\n    END AS research_interest_change\nFROM \n    citation_quality_trend cqt\nJOIN \n    publication_in_high_impact_journals pihij ON cqt.authorId = pihij.authorId\nJOIN \n    research_interest_shift ri ON cqt.authorId = ri.authorId\nJOIN \n    author a ON cqt.authorId = a.authorId\nWHERE \n    cqt.avg_citation_quality > (\n        SELECT \n            AVG(avg_citation_quality)\n        FROM \n            citation_quality_trend\n    )\nGROUP BY \n    cqt.authorId, a.authorName, cqt.avg_citation_quality, pihij.high_impact_publications, ri.author_research_interests_normalized, ri.prev_research_interests\nORDER BY \n    cqt.authorId;\n```"
    },
    {
        "instance_id": "q_824",
        "db_id": "scholar_new",
        "question": "Which datasets are most frequently used in papers written by authors with a normalized paper quality score greater than 0.8, and what is the yearly citation trend of these papers over time? Additionally, provide the research interests of these authors and the venues where the papers were published, to understand the context of dataset usage. List the results by dataset usage frequency in descending order and by citation year.",
        "query": "```sql\nWITH high_quality_authors AS (\n    SELECT DISTINCT w.authorId\n    FROM writes w\n    JOIN paper p ON w.paperId = p.paperId\n    WHERE p.paper_quality_score_normalized > 0.8\n),\nauthor_interests AS (\n    SELECT ha.authorId, unnest(a.author_research_interests) AS research_interest\n    FROM high_quality_authors ha\n    JOIN author a ON ha.authorId = a.authorId\n),\ndataset_usage AS (\n    SELECT pd.datasetId, COUNT(pd.paperId) AS usage_count\n    FROM paperDataset pd\n    JOIN writes w ON pd.paperId = w.paperId\n    JOIN high_quality_authors hqa ON w.authorId = hqa.authorId\n    GROUP BY pd.datasetId\n    ORDER BY usage_count DESC\n    LIMIT 10\n),\ncitation_trends AS (\n    SELECT c.citedPaperId, EXTRACT(YEAR FROM c.paper_citation_trend) AS citation_year, COUNT(*) AS citation_count\n    FROM cite c\n    JOIN dataset_usage du ON c.citedPaperId = du.paperId\n    GROUP BY c.citedPaperId, citation_year\n    ORDER BY citation_year\n)\nSELECT \n    d.datasetName,\n    du.usage_count,\n    ai.research_interest,\n    v.venueName,\n    ct.citation_year,\n    ct.citation_count\nFROM dataset_usage du\nJOIN dataset d ON du.datasetId = d.datasetId\nLEFT JOIN paperDataset pd ON du.datasetId = pd.datasetId\nLEFT JOIN paper p ON pd.paperId = p.paperId\nLEFT JOIN venue v ON p.venueId = v.venueId\nLEFT JOIN writes w ON p.paperId = w.paperId\nLEFT JOIN author_interests ai ON w.authorId = ai.authorId\nLEFT JOIN citation_trends ct ON p.paperId = ct.citedPaperId\nORDER BY du.usage_count DESC, ct.citation_year;\n```"
    },
    {
        "instance_id": "q_818",
        "db_id": "scholar_new",
        "question": "哪些数据集在过去五年内被高影响力期刊上的学术论文广泛引用，并且这些数据集的年度引用次数呈现出持续增长趋势？此外，请提供这些数据集的引用质量分布（以论文质量评分的平均值衡量），以及它们在顶级期刊和会议中的使用频率（定义为至少成立10年的期刊或会议的数量）。",
        "query": "```sql\nWITH high_impact_papers AS (\n    SELECT p.paperId\n    FROM paper p\n    JOIN journal j ON p.venueId = j.journalId\n    WHERE j.impact_factor > (SELECT AVG(impact_factor) FROM journal)\n      AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5\n),\ndataset_citation_trend AS (\n    SELECT pd.datasetId, COUNT(pd.paperId) AS citation_count\n    FROM paperDataset pd\n    JOIN high_impact_papers hip ON pd.paperId = hip.paperId\n    GROUP BY pd.datasetId\n),\ndataset_growth AS (\n    SELECT dct.datasetId\n    FROM dataset_citation_trend dct\n    JOIN (\n        SELECT datasetId, LAG(citation_count) OVER (PARTITION BY datasetId ORDER BY year) AS prev_year_citations, citation_count\n        FROM (\n            SELECT pd.datasetId, EXTRACT(YEAR FROM p.paper_last_updated AT TIME ZONE 'UTC') AS year, COUNT(pd.paperId) AS citation_count\n            FROM paperDataset pd\n            JOIN paper p ON pd.paperId = p.paperId\n            GROUP BY pd.datasetId, EXTRACT(YEAR FROM p.paper_last_updated AT TIME ZONE 'UTC')\n        ) yearly_citations\n    ) yearly_growth\n    WHERE yearly_growth.citation_count > COALESCE(yearly_growth.prev_year_citations, 0)\n    GROUP BY dct.datasetId\n    HAVING COUNT(*) = 5\n),\ndataset_quality_distribution AS (\n    SELECT pd.datasetId, AVG(p.paper_quality_score_normalized) AS avg_quality_score\n    FROM paperDataset pd\n    JOIN paper p ON pd.paperId = p.paperId\n    GROUP BY pd.datasetId\n),\ntop_venues_usage AS (\n    SELECT pd.datasetId, COUNT(DISTINCT p.venueId) AS top_venue_count\n    FROM paperDataset pd\n    JOIN paper p ON pd.paperId = p.paperId\n    JOIN venue v ON p.venueId = v.venueId\n    WHERE v.venue_type IN ('journal', 'conference') AND v.venue_establishment_year < EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 10\n    GROUP BY pd.datasetId\n)\nSELECT d.datasetName, dcg.datasetId, dqd.avg_quality_score, tvu.top_venue_count\nFROM dataset d\nJOIN dataset_growth dcg ON d.datasetId = dcg.datasetId\nJOIN dataset_quality_distribution dqd ON d.datasetId = dqd.datasetId\nJOIN top_venues_usage tvu ON d.datasetId = tvu.datasetId\nORDER BY dcg.datasetId;\n```"
    },
    {
        "instance_id": "q_817",
        "db_id": "scholar_new",
        "question": "在过去一年内更新过的作者中，哪些作者在其最近三年发表的开放获取论文中表现出较高的标准化论文质量，并且其引用的论文在数据集使用方面具有显著的增长趋势？同时，这些数据集在过去六个月内也得到了更新，且平均下载量超过1000次。请按照引用论文的总标准化质量分数降序排列，并结合作者的最新论文质量进行排序，最终返回前10名作者及其相关信息，包括作者ID、姓名、H指数、论文发表数量、最新论文的标准化质量分数、引用论文的总标准化质量分数以及引用论文所使用数据集的平均下载量。",
        "query": "```sql\nSELECT \n    a.authorId,\n    a.authorName,\n    a.h_index,\n    a.publication_count,\n    p.paper_quality_score_normalized AS latest_paper_quality,\n    SUM(c.cited_paper_quality_score_normalized) AS total_cited_paper_quality,\n    AVG(d.dataset_download_count) AS avg_dataset_influence\nFROM \n    author a\nJOIN \n    writes w ON a.authorId = w.authorId\nJOIN \n    paper p ON w.paperId = p.paperId\nJOIN \n    cite c ON p.paperId = c.citingPaperId\nJOIN \n    paperDataset pd ON c.citedPaperId = pd.paperId\nJOIN \n    dataset d ON pd.datasetId = d.datasetId\nWHERE \n    a.author_last_updated >= NOW() - INTERVAL '1 year'\n    AND p.year >= EXTRACT(YEAR FROM NOW()) - 3\n    AND p.is_open_access = TRUE\n    AND d.dataset_last_updated >= NOW() - INTERVAL '6 months'\nGROUP BY \n    a.authorId, a.authorName, a.h_index, a.publication_count, p.paper_quality_score_normalized\nHAVING \n    COUNT(DISTINCT c.citedPaperId) > 5\n    AND AVG(d.dataset_download_count) > 1000\nORDER BY \n    total_cited_paper_quality DESC,\n    latest_paper_quality DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_823",
        "db_id": "scholar_new",
        "question": "Which datasets have been most frequently used in papers published over the past five years, where the papers have a high normalized citation quality score (greater than 0.8) and are authored by researchers with a strong focus on semantic parsing, as indicated by their normalized research interests? Please rank the datasets by their total usage count and return the top 10 results.",
        "query": "```sql\nSELECT d.datasetName, SUM(psd.dataset_paper_count) AS total_usage\nFROM paperDataset psd\nJOIN dataset d ON psd.datasetId = d.datasetId\nJOIN paper p ON psd.paperId = p.paperId\nJOIN writes w ON p.paperId = w.paperId\nJOIN author a ON w.authorId = a.authorId\nWHERE p.cited_paper_quality_score_normalized > 0.8\nAND a.author_research_interests_normalized @> ARRAY['semantic parsing']\nAND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5\nGROUP BY d.datasetName\nORDER BY total_usage DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_820",
        "db_id": "scholar_new",
        "question": "Which researchers, based on their publications in the past three years, have demonstrated a higher likelihood of shifting focus to emerging research areas, considering their engagement with datasets that have more than 100 downloads and venues updated since January 1, 2020? Additionally, analyze the normalized quality scores of citations received by these researchers, the count of papers associated with specific datasets, and the distribution trends of citations across different sources. Provide results sorted by the researchers' h-index in descending order, followed by the normalized quality score of citations and the count of dataset-associated papers. Include details about the researchers' normalized research interests, the year of their latest publication, and the citation source distribution trends.",
        "query": "```sql\nSELECT \n    a.authorId,\n    a.authorName,\n    a.publication_count,\n    a.h_index,\n    a.author_research_interests_normalized,\n    p.year AS latest_publication_year,\n    c.cited_paper_quality_score_normalized,\n    d.dataset_paper_count,\n    v.venueName,\n    c.paper_citation_source_normalized,\n    c.paper_citation_trend_normalized\nFROM \n    author a\nJOIN \n    writes w ON a.authorId = w.authorId\nJOIN \n    paper p ON w.paperId = p.paperId\nLEFT JOIN \n    cite c ON p.paperId = c.citedPaperId\nLEFT JOIN \n    paperDataset pd ON p.paperId = pd.paperId\nLEFT JOIN \n    dataset d ON pd.datasetId = d.datasetId\nJOIN \n    venue v ON p.venueId = v.venueId\nWHERE \n    p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 3\n    AND c.paper_citation_trend_normalized IS NOT NULL\n    AND d.dataset_download_count > 100\n    AND v.venue_last_updated >= '2020-01-01'\nGROUP BY \n    a.authorId, a.authorName, a.publication_count, a.h_index, a.author_research_interests_normalized, p.year, c.cited_paper_quality_score_normalized, d.dataset_paper_count, v.venueName, c.paper_citation_source_normalized, c.paper_citation_trend_normalized\nORDER BY \n    a.h_index DESC, c.cited_paper_quality_score_normalized DESC, d.dataset_paper_count DESC;\n```"
    },
    {
        "instance_id": "q_821",
        "db_id": "scholar_new",
        "question": "Which researchers, based on their publications in the past three years, have published more than five open-access papers with an average normalized paper quality score exceeding 0.8 and a total normalized quality score of linked datasets greater than 10? Additionally, consider the average impact factor of the venues where their papers were published and the average citation density of those venues (calculated as the number of citations per paper divided by the journal's publication volume). List the researchers in descending order of venue citation density, followed by venue impact factor, and then by the count of recent papers.",
        "query": "```sql\nSELECT \n    a.authorId,\n    a.authorName,\n    COUNT(p.paperId) AS recent_paper_count,\n    AVG(p.paper_quality_score_normalized) AS avg_paper_quality_score,\n    SUM(pd.paper_dataset_quality_score_normalized) AS total_dataset_quality_score,\n    AVG(j.impact_factor) AS avg_venue_impact_factor,\n    AVG(p.numCiting / (j.journal_publication_volume + 0.001)) AS avg_citation_density\nFROM \n    author a\nJOIN writes w ON a.authorId = w.authorId\nJOIN paper p ON w.paperId = p.paperId\nJOIN venue v ON p.venueId = v.venueId\nLEFT JOIN journal j ON v.venueId = j.journalId\nLEFT JOIN paperDataset pd ON p.paperId = pd.paperId\nWHERE \n    p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 3\n    AND p.is_open_access = TRUE\n    AND pd.dataset_paper_count > 0\nGROUP BY \n    a.authorId, a.authorName\nHAVING \n    COUNT(p.paperId) > 5\n    AND AVG(p.paper_quality_score_normalized) > 0.8\n    AND SUM(pd.paper_dataset_quality_score_normalized) > 10\nORDER BY \n    avg_citation_density DESC, avg_venue_impact_factor DESC, recent_paper_count DESC;\n```"
    },
    {
        "instance_id": "q_826",
        "db_id": "scholar_new",
        "question": "Which researchers have shown a consistent year-over-year increase in their normalized paper quality score over the past five years, specifically for papers published in this time frame that are associated with an open access status? Additionally, determine the number of publications these researchers have in top-tier journals or conferences (defined as venues with an impact factor above the average impact factor of all journals) during the same five-year period. Finally, identify any changes in their primary research areas by comparing their current research interests (as of the last five years) with their research interests prior to this period. Present the results ordered by the number of publications in top-tier venues in descending order.",
        "query": "```sql\nWITH citation_trend AS (\n    SELECT \n        w.authorId,\n        p.paperId,\n        p.year,\n        p.paper_quality_score_normalized AS quality_score,\n        ROW_NUMBER() OVER (PARTITION BY w.authorId ORDER BY p.year) AS row_num\n    FROM \n        writes w\n    JOIN \n        paper p ON w.paperId = p.paperId\n    WHERE \n        p.year BETWEEN EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5 AND EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC')\n        AND p.is_open_access IS NOT NULL\n),\nconsistent_increase AS (\n    SELECT \n        ct1.authorId\n    FROM \n        citation_trend ct1\n    JOIN \n        citation_trend ct2 ON ct1.authorId = ct2.authorId AND ct1.row_num + 1 = ct2.row_num\n    WHERE \n        ct2.quality_score > ct1.quality_score\n    GROUP BY \n        ct1.authorId\n    HAVING \n        COUNT(*) = 4\n),\ntop_venues AS (\n    SELECT \n        v.venueId\n    FROM \n        venue v\n    WHERE \n        v.impact_factor > (SELECT AVG(impact_factor) FROM journal)\n),\npublication_activity AS (\n    SELECT \n        w.authorId,\n        COUNT(w.paperId) AS top_venue_pubs\n    FROM \n        writes w\n    JOIN \n        paper p ON w.paperId = p.paperId\n    JOIN \n        top_venues tv ON p.venueId = tv.venueId\n    WHERE \n        p.year BETWEEN EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5 AND EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC')\n    GROUP BY \n        w.authorId\n),\nresearch_interest_shift AS (\n    SELECT \n        a.authorId,\n        STRING_AGG(DISTINCT a.author_research_interests, ', ') AS current_interests,\n        STRING_AGG(DISTINCT prev_interests.interest, ', ') AS previous_interests\n    FROM \n        author a\n    LEFT JOIN (\n        SELECT \n            w.authorId,\n            unnest(a.author_research_interests) AS interest\n        FROM \n            writes w\n        JOIN \n            paper p ON w.paperId = p.paperId\n        JOIN \n            author a ON w.authorId = a.authorId\n        WHERE \n            p.year < EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5\n    ) prev_interests ON a.authorId = prev_interests.authorId\n    WHERE \n        a.author_last_updated >= (CURRENT_TIMESTAMP AT TIME ZONE 'UTC' - INTERVAL '5 years')\n    GROUP BY \n        a.authorId\n)\nSELECT \n    ci.authorId,\n    a.authorName,\n    pa.top_venue_pubs,\n    ri.current_interests,\n    ri.previous_interests\nFROM \n    consistent_increase ci\nJOIN \n    publication_activity pa ON ci.authorId = pa.authorId\nJOIN \n    research_interest_shift ri ON ci.authorId = ri.authorId\nJOIN \n    author a ON ci.authorId = a.authorId\nORDER BY \n    pa.top_venue_pubs DESC;\n```"
    },
    {
        "instance_id": "q_825",
        "db_id": "scholar_new",
        "question": "在过去一年中，哪些作者在其研究领域中表现出较高的影响力？具体表现为：高引用质量分数（归一化论文质量分数大于0.8）、活跃的论文发表趋势（发表论文数量超过5篇），以及与特定数据集的强关联性（数据集相关论文的质量归一化分数大于0.7）。同时，请分析这些作者最近一年的研究兴趣变化情况，包括其研究兴趣的调整及其对所在领域的影响，并按照作者的h指数降序和发表论文数量降序进行排序。",
        "query": "```sql\nWITH influential_authors AS (\n    SELECT \n        w.authorId,\n        a.authorName,\n        a.h_index,\n        p.paper_quality_score_normalized,\n        pd.paper_dataset_quality_score_normalized,\n        COUNT(DISTINCT p.paperId) AS paper_count\n    FROM \n        writes w\n    JOIN \n        author a ON w.authorId = a.authorId\n    JOIN \n        paper p ON w.paperId = p.paperId\n    LEFT JOIN \n        paperDataset pd ON p.paperId = pd.paperId\n    WHERE \n        p.paper_quality_score_normalized > 0.8\n        AND pd.paper_dataset_quality_score_normalized > 0.7\n        AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 1\n    GROUP BY \n        w.authorId, a.authorName, a.h_index, p.paper_quality_score_normalized, pd.paper_dataset_quality_score_normalized\n    HAVING \n        COUNT(DISTINCT p.paperId) > 5\n),\nresearch_interest_changes AS (\n    SELECT \n        ia.authorId,\n        a.author_research_interests,\n        LAG(a.author_research_interests) OVER (PARTITION BY a.authorId ORDER BY a.author_last_updated) AS prev_research_interests,\n        a.author_last_updated\n    FROM \n        influential_authors ia\n    JOIN \n        author a ON ia.authorId = a.authorId\n    WHERE \n        a.author_last_updated >= NOW() - INTERVAL '1 year'\n)\nSELECT \n    ric.authorId,\n    a.authorName,\n    ric.author_research_interests,\n    ric.prev_research_interests,\n    ric.author_last_updated,\n    ia.h_index,\n    ia.paper_quality_score_normalized,\n    ia.paper_dataset_quality_score_normalized,\n    ia.paper_count\nFROM \n    research_interest_changes ric\nJOIN \n    influential_authors ia ON ric.authorId = ia.authorId\nJOIN \n    author a ON ric.authorId = a.authorId\nORDER BY \n    ia.h_index DESC, ia.paper_count DESC;\n```"
    },
    {
        "instance_id": "q_829",
        "db_id": "scholar_new",
        "question": "Identify deep learning publications that have marked significant advancements in the field since 2010, as indicated by a normalized paper quality score exceeding 0.8. For each publication, provide details including the title, year, number of citations (both citing and cited), venue name, venue type, and normalized citation trends across different venues and research areas. Additionally, analyze how the citations of these significant papers have evolved over time, considering the quality scores of both citing and cited papers. Investigate patterns in dataset usage by identifying datasets with a normalized quality score greater than 0.5 that are associated with these papers. Similarly, evaluate keyphrase relevance by examining keyphrases with a normalized weighted frequency greater than 0.3 linked to these publications. Present the results ordered by publication year in ascending order and by the number of citations in descending order for each year.",
        "query": "```sql\nWITH significant_papers AS (\n    SELECT \n        p.paperId,\n        p.title,\n        p.year,\n        p.numCiting,\n        p.numCitedBy,\n        p.paper_quality_score_normalized,\n        v.venueName,\n        v.venue_type,\n        a.author_research_interests_normalized\n    FROM \n        paper p\n    JOIN \n        venue v ON p.venueId = v.venueId\n    JOIN \n        writes w ON p.paperId = w.paperId\n    JOIN \n        author a ON w.authorId = a.authorId\n    WHERE \n        'deep learning' = ANY(a.author_research_interests_normalized)\n        AND p.paper_quality_score_normalized > 0.8\n        AND p.year >= 2010\n),\ncitation_trends AS (\n    SELECT \n        sp.paperId,\n        sp.title,\n        c.citingPaperId,\n        c.citedPaperId,\n        c.paper_citation_trend_normalized,\n        c.paper_citation_source_normalized,\n        c.citing_paper_quality_score_normalized,\n        c.cited_paper_quality_score_normalized\n    FROM \n        significant_papers sp\n    JOIN \n        cite c ON sp.paperId = c.citedPaperId\n),\ndataset_usage AS (\n    SELECT \n        pd.paperId,\n        d.datasetName,\n        pd.dataset_paper_count,\n        pd.paper_dataset_quality_score_normalized\n    FROM \n        paperDataset pd\n    JOIN \n        dataset d ON pd.datasetId = d.datasetId\n    WHERE \n        pd.paper_dataset_quality_score_normalized > 0.5\n),\nkeyphrase_relevance AS (\n    SELECT \n        pk.paperId,\n        k.keyphraseName,\n        pk.paper_keyphrase_weighted_frequency_normalized\n    FROM \n        paperKeyphrase pk\n    JOIN \n        keyphrase k ON pk.keyphraseId = k.keyphraseId\n    WHERE \n        pk.paper_keyphrase_weighted_frequency_normalized > 0.3\n)\nSELECT \n    st.paperId,\n    st.title,\n    st.year,\n    st.numCiting,\n    st.numCitedBy,\n    st.paper_quality_score_normalized,\n    st.venueName,\n    st.venue_type,\n    st.author_research_interests_normalized,\n    ct.paper_citation_trend_normalized,\n    ct.paper_citation_source_normalized,\n    ct.citing_paper_quality_score_normalized,\n    ct.cited_paper_quality_score_normalized,\n    du.datasetName,\n    du.dataset_paper_count,\n    du.paper_dataset_quality_score_normalized,\n    kr.keyphraseName,\n    kr.paper_keyphrase_weighted_frequency_normalized\nFROM \n    significant_papers st\nLEFT JOIN \n    citation_trends ct ON st.paperId = ct.citedPaperId\nLEFT JOIN \n    dataset_usage du ON st.paperId = du.paperId\nLEFT JOIN \n    keyphrase_relevance kr ON st.paperId = kr.paperId\nORDER BY \n    st.year ASC, st.numCiting DESC;\n```"
    },
    {
        "instance_id": "q_819",
        "db_id": "scholar_new",
        "question": "In which year was the earliest publication that gained above-average citations and was referenced by high-quality subsequent works (with normalized quality score greater than 0.8), marking the emergence of deep learning as a significant research area?",
        "query": "```sql\nSELECT p.year \nFROM paper p\nJOIN cite c ON p.paperId = c.citedPaperId\nWHERE c.citing_paper_quality_score_normalized > 0.8\n  AND p.numCitedBy > (SELECT AVG(numCitedBy) FROM paper)\nORDER BY p.year ASC\nLIMIT 1;\n```"
    },
    {
        "instance_id": "q_827",
        "db_id": "scholar_new",
        "question": "What are the research papers authored by Li Dong in 2016, including their titles and venues (conferences or journals), that have been cited by high-quality publications with a normalized quality score greater than 0.8? Additionally, provide the count of citations grouped by the distinct conferences and journals where these citing papers were published. Identify the key research topics and datasets associated with the cited papers, specifically focusing on datasets with more than 1000 downloads. Finally, sort the results in descending order based on the total number of citations received by each paper.",
        "query": "```sql\nWITH cited_papers AS (\n    SELECT \n        p.paperId,\n        p.title,\n        p.venueId,\n        p.year,\n        p.numCitedBy,\n        p.paper_quality_score_normalized,\n        v.venueName,\n        v.venue_type\n    FROM \n        paper p\n    JOIN \n        writes w ON p.paperId = w.paperId\n    JOIN \n        author a ON w.authorId = a.authorId\n    WHERE \n        a.authorName = 'Li Dong' \n        AND p.year = 2016\n), \nhigh_quality_citations AS (\n    SELECT \n        c.citedPaperId,\n        COUNT(c.citingPaperId) AS citation_count,\n        STRING_AGG(DISTINCT j.journalName, ', ') AS journal_names,\n        STRING_AGG(DISTINCT ve.venueName, ', ') AS conference_names\n    FROM \n        cite c\n    JOIN \n        paper cp ON c.citingPaperId = cp.paperId\n    LEFT JOIN \n        journal j ON cp.venueId = j.journalId\n    LEFT JOIN \n        venue ve ON cp.venueId = ve.venueId\n    WHERE \n        cp.paper_quality_score_normalized > 0.8\n    GROUP BY \n        c.citedPaperId\n), \npaper_topics_datasets AS (\n    SELECT \n        pk.paperId,\n        STRING_AGG(DISTINCT k.keyphraseName, ', ') AS key_topics,\n        STRING_AGG(DISTINCT d.datasetName, ', ') AS significant_datasets\n    FROM \n        paperKeyphrase pk\n    JOIN \n        keyphrase k ON pk.keyphraseId = k.keyphraseId\n    LEFT JOIN \n        paperDataset pd ON pk.paperId = pd.paperId\n    LEFT JOIN \n        dataset d ON pd.datasetId = d.datasetId\n    WHERE \n        d.dataset_download_count > 1000\n    GROUP BY \n        pk.paperId\n)\nSELECT \n    cp.paperId,\n    cp.title,\n    cp.year,\n    cp.venueName,\n    cp.venue_type,\n    hqc.citation_count,\n    hqc.journal_names,\n    hqc.conference_names,\n    pt.significant_datasets,\n    pt.key_topics\nFROM \n    cited_papers cp\nJOIN \n    high_quality_citations hqc ON cp.paperId = hqc.citedPaperId\nLEFT JOIN \n    paper_topics_datasets pt ON cp.paperId = pt.paperId\nORDER BY \n    cp.numCitedBy DESC;\n```"
    },
    {
        "instance_id": "q_830",
        "db_id": "scholar_new",
        "question": "Which researchers have achieved the highest growth in publication impact since 2005, as measured by the total normalized citation impact of their papers and the average prestige of the venues where their papers were published, considering only papers published in or after 2005? Please rank the researchers first by their total citation impact in descending order and then by the average venue prestige in descending order, and return the top 10 results.",
        "query": "```sql\nSELECT \n    a.authorId,\n    a.authorName,\n    SUM(p.numCitedBy * p.paper_quality_score_normalized) AS total_citation_impact,\n    AVG(j.impact_factor) AS avg_venue_prestige\nFROM \n    author a\nJOIN \n    writes w ON a.authorId = w.authorId\nJOIN \n    paper p ON w.paperId = p.paperId\nJOIN \n    venue v ON p.venueId = v.venueId\nLEFT JOIN \n    journal j ON v.venueId = j.journalId\nWHERE \n    p.year >= 2005\nGROUP BY \n    a.authorId, a.authorName\nORDER BY \n    total_citation_impact DESC, avg_venue_prestige DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_836",
        "db_id": "scholar_new",
        "question": "Which authors have published more than one paper on \"semantic parsing\" in top-tier venues (defined as venues with an impact factor greater than the 90th percentile of journal impact factors) since 2005, considering the normalized quality scores of their papers and the average normalized weighted frequency of relevant keyphrases, ranked by the total normalized quality score of their papers in descending order and then by the average keyphrase relevance in descending order, limited to the top 10 authors?",
        "query": "```sql\nSELECT \n    a.authorName, \n    SUM(p.paper_quality_score_normalized) AS total_quality_score,\n    COUNT(DISTINCT p.paperId) AS paper_count,\n    AVG(pk.paper_keyphrase_weighted_frequency_normalized) AS avg_keyphrase_relevance\nFROM \n    author a\nJOIN writes w ON a.authorId = w.authorId\nJOIN paper p ON w.paperId = p.paperId\nJOIN venue v ON p.venueId = v.venueId\nJOIN paperKeyphrase pk ON p.paperId = pk.paperId\nJOIN keyphrase k ON pk.keyphraseId = k.keyphraseId\nWHERE \n    v.impact_factor > (SELECT PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY journal.impact_factor) FROM journal)\n    AND p.year >= 2005\n    AND k.keyphraseName ILIKE '%semantic parsing%'\nGROUP BY \n    a.authorName\nHAVING \n    COUNT(DISTINCT p.paperId) > 1\nORDER BY \n    total_quality_score DESC, \n    avg_keyphrase_relevance DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_835",
        "db_id": "scholar_new",
        "question": "Which authors have the highest paper quality scores among papers published in journals with above-average impact factors after the year 2005? Additionally, provide the citation categories and sources for these papers, along with the evolution of the authors' research interests over time, including their latest updates. Present the results ordered by the paper quality score in descending order.",
        "query": "```sql\nWITH high_impact_journals AS (\n    SELECT journalId\n    FROM journal\n    WHERE impact_factor > (SELECT AVG(impact_factor) FROM journal)\n),\nauthor_citation_quality AS (\n    SELECT w.authorId, p.paperId, p.paper_quality_score, j.journalId\n    FROM writes w\n    JOIN paper p ON w.paperId = p.paperId\n    JOIN venue v ON p.venueId = v.venueId\n    JOIN high_impact_journals j ON v.venueId = j.journalId\n    WHERE p.year > 2005\n),\nauthor_max_citation_quality AS (\n    SELECT authorId, MAX(paper_quality_score) AS max_quality_score\n    FROM author_citation_quality\n    GROUP BY authorId\n),\ntop_authors AS (\n    SELECT acq.authorId, acq.paperId, acq.paper_quality_score\n    FROM author_citation_quality acq\n    JOIN author_max_citation_quality amcq ON acq.authorId = amcq.authorId\n        AND acq.paper_quality_score = amcq.max_quality_score\n),\ncitation_trends AS (\n    SELECT c.citedPaperId, STRING_AGG(c.paper_citation_category, ',') AS citation_categories, STRING_AGG(c.paper_citation_source, ',') AS citation_sources\n    FROM cite c\n    GROUP BY c.citedPaperId\n),\nresearch_interest_evolution AS (\n    SELECT a.authorId, a.author_research_interests, a.author_last_updated\n    FROM author a\n    WHERE a.authorId IN (SELECT DISTINCT authorId FROM top_authors)\n)\nSELECT ta.authorId, a.authorName, ta.paperId, ta.paper_quality_score, ct.citation_categories, ct.citation_sources, ri.author_research_interests, ri.author_last_updated\nFROM top_authors ta\nJOIN author a ON ta.authorId = a.authorId\nLEFT JOIN citation_trends ct ON ta.paperId = ct.citedPaperId\nLEFT JOIN research_interest_evolution ri ON ta.authorId = ri.authorId\nORDER BY ta.paper_quality_score DESC;\n```"
    },
    {
        "instance_id": "q_828",
        "db_id": "scholar_new",
        "question": "What is the total number of normalized quality-score citations received by Dan Makumbi's publications that are specifically related to the topic of \"genetic identity\", broken down by the venues where these papers were published and the years they were published in, ordered chronologically by year and in descending order of total citations for each year-venue combination?",
        "query": "```sql\nSELECT \n    p.venueId,\n    v.venueName,\n    p.year,\n    SUM(c.cited_paper_quality_score_normalized) AS total_citations\nFROM \n    paper p\nJOIN \n    writes w ON p.paperId = w.paperId\nJOIN \n    author a ON w.authorId = a.authorId\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nLEFT JOIN \n    venue v ON p.venueId = v.venueId\nWHERE \n    a.authorName = 'Dan Makumbi'\n    AND p.paper_keywords_normalized @> ARRAY['genetic identity']\nGROUP BY \n    p.venueId, v.venueName, p.year\nORDER BY \n    p.year, total_citations DESC;\n```"
    },
    {
        "instance_id": "q_831",
        "db_id": "scholar_new",
        "question": "What are the research areas that Oren Etzioni focuses on, and how have the number of his publications and the quality of citations evolved from the beginning of the past 10 years until now, broken down by year?",
        "query": "```sql\nSELECT \n    a.author_research_interests AS research_areas,\n    p.year AS publication_year,\n    c.citing_paper_quality_score_normalized AS citation_quality,\n    COUNT(p.paperId) AS publication_count\nFROM \n    author a\nJOIN \n    writes w ON a.authorId = w.authorId\nJOIN \n    paper p ON w.paperId = p.paperId\nLEFT JOIN \n    cite c ON p.paperId = c.citedPaperId\nWHERE \n    a.authorName = 'Oren Etzioni'\n    AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 10\nGROUP BY \n    a.author_research_interests, p.year, c.citing_paper_quality_score_normalized\nORDER BY \n    p.year ASC;\n```"
    },
    {
        "instance_id": "q_832",
        "db_id": "scholar_new",
        "question": "Which studies in the field of deep learning have referenced the ImageNet dataset, and how has the quality of these references evolved over time in terms of average paper quality score and total citations? Additionally, analyze the distribution of these studies across different venues, categorized by venue type, and identify the trends in the usage of ImageNet within high-impact journals, ordered by descending journal impact factor.",
        "query": "```sql\nWITH imagenet_papers AS (\n    SELECT \n        pd.paperId,\n        p.title,\n        p.year,\n        p.numCiting,\n        p.paper_quality_score_normalized AS paper_quality,\n        v.venueName,\n        v.venue_type,\n        j.journalName,\n        j.impact_factor\n    FROM \n        paperDataset pd\n    JOIN \n        paper p ON pd.paperId = p.paperId\n    LEFT JOIN \n        venue v ON p.venueId = v.venueId\n    LEFT JOIN \n        journal j ON v.venueId = j.journalId\n    WHERE \n        pd.datasetId = (SELECT datasetId FROM dataset WHERE datasetName = 'ImageNet')\n),\ncitation_quality_trends AS (\n    SELECT \n        ip.year,\n        AVG(ip.paper_quality) AS avg_paper_quality,\n        COUNT(*) AS paper_count,\n        SUM(ip.numCiting) AS total_citations\n    FROM \n        imagenet_papers ip\n    GROUP BY \n        ip.year\n    ORDER BY \n        ip.year\n),\nvenue_trends AS (\n    SELECT \n        ip.venueName,\n        ip.venue_type,\n        COUNT(*) AS paper_count\n    FROM \n        imagenet_papers ip\n    GROUP BY \n        ip.venueName, ip.venue_type\n),\njournal_impact_distribution AS (\n    SELECT \n        ip.journalName,\n        ip.impact_factor,\n        COUNT(*) AS paper_count\n    FROM \n        imagenet_papers ip\n    WHERE \n        ip.journalName IS NOT NULL\n    GROUP BY \n        ip.journalName, ip.impact_factor\n    ORDER BY \n        ip.impact_factor DESC\n)\nSELECT \n    cq.year,\n    cq.avg_paper_quality,\n    cq.paper_count,\n    cq.total_citations,\n    vt.venueName,\n    vt.venue_type,\n    vt.paper_count AS venue_paper_count,\n    ji.journalName,\n    ji.impact_factor,\n    ji.paper_count AS journal_paper_count\nFROM \n    citation_quality_trends cq\nLEFT JOIN \n    venue_trends vt ON cq.year = vt.year\nLEFT JOIN \n    journal_impact_distribution ji ON cq.year = ji.year;\n```"
    },
    {
        "instance_id": "q_837",
        "db_id": "scholar_new",
        "question": "Which research papers published within the last five years have the highest paper quality scores,引用了用户评分为4.0以上的高影响力 datasets, and were published in either top-tier journals with an impact factor greater than 10.0 or top-tier conferences? Additionally, consider the normalized trend of citations these papers received over time, and return the results sorted by paper quality score in descending order, followed by the normalized citation trend in descending order, limiting the output to the top 10 papers.",
        "query": "```sql\nSELECT \n    p.paperId, \n    p.title, \n    p.year, \n    p.paper_quality_score AS quality_score, \n    c.paper_citation_trend AS citation_trend, \n    d.datasetName AS dataset_name, \n    j.journalName AS journal_name\nFROM \n    paper p\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nJOIN \n    paperDataset pd ON p.paperId = pd.paperId\nJOIN \n    dataset d ON pd.datasetId = d.datasetId\nJOIN \n    venue v ON p.venueId = v.venueId\nLEFT JOIN \n    journal j ON v.venueId = j.journalId\nWHERE \n    p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5\n    AND d.dataset_user_rating > 4.0\n    AND (j.impact_factor > 10.0 OR v.venue_type IN ('top-tier conference', 'top-tier journal'))\nORDER BY \n    p.paper_quality_score DESC, \n    c.paper_citation_trend_normalized DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_833",
        "db_id": "scholar_new",
        "question": "在综合考虑论文的引用质量分数、所使用数据集的影响力以及关键词与论文内容的相关性得分的情况下，筛选出最具影响力的前10篇研究论文。具体要求如下：\n\n- 论文的引用质量分数（`paper_quality_score`）需作为衡量引用质量的核心指标。\n- 所使用数据集的影响力通过平均数据集质量分数（`paper_dataset_quality_score`）来评估。\n- 关键词与论文内容的相关性通过最大关键词加权频率归一化值（`paper_keyphrase_weighted_frequency_normalized`）来衡量。\n- 按照上述三个指标的优先级顺序进行排序，即依次按照引用质量分数降序、平均数据集影响力降序以及最大关键词相关性降序排列。\n- 最终输出论文ID、标题、引用质量分数、平均数据集影响力以及最大关键词相关性得分。",
        "query": "```sql\nSELECT \n    p.paperId,\n    p.title,\n    p.paper_quality_score AS citation_quality_score,\n    AVG(pd.paper_dataset_quality_score) AS avg_dataset_influence,\n    MAX(pks.paper_keyphrase_weighted_frequency_normalized) AS max_keyword_relevance\nFROM \n    paper p\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nJOIN \n    paperDataset pd ON p.paperId = pd.paperId\nJOIN \n    paperKeyphrase pks ON p.paperId = pks.paperId\nGROUP BY \n    p.paperId, p.title, p.paper_quality_score\nORDER BY \n    p.paper_quality_score DESC, \n    AVG(pd.paper_dataset_quality_score) DESC, \n    MAX(pks.paper_keyphrase_weighted_frequency_normalized) DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_847",
        "db_id": "scholar_new",
        "question": "Identify the top 100 most influential research papers published in the last five years, based on their citation quality and impact within their respective venues. Prioritize papers that demonstrate a strong positive trend in citation quality over time and are associated with high-quality datasets (rated above 4 by users). Include only papers with a normalized paper quality score greater than 0.8. For each paper, provide its ID, title, venue ID, venue name, publication year, number of citations, normalized paper quality score, normalized cited paper quality score, normalized citation trend score, dataset count, and dataset user rating. Additionally, aggregate distinct keyphrases associated with these papers to ensure they align with current research interests.",
        "query": "```sql\nSELECT \n    p.paperId,\n    p.title,\n    p.venueId,\n    v.venueName,\n    p.year,\n    p.numCiting,\n    p.paper_quality_score_normalized,\n    c.cited_paper_quality_score_normalized,\n    c.paper_citation_trend_normalized,\n    pd.dataset_paper_count,\n    d.dataset_user_rating,\n    STRING_AGG(DISTINCT k.keyphraseName, ', ') AS keyphrases\nFROM \n    paper p\nJOIN \n    venue v ON p.venueId = v.venueId\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nLEFT JOIN \n    paperDataset pd ON p.paperId = pd.paperId\nLEFT JOIN \n    dataset d ON pd.datasetId = d.datasetId\nLEFT JOIN \n    paperKeyphrase pk ON p.paperId = pk.paperId\nLEFT JOIN \n    keyphrase k ON pk.keyphraseId = k.keyphraseId\nWHERE \n    p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5\n    AND c.paper_citation_trend_normalized > 0\n    AND p.paper_quality_score_normalized > 0.8\n    AND (d.dataset_user_rating IS NULL OR d.dataset_user_rating > 4)\nGROUP BY \n    p.paperId, p.title, p.venueId, v.venueName, p.year, p.numCiting, p.paper_quality_score_normalized, c.cited_paper_quality_score_normalized, c.paper_citation_trend_normalized, pd.dataset_paper_count, d.dataset_user_rating\nORDER BY \n    c.paper_citation_trend_normalized DESC, p.paper_quality_score_normalized DESC, d.dataset_user_rating DESC\nLIMIT 100;\n```"
    },
    {
        "instance_id": "q_842",
        "db_id": "scholar_new",
        "question": "Which papers have the highest combined quality scores, considering the normalized citation trend over time, the impact factor of the venues where they were cited, and the aggregated normalized co-author contribution from the authors who wrote them, limited to the top 10 results?",
        "query": "```sql\nSELECT \n    p.paperId,\n    p.title,\n    p.paper_quality_score AS paper_quality,\n    c.paper_citation_trend_normalized AS citation_trend,\n    v.impact_factor AS venue_impact,\n    SUM(w.writes_co_author_contribution_normalized) AS author_research_impact\nFROM \n    paper p\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nJOIN \n    venue v ON p.venueId = v.venueId\nJOIN \n    writes w ON p.paperId = w.paperId\nGROUP BY \n    p.paperId, p.title, p.paper_quality_score, c.paper_citation_trend_normalized, v.impact_factor\nORDER BY \n    (p.paper_quality_score * c.paper_citation_trend_normalized * v.impact_factor * author_research_impact) DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_834",
        "db_id": "scholar_new",
        "question": "Which research topic, represented by keyphrases associated with papers published in high-impact journals (journals with an impact factor greater than the average impact factor of all journals) over the past five years, has received the greatest increase in scholarly attention, as measured by the sum of normalized weighted keyphrase frequencies in papers that are among the top 10% most cited papers overall?",
        "query": "```sql\nWITH high_impact_journals AS (\n    SELECT journalId\n    FROM journal\n    WHERE impact_factor > (SELECT AVG(impact_factor) FROM journal)\n),\nmost_cited_papers AS (\n    SELECT p.paperId, p.title, p.year, pk.keyphraseId, pk.paper_keyphrase_weighted_frequency_normalized\n    FROM paper p\n    JOIN writes w ON p.paperId = w.paperId\n    JOIN author a ON w.authorId = a.authorId\n    JOIN venue v ON p.venueId = v.venueId\n    JOIN high_impact_journals hj ON v.venueId = hj.journalId\n    JOIN paperKeyphrase pk ON p.paperId = pk.paperId\n    WHERE p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n      AND p.numCitedBy > (SELECT PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY numCitedBy) FROM paper)\n),\nresearch_topic_growth AS (\n    SELECT keyphraseId, SUM(paper_keyphrase_weighted_frequency_normalized) AS total_attention\n    FROM most_cited_papers\n    GROUP BY keyphraseId\n)\nSELECT k.keyphraseName\nFROM research_topic_growth rg\nJOIN keyphrase k ON rg.keyphraseId = k.keyphraseId\nORDER BY rg.total_attention DESC\nLIMIT 1;\n```"
    },
    {
        "instance_id": "q_841",
        "db_id": "scholar_new",
        "question": "Which research papers, published in venues with a growing citation density trend, have been cited by more than 100 other works within the last five years, and what are their citation counts and average quality scores of the citing papers? Additionally, include the papers' titles, publication years, and venue names, ordered by the total number of citations in descending order and then by the average quality score of citations in descending order, while considering the relevance of keyphrases associated with these papers. Limit the results to the top 100 papers.",
        "query": "```sql\nSELECT \n    p.paperId,\n    p.title,\n    p.year,\n    v.venueName,\n    COUNT(c.citedPaperId) AS citation_count,\n    AVG(c.citing_paper_quality_score_normalized) AS avg_citation_quality\nFROM \n    paper p\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nJOIN \n    venue v ON p.venueId = v.venueId\nJOIN \n    paperKeyphrase pk ON p.paperId = pk.paperId\nWHERE \n    c.citingPaperId IN (\n        SELECT citingPaperId \n        FROM cite \n        WHERE year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5\n    )\n    AND v.venueId IN (\n        SELECT venueId \n        FROM venue \n        WHERE venue_type = 'growing_citation_density'\n    )\nGROUP BY \n    p.paperId, p.title, p.year, v.venueName\nHAVING \n    COUNT(c.citedPaperId) > 100\nORDER BY \n    citation_count DESC, avg_citation_quality DESC\nLIMIT 100;\n```"
    },
    {
        "instance_id": "q_838",
        "db_id": "scholar_new",
        "question": "Which research papers published in the past five years have received the highest quality citations, as measured by the normalized quality scores of their citation sources, while also considering the average normalized quality scores of related datasets, and excluding any papers with a non-positive trending impact on their citation sources? Please rank the results first by total quality citations in descending order and then by average dataset quality in descending order, and limit the output to the top 10 papers.",
        "query": "```sql\nSELECT \n    p.paperId,\n    p.title,\n    SUM(c.cited_paper_quality_score_normalized) AS total_quality_citations,\n    AVG(pd.paper_dataset_quality_score_normalized) AS avg_dataset_quality\nFROM \n    paper p\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nJOIN \n    paperDataset pd ON p.paperId = pd.paperId\nWHERE \n    c.paper_citation_trend_normalized > 0\n    AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5\nGROUP BY \n    p.paperId, p.title\nORDER BY \n    total_quality_citations DESC, avg_dataset_quality DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_839",
        "db_id": "scholar_new",
        "question": "Which research papers have the highest normalized citation quality scores, are most frequently associated with datasets having a user rating greater than 4.0, and exhibit the highest average normalized weighted frequency of keyphrases, while also considering only papers with a positive normalized citation trend over time? Please rank the results first by descending normalized citation quality score, then by descending total associations with high-impact datasets, and finally by descending average keyphrase relevance, limiting the output to the top 10 papers.",
        "query": "```sql\nSELECT \n    p.paperId,\n    p.title,\n    p.paper_quality_score_normalized AS citation_quality_score,\n    SUM(pd.dataset_paper_count) AS total_high_impact_dataset_associations,\n    AVG(pkw.paper_keyphrase_weighted_frequency_normalized) AS avg_keyphrase_relevance\nFROM \n    paper p\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nJOIN \n    paperDataset pd ON p.paperId = pd.paperId\nJOIN \n    dataset d ON pd.datasetId = d.datasetId\nJOIN \n    paperKeyphrase pkw ON p.paperId = pkw.paperId\nWHERE \n    d.dataset_user_rating > 4.0 -- Assuming high-impact datasets have a user rating greater than 4.0\n    AND c.paper_citation_trend_normalized > 0 -- Positive citation trend over time\n    AND p.paper_quality_score_normalized IS NOT NULL\nGROUP BY \n    p.paperId, p.title, p.paper_quality_score_normalized\nORDER BY \n    p.paper_quality_score_normalized DESC, \n    total_high_impact_dataset_associations DESC, \n    avg_keyphrase_relevance DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_840",
        "db_id": "scholar_new",
        "question": "Which research papers have the highest average quality of citations, considering both the normalized quality score of citing papers and the normalized trend of citations over time, ranked in descending order of these metrics?",
        "query": "```sql\nSELECT \n    p.paperId,\n    p.title,\n    AVG(c.citing_paper_quality_score_normalized) AS avg_citing_paper_quality,\n    c.paper_citation_trend_normalized AS citation_trend_score\nFROM \n    paper p\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nGROUP BY \n    p.paperId, p.title, c.paper_citation_trend_normalized\nORDER BY \n    avg_citing_paper_quality DESC, citation_trend_score DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_844",
        "db_id": "scholar_new",
        "question": "Which research papers published in the past five years have received more than 10 distinct citations, where the average quality score of citing papers exceeds 0.8, and demonstrate above-average interaction with datasets? Additionally, provide the title, publication year, normalized paper quality score, total count of distinct citations, average quality of citations, relevant keyphrases, total dataset usage count, and average normalized quality score of associated datasets for these papers, sorted primarily by descending average citation quality and secondarily by descending total dataset usage.",
        "query": "```sql\nSELECT \n    p.paperId,\n    p.title,\n    p.year,\n    p.paper_quality_score_normalized,\n    COUNT(DISTINCT c.citedPaperId) AS citation_count,\n    AVG(c.citing_paper_quality_score_normalized) AS avg_citation_quality,\n    STRING_AGG(DISTINCT k.keyphraseName, ', ') AS keyphrases,\n    SUM(pd.dataset_paper_count) AS total_dataset_usage,\n    AVG(pd.paper_dataset_quality_score_normalized) AS avg_dataset_quality\nFROM \n    paper p\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nJOIN \n    paperKeyphrase pk ON p.paperId = pk.paperId\nJOIN \n    keyphrase k ON pk.keyphraseId = k.keyphraseId\nLEFT JOIN \n    paperDataset pd ON p.paperId = pd.paperId\nWHERE \n    p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5\n    AND c.citing_paper_quality_score_normalized > 0.8\n    AND pd.dataset_paper_count > (SELECT AVG(dataset_paper_count) FROM paperDataset)\nGROUP BY \n    p.paperId, p.title, p.year, p.paper_quality_score_normalized\nHAVING \n    COUNT(DISTINCT c.citedPaperId) > 10\nORDER BY \n    avg_citation_quality DESC, total_dataset_usage DESC;\n```"
    },
    {
        "instance_id": "q_843",
        "db_id": "scholar_new",
        "question": "Which papers have the highest citation quality scores, are most frequently associated with datasets having a user rating of 4.0 or above, and exhibit a positive citation trend over time, while also considering the diversity of keyphrases used in the paper? The results should be ranked first by citation quality score in descending order, then by the total number of dataset associations in descending order, and finally by the average dataset rating in descending order, limited to the top 10 papers.",
        "query": "```sql\nSELECT \n    p.paperId,\n    p.title,\n    p.paper_quality_score AS citation_quality_score,\n    SUM(pd.dataset_paper_count) AS total_dataset_associations,\n    AVG(d.dataset_user_rating) AS avg_dataset_rating,\n    COUNT(DISTINCT pk.keyphraseId) AS keyphrase_count\nFROM \n    paper p\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nJOIN \n    paperDataset pd ON p.paperId = pd.paperId\nJOIN \n    dataset d ON pd.datasetId = d.datasetId\nLEFT JOIN \n    paperKeyphrase pk ON p.paperId = pk.paperId\nWHERE \n    d.dataset_user_rating >= 4.0 -- Assuming high-impact datasets have a rating of 4.0 or above\n    AND c.paper_citation_trend_normalized > 0 -- Positive citation trend over time\nGROUP BY \n    p.paperId, p.title, p.paper_quality_score\nORDER BY \n    p.paper_quality_score DESC, \n    total_dataset_associations DESC, \n    avg_dataset_rating DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_851",
        "db_id": "scholar_new",
        "question": "Which research papers, published in the past five years and focusing on advanced parsing methodologies, have the highest citation quality scores, are most frequently associated with high-impact datasets (rated 4.5 or above), and exhibit a strong citation trend over the past five years? Additionally, consider the relevance of keyphrases related to advanced parsing techniques in determining the papers' overall ranking. Return the top 10 results.",
        "query": "```sql\nSELECT \n    p.paperId,\n    p.title,\n    p.paper_quality_score AS citation_quality_score,\n    SUM(pd.dataset_paper_count) AS total_high_impact_datasets,\n    AVG(p.paper_keywords_similarity_score) AS keyphrase_relevance_score,\n    c.paper_citation_trend_normalized AS citation_trend_score\nFROM \n    paper p\nJOIN \n    paperKeyphrase pk ON p.paperId = pk.paperId\nJOIN \n    keyphrase k ON pk.keyphraseId = k.keyphraseId\nLEFT JOIN \n    paperDataset pd ON p.paperId = pd.paperId\nJOIN \n    dataset d ON pd.datasetId = d.datasetId\nLEFT JOIN \n    cite c ON p.paperId = c.citedPaperId\nWHERE \n    k.keyphraseName ILIKE '%advanced parsing%'\n    AND d.dataset_user_rating >= 4.5\n    AND p.year BETWEEN EXTRACT(YEAR FROM CURRENT_TIMESTAMP - INTERVAL '5 years') AND EXTRACT(YEAR FROM CURRENT_TIMESTAMP)\nGROUP BY \n    p.paperId, p.title, p.paper_quality_score, c.paper_citation_trend_normalized\nORDER BY \n    p.paper_quality_score DESC, total_high_impact_datasets DESC, citation_trend_score DESC, keyphrase_relevance_score DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_848",
        "db_id": "scholar_new",
        "question": "Which paper authored by Ohad Shamir has the highest citation quality score, considering only papers that have been cited more than 50 times and were published in journals with an impact factor greater than 2.0? Additionally, provide the citation trend of this paper over the last five years, ensuring the trend data is within the past five years from the current UTC timestamp.",
        "query": "```sql\nSELECT \n    p.paperId, \n    p.title, \n    p.paper_quality_score AS citation_quality_score, \n    c.paper_citation_trend AS citation_trend\nFROM \n    paper p\nJOIN \n    writes w ON p.paperId = w.paperId\nJOIN \n    author a ON w.authorId = a.authorId\nJOIN \n    journal j ON p.venueId = j.journalId\nLEFT JOIN \n    cite c ON p.paperId = c.citedPaperId\nWHERE \n    a.authorName = 'Ohad Shamir' \n    AND p.numCitedBy > 50 \n    AND j.impact_factor > 2.0 \n    AND EXTRACT(YEAR FROM AGE(CURRENT_TIMESTAMP AT TIME ZONE 'UTC', c.paper_citation_trend::timestamp)) <= 5\nGROUP BY \n    p.paperId, p.title, p.paper_quality_score, c.paper_citation_trend\nORDER BY \n    p.paper_quality_score DESC\nLIMIT 1;\n```"
    },
    {
        "instance_id": "q_846",
        "db_id": "scholar_new",
        "question": "Which paper authored by Ohad Shamir has the highest citation quality score, considering both the overall impact and the distribution across high-impact journals and conferences published in the last five years? High-impact is defined as having an impact factor greater than the average impact factor of all journals.",
        "query": "```sql\nSELECT \n    p.paperId, \n    p.title, \n    p.paper_quality_score AS citation_quality_score\nFROM \n    paper p\nJOIN \n    writes w ON p.paperId = w.paperId\nJOIN \n    author a ON w.authorId = a.authorId\nJOIN \n    venue v ON p.venueId = v.venueId\nWHERE \n    a.authorName = 'Ohad Shamir'\n    AND p.year BETWEEN EXTRACT(YEAR FROM CURRENT_DATE) - 5 AND EXTRACT(YEAR FROM CURRENT_DATE)\n    AND (v.venue_type = 'journal' OR v.venue_type = 'conference')\n    AND EXISTS (\n        SELECT 1 \n        FROM journal j \n        WHERE j.journalId = v.venueId \n        AND j.impact_factor > (SELECT AVG(impact_factor) FROM journal)\n    )\nORDER BY \n    p.paper_quality_score DESC\nLIMIT 1;\n```"
    },
    {
        "instance_id": "q_845",
        "db_id": "scholar_new",
        "question": "Which paper authored by Ohad Shamir has the highest normalized citation quality score, considering both the overall trend and the distribution across different sources? Additionally, compare this paper's citation quality score to the average normalized citation quality score of all papers published in the same venue over the past five years, and calculate the difference between these two scores.",
        "query": "WITH paper_citation_quality AS (\n    SELECT \n        p.paperId,\n        p.title,\n        p.venueId,\n        p.year,\n        c.cited_paper_quality_score_normalized AS citation_quality_score,\n        ROW_NUMBER() OVER (PARTITION BY w.authorId ORDER BY c.cited_paper_quality_score_normalized DESC) AS rank\n    FROM \n        paper p\n    JOIN \n        cite c ON p.paperId = c.citedPaperId\n    JOIN \n        writes w ON p.paperId = w.paperId\n    JOIN \n        author a ON w.authorId = a.authorId\n    WHERE \n        a.authorName = 'Ohad Shamir'\n),\nhighest_citation_paper AS (\n    SELECT \n        pcq.paperId,\n        pcq.title,\n        pcq.venueId,\n        pcq.citation_quality_score\n    FROM \n        paper_citation_quality pcq\n    WHERE \n        pcq.rank = 1\n),\nvenue_avg_citation_quality AS (\n    SELECT \n        p.venueId,\n        AVG(c.cited_paper_quality_score_normalized) AS avg_citation_quality\n    FROM \n        paper p\n    JOIN \n        cite c ON p.paperId = c.citedPaperId\n    WHERE \n        p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n    GROUP BY \n        p.venueId\n)\nSELECT \n    hcp.paperId,\n    hcp.title,\n    hcp.citation_quality_score,\n    vacq.avg_citation_quality,\n    (hcp.citation_quality_score - vacq.avg_citation_quality) AS citation_quality_difference\nFROM \n    highest_citation_paper hcp\nJOIN \n    venue_avg_citation_quality vacq ON hcp.venueId = vacq.venueId;"
    },
    {
        "instance_id": "q_849",
        "db_id": "scholar_new",
        "question": "Which research paper authored by Ohad Shamir within the past five years has the highest overall quality score, considering both the paper's citation quality score and the normalized trend of citations? Additionally, compare the engagement of this paper with datasets and key research phrases to his other works during the same period, by counting the number of associated datasets and keyphrases for each paper.",
        "query": "```sql\nWITH ohad_papers AS (\n    SELECT \n        p.paperId,\n        p.title,\n        p.paper_quality_score AS overall_quality_score,\n        c.paper_citation_trend_normalized AS citation_trend_score,\n        p.numCiting,\n        p.year\n    FROM \n        paper p\n    JOIN \n        writes w ON p.paperId = w.paperId\n    JOIN \n        author a ON w.authorId = a.authorId\n    LEFT JOIN \n        cite c ON p.paperId = c.citedPaperId\n    WHERE \n        a.authorName = 'Ohad Shamir'\n        AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n),\nhighest_citation_paper AS (\n    SELECT \n        paperId,\n        title,\n        overall_quality_score,\n        citation_trend_score,\n        numCiting\n    FROM \n        ohad_papers\n    ORDER BY \n        overall_quality_score DESC, \n        citation_trend_score DESC\n    LIMIT 1\n),\ndataset_engagement AS (\n    SELECT \n        pd.paperId,\n        COUNT(pd.datasetId) AS dataset_count\n    FROM \n        paperDataset pd\n    JOIN \n        ohad_papers op ON pd.paperId = op.paperId\n    GROUP BY \n        pd.paperId\n),\nkeyphrase_engagement AS (\n    SELECT \n        pk.paperId,\n        COUNT(pk.keyphraseId) AS keyphrase_count\n    FROM \n        paperKeyphrase pk\n    JOIN \n        ohad_papers op ON pk.paperId = op.paperId\n    GROUP BY \n        pk.paperId\n)\nSELECT \n   hcp.paperId,\n    hcp.title,\n    hcp.overall_quality_score,\n    hcp.citation_trend_score,\n    hcp.numCiting,\n    COALESCE(de.dataset_count, 0) AS dataset_engagement,\n    COALESCE(ke.keyphrase_count, 0) AS keyphrase_engagement\nFROM \n    highest_citation_paper hcp\nLEFT JOIN \n    dataset_engagement de ON hcp.paperId = de.paperId\nLEFT JOIN \n    keyphrase_engagement ke ON hcp.paperId = ke.paperId;\n```"
    },
    {
        "instance_id": "q_856",
        "db_id": "scholar_new",
        "question": "Which research paper authored by Ohad Shamir achieves the highest influence score, calculated as a weighted combination of citation frequency (40%), paper quality score (30%), citation trend over the past five years (20%), and the impact factor of the publication venue (10%)? The paper must also be relevant to the key research topic of \"machine learning\".",
        "query": "```sql\nSELECT \n    p.paperId,\n    p.title,\n    (p.numCiting * 0.4 + p.paper_quality_score * 0.3 + COALESCE(c.citation_trend_score, 0) * 0.2 + COALESCE(v.impact_factor, 0) * 0.1) AS influence_score\nFROM \n    paper p\nJOIN \n    writes w ON p.paperId = w.paperId\nJOIN \n    author a ON w.authorId = a.authorId\nLEFT JOIN \n    (SELECT \n         citingPaperId, \n         SUM(citing_paper_quality_score_normalized) AS citation_trend_score\n     FROM \n         cite\n     WHERE \n         EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM TO_TIMESTAMP(paper_citation_source_normalized)) <= 5\n     GROUP BY \n         citingPaperId) c ON p.paperId = c.citingPaperId\nLEFT JOIN \n    venue v ON p.venueId = v.venueId\nWHERE \n    a.authorName = 'Ohad Shamir'\n    AND 'machine learning' = ANY(p.paper_keywords_normalized)\nORDER BY \n    influence_score DESC\nLIMIT 1;\n```"
    },
    {
        "instance_id": "q_850",
        "db_id": "scholar_new",
        "question": "Which paper authored by Ohad Shamir has the highest citation quality score, considering both the overall trend and the normalized quality scores across different sources, within the past five years? Additionally, compare the citation quality score of this paper to the average citation quality score of all papers published in the same venue during the same five-year period. Provide the difference between the highest citation quality score and the average citation quality score for the venue.",
        "query": "```sql\nWITH ohad_papers AS (\n    SELECT \n        p.paperId,\n        p.title,\n        p.numCiting,\n        p.paper_quality_score AS paper_quality,\n        c.cited_paper_quality_score_normalized AS citation_quality_score,\n        v.venueName\n    FROM \n        paper p\n    JOIN \n        writes w ON p.paperId = w.paperId\n    JOIN \n        author a ON w.authorId = a.authorId\n    LEFT JOIN \n        cite c ON p.paperId = c.citedPaperId\n    JOIN \n        venue v ON p.venueId = v.venueId\n    WHERE \n        a.authorName = 'Ohad Shamir'\n        AND p.paper_last_updated AT TIME ZONE 'UTC' >= NOW() AT TIME ZONE 'UTC' - INTERVAL '5 years'\n),\nhighest_citation_paper AS (\n    SELECT \n        paperId,\n        title,\n        MAX(citation_quality_score) AS max_citation_quality_score\n    FROM \n        ohad_papers\n    GROUP BY \n        paperId, title\n    ORDER BY \n        max_citation_quality_score DESC\n    LIMIT 1\n),\navg_venue_citation_quality AS (\n    SELECT \n        v.venueId,\n        AVG(c.cited_paper_quality_score_normalized) AS avg_citation_quality\n    FROM \n        paper p\n    JOIN \n        cite c ON p.paperId = c.citedPaperId\n    JOIN \n        venue v ON p.venueId = v.venueId\n    WHERE \n        p.paper_last_updated AT TIME ZONE 'UTC' >= NOW() AT TIME ZONE 'UTC' - INTERVAL '5 years'\n    GROUP BY \n        v.venueId\n)\nSELECT \n    hp.paperId,\n    hp.title,\n    hp.max_citation_quality_score,\n    av.avg_citation_quality,\n    (hp.max_citation_quality_score - av.avg_citation_quality) AS quality_difference\nFROM \n    highest_citation_paper hp\nJOIN \n    paper p ON hp.paperId = p.paperId\nJOIN \n    avg_venue_citation_quality av ON p.venueId = av.venueId;\n```"
    },
    {
        "instance_id": "q_853",
        "db_id": "scholar_new",
        "question": "Which research paper authored by Ohad Shamir has received the highest total quality citations over the past five years, considering the normalized quality scores of citation sources, and how does this impact his overall publication influence?",
        "query": "```sql\nSELECT \n    p.paperId, \n    p.title, \n    SUM(c.cited_paper_quality_score_normalized) AS total_quality_citations\nFROM \n    paper p\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nJOIN \n    writes w ON p.paperId = w.paperId\nJOIN \n    author a ON w.authorId = a.authorId\nWHERE \n    a.authorName = 'Ohad Shamir'\n    AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\nGROUP BY \n    p.paperId, p.title\nORDER BY \n    total_quality_citations DESC\nLIMIT 1;\n```"
    },
    {
        "instance_id": "q_852",
        "db_id": "scholar_new",
        "question": "Which authors had the highest influence in computer vision research in 2007, as measured by both the number of papers published at major conferences and the average quality of those papers? Please consider only authors whose normalized research interests explicitly include \"computer vision\".",
        "query": "```sql\nSELECT \n    a.authorId,\n    a.authorName,\n    SUM(w.co_author_count) AS total_co_authors,\n    COUNT(p.paperId) AS total_papers,\n    AVG(p.paper_quality_score_normalized) AS avg_paper_quality\nFROM \n    author a\nJOIN \n    writes w ON a.authorId = w.authorId\nJOIN \n    paper p ON w.paperId = p.paperId\nJOIN \n    venue v ON p.venueId = v.venueId\nWHERE \n    v.venue_type = 'conference'\n    AND p.year = 2007\n    AND 'computer vision' = ANY(a.author_research_interests_normalized)\nGROUP BY \n    a.authorId, a.authorName\nORDER BY \n    total_papers DESC, avg_paper_quality DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_859",
        "db_id": "scholar_new",
        "question": "Which researchers authored publications at the CVPR conference in 2007, and how do their citation trends across all conferences in the same year compare? Additionally, identify any patterns in their research interests or affiliations that might explain their focus on computer vision during this period, including the conferences they participated in and the corresponding citations received.",
        "query": "```sql\nWITH cvpr_authors AS (\n    SELECT DISTINCT w.authorId, a.authorName, a.affiliation, a.author_research_interests\n    FROM writes w\n    JOIN paper p ON w.paperId = p.paperId\n    JOIN venue v ON p.venueId = v.venueId\n    JOIN author a ON w.authorId = a.authorId\n    WHERE v.venueName = 'CVPR' AND p.year = 2007\n),\ncitation_trends AS (\n    SELECT w.authorId, p.venueId, v.venueName, SUM(c.citing_paper_quality_score_normalized) AS total_citations\n    FROM writes w\n    JOIN paper p ON w.paperId = p.paperId\n    JOIN cite c ON p.paperId = c.citedPaperId\n    JOIN venue v ON p.venueId = v.venueId\n    WHERE p.year = 2007\n    GROUP BY w.authorId, p.venueId, v.venueName\n),\nresearch_patterns AS (\n    SELECT ca.authorId, ca.authorName, ca.affiliation, ca.author_research_interests,\n           STRING_AGG(DISTINCT ct.venueName, ', ') AS conferences_participated,\n           STRING_AGG(DISTINCT ct.total_citations::text, ', ') AS citations_per_conference\n    FROM cvpr_authors ca\n    LEFT JOIN citation_trends ct ON ca.authorId = ct.authorId\n    GROUP BY ca.authorId, ca.authorName, ca.affiliation, ca.author_research_interests\n)\nSELECT rp.authorId, rp.authorName, rp.affiliation, rp.author_research_interests,\n       rp.conferences_participated, rp.citations_per_conference\nFROM research_patterns rp;\n```"
    },
    {
        "instance_id": "q_854",
        "db_id": "scholar_new",
        "question": "Which authors had the highest impact in CVPR 2007, based on both the number of papers published and the total citations received, considering only those whose paper quality score was above the average for that year?",
        "query": "```sql\nWITH avg_citation_quality AS (\n    SELECT AVG(p.paper_quality_score) AS avg_quality\n    FROM paper p\n    JOIN venue v ON p.venueId = v.venueId\n    WHERE v.venueName = 'CVPR' AND p.year = 2007\n)\nSELECT w.authorId, a.authorName, COUNT(w.paperId) AS paper_count, SUM(p.numCitedBy) AS total_citations\nFROM writes w\nJOIN paper p ON w.paperId = p.paperId\nJOIN venue v ON p.venueId = v.venueId\nJOIN author a ON w.authorId = a.authorId\nWHERE v.venueName = 'CVPR' \n  AND p.year = 2007 \n  AND p.paper_quality_score > (SELECT avg_quality FROM avg_citation_quality)\nGROUP BY w.authorId, a.authorName\nORDER BY paper_count DESC, total_citations DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_857",
        "db_id": "scholar_new",
        "question": "Which authors at CVPR 2007 had the highest research impact, measured by both the number of publications and the total citations received for those publications within the conference?",
        "query": "```sql\nSELECT \n    a.authorName, \n    COUNT(w.paperId) AS publication_count, \n    SUM(p.numCitedBy) AS total_citations_received\nFROM \n    author a\nJOIN \n    writes w ON a.authorId = w.authorId\nJOIN \n    paper p ON w.paperId = p.paperId\nJOIN \n    venue v ON p.venueId = v.venueId\nWHERE \n    v.venueName = 'CVPR' \n    AND p.year = 2007\nGROUP BY \n    a.authorName\nORDER BY \n    publication_count DESC, \n    total_citations_received DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_860",
        "db_id": "scholar_new",
        "question": "Which researchers specializing in computer vision had the highest impact in 2007, as measured by both the total number of citations received for their publications and the count of those publications in conferences and journals related to this field? Results should be limited to the top 10 researchers, ranked first by total citations in descending order and then by publication count in descending order.",
        "query": "```sql\nSELECT \n    a.authorId,\n    a.authorName,\n    SUM(p.numCiting) AS total_citations,\n    COUNT(p.paperId) AS publication_count\nFROM \n    author a\nJOIN \n    writes w ON a.authorId = w.authorId\nJOIN \n    paper p ON w.paperId = p.paperId\nJOIN \n    venue v ON p.venueId = v.venueId\nWHERE \n    p.year = 2007\n    AND 'computer vision' = ANY(a.author_research_interests_normalized)\n    AND (v.venue_type = 'conference' OR v.venue_type = 'journal')\nGROUP BY \n    a.authorId, a.authorName\nORDER BY \n    total_citations DESC, publication_count DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_855",
        "db_id": "scholar_new",
        "question": "Which authors published the most papers at CVPR in 2007 and received the highest average normalized quality of citations, considering both the number of papers published and the average quality of citations received?",
        "query": "```sql\nSELECT \n    a.authorId,\n    a.authorName,\n    COUNT(p.paperId) AS num_papers_published,\n    AVG(c.cited_paper_quality_score_normalized) AS avg_citation_quality\nFROM \n    author a\nJOIN \n    writes w ON a.authorId = w.authorId\nJOIN \n    paper p ON w.paperId = p.paperId\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nJOIN \n    venue v ON p.venueId = v.venueId\nWHERE \n    v.venueName = 'CVPR' \n    AND p.year = 2007\nGROUP BY \n    a.authorId, a.authorName\nORDER BY \n    num_papers_published DESC, avg_citation_quality DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_865",
        "db_id": "scholar_new",
        "question": "In the past five years, which conferences has Richard Ladner published in, and what is the average citation impact of these venues along with the number of papers published by him in each? Additionally, based on keyphrase analysis, what are the trending research topics within these publications?",
        "query": "```sql\nWITH recent_papers AS (\n    SELECT \n        p.paperId,\n        p.venueId,\n        p.numCitedBy,\n        p.year\n    FROM \n        paper p\n    INNER JOIN writes w ON p.paperId = w.paperId\n    INNER JOIN author a ON w.authorId = a.authorId\n    WHERE \n        a.authorName = 'Richard Ladner'\n        AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n),\nconference_details AS (\n    SELECT \n        r.venueId,\n        v.venueName,\n        AVG(r.numCitedBy) AS avg_citation_impact,\n        COUNT(r.paperId) AS paper_count\n    FROM \n        recent_papers r\n    INNER JOIN venue v ON r.venueId = v.venueId\n    WHERE \n        v.venue_type = 'conference'\n    GROUP BY \n        r.venueId, v.venueName\n),\ntrending_topics AS (\n    SELECT \n        pk.paperId,\n        k.keyphraseName,\n        SUM(pk.paper_keyphrase_weighted_frequency_normalized) AS topic_score\n    FROM \n        paperKeyphrase pk\n    INNER JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId\n    INNER JOIN recent_papers rp ON pk.paperId = rp.paperId\n    GROUP BY \n        pk.paperId, k.keyphraseName\n)\nSELECT \n    cd.venueName,\n    cd.avg_citation_impact,\n    cd.paper_count,\n    STRING_AGG(tt.keyphraseName, ', ') AS trending_topics\nFROM \n    conference_details cd\nLEFT JOIN trending_topics tt ON cd.venueId = (SELECT rp.venueId FROM recent_papers rp WHERE rp.paperId = tt.paperId LIMIT 1)\nGROUP BY \n    cd.venueName, cd.avg_citation_impact, cd.paper_count;\n```"
    },
    {
        "instance_id": "q_858",
        "db_id": "scholar_new",
        "question": "Which journals has Richard Ladner contributed to with publications having a normalized quality score greater than 0.8 over the past five years, and what are the citation trends for these publications with positive normalized citation trends, ordered by publication quality score in descending order and then by normalized citation trend in descending order?",
        "query": "```sql\nSELECT \n    j.journalName AS Journal_Name,\n    p.paperId AS Publication_ID,\n    p.title AS Publication_Title,\n    p.paper_quality_score AS Quality_Score,\n    c.paper_citation_trend AS Citation_Trend\nFROM \n    journal j\nJOIN \n    venue v ON j.journalId = v.venueId\nJOIN \n    paper p ON v.venueId = p.venueId\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nJOIN \n    writes w ON p.paperId = w.paperId\nJOIN \n    author a ON w.authorId = a.authorId\nWHERE \n    a.authorName = 'Richard Ladner'\n    AND p.paper_quality_score_normalized > 0.8\n    AND c.paper_citation_trend_normalized > 0\n    AND p.year BETWEEN EXTRACT(YEAR FROM CURRENT_TIMESTAMP - INTERVAL '5 years') AND EXTRACT(YEAR FROM CURRENT_TIMESTAMP)\nORDER BY \n    p.paper_quality_score DESC, \n    c.paper_citation_trend_normalized DESC;\n```"
    },
    {
        "instance_id": "q_861",
        "db_id": "scholar_new",
        "question": "In the past decade, which conferences has Richard Ladner contributed to with publications having a normalized paper quality score greater than 0.8, and how have these contributions evolved in terms of average citation quality and total citations received each year? Provide the list of conferences along with the years of contribution, the average citation quality across all years, and the total citations accumulated over the years, ordered by the average citation quality in descending order.",
        "query": "```sql\nWITH high_quality_papers AS (\n    SELECT \n        p.paperId, \n        p.title, \n        p.year, \n        p.numCiting, \n        p.paper_quality_score_normalized,\n        v.venueName,\n        v.venueId\n    FROM \n        paper p\n    JOIN \n        writes w ON p.paperId = w.paperId\n    JOIN \n        author a ON w.authorId = a.authorId\n    JOIN \n        venue v ON p.venueId = v.venueId\n    WHERE \n        a.authorName = 'Richard Ladner'\n        AND p.paper_quality_score_normalized > 0.8\n        AND v.venue_type = 'conference'\n        AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 10\n),\ncitation_trends AS (\n    SELECT \n        hqp.venueName,\n        hqp.year,\n        AVG(c.citing_paper_quality_score_normalized) AS avg_citation_quality,\n        COUNT(c.citedPaperId) AS total_citations\n    FROM \n        high_quality_papers hqp\n    LEFT JOIN \n        cite c ON hqp.paperId = c.citedPaperId\n    GROUP BY \n        hqp.venueName, hqp.year\n)\nSELECT \n    ct.venueName,\n    STRING_AGG(DISTINCT ct.year::text, ', ') AS years_contributed,\n    AVG(ct.avg_citation_quality) AS avg_citation_quality_over_years,\n    SUM(ct.total_citations) AS total_citations_over_years\nFROM \n    citation_trends ct\nGROUP BY \n    ct.venueName\nORDER BY \n    avg_citation_quality_over_years DESC;\n```"
    },
    {
        "instance_id": "q_862",
        "db_id": "scholar_new",
        "question": "Which conferences has Richard Ladner contributed to with publications having a normalized quality score greater than 0.8 over the past decade, and how have these contributions evolved in terms of average citations per year and associated research keywords for each conference?",
        "query": "```sql\nWITH high_quality_papers AS (\n    SELECT \n        p.paperId, \n        p.title, \n        p.venueId, \n        p.year, \n        p.numCiting, \n        p.paper_quality_score_normalized,\n        v.venueName,\n        v.venue_type\n    FROM \n        paper p\n    JOIN \n        venue v ON p.venueId = v.venueId\n    JOIN \n        writes w ON p.paperId = w.paperId\n    JOIN \n        author a ON w.authorId = a.authorId\n    WHERE \n        a.authorName = 'Richard Ladner' \n        AND p.paper_quality_score_normalized > 0.8 \n        AND v.venue_type = 'conference'\n        AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 10\n),\ncitation_impact AS (\n    SELECT \n        hqp.venueName,\n        hqp.year,\n        AVG(hqp.numCiting) AS avg_citations,\n        COUNT(hqp.paperId) AS paper_count\n    FROM \n        high_quality_papers hqp\n    GROUP BY \n        hqp.venueName, \n        hqp.year\n),\nresearch_focus AS (\n    SELECT \n        hqp.venueName,\n        STRING_AGG(DISTINCT unnest(p.paper_keywords), ', ') AS keywords\n    FROM \n        high_quality_papers hqp\n    JOIN \n        paper p ON hqp.paperId = p.paperId\n    GROUP BY \n        hqp.venueName\n)\nSELECT \n    ci.venueName,\n    ci.year,\n    ci.avg_citations,\n    ci.paper_count,\n    rf.keywords\nFROM \n    citation_impact ci\nJOIN \n    research_focus rf ON ci.venueName = rf.venueName\nORDER BY \n    ci.venueName, \n    ci.year;\n```"
    },
    {
        "instance_id": "q_863",
        "db_id": "scholar_new",
        "question": "How frequently has Richard Ladner utilized datasets in his publications over the past five years, specifically identifying the total count of publications involving datasets out of his overall publications during this period? Additionally, which specific datasets have been most frequently used and had the highest average quality scores in his papers? Lastly, compare the average quality of dataset usage across different publication venues where Richard Ladner's papers involving datasets were published.",
        "query": "```sql\nWITH richard_papers AS (\n    SELECT p.paperId, p.venueId, pd.datasetId, pd.paper_dataset_quality_score_normalized, p.year\n    FROM paper p\n    JOIN writes w ON p.paperId = w.paperId\n    JOIN author a ON w.authorId = a.authorId\n    LEFT JOIN paperDataset pd ON p.paperId = pd.paperId\n    WHERE a.authorName = 'Richard Ladner' AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n),\ndataset_frequency AS (\n    SELECT COUNT(*) AS dataset_usage_count, datasetId\n    FROM richard_papers\n    WHERE datasetId IS NOT NULL\n    GROUP BY datasetId\n),\nimpactful_datasets AS (\n    SELECT df.datasetId, df.dataset_usage_count, d.datasetName, AVG(rp.paper_dataset_quality_score_normalized) AS avg_quality_score\n    FROM dataset_frequency df\n    JOIN dataset d ON df.datasetId = d.datasetId\n    JOIN richard_papers rp ON df.datasetId = rp.datasetId\n    GROUP BY df.datasetId, df.dataset_usage_count, d.datasetName\n    ORDER BY df.dataset_usage_count DESC, avg_quality_score DESC\n),\nvenue_quality_comparison AS (\n    SELECT v.venueName, AVG(rp.paper_dataset_quality_score_normalized) AS avg_venue_quality_score\n    FROM richard_papers rp\n    JOIN venue v ON rp.venueId = v.venueId\n    WHERE rp.datasetId IS NOT NULL\n    GROUP BY v.venueName\n)\nSELECT \n    (SELECT COUNT(*) FROM richard_papers WHERE datasetId IS NOT NULL) AS total_dataset_involvement,\n    (SELECT COUNT(*) FROM richard_papers) AS total_publications,\n    id.datasetName, id.dataset_usage_count, id.avg_quality_score,\n    vqc.venueName, vqc.avg_venue_quality_score\nFROM impactful_datasets id\nLEFT JOIN venue_quality_comparison vqc ON TRUE;\n```"
    },
    {
        "instance_id": "q_870",
        "db_id": "scholar_new",
        "question": "What are the research topics that Richard Ladner has focused on in the past ten years, and how have these topics evolved in terms of citation trends and research impact within the academic community? Additionally, analyze the quality of his publications by identifying the venues where his papers have been cited the most, and explore any patterns in the types of datasets or keyphrases frequently associated with his work. Specifically, provide the citation trends, citation sources, and normalized quality scores of his papers, along with the names of venues and their respective citation counts. Also, include the names of datasets and their association frequencies, as well as the keyphrases and their total weighted frequencies for each of his papers, sorted by year in descending order and by the number of citations in descending order.",
        "query": "```sql\nWITH richard_papers AS (\n    SELECT p.paperId, p.title, p.year, p.numCiting, p.paper_quality_score, p.venueId, p.paper_last_updated\n    FROM paper p\n    INNER JOIN writes w ON p.paperId = w.paperId\n    INNER JOIN author a ON w.authorId = a.authorId\n    WHERE a.authorName = 'Richard Ladner' AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 10\n),\ncitation_trends AS (\n    SELECT rp.paperId, rp.title, rp.year, rp.numCiting, c.paper_citation_trend, c.paper_citation_source, c.cited_paper_quality_score_normalized\n    FROM richard_papers rp\n    LEFT JOIN cite c ON rp.paperId = c.citedPaperId\n),\nvenue_analysis AS (\n    SELECT rp.paperId, rp.title, v.venueName, COUNT(c.citingPaperId) AS citation_count\n    FROM richard_papers rp\n    INNER JOIN cite c ON rp.paperId = c.citedPaperId\n    INNER JOIN venue v ON c.citingPaperId = v.venueId\n    GROUP BY rp.paperId, rp.title, v.venueName\n    ORDER BY citation_count DESC\n),\ndataset_analysis AS (\n    SELECT rp.paperId, d.datasetName, COUNT(pd.datasetId) AS dataset_count\n    FROM richard_papers rp\n    INNER JOIN paperDataset pd ON rp.paperId = pd.paperId\n    INNER JOIN dataset d ON pd.datasetId = d.datasetId\n    GROUP BY rp.paperId, d.datasetName\n),\nkeyphrase_analysis AS (\n    SELECT rp.paperId, k.keyphraseName, SUM(pkw.paper_keyphrase_weighted_frequency) AS total_keyphrase_frequency\n    FROM richard_papers rp\n    INNER JOIN paperKeyphrase pkw ON rp.paperId = pkw.paperId\n    INNER JOIN keyphrase k ON pkw.keyphraseId = k.keyphraseId\n    GROUP BY rp.paperId, k.keyphraseName\n)\nSELECT \n    ct.paperId, \n    ct.title, \n    ct.year, \n    ct.numCiting, \n    ct.paper_citation_trend, \n    ct.paper_citation_source, \n    ct.cited_paper_quality_score_normalized,\n    va.venueName, \n    va.citation_count,\n    da.datasetName, \n    da.dataset_count,\n    ka.keyphraseName, \n    ka.total_keyphrase_frequency\nFROM citation_trends ct\nLEFT JOIN venue_analysis va ON ct.paperId = va.paperId\nLEFT JOIN dataset_analysis da ON ct.paperId = da.paperId\nLEFT JOIN keyphrase_analysis ka ON ct.paperId = ka.paperId\nORDER BY ct.year DESC, ct.numCiting DESC;\n```"
    },
    {
        "instance_id": "q_866",
        "db_id": "scholar_new",
        "question": "What are the research papers authored by Richard Ladner that have received citations with a normalized quality score greater than 0.8 over the past five years, and how do these citations vary across different conferences and journals? Additionally, can we identify any trends in the usage of datasets associated with these papers, including the names of the datasets and the number of papers each dataset is associated with?",
        "query": "```sql\nWITH high_quality_citations AS (\n    SELECT \n        c.citedPaperId,\n        p.title,\n        p.year,\n        v.venueName,\n        v.venue_type,\n        c.citing_paper_quality_score_normalized AS citation_quality_score\n    FROM \n        cite c\n    JOIN \n        paper p ON c.citedPaperId = p.paperId\n    JOIN \n        venue v ON p.venueId = v.venueId\n    WHERE \n        c.citing_paper_quality_score_normalized > 0.8\n        AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5\n), richard_ladner_papers AS (\n    SELECT \n        w.paperId\n    FROM \n        writes w\n    JOIN \n        author a ON w.authorId = a.authorId\n    WHERE \n        a.authorName = 'Richard Ladner'\n), cited_papers_with_datasets AS (\n    SELECT \n        pd.datasetId,\n        d.datasetName,\n        COUNT(pd.paperId) AS paper_count\n    FROM \n        paperDataset pd\n    JOIN \n        dataset d ON pd.datasetId = d.datasetId\n    WHERE \n        pd.paperId IN (SELECT paperId FROM richard_ladner_papers)\n    GROUP BY \n        pd.datasetId, d.datasetName\n)\nSELECT \n    hqc.title,\n    hqc.year,\n    hqc.venueName,\n    hqc.venue_type,\n    AVG(hqc.citation_quality_score) AS avg_citation_quality_score,\n    cpd.datasetName,\n    cpd.paper_count\nFROM \n    high_quality_citations hqc\nJOIN \n    richard_ladner_papers rlp ON hqc.citedPaperId = rlp.paperId\nLEFT JOIN \n    cited_papers_with_datasets cpd ON rlp.paperId = cpd.paperId\nGROUP BY \n    hqc.title, hqc.year, hqc.venueName, hqc.venue_type, cpd.datasetName, cpd.paper_count\nORDER BY \n    hqc.year DESC;\n```"
    },
    {
        "instance_id": "q_864",
        "db_id": "scholar_new",
        "question": "What are the key research topics and citation trends associated with Richard Ladner's publications in venues with above-average impact factors over the past 10 years?",
        "query": "```sql\nSELECT \n    pk.keyphraseName AS key_research_topics,\n    c.paper_citation_trend AS citation_trends\nFROM \n    writes w\nJOIN \n    author a ON w.authorId = a.authorId\nJOIN \n    paper p ON w.paperId = p.paperId\nJOIN \n    venue v ON p.venueId = v.venueId\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nLEFT JOIN \n    paperKeyphrase pk ON p.paperId = pk.paperId\nWHERE \n    a.authorName = 'Richard Ladner'\n    AND v.impact_factor > (SELECT AVG(impact_factor) FROM journal)\n    AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 10\nGROUP BY \n    pk.keyphraseName, c.paper_citation_trend;\n```"
    },
    {
        "instance_id": "q_867",
        "db_id": "scholar_new",
        "question": "Which research paper in the field of Artificial Intelligence, published in the past five years, has received the most significant influence as measured by the highest total quality of citations (using normalized quality scores), the greatest number of citations, and an association with high-impact datasets (based on average normalized dataset quality scores)? Include distinct key research phrases associated with the paper in the results.",
        "query": "```sql\nSELECT \n    p.paperId,\n    p.title,\n    SUM(c.cited_paper_quality_score_normalized) AS total_citation_quality,\n    COUNT(c.citedPaperId) AS citation_count,\n    AVG(pd.paper_dataset_quality_score_normalized) AS avg_dataset_quality,\n    STRING_AGG(DISTINCT k.keyphraseName, ', ') AS keyphrases\nFROM \n    paper p\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nLEFT JOIN \n    paperDataset pd ON p.paperId = pd.paperId\nLEFT JOIN \n    dataset d ON pd.datasetId = d.datasetId\nJOIN \n    paperKeyphrase pk ON p.paperId = pk.paperId\nJOIN \n    keyphrase k ON pk.keyphraseId = k.keyphraseId\nWHERE \n    p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n    AND 'Artificial Intelligence' = ANY(p.paper_keywords_normalized)\nGROUP BY \n    p.paperId, p.title\nHAVING \n    COUNT(c.citedPaperId) > 0\nORDER BY \n    total_citation_quality DESC, \n    citation_count DESC, \n    avg_dataset_quality DESC\nLIMIT 1;\n```"
    },
    {
        "instance_id": "q_869",
        "db_id": "scholar_new",
        "question": "Among publications in the field of Artificial Intelligence over the past five years, which have received the highest quality citations, considering both the normalized quality score of the citing papers and the trend of citation quality? Additionally, for these publications, what is their performance in terms of total dataset usage, average dataset quality, and keyphrase relevance specifically related to the AI domain? Please rank the results by descending order of average citation quality, citation trend, total dataset usage, and keyphrase relevance, and limit the output to the top 10 publications.",
        "query": "```sql\nWITH ai_papers AS (\n    SELECT DISTINCT p.paperId, p.title, p.year, p.numCiting, p.paper_quality_score_normalized\n    FROM paper p\n    JOIN writes w ON p.paperId = w.paperId\n    JOIN author a ON w.authorId = a.authorId\n    WHERE 'Artificial Intelligence' = ANY(a.author_research_interests_normalized)\n      AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n), \ncitation_quality AS (\n    SELECT c.citedPaperId, AVG(c.citing_paper_quality_score_normalized) AS avg_citation_quality, \n           MAX(c.paper_citation_trend_normalized) AS max_citation_trend\n    FROM cite c\n    JOIN ai_papers ap ON c.citedPaperId = ap.paperId\n    GROUP BY c.citedPaperId\n),\ndataset_usage AS (\n    SELECT pd.paperId, SUM(pd.dataset_paper_count) AS total_dataset_usage, \n           AVG(pd.paper_dataset_quality_score_normalized) AS avg_dataset_quality\n    FROM paperDataset pd\n    JOIN dataset d ON pd.datasetId = d.datasetId\n    JOIN ai_papers ap ON pd.paperId = ap.paperId\n    GROUP BY pd.paperId\n),\nkeyphrase_relevance AS (\n    SELECT pk.paperId, SUM(pk.paper_keyphrase_weighted_frequency_normalized) AS total_keyphrase_relevance\n    FROM paperKeyphrase pk\n    JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId\n    WHERE k.keyphraseName ILIKE '%artificial intelligence%'\n    GROUP BY pk.paperId\n)\nSELECT ap.paperId, ap.title, cq.avg_citation_quality, cq.max_citation_trend, \n       du.total_dataset_usage, du.avg_dataset_quality, kr.total_keyphrase_relevance\nFROM ai_papers ap\nLEFT JOIN citation_quality cq ON ap.paperId = cq.citedPaperId\nLEFT JOIN dataset_usage du ON ap.paperId = du.paperId\nLEFT JOIN keyphrase_relevance kr ON ap.paperId = kr.paperId\nORDER BY cq.avg_citation_quality DESC, cq.max_citation_trend DESC, du.total_dataset_usage DESC, kr.total_keyphrase_relevance DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_868",
        "db_id": "scholar_new",
        "question": "Which research topics, specifically among authors with \"natural language processing\" as a normalized research interest, gained the most attention from 2013 to 2015, as measured by the number of distinct papers, the total normalized quality score of citations received, and the average trending impact of their publications? Only consider citations with a normalized quality score greater than 0.8, and return the top 10 results ordered by total quality score in descending order and then by average trending impact in descending order.",
        "query": "```sql\nSELECT \n    ak.author_research_interests AS research_topic,\n    COUNT(DISTINCT p.paperId) AS paper_count,\n    SUM(c.cited_paper_quality_score_normalized) AS total_quality_score,\n    AVG(p.paper_keywords_similarity_score) AS avg_trending_impact\nFROM \n    author AS a\nJOIN \n    writes AS w ON a.authorId = w.authorId\nJOIN \n    paper AS p ON w.paperId = p.paperId\nJOIN \n    cite AS c ON p.paperId = c.citedPaperId\nJOIN \n    author AS ak ON a.authorId = ak.authorId\nWHERE \n    p.year BETWEEN 2013 AND 2015\n    AND 'natural language processing' = ANY(ak.author_research_interests_normalized)\n    AND c.citing_paper_quality_score_normalized > 0.8\nGROUP BY \n    ak.author_research_interests\nORDER BY \n    total_quality_score DESC, \n    avg_trending_impact DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_877",
        "db_id": "scholar_new",
        "question": "Which research areas, represented by key phrases, received the most attention in academic papers published at major conferences in 2015, based on a weighted score combining the frequency of key phrases and the quality of citations received by those papers, where the paper quality is above the average normalized quality score of cited papers?",
        "query": "```sql\nSELECT \n    pk.keyphraseName AS research_area,\n    SUM(p.numCiting * pk.paper_keyphrase_weighted_frequency_normalized) AS weighted_attention_score\nFROM \n    paperKeyphrase pk\nJOIN \n    paper p ON pk.paperId = p.paperId\nJOIN \n    venue v ON p.venueId = v.venueId\nWHERE \n    v.venue_type = 'conference' \n    AND p.year = 2015\n    AND p.paper_quality_score_normalized > (SELECT AVG(cited_paper_quality_score_normalized) FROM cite)\nGROUP BY \n    pk.keyphraseName\nORDER BY \n    weighted_attention_score DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_879",
        "db_id": "scholar_new",
        "question": "Which research areas, represented by keywords, received the most attention in academic publications during the year 2015, based on both the total quality of citations (sum of normalized quality scores of citing papers) and the total number of citations? Additionally, among the top 10 most frequently used datasets in papers published in 2015, how many of these research areas are associated with each dataset, and what are the names of these datasets? The results should be ordered by descending total citation quality, then descending total citation count, and finally descending count of keyword associations with datasets.",
        "query": "```sql\nWITH cited_papers_2015 AS (\n    SELECT \n        p.paperId,\n        p.title,\n        p.numCiting,\n        p.paper_quality_score_normalized,\n        unnest(p.paper_keywords_normalized) AS keyword\n    FROM \n        paper p\n    WHERE \n        p.year = 2015\n        AND p.numCiting > 0\n), \ncitation_quality AS (\n    SELECT \n        cp.paperId,\n        SUM(c.cited_paper_quality_score_normalized) AS total_citation_quality,\n        COUNT(c.citedPaperId) AS citation_count\n    FROM \n        cited_papers_2015 cp\n    JOIN \n        cite c\n    ON \n        cp.paperId = c.citedPaperId\n    GROUP BY \n        cp.paperId\n), \nkeywords_attention AS (\n    SELECT \n        cp.keyword,\n        SUM(cq.total_citation_quality) AS total_keyword_quality,\n        SUM(cq.citation_count) AS total_keyword_citations\n    FROM \n        cited_papers_2015 cp\n    JOIN \n        citation_quality cq\n    ON \n        cp.paperId = cq.paperId\n    GROUP BY \n        cp.keyword\n    ORDER BY \n        total_keyword_quality DESC,\n        total_keyword_citations DESC\n    LIMIT 10\n), \ndatasets_2015 AS (\n    SELECT \n        pd.datasetId,\n        COUNT(pd.paperId) AS dataset_usage_count\n    FROM \n        paperDataset pd\n    JOIN \n        paper p\n    ON \n        pd.paperId = p.paperId\n    WHERE \n        p.year = 2015\n    GROUP BY \n        pd.datasetId\n    ORDER BY \n        dataset_usage_count DESC\n    LIMIT 10\n), \ndataset_keywords AS (\n    SELECT \n        d.datasetId,\n        d.datasetName,\n        unnest(p.paper_keywords_normalized) AS keyword\n    FROM \n        datasets_2015 d\n    JOIN \n        paperDataset pd\n    ON \n        d.datasetId = pd.datasetId\n    JOIN \n        paper p\n    ON \n        pd.paperId = p.paperId\n)\nSELECT \n    ka.keyword,\n    ka.total_keyword_quality,\n    ka.total_keyword_citations,\n    dk.datasetName,\n    COUNT(dk.keyword) AS keyword_in_dataset_count\nFROM \n    keywords_attention ka\nLEFT JOIN \n    dataset_keywords dk\nON \n    ka.keyword = dk.keyword\nGROUP BY \n    ka.keyword, ka.total_keyword_quality, ka.total_keyword_citations, dk.datasetName\nORDER BY \n    ka.total_keyword_quality DESC, ka.total_keyword_citations DESC, keyword_in_dataset_count DESC;\n```"
    },
    {
        "instance_id": "q_871",
        "db_id": "scholar_new",
        "question": "Which research topics, represented by keyphrases, gained the most attention from high-impact authors (with an h-index of 50 or higher) in academic papers published in 2015, considering both the normalized quality of citations with a positive citation trend and the diversity and average quality of datasets associated with those papers? List the top 10 research topics ranked by total normalized citation quality in descending order, using average normalized dataset quality as a secondary ranking criterion.",
        "query": "```sql\nSELECT \n    pk.keyphraseName AS research_topic,\n    SUM(c.cited_paper_quality_score_normalized) AS total_citation_quality,\n    COUNT(DISTINCT pd.datasetId) AS unique_datasets_used,\n    AVG(pd.paper_dataset_quality_score_normalized) AS avg_dataset_quality\nFROM \n    paperKeyphrase pk\nJOIN \n    paper p ON pk.paperId = p.paperId\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nJOIN \n    writes w ON p.paperId = w.paperId\nJOIN \n    author a ON w.authorId = a.authorId\nLEFT JOIN \n    paperDataset pd ON p.paperId = pd.paperId\nWHERE \n    p.year = 2015\n    AND a.h_index >= 50 -- High-impact authors based on h-index threshold\n    AND c.paper_citation_trend_normalized > 0 -- Positive citation trend\nGROUP BY \n    pk.keyphraseName\nORDER BY \n    total_citation_quality DESC, avg_dataset_quality DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_872",
        "db_id": "scholar_new",
        "question": "In 2015, among academic venues, which research topics were most frequently mentioned by authors with an h-index of 50 or higher, and what was the average quality of the papers associated with these topics? Please rank the results first by the frequency of topic mentions in descending order, and then by the average paper quality in descending order, and limit the output to the top 10 topics.",
        "query": "```sql\nSELECT \n    pk.keyphraseName AS research_topic,\n    COUNT(pk.paperId) AS mention_frequency,\n    AVG(p.paper_quality_score_normalized) AS avg_paper_quality\nFROM \n    paperKeyphrase pk\nJOIN \n    paper p ON pk.paperId = p.paperId\nJOIN \n    writes w ON p.paperId = w.paperId\nJOIN \n    author a ON w.authorId = a.authorId\nJOIN \n    venue v ON p.venueId = v.venueId\nWHERE \n    p.year = 2015\n    AND a.h_index >= 50\n    AND v.venue_type = 'academic'\nGROUP BY \n    pk.keyphraseName\nORDER BY \n    mention_frequency DESC, avg_paper_quality DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_876",
        "db_id": "scholar_new",
        "question": "What were the top 10 most impactful research areas in academic publications from the year 2015, considering both the total number of citations received and the average quality of citing papers, while ensuring author expertise confidence was above 0.8?",
        "query": "```sql\nSELECT \n    a.author_research_interests_normalized AS research_area,\n    SUM(p.numCitedBy) AS total_citations,\n    AVG(c.citing_paper_quality_score_normalized) AS avg_citation_quality\nFROM \n    scholar_new.paper p\nJOIN \n    scholar_new.cite c ON p.paperId = c.citedPaperId\nJOIN \n    scholar_new.writes w ON p.paperId = w.paperId\nJOIN \n    scholar_new.author a ON w.authorId = a.authorId\nWHERE \n    p.year = 2015\n    AND a.author_research_interests_confidence > 0.8\nGROUP BY \n    a.author_research_interests_normalized\nORDER BY \n    total_citations DESC, avg_citation_quality DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_873",
        "db_id": "scholar_new",
        "question": "在2015年的学术会议中，哪些研究主题的论文数量超过10篇，并且这些主题相关的论文在后续年份中持续获得了高质量（质量评分归一化值大于0.8）的引用？请按照高质量引用次数从高到低排序，列出这些研究主题。",
        "query": "```sql\nWITH keyphrase_growth AS (\n    SELECT \n        pk.keyphraseId,\n        k.keyphraseName,\n        COUNT(DISTINCT p.paperId) AS paper_count_2015\n    FROM \n        paperKeyphrase pk\n    JOIN \n        paper p ON pk.paperId = p.paperId\n    JOIN \n        venue v ON p.venueId = v.venueId\n    JOIN \n        keyphrase k ON pk.keyphraseId = k.keyphraseId\n    WHERE \n        v.venue_type = 'conference'\n        AND p.year = 2015\n    GROUP BY \n        pk.keyphraseId, k.keyphraseName\n    HAVING \n        COUNT(DISTINCT p.paperId) > 10\n),\ncitations_quality AS (\n    SELECT \n        c.citedPaperId,\n        AVG(c.citing_paper_quality_score_normalized) AS avg_citation_quality\n    FROM \n        cite c\n    JOIN \n        paper p ON c.citedPaperId = p.paperId\n    WHERE \n        p.year > 2015\n        AND c.citing_paper_quality_score_normalized > 0.8\n    GROUP BY \n        c.citedPaperId\n),\nkeyphrase_quality AS (\n    SELECT \n        kg.keyphraseName,\n        COUNT(DISTINCT c.citedPaperId) AS high_quality_citations\n    FROM \n        keyphrase_growth kg\n    JOIN \n        paperKeyphrase pk ON kg.keyphraseId = pk.keyphraseId\n    JOIN \n        citations_quality c ON pk.paperId = c.citedPaperId\n    GROUP BY \n        kg.keyphraseName\n    HAVING \n        COUNT(DISTINCT c.citedPaperId) > 5\n)\nSELECT \n    kq.keyphraseName\nFROM \n    keyphrase_quality kq\nORDER BY \n    kq.high_quality_citations DESC;\n```"
    },
    {
        "instance_id": "q_883",
        "db_id": "scholar_new",
        "question": "What is the trend of research on deep reinforcement learning over the past five years, in terms of the number of publications, average citation count, and average paper quality score, separately for conferences and journals? Additionally, provide the total number of publications, average citations per year, and average paper quality per year for each venue type (conference or journal), ordered chronologically by year and venue type.",
        "query": "```sql\nWITH relevant_papers AS (\n    SELECT \n        p.paperId,\n        p.title,\n        p.year,\n        p.numCiting,\n        p.paper_quality_score_normalized,\n        v.venueName,\n        v.venue_type\n    FROM \n        paper p\n    JOIN \n        venue v ON p.venueId = v.venueId\n    WHERE \n        p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n        AND 'deep reinforcement learning' = ANY(p.paper_keywords_normalized)\n),\ncitation_trends AS (\n    SELECT \n        rp.year,\n        COUNT(rp.paperId) AS publication_count,\n        AVG(rp.numCiting) AS avg_citations,\n        AVG(rp.paper_quality_score_normalized) AS avg_paper_quality,\n        rp.venue_type\n    FROM \n        relevant_papers rp\n    GROUP BY \n        rp.year, rp.venue_type\n),\nvenue_impact AS (\n    SELECT \n        ct.year,\n        ct.venue_type,\n        SUM(ct.publication_count) AS total_publications,\n        AVG(ct.avg_citations) AS avg_citations_per_year,\n        AVG(ct.avg_paper_quality) AS avg_quality_per_year\n    FROM \n        citation_trends ct\n    GROUP BY \n        ct.year, ct.venue_type\n)\nSELECT \n    vi.year,\n    vi.venue_type,\n    vi.total_publications,\n    vi.avg_citations_per_year,\n    vi.avg_quality_per_year\nFROM \n    venue_impact vi\nORDER BY \n    vi.year, vi.venue_type;\n```"
    },
    {
        "instance_id": "q_874",
        "db_id": "scholar_new",
        "question": "Which author in the CVPR venue has the highest influence, measured by the total number of citations received over the past five years and the average normalized quality score of their publications?",
        "query": "```sql\nSELECT \n    a.authorName, \n    SUM(p.numCitedBy) AS total_citations, \n    AVG(p.paper_quality_score_normalized) AS avg_paper_quality\nFROM \n    author a\nJOIN \n    writes w ON a.authorId = w.authorId\nJOIN \n    paper p ON w.paperId = p.paperId\nJOIN \n    venue v ON p.venueId = v.venueId\nWHERE \n    v.venueName = 'CVPR' \n    AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\nGROUP BY \n    a.authorName\nORDER BY \n    total_citations DESC, \n    avg_paper_quality DESC\nLIMIT 1;\n```"
    },
    {
        "instance_id": "q_875",
        "db_id": "scholar_new",
        "question": "Which authors have the highest influence in terms of total citation quality, average venue impact factor, and the number of unique datasets used in their studies within the last five years? The total citation quality is calculated as the sum of the product of the number of citations each paper received and the normalized quality score of the citing papers. The average venue impact factor considers the venues where the authors published their papers, and the unique datasets are those utilized in the studies. Only papers published in the past five years are considered, and the results are ordered by total citation quality in descending order, followed by average venue impact factor and the number of unique datasets used, also in descending order, with a limit of 10 authors displayed.",
        "query": "```sql\nSELECT \n    a.authorId,\n    a.authorName,\n    SUM(p.numCiting * c.cited_paper_quality_score_normalized) AS total_citation_quality,\n    AVG(j.impact_factor) AS avg_venue_impact_factor,\n    COUNT(DISTINCT pd.datasetId) AS unique_datasets_used\nFROM \n    author a\nJOIN \n    writes w ON a.authorId = w.authorId\nJOIN \n    paper p ON w.paperId = p.paperId\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nLEFT JOIN \n    paperDataset pd ON p.paperId = pd.paperId\nJOIN \n    venue v ON p.venueId = v.venueId\nLEFT JOIN \n    journal j ON v.venueId = j.journalId\nWHERE \n    p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5\nGROUP BY \n    a.authorId, a.authorName\nORDER BY \n    total_citation_quality DESC, avg_venue_impact_factor DESC, unique_datasets_used DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_878",
        "db_id": "scholar_new",
        "question": "What are the syntactic parsing research topics that have gained significant attention in the last five years, excluding any papers authored by Chris Dyer, and which of these topics are associated with high-impact journals (impact factor > 3.0) or top-tier conferences? Additionally, provide the count of distinct papers for each topic and list the related high-impact journals or conferences, ordered by the number of papers in descending order. Only include topics that have more than 10 distinct papers associated with them.",
        "query": "```sql\nSELECT \n    pk.keyphraseName AS research_topic,\n    COUNT(DISTINCT p.paperId) AS paper_count,\n    STRING_AGG(DISTINCT j.journalName, ', ') AS related_journals_conferences\nFROM \n    paperKeyphrase pkp\nJOIN \n    keyphrase pk ON pkp.keyphraseId = pk.keyphraseId\nJOIN \n    paper p ON pkp.paperId = p.paperId\nJOIN \n    venue v ON p.venueId = v.venueId\nLEFT JOIN \n    journal j ON v.venueId = j.journalId\nJOIN \n    writes w ON p.paperId = w.paperId\nJOIN \n    author a ON w.authorId = a.authorId\nWHERE \n    pk.keyphraseName ILIKE '%syntactic parsing%'\n    AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5\n    AND a.authorName != 'Chris Dyer'\n    AND (j.impact_factor > 3.0 OR v.venue_type IN ('high-impact conference', 'top-tier conference'))\nGROUP BY \n    pk.keyphraseName\nHAVING \n    COUNT(DISTINCT p.paperId) > 10\nORDER BY \n    paper_count DESC;\n```"
    },
    {
        "instance_id": "q_881",
        "db_id": "scholar_new",
        "question": "Which research papers, excluding those authored by Chris Dyer, have been cited in high-impact journals or conferences (defined as venues with an impact factor greater than 5 or categorized as 'high-impact journal' or 'conference') within the past five years, and how do their citation trends compare when ordered by the total number of citations in descending order?",
        "query": "```sql\nSELECT \n    p.paperId,\n    p.title,\n    p.year,\n    p.numCiting AS total_citations,\n    c.paper_citation_trend AS citation_trend\nFROM \n    paper p\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nJOIN \n    venue v ON p.venueId = v.venueId\nLEFT JOIN \n    writes w ON p.paperId = w.paperId\nLEFT JOIN \n    author a ON w.authorId = a.authorId\nWHERE \n    a.authorName != 'Chris Dyer'\n    AND (v.impact_factor > 5 OR v.venue_type IN ('high-impact journal', 'conference'))\n    AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5\nGROUP BY \n    p.paperId, p.title, p.year, p.numCiting, c.paper_citation_trend\nORDER BY \n    p.numCiting DESC;\n```"
    },
    {
        "instance_id": "q_884",
        "db_id": "scholar_new",
        "question": "Which research papers in the field of natural language processing have been cited by studies that do not involve Chris Dyer as an author, and how many unique citations do these papers receive across different conferences and journals? Provide the results sorted in descending order of citation count.",
        "query": "```sql\nSELECT \n    p.paperId, \n    p.title, \n    v.venueName AS publication_venue, \n    COUNT(DISTINCT c.citedPaperId) AS citation_count\nFROM \n    paper p\nJOIN \n    venue v ON p.venueId = v.venueId\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nLEFT JOIN \n    writes w ON c.citingPaperId = w.paperId\nLEFT JOIN \n    author a ON w.authorId = a.authorId\nWHERE \n    p.paper_keywords_normalized @> '{\"natural language processing\"}'::text[]\n    AND (a.authorName IS NULL OR a.authorName != 'Chris Dyer')\n    AND v.venue_type IN ('conference', 'journal')\nGROUP BY \n    p.paperId, \n    p.title, \n    v.venueName\nORDER BY \n    citation_count DESC;\n```"
    },
    {
        "instance_id": "q_880",
        "db_id": "scholar_new",
        "question": "在过去三年中，哪些研究论文引用了使用趋势呈现下降的数据集，并且这些论文的作者不属于“特定研究领域”？具体来说，需要提供论文的唯一标识符、标题、发表年份，以及所引用数据集的名称。这里的“使用趋势呈现下降”是指数据集在过去三年内的下载次数少于三年前的下载次数。",
        "query": "```sql\nSELECT DISTINCT p.paperId, p.title, p.year, d.datasetName\nFROM paperDataset pd\nJOIN dataset d ON pd.datasetId = d.datasetId\nJOIN paper p ON pd.paperId = p.paperId\nJOIN writes w ON p.paperId = w.paperId\nJOIN author a ON w.authorId = a.authorId\nWHERE d.dataset_last_updated >= NOW() - INTERVAL '3 years'\nAND d.dataset_download_count < (\n    SELECT dataset_download_count\n    FROM dataset\n    WHERE datasetName = d.datasetName\n    AND dataset_last_updated < NOW() - INTERVAL '3 years'\n)\nAND NOT EXISTS (\n    SELECT 1\n    FROM unnest(a.author_research_interests) AS interest\n    WHERE interest = '特定研究领域'\n)\nORDER BY p.paperId;\n```"
    },
    {
        "instance_id": "q_882",
        "db_id": "scholar_new",
        "question": "Which researchers have the highest citation impact on Daniel A Reed's work, considering both the total number of citations and the average quality of citations across distinct venues and research areas, ranked first by citation count and then by average citation quality, limited to the top 10 results?",
        "query": "```sql\nSELECT \n    a.authorName, \n    COUNT(c.citedPaperId) AS citation_count, \n    AVG(c.citing_paper_quality_score_normalized) AS avg_citation_quality,\n    STRING_AGG(DISTINCT v.venueName, ', ') AS venues_involved,\n    STRING_AGG(DISTINCT a.author_research_interests, ', ') AS research_areas\nFROM \n    author a\nJOIN \n    writes w ON a.authorId = w.authorId\nJOIN \n    cite c ON w.paperId = c.citedPaperId\nJOIN \n    paper p ON c.citingPaperId = p.paperId\nJOIN \n    venue v ON p.venueId = v.venueId\nWHERE \n    c.citedPaperId IN (\n        SELECT w.paperId \n        FROM writes w \n        JOIN author a ON w.authorId = a.authorId \n        WHERE a.authorName = 'Daniel A Reed'\n    )\nGROUP BY \n    a.authorName\nORDER BY \n    citation_count DESC, \n    avg_citation_quality DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_886",
        "db_id": "scholar_new",
        "question": "Which authors have the highest total normalized citation quality scores for papers published in the past five years, where these papers are related to Daniel A Reed's research interests based on keyword matching, considering both direct citations and the quality of those citations? Please list the top 10 authors by their total citation quality score, including their names and IDs.",
        "query": "```sql\nWITH reed_interests AS (\n    SELECT unnest(author_research_interests) AS interest\n    FROM author\n    WHERE authorName = 'Daniel A Reed'\n),\nrelated_papers AS (\n    SELECT DISTINCT p.paperId\n    FROM paper p\n    JOIN paperKeyphrase pk ON p.paperId = pk.paperId\n    JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId\n    JOIN reed_interests ri ON k.keyphraseName ILIKE '%' || ri.interest || '%'\n    WHERE p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5\n),\ncitation_quality AS (\n    SELECT \n        w.authorId,\n        SUM(c.cited_paper_quality_score_normalized) AS total_citation_quality\n    FROM related_papers rp\n    JOIN cite c ON rp.paperId = c.citedPaperId\n    JOIN paper p ON c.citingPaperId = p.paperId\n    JOIN writes w ON p.paperId = w.paperId\n    WHERE p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5\n    GROUP BY w.authorId\n)\nSELECT \n    a.authorName,\n    a.authorId,\n    cq.total_citation_quality\nFROM citation_quality cq\nJOIN author a ON cq.authorId = a.authorId\nORDER BY cq.total_citation_quality DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_888",
        "db_id": "scholar_new",
        "question": "Which researchers, whose normalized publication quality score has consistently increased over the past five years and who have \"Machine Learning\" as one of their normalized research interests, along with the comparison of their citation trends across papers published in top-tier conferences and journals? Specifically, provide the researcher's ID, name, year, average normalized quality score for each year, the venue name where the paper was published, and the citation count for each paper. Ensure the results are ordered by the researcher's name and year.",
        "query": "```sql\nWITH researcher_quality_trend AS (\n    SELECT \n        w.authorId,\n        a.authorName,\n        p.year,\n        AVG(p.paper_quality_score_normalized) AS avg_quality_score\n    FROM \n        writes w\n    JOIN \n        paper p ON w.paperId = p.paperId\n    JOIN \n        author a ON w.authorId = a.authorId\n    WHERE \n        p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5\n        AND 'Machine Learning' = ANY(a.author_research_interests_normalized)\n    GROUP BY \n        w.authorId, a.authorName, p.year\n), citation_trend AS (\n    SELECT \n        c.citedPaperId,\n        v.venueName,\n        COUNT(c.citingPaperId) AS citation_count\n    FROM \n        cite c\n    JOIN \n        paper p ON c.citedPaperId = p.paperId\n    JOIN \n        venue v ON p.venueId = v.venueId\n    WHERE \n        v.venue_type IN ('top-tier conference', 'top-tier journal')\n    GROUP BY \n        c.citedPaperId, v.venueName\n)\nSELECT \n    rqt.authorId,\n    rqt.authorName,\n    rqt.year,\n    rqt.avg_quality_score,\n    ct.venueName,\n    ct.citation_count\nFROM \n    researcher_quality_trend rqt\nJOIN \n    writes w ON rqt.authorId = w.authorId\nJOIN \n    paper p ON w.paperId = p.paperId\nLEFT JOIN \n    citation_trend ct ON p.paperId = ct.citedPaperId\nWHERE \n    rqt.avg_quality_score > LAG(rqt.avg_quality_score) OVER (PARTITION BY rqt.authorId ORDER BY rqt.year)\nORDER BY \n    rqt.authorName, rqt.year;\n```"
    },
    {
        "instance_id": "q_887",
        "db_id": "scholar_new",
        "question": "Which researchers have contributed to the development of sensor fusion techniques in papers published within the last five years, and how has their work influenced related datasets that have been updated in the same time frame? Specifically, provide the count of papers associated with each dataset influenced by these researchers. Additionally, assess the quality of these researchers' contributions based on the average normalized quality score of citations received by their papers within the last five years. Present the results ordered by researcher name and dataset name.",
        "query": "```sql\nWITH sensor_fusion_researchers AS (\n    SELECT DISTINCT w.authorId, a.authorName\n    FROM writes w\n    JOIN author a ON w.authorId = a.authorId\n    JOIN paper p ON w.paperId = p.paperId\n    JOIN paperKeyphrase pk ON p.paperId = pk.paperId\n    JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId\n    WHERE LOWER(k.keyphraseName) LIKE '%sensor fusion%'\n      AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5\n),\ndataset_influence AS (\n    SELECT pd.datasetId, d.datasetName, COUNT(DISTINCT pd.paperId) AS paper_count\n    FROM paperDataset pd\n    JOIN dataset d ON pd.datasetId = d.datasetId\n    JOIN sensor_fusion_researchers sfr ON pd.paperId IN (\n        SELECT paperId FROM writes WHERE authorId = sfr.authorId\n    )\n    WHERE d.dataset_last_updated >= CURRENT_TIMESTAMP - INTERVAL '5 years'\n    GROUP BY pd.datasetId, d.datasetName\n),\ncitation_trends AS (\n    SELECT c.citedPaperId, AVG(c.citing_paper_quality_score_normalized) AS avg_citation_quality\n    FROM cite c\n    JOIN paper p ON c.citedPaperId = p.paperId\n    JOIN sensor_fusion_researchers sfr ON p.paperId IN (\n        SELECT paperId FROM writes WHERE authorId = sfr.authorId\n    )\n    WHERE p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5\n    GROUP BY c.citedPaperId\n)\nSELECT sfr.authorName,\n       di.datasetName,\n       di.paper_count,\n       ct.avg_citation_quality\nFROM sensor_fusion_researchers sfr\nJOIN writes w ON sfr.authorId = w.authorId\nLEFT JOIN dataset_influence di ON w.paperId = di.paperId\nLEFT JOIN citation_trends ct ON w.paperId = ct.citedPaperId\nORDER BY sfr.authorName, di.datasetName;\n```"
    },
    {
        "instance_id": "q_885",
        "db_id": "scholar_new",
        "question": "Which authors have significantly contributed to research on sensor fusion, as indicated by their total paper quality scores and citation counts over the past five years, while also being associated with either high-impact journals (above average impact factor) or prestigious venues? Please rank the results by descending order of total paper quality score, total citations, and average journal impact factor.",
        "query": "```sql\nSELECT \n    a.authorId,\n    a.authorName,\n    SUM(p.paper_quality_score) AS total_paper_quality_score,\n    COUNT(c.citedPaperId) AS total_citations,\n    AVG(j.impact_factor) AS avg_journal_impact_factor\nFROM \n    author a\nJOIN \n    writes w ON a.authorId = w.authorId\nJOIN \n    paper p ON w.paperId = p.paperId\nLEFT JOIN \n    cite c ON p.paperId = c.citedPaperId\nLEFT JOIN \n    venue v ON p.venueId = v.venueId\nLEFT JOIN \n    journal j ON v.venueId = j.journalId\nWHERE \n    a.author_research_interests_normalized @> ARRAY['sensor fusion']\n    AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5\n    AND (j.impact_factor > (SELECT AVG(impact_factor) FROM journal) OR v.venue_type = 'prestigious')\nGROUP BY \n    a.authorId, a.authorName\nHAVING \n    SUM(p.paper_quality_score) > (SELECT AVG(paper_quality_score) FROM paper)\nORDER BY \n    total_paper_quality_score DESC, total_citations DESC, avg_journal_impact_factor DESC;\n```"
    },
    {
        "instance_id": "q_904",
        "db_id": "scholar_new",
        "question": "在过去的研究中，哪些专注于传感器融合领域且其论文引用质量趋势持续增长的研究者具有高于平均水平的总引用质量分数？此外，请分析这些研究者的最新隶属机构变化是否对其引用趋势产生了显著影响，包括提供他们当前和之前的隶属机构信息。",
        "query": "```sql\nWITH influential_authors AS (\n    SELECT \n        w.authorId,\n        a.authorName,\n        a.affiliation AS current_affiliation,\n       LAG(a.affiliation) OVER (PARTITION BY w.authorId ORDER BY a.author_last_updated) AS previous_affiliation,\n        SUM(c.cited_paper_quality_score_normalized) AS total_cited_quality,\n        ROW_NUMBER() OVER (PARTITION BY w.authorId ORDER BY p.year DESC) AS rn\n    FROM \n        writes w\n    JOIN \n        paper p ON w.paperId = p.paperId\n    JOIN \n        cite c ON p.paperId = c.citedPaperId\n    JOIN \n        author a ON w.authorId = a.authorId\n    WHERE \n        '传感器融合' = ANY(a.author_research_interests_normalized)\n        AND c.paper_citation_trend_normalized > 0\n    GROUP BY \n        w.authorId, a.authorName, a.affiliation, a.author_last_updated\n),\naffiliation_impact AS (\n    SELECT \n        authorId,\n        current_affiliation,\n        previous_affiliation,\n        CASE \n            WHEN current_affiliation <> previous_affiliation THEN 'Yes'\n            ELSE 'No'\n        END AS affiliation_changed,\n        total_cited_quality\n    FROM \n        influential_authors\n    WHERE \n        rn = 1\n)\nSELECT \n    ai.authorId,\n    ai.authorName,\n    ai.current_affiliation,\n    ai.previous_affiliation,\n    ai.affiliation_changed,\n    ai.total_cited_quality\nFROM \n    affiliation_impact ai\nWHERE \n    ai.total_cited_quality > (SELECT AVG(total_cited_quality) FROM affiliation_impact);\n```"
    },
    {
        "instance_id": "q_893",
        "db_id": "scholar_new",
        "question": "Which researchers have published papers on sensor fusion techniques in the past five years, and what is their contribution in terms of publication impact and citation quality? Additionally, provide the count of their publications, total citations, average paper quality score, and their research focus areas during this period. Identify frequent collaborators among these researchers based on co-authorship patterns in their recent papers. Finally, order the results by total citations in descending order, and then by average paper quality score in descending order.",
        "query": "```sql\nWITH recent_papers AS (\n    SELECT \n        p.paperId,\n        p.title,\n        p.year,\n        p.numCiting,\n        p.paper_quality_score_normalized,\n        pk.keyphraseId,\n        pk.paper_keyphrase_weighted_frequency_normalized\n    FROM \n        paper p\n    INNER JOIN \n        paperKeyphrase pk ON p.paperId = pk.paperId\n    INNER JOIN \n        keyphrase k ON pk.keyphraseId = k.keyphraseId\n    WHERE \n        p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n        AND LOWER(k.keyphraseName) LIKE '%sensor fusion%'\n),\nauthor_contribution AS (\n    SELECT \n        w.authorId,\n        a.authorName,\n        COUNT(DISTINCT rp.paperId) AS paper_count,\n        SUM(rp.numCiting) AS total_citations,\n        AVG(rp.paper_quality_score_normalized) AS avg_paper_quality,\n        STRING_AGG(DISTINCT k.keyphraseName, ', ') AS research_focus\n    FROM \n        writes w\n    INNER JOIN \n        recent_papers rp ON w.paperId = rp.paperId\n    INNER JOIN \n        author a ON w.authorId = a.authorId\n    INNER JOIN \n        paperKeyphrase pk ON rp.paperId = pk.paperId\n    INNER JOIN \n        keyphrase k ON pk.keyphraseId = k.keyphraseId\n    GROUP BY \n        w.authorId, a.authorName\n),\ncollaboration_trends AS (\n    SELECT \n        w1.authorId AS author1,\n        w2.authorId AS author2,\n        COUNT(*) AS collaboration_count\n    FROM \n        writes w1\n    INNER JOIN \n        writes w2 ON w1.paperId = w2.paperId AND w1.authorId < w2.authorId\n    INNER JOIN \n        recent_papers rp ON w1.paperId = rp.paperId\n    GROUP BY \n        w1.authorId, w2.authorId\n)\nSELECT \n    ac.authorId,\n    ac.authorName,\n    ac.paper_count,\n    ac.total_citations,\n    ac.avg_paper_quality,\n    ac.research_focus,\n    STRING_AGG(ct.author2::TEXT, ', ') AS frequent_collaborators\nFROM \n    author_contribution ac\nLEFT JOIN \n    collaboration_trends ct ON ac.authorId = ct.author1\nWHERE \n    ac.paper_count > 0\nGROUP BY \n    ac.authorId, ac.authorName, ac.paper_count, ac.total_citations, ac.avg_paper_quality, ac.research_focus\nORDER BY \n    ac.total_citations DESC, ac.avg_paper_quality DESC;\n```"
    },
    {
        "instance_id": "q_894",
        "db_id": "scholar_new",
        "question": "Which researchers focus on \"sensor fusion\" as one of their research interests, have a significant influence in their field indicated by either a normalized paper quality score greater than 0.8 or publications in journals with an impact factor exceeding 10, and have updated their research interests or affiliations within the last year? Please provide distinct results sorted in descending order of the researcher's h-index, and then by their publication count if the h-index values are equal. Include each researcher's ID, name, affiliation, h-index, publication count, research interests, and the timestamp of their last update.",
        "query": "```sql\nSELECT DISTINCT a.authorId, a.authorName, a.affiliation, a.h_index, a.publication_count, a.author_research_interests, a.author_last_updated\nFROM author a\nJOIN writes w ON a.authorId = w.authorId\nJOIN paper p ON w.paperId = p.paperId\nLEFT JOIN journal j ON p.venueId = j.journalId\nWHERE ('sensor fusion' = ANY(a.author_research_interests_normalized) OR 'sensor fusion' = ANY(a.author_research_interests))\n  AND (p.paper_quality_score_normalized > 0.8 OR j.impact_factor > 10)\n  AND a.author_last_updated >= NOW() - INTERVAL '1 year'\nORDER BY a.h_index DESC, a.publication_count DESC;\n```"
    },
    {
        "instance_id": "q_890",
        "db_id": "scholar_new",
        "question": "How many distinct high-quality papers written by Dan Klein have been cited by Michael I. Jordan, where the citing papers have a normalized citation quality score above the average threshold? Additionally, provide the total number of such citations that have occurred in papers published within the past five years.",
        "query": "```sql\nWITH AverageCitationQuality AS (\n    SELECT AVG(cited_paper_quality_score_normalized) AS avg_citation_quality\n    FROM cite\n),\nDanKleinPapers AS (\n    SELECT DISTINCT w.paperId\n    FROM writes w\n    JOIN author a ON w.authorId = a.authorId\n    WHERE a.authorName = 'Dan Klein'\n      AND w.writes_co_author_contribution_normalized > 0\n),\nMichaelJordanCitations AS (\n    SELECT DISTINCT c.citedPaperId, c.paper_citation_trend, c.citing_paper_quality_score_normalized\n    FROM cite c\n    JOIN writes w ON c.citingPaperId = w.paperId\n    JOIN author a ON w.authorId = a.authorId\n    CROSS JOIN AverageCitationQuality acq\n    WHERE a.authorName = 'Michael I. Jordan'\n      AND c.citing_paper_quality_score_normalized > acq.avg_citation_quality\n),\nHighQualityCitations AS (\n    SELECT mj.citedPaperId, mj.paper_citation_trend\n    FROM MichaelJordanCitations mj\n    JOIN DanKleinPapers dk ON mj.citedPaperId = dk.paperId\n    WHERE mj.citedPaperId IN (SELECT paperId FROM paper WHERE paper_quality_score_normalized > 0.8)\n),\nCitationTrendOverYears AS (\n    SELECT citedPaperId, SUM(CASE WHEN EXTRACT(YEAR FROM AGE(NOW(), p.paper_last_updated)) <= 5 THEN 1 ELSE 0 END) AS recent_citations\n    FROM HighQualityCitations hqc\n    JOIN paper p ON hqc.citedPaperId = p.paperId\n    GROUP BY citedPaperId\n)\nSELECT COUNT(DISTINCT citedPaperId) AS high_quality_paper_count, SUM(recent_citations) AS citation_trend_past_5_years\nFROM CitationTrendOverYears;\n```"
    },
    {
        "instance_id": "q_891",
        "db_id": "scholar_new",
        "question": "How many distinct papers written by Dan Klein reference works authored by Michael I. Jordan, considering only those citations with a quality score above the average normalized quality score within their respective citation sources? Additionally, analyze the yearly trend of such citations over the past five years, with the citation year determined by the last updated date of the citing paper.",
        "query": "```sql\nWITH AverageCitationQuality AS (\n    SELECT \n        paper_citation_source,\n        AVG(cited_paper_quality_score_normalized) AS avg_quality_score\n    FROM cite\n    GROUP BY paper_citation_source\n),\nFilteredCitations AS (\n    SELECT \n        c.citingPaperId,\n        c.paper_citation_source,\n        c.cited_paper_quality_score_normalized\n    FROM cite c\n    JOIN AverageCitationQuality acq\n        ON c.paper_citation_source = acq.paper_citation_source\n    WHERE c.cited_paper_quality_score_normalized > acq.avg_quality_score\n),\nDanKleinPapers AS (\n    SELECT w.paperId\n    FROM writes w\n    JOIN author a ON w.authorId = a.authorId\n    WHERE a.authorName = 'Dan Klein'\n),\nMichaelJordanPapers AS (\n    SELECT w.paperId\n    FROM writes w\n    JOIN author a ON w.authorId = a.authorId\n    WHERE a.authorName = 'Michael I. Jordan'\n)\nSELECT \n    COUNT(DISTINCT fc.citingPaperId) AS citation_count,\n    EXTRACT(YEAR FROM p.paper_last_updated) AS citation_year\nFROM FilteredCitations fc\nJOIN paper p ON fc.citingPaperId = p.paperId\nJOIN DanKleinPapers dkp ON fc.citingPaperId = dkp.paperId\nJOIN MichaelJordanPapers mj ON fc.citedPaperId = mj.paperId\nWHERE p.paper_last_updated >= NOW() - INTERVAL '5 years'\nGROUP BY citation_year\nORDER BY citation_year;\n```"
    },
    {
        "instance_id": "q_889",
        "db_id": "scholar_new",
        "question": "Which researchers, excluding Ameet Soni and Ras Bodik, have collaborated on papers that received citations from high-impact journals over the past five years, and how many distinct collaborations did they have each year? High-impact journals are defined as those with an impact factor greater than the average impact factor of all journals. Please provide the researcher names, the number of distinct collaborations per year, and the corresponding year.",
        "query": "```sql\nWITH high_impact_journals AS (\n    SELECT journalId\n    FROM journal\n    WHERE impact_factor > (SELECT AVG(impact_factor) FROM journal)\n),\ncited_papers AS (\n    SELECT DISTINCT c.citedPaperId\n    FROM cite c\n    JOIN paper p ON c.citedPaperId = p.paperId\n    JOIN venue v ON p.venueId = v.venueId\n    WHERE v.venueId IN (SELECT journalId FROM high_impact_journals)\n),\ncollaborators AS (\n    SELECT DISTINCT w.authorId\n    FROM writes w\n    JOIN cited_papers cp ON w.paperId = cp.citedPaperId\n    WHERE w.authorId IN (\n        SELECT authorId \n        FROM author \n        WHERE authorName IN ('Ameet Soni', 'Ras Bodik')\n    )\n),\nresearchers_collaboration_trend AS (\n    SELECT w.authorId, a.authorName, COUNT(DISTINCT w.paperId) AS collaboration_count, YEAR(p.paper_last_updated) AS year\n    FROM writes w\n    JOIN author a ON w.authorId = a.authorId\n    JOIN paper p ON w.paperId = p.paperId\n    WHERE w.authorId NOT IN (SELECT authorId FROM author WHERE authorName IN ('Ameet Soni', 'Ras Bodik'))\n      AND w.authorId IN (SELECT authorId FROM collaborators)\n      AND p.paper_last_updated >= NOW() - INTERVAL '5 years'\n    GROUP BY w.authorId, a.authorName, YEAR(p.paper_last_updated)\n)\nSELECT rct.authorName, rct.year, rct.collaboration_count\nFROM researchers_collaboration_trend rct\nORDER BY rct.authorName, rct.year;\n```"
    },
    {
        "instance_id": "q_892",
        "db_id": "scholar_new",
        "question": "Which authors, with a paper quality score greater than 0.75, have contributed to papers discussing topics related to \"Bacterial Wilt\" in the fourth quarter of 2016? Additionally, compare the average normalized co-author contribution of these authors across similar research interests, ordered by their average contribution in descending order. Include the authors' research interest confidence levels in the results.",
        "query": "```sql\nSELECT \n    a.authorName, \n    a.author_research_interests_confidence, \n    AVG(w.writes_co_author_contribution_normalized) AS avg_contribution\nFROM \n    author a\nJOIN \n    writes w ON a.authorId = w.authorId\nJOIN \n    paper p ON w.paperId = p.paperId\nJOIN \n    paperKeyphrase pk ON p.paperId = pk.paperId\nJOIN \n    keyphrase k ON pk.keyphraseId = k.keyphraseId\nWHERE \n    p.paper_quality_score > 0.75\n    AND k.keyphraseName ILIKE '%Bacterial Wilt%'\n    AND p.year = 2016\n    AND EXTRACT(QUARTER FROM p.paper_last_updated::timestamp) = 4\nGROUP BY \n    a.authorName, \n    a.author_research_interests_confidence\nORDER BY \n    avg_contribution DESC;\n```"
    },
    {
        "instance_id": "q_897",
        "db_id": "scholar_new",
        "question": "Which authors, whose normalized research interests include plant diseases and specifically mention Bacterial Wilt, published papers in journals with an impact factor higher than the average impact factor of all journals during the years 2015 to 2017, and what were the normalized citation trends of those papers over the subsequent three-year period from 2018 to 2020?",
        "query": "```sql\nSELECT \n    a.authorName, \n    p.title, \n    j.journalName, \n    c.paper_citation_trend_normalized AS citation_trend\nFROM \n    author a\nJOIN \n    writes w ON a.authorId = w.authorId\nJOIN \n    paper p ON w.paperId = p.paperId\nJOIN \n    journal j ON p.venueId = j.journalId\nLEFT JOIN \n    cite c ON p.paperId = c.citedPaperId\nWHERE \n    a.author_research_interests_normalized @> ARRAY['plant diseases', 'Bacterial Wilt']\n    AND j.impact_factor > (SELECT AVG(impact_factor) FROM journal)\n    AND p.year BETWEEN 2015 AND 2017\n    AND c.citingPaperId IN (\n        SELECT citingPaperId \n        FROM cite \n        WHERE citedPaperId = p.paperId \n        AND year BETWEEN 2018 AND 2020\n    )\nGROUP BY \n    a.authorName, p.title, j.journalName, c.paper_citation_trend_normalized;\n```"
    },
    {
        "instance_id": "q_895",
        "db_id": "scholar_new",
        "question": "Over the last five years, which keyphrases have the highest influence on driving citations, taking into account both their usage frequency in papers and the quality of those papers?",
        "query": "```sql\nSELECT \n    pk.keyphraseName,\n    SUM(p.numCiting * pk.paper_keyphrase_weighted_frequency_normalized * p.paper_quality_score_normalized) AS influence_score\nFROM \n    paperKeyphrase pk\nJOIN \n    paper p ON pk.paperId = p.paperId\nWHERE \n    p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\nGROUP BY \n    pk.keyphraseName\nORDER BY \n    influence_score DESC;\n```"
    },
    {
        "instance_id": "q_896",
        "db_id": "scholar_new",
        "question": "Which papers published in ACL 2014 have focused on Parsing techniques, referenced datasets with above-average download counts, and are sorted in descending order based on the download count of the referenced datasets?",
        "query": "```sql\nSELECT DISTINCT p.paperId, p.title, p.year, p.paper_keywords \nFROM paper p\nJOIN venue v ON p.venueId = v.venueId\nJOIN paperDataset pd ON p.paperId = pd.paperId\nJOIN dataset d ON pd.datasetId = d.datasetId\nJOIN paperKeyphrase pk ON p.paperId = pk.paperId\nJOIN keyphrase k ON pk.keyphraseId = k.keyphraseId\nWHERE v.venueName = 'ACL' \nAND p.year = 2014 \nAND k.keyphraseName ILIKE '%parsing%' \nAND d.dataset_download_count > (SELECT AVG(dataset_download_count) FROM dataset)\nORDER BY d.dataset_download_count DESC;\n```"
    },
    {
        "instance_id": "q_901",
        "db_id": "scholar_new",
        "question": "在2014年，哪些研究者发表的论文引用了ACL会议的论文？这些被引用的论文所在领域的影响力（通过期刊影响因子衡量）如何？同时，请分析这些研究者的合作网络特征，包括他们发表的论文数量、平均合作者贡献度以及不同合作者的数量。此外，这些研究者在其相关数据集上的使用趋势如何，具体体现在数据集的质量评分上？请按照引用论文的质量评分降序排列结果。",
        "query": "```sql\nWITH acl_citations AS (\n    SELECT \n        c.citingPaperId,\n        p.year AS citing_paper_year,\n        p.paper_quality_score_normalized AS citing_paper_quality_score,\n        v.venueName AS cited_venue_name,\n        j.impact_factor AS cited_venue_impact_factor\n    FROM \n        cite c\n    JOIN \n        paper p ON c.citingPaperId = p.paperId\n    JOIN \n        venue v ON c.citedPaperId = v.venueId\n    LEFT JOIN \n        journal j ON v.venueId = j.journalId\n    WHERE \n        v.venueName = 'ACL' \n        AND p.year = 2014\n),\nauthor_networks AS (\n    SELECT \n        w.authorId,\n        COUNT(DISTINCT w.paperId) AS paper_count,\n        AVG(w.writes_co_author_contribution_normalized) AS avg_co_author_contribution,\n        COUNT(DISTINCT w.co_author_count) AS distinct_co_author_count\n    FROM \n        writes w\n    JOIN \n        acl_citations ac ON w.paperId = ac.citingPaperId\n    GROUP BY \n        w.authorId\n),\ndataset_usage AS (\n    SELECT \n        pd.paperId,\n        d.datasetName,\n        pd.paper_dataset_quality_score_normalized AS dataset_quality_score\n    FROM \n        paperDataset pd\n    JOIN \n        dataset d ON pd.datasetId = d.datasetId\n    WHERE \n        pd.paperId IN (SELECT citingPaperId FROM acl_citations)\n)\nSELECT \n    a.authorName,\n    ac.citing_paper_year,\n    ac.cited_venue_name,\n    ac.cited_venue_impact_factor,\n    an.paper_count,\n    an.avg_co_author_contribution,\n    an.distinct_co_author_count,\n    du.datasetName,\n    du.dataset_quality_score\nFROM \n    author a\nJOIN \n    writes w ON a.authorId = w.authorId\nJOIN \n    acl_citations ac ON w.paperId = ac.citingPaperId\nJOIN \n    author_networks an ON a.authorId = an.authorId\nLEFT JOIN \n    dataset_usage du ON ac.citingPaperId = du.paperId\nORDER BY \n    ac.citing_paper_quality_score DESC;\n```"
    },
    {
        "instance_id": "q_908",
        "db_id": "scholar_new",
        "question": "Which researchers, identified by their name and ID, have contributed to papers with a normalized paper quality score greater than 0.8 that extensively utilize more than three distinct datasets, across different venues over the past five years? Additionally, provide the total number of citations received by these papers, the average paper quality score, and the number of distinct datasets used, grouped by the researcher and the venue (identified by venue ID and name). Sort the results in descending order of average paper quality score and total citations.",
        "query": "```sql\nSELECT \n    a.authorName,\n    a.authorId,\n    p.venueId,\n    v.venueName,\n    SUM(p.numCitedBy) AS total_citations,\n    AVG(p.paper_quality_score) AS avg_paper_quality_score,\n    COUNT(DISTINCT pd.datasetId) AS num_datasets_used\nFROM \n    author a\nJOIN writes w ON a.authorId = w.authorId\nJOIN paper p ON w.paperId = p.paperId\nJOIN venue v ON p.venueId = v.venueId\nJOIN paperDataset pd ON p.paperId = pd.paperId\nWHERE \n    p.paper_quality_score_normalized > 0.8\n    AND p.year BETWEEN EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5 AND EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC')\nGROUP BY \n    a.authorName, a.authorId, p.venueId, v.venueName\nHAVING \n    COUNT(DISTINCT pd.datasetId) > 3\nORDER BY \n    avg_paper_quality_score DESC, total_citations DESC;\n```"
    },
    {
        "instance_id": "q_898",
        "db_id": "scholar_new",
        "question": "Which research papers from the ACL 2014 conference, whose abstracts mention \"question-answering\", have been most influential in shaping the understanding of question-answering systems? Consider both the normalized quality scores of citations received by these papers and the trend of unique dataset usage over time, as reflected by the average normalized quality of datasets associated with each paper. Return the top 10 results, ordered first by total citation quality in descending order and then by average dataset quality in descending order.",
        "query": "```sql\nSELECT \n    p.paperId,\n    p.title,\n    SUM(c.cited_paper_quality_score_normalized) AS total_citation_quality,\n    COUNT(DISTINCT pd.datasetId) AS unique_datasets_used,\n    AVG(pd.paper_dataset_quality_score_normalized) AS avg_dataset_quality\nFROM \n    paper p\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nJOIN \n    paperDataset pd ON p.paperId = pd.paperId\nJOIN \n    venue v ON p.venueId = v.venueId\nWHERE \n    v.venueName = 'ACL' \n    AND p.year = 2014 \n    AND p.paper_abstract ILIKE '%question-answering%'\nGROUP BY \n    p.paperId, p.title\nORDER BY \n    total_citation_quality DESC, avg_dataset_quality DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_900",
        "db_id": "scholar_new",
        "question": "Which research papers discussing the keyphrase \"Parsing\" and referencing datasets related to \"game shows\" were published in conferences with a higher-than-average citation density among all conference papers? Additionally, provide the citation trend of these papers over the years. Include only papers authored by researchers who have demonstrated a consistent year-over-year increase in their normalized paper quality score across all their publications. List the paper ID, title, dataset name, and citation trend in the results.",
        "query": "```sql\nSELECT \n    p.paperId,\n    p.title,\n    d.datasetName,\n    c.paper_citation_trend AS citation_trend\nFROM \n    paper p\nJOIN \n    writes w ON p.paperId = w.paperId\nJOIN \n    author a ON w.authorId = a.authorId\nJOIN \n    paperKeyphrase pk ON p.paperId = pk.paperId\nJOIN \n    keyphrase k ON pk.keyphraseId = k.keyphraseId\nJOIN \n    paperDataset pd ON p.paperId = pd.paperId\nJOIN \n    dataset d ON pd.datasetId = d.datasetId\nJOIN \n    venue v ON p.venueId = v.venueId\nLEFT JOIN \n    cite c ON p.paperId = c.citedPaperId\nWHERE \n    k.keyphraseName = 'Parsing'\n    AND d.datasetName LIKE '%game shows%'\n    AND v.venue_type = 'conference'\n    AND p.numCiting > (SELECT AVG(p2.numCiting) FROM paper p2 JOIN venue v2 ON p2.venueId = v2.venueId WHERE v2.venue_type = 'conference')\n    AND a.authorId IN (\n        SELECT wa.authorId\n        FROM writes wa\n        JOIN paper pa ON wa.paperId = pa.paperId\n        GROUP BY wa.authorId\n        HAVING BOOL_AND(pa.paper_quality_score_normalized > LAG(pa.paper_quality_score_normalized) OVER (PARTITION BY wa.authorId ORDER BY pa.year))\n    )\nGROUP BY \n    p.paperId, p.title, d.datasetName, c.paper_citation_trend;\n```"
    },
    {
        "instance_id": "q_899",
        "db_id": "scholar_new",
        "question": "Which conference venue has the highest concentration of high-quality papers related to deep learning, considering both the average citation count and the average quality score of papers published in the past five years, where the normalized quality score of each paper exceeds 0.8? Provide the venue ID, venue name, average citation count, average paper quality score, and total count of such high-quality papers, ranked first by descending average paper quality, then by descending average citation count, and finally by descending paper count.",
        "query": "```sql\nWITH high_quality_papers AS (\n    SELECT \n        p.paperId,\n        p.venueId,\n        p.paper_quality_score_normalized,\n        p.numCiting,\n        p.year\n    FROM \n        paper p\n    INNER JOIN \n        paperKeyphrase pk ON p.paperId = pk.paperId\n    INNER JOIN \n        keyphrase k ON pk.keyphraseId = k.keyphraseId\n    WHERE \n        k.keyphraseName ILIKE '%deep learning%'\n        AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5\n        AND p.paper_quality_score_normalized > 0.8\n),\ncitation_density AS (\n    SELECT \n        hqp.venueId,\n        AVG(hqp.numCiting) AS avg_citations,\n        AVG(hqp.paper_quality_score_normalized) AS avg_paper_quality\n    FROM \n        high_quality_papers hqp\n    GROUP BY \n        hqp.venueId\n),\nvenue_concentration AS (\n    SELECT \n        cd.venueId,\n        v.venueName,\n        cd.avg_citations,\n        cd.avg_paper_quality,\n        COUNT(hqp.paperId) AS paper_count\n    FROM \n        citation_density cd\n    INNER JOIN \n        venue v ON cd.venueId = v.venueId\n    INNER JOIN \n        high_quality_papers hqp ON cd.venueId = hqp.venueId\n    WHERE \n        v.venue_type = 'conference'\n    GROUP BY \n        cd.venueId, v.venueName, cd.avg_citations, cd.avg_paper_quality\n)\nSELECT \n    vc.venueId,\n    vc.venueName,\n    vc.avg_citations,\n    vc.avg_paper_quality,\n    vc.paper_count\nFROM \n    venue_concentration vc\nORDER BY \n    vc.avg_paper_quality DESC, vc.avg_citations DESC, vc.paper_count DESC\nLIMIT 1;\n```"
    },
    {
        "instance_id": "q_910",
        "db_id": "scholar_new",
        "question": "Which papers authored by Ali Farhadi in 2016 have been cited by other works with a normalized citing paper quality score greater than 0.8, and how do these citations vary across different conferences and journals? Additionally, for these papers, what is the trend of dataset usage over time, including the total usage count, the first year of usage, and the last year of usage for each associated dataset?",
        "query": "```sql\nWITH ali_papers AS (\n    SELECT \n        p.paperId, \n        p.title, \n        p.year, \n        p.venueId, \n        v.venueName, \n        v.venue_type\n    FROM \n        paper p\n    JOIN \n        writes w ON p.paperId = w.paperId\n    JOIN \n        author a ON w.authorId = a.authorId\n    LEFT JOIN \n        venue v ON p.venueId = v.venueId\n    WHERE \n        a.authorName = 'Ali Farhadi' \n        AND p.year = 2016\n),\nhigh_quality_citations AS (\n    SELECT \n        c.citedPaperId, \n        c.citing_paper_quality_score_normalized, \n        p.venueId, \n        v.venueName, \n        v.venue_type\n    FROM \n        cite c\n    JOIN \n        paper p ON c.citingPaperId = p.paperId\n    LEFT JOIN \n        venue v ON p.venueId = v.venueId\n    WHERE \n        c.citing_paper_quality_score_normalized > 0.8\n),\ncitation_trends AS (\n    SELECT \n        ap.paperId, \n        ap.title, \n        hqc.venueName AS citing_venue, \n        hqc.venue_type AS citing_venue_type, \n        COUNT(*) AS citation_count\n    FROM \n        ali_papers ap\n    JOIN \n        high_quality_citations hqc ON ap.paperId = hqc.citedPaperId\n    GROUP BY \n        ap.paperId, ap.title, hqc.venueName, hqc.venue_type\n),\ndataset_usage_trends AS (\n    SELECT \n        pd.paperId, \n        d.datasetName, \n        SUM(pd.dataset_paper_count) AS total_usage, \n        MIN(p.year) AS first_used_year, \n        MAX(p.year) AS last_used_year\n    FROM \n        paperDataset pd\n    JOIN \n        dataset d ON pd.datasetId = d.datasetId\n    JOIN \n        paper p ON pd.paperId = p.paperId\n    WHERE \n        p.paperId IN (SELECT paperId FROM ali_papers)\n    GROUP BY \n        pd.paperId, d.datasetName\n)\nSELECT \n    ct.paperId, \n    ct.title, \n    ct.citing_venue, \n    ct.citing_venue_type, \n    ct.citation_count, \n    dut.datasetName, \n    dut.total_usage, \n    dut.first_used_year, \n    dut.last_used_year\nFROM \n    citation_trends ct\nLEFT JOIN \n    dataset_usage_trends dut ON ct.paperId = dut.paperId;\n```"
    },
    {
        "instance_id": "q_913",
        "db_id": "scholar_new",
        "question": "What are the citation trends and research impacts of papers authored by Ali Farhadi in computer vision-related conferences between 2015 and 2017, specifically focusing on venues with above-average citation density and paper quality? List the results in descending order of citation count and paper quality score. Include the paper ID, title, publication year, citation count, paper quality score, venue name, and venue impact factor in the output.",
        "query": "```sql\nSELECT \n    p.paperId,\n    p.title,\n    p.year,\n    p.numCiting AS citation_count,\n    p.paper_quality_score AS paper_quality,\n    v.venueName,\n    v.impact_factor AS venue_impact_factor\nFROM \n    paper p\nJOIN \n    writes w ON p.paperId = w.paperId\nJOIN \n    author a ON w.authorId = a.authorId\nJOIN \n    venue v ON p.venueId = v.venueId\nWHERE \n    a.authorName = 'Ali Farhadi'\n    AND p.year BETWEEN 2015 AND 2017\n    AND v.venue_type = 'conference'\n    AND 'computer vision' = ANY(a.author_research_interests_normalized)\n    AND v.impact_factor > (SELECT AVG(impact_factor) FROM venue WHERE venue_type = 'conference')\n    AND p.numCiting > (SELECT AVG(numCiting) FROM paper WHERE year BETWEEN 2015 AND 2017)\nORDER BY \n    p.numCiting DESC,\n    p.paper_quality_score DESC;\n```"
    },
    {
        "instance_id": "q_902",
        "db_id": "scholar_new",
        "question": "What are the high-quality publications authored by Ali Farhadi in 2016, where the papers have a significant impact on dataset usage and strong relevance to key research phrases? Include details on the citation count, quality score of the papers, the number of times these papers influence dataset usage, the dataset influence score, the frequency of associated keyphrases, and the weighted relevance of these keyphrases over time. Only consider papers with a quality score of 8.0 or higher, dataset usage counts exceeding 50, and weighted keyphrase relevance scores of at least 0.7. Sort the results by citation count in descending order, followed by dataset influence score and weighted keyphrase relevance in descending order.",
        "query": "```sql\nSELECT \n    p.paperId,\n    p.title,\n    p.numCiting AS citation_count,\n    p.paper_quality_score AS quality_score,\n    pd.dataset_paper_count AS dataset_usage_count,\n    pd.paper_dataset_quality_score AS dataset_influence_score,\n    pk.keyphrase_frequency AS keyphrase_relevance,\n    pk.paper_keyphrase_weighted_frequency AS weighted_keyphrase_relevance,\n    p.year AS publication_year\nFROM \n    paper p\nJOIN \n    writes w ON p.paperId = w.paperId\nJOIN \n    author a ON w.authorId = a.authorId\nLEFT JOIN \n    paperDataset pd ON p.paperId = pd.paperId\nLEFT JOIN \n    paperKeyphrase pk ON p.paperId = pk.paperId\nWHERE \n    a.authorName = 'Ali Farhadi'\n    AND p.year = 2016\n    AND p.paper_quality_score >= 8.0\n    AND pd.dataset_paper_count > 50\n    AND pk.paper_keyphrase_weighted_frequency >= 0.7\nORDER BY \n    p.numCiting DESC,\n    pd.paper_dataset_quality_score DESC,\n    pk.paper_keyphrase_weighted_frequency DESC;\n```"
    },
    {
        "instance_id": "q_907",
        "db_id": "scholar_new",
        "question": "Which research papers, considering only open-access papers, are most closely associated with the concept of \"semantic data,\" based on their normalized quality scores, the impact factors of the venues where they were published, and the normalized weighted frequency of the keyphrase \"semantic data\"? Additionally, for these papers, what is the trend of citations over time, measured by the normalized citation trend and the age of the paper? Finally, which datasets, having a download count exceeding 1,000, have been frequently utilized in conjunction with these papers, and what is the normalized relevance score of these datasets to the respective papers? The results should be ordered by descending normalized quality score, descending venue impact factor, descending keyphrase relevance, and descending citation trend.",
        "query": "```sql\nWITH relevant_papers AS (\n    SELECT \n        p.paperId,\n        p.title,\n        p.paper_quality_score_normalized AS quality_score,\n        v.impact_factor AS venue_prominence,\n        pk.paper_keyphrase_weighted_frequency_normalized AS keyphrase_relevance\n    FROM \n        paper p\n    JOIN \n        paperKeyphrase pk ON p.paperId = pk.paperId\n    JOIN \n        keyphrase k ON pk.keyphraseId = k.keyphraseId\n    JOIN \n        venue v ON p.venueId = v.venueId\n    WHERE \n        k.keyphraseName ILIKE '%semantic data%'\n        AND p.is_open_access = TRUE\n),\ncitation_trends AS (\n    SELECT \n        c.citedPaperId,\n        c.paper_citation_trend_normalized AS citation_trend,\n        EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - p.year AS age\n    FROM \n        cite c\n    JOIN \n        paper p ON c.citedPaperId = p.paperId\n    WHERE \n        c.cited_paper_quality_score_normalized > 0.5\n),\nfrequent_datasets AS (\n    SELECT \n        pd.paperId,\n        d.datasetName,\n        pd.paper_dataset_quality_score_normalized AS dataset_relevance\n    FROM \n        paperDataset pd\n    JOIN \n        dataset d ON pd.datasetId = d.datasetId\n    WHERE \n        d.dataset_download_count > 1000\n)\nSELECT \n    rp.paperId,\n    rp.title,\n    rp.quality_score,\n    rp.venue_prominence,\n    rp.keyphrase_relevance,\n    ct.citation_trend,\n    ct.age,\n    fd.datasetName,\n    fd.dataset_relevance\nFROM \n    relevant_papers rp\nLEFT JOIN \n    citation_trends ct ON rp.paperId = ct.citedPaperId\nLEFT JOIN \n    frequent_datasets fd ON rp.paperId = fd.paperId\nORDER BY \n    rp.quality_score DESC, \n    rp.venue_prominence DESC, \n    rp.keyphrase_relevance DESC, \n    ct.citation_trend DESC;\n```"
    },
    {
        "instance_id": "q_903",
        "db_id": "scholar_new",
        "question": "Which authors from China have the highest weighted citation scores for their publications in the last five years, considering both the journal impact factors and the number of distinct datasets used in their papers? The weighted citation score is calculated by multiplying the number of citations each publication has received by the impact factor of the journal in which it was published. The results should be ordered first by descending weighted citation score and then by descending count of distinct datasets used, limited to the top 10 authors.",
        "query": "```sql\nSELECT \n    a.authorName, \n    SUM(p.numCitedBy * j.impact_factor) AS weighted_citation_score, \n    COUNT(DISTINCT pd.datasetId) AS dataset_usage_count\nFROM \n    author a\nJOIN \n    writes w ON a.authorId = w.authorId\nJOIN \n    paper p ON w.paperId = p.paperId\nJOIN \n    journal j ON p.venueId = j.journalId\nLEFT JOIN \n    paperDataset pd ON p.paperId = pd.paperId\nWHERE \n    a.author_country = 'China'\n    AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\nGROUP BY \n    a.authorName\nORDER BY \n    weighted_citation_score DESC, \n    dataset_usage_count DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_909",
        "db_id": "scholar_new",
        "question": "Which authors have the highest influence in conferences related to human-computer interaction, considering both the total number of papers published and the weighted quality of citations received over the past five years? The weighted citation quality is calculated by multiplying the number of citations each paper received by the normalized quality score of those citations. Only authors whose normalized research interests include human-computer interaction are considered, and the results are limited to the top 10 authors based on the combined metrics of published papers and citation quality.",
        "query": "```sql\nSELECT \n    a.authorId,\n    a.authorName,\n    SUM(w.co_author_count) AS total_papers_published,\n    SUM(p.numCitedBy * c.cited_paper_quality_score_normalized) AS weighted_citation_quality\nFROM \n    author a\nJOIN \n    writes w ON a.authorId = w.authorId\nJOIN \n    paper p ON w.paperId = p.paperId\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nJOIN \n    venue v ON p.venueId = v.venueId\nWHERE \n    v.venue_type = 'conference'\n    AND 'human-computer interaction' = ANY(a.author_research_interests_normalized)\n    AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\nGROUP BY \n    a.authorId, a.authorName\nORDER BY \n    total_papers_published DESC, weighted_citation_quality DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_906",
        "db_id": "scholar_new",
        "question": "Which author from China has the highest influence in the past decade, based on the weighted quality of their publications (considering co-author contributions), the total quality of citations received, and the average impact factor of the venues where their papers were published, while also taking into account the significance of their research areas?",
        "query": "```sql\nSELECT \n    a.authorId,\n    a.authorName,\n    SUM(p.paper_quality_score_normalized * w.writes_co_author_contribution_normalized) AS weighted_paper_quality,\n    COUNT(DISTINCT p.paperId) AS paper_count,\n    SUM(c.citing_paper_quality_score_normalized) AS total_citation_quality,\n    AVG(v.impact_factor) AS avg_venue_impact\nFROM \n    author a\nJOIN \n    writes w ON a.authorId = w.authorId\nJOIN \n    paper p ON w.paperId = p.paperId\nLEFT JOIN \n    cite c ON p.paperId = c.citedPaperId\nJOIN \n    venue v ON p.venueId = v.venueId\nWHERE \n    a.author_country = 'CHI'\n    AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 10\nGROUP BY \n    a.authorId, a.authorName\nORDER BY \n    weighted_paper_quality DESC, total_citation_quality DESC, avg_venue_impact DESC\nLIMIT 1;\n```"
    },
    {
        "instance_id": "q_905",
        "db_id": "scholar_new",
        "question": "Which researchers have the highest influence in conferences with names containing \"chi,\" considering both the total number of publications and the average quality of citations received over the past five years? Provide results for up to 10 researchers, ranked first by the total number of publications in descending order and then by the total quality of citations in descending order.",
        "query": "```sql\nSELECT \n    a.authorId,\n    a.authorName,\n    SUM(w.co_author_count) AS total_publications,\n    AVG(p.paper_quality_score_normalized) AS avg_paper_quality,\n    SUM(c.cited_paper_quality_score_normalized) AS total_citation_quality\nFROM \n    author a\nJOIN \n    writes w ON a.authorId = w.authorId\nJOIN \n    paper p ON w.paperId = p.paperId\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nJOIN \n    venue v ON p.venueId = v.venueId\nWHERE \n    v.venueName ILIKE '%chi%'\n    AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5\nGROUP BY \n    a.authorId, a.authorName\nORDER BY \n    total_publications DESC, total_citation_quality DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_911",
        "db_id": "scholar_new",
        "question": "In which year did Ye Cao experience the highest combined growth in both the number of publications and the quality of citations received, compared to the previous year?",
        "query": "```sql\nWITH yearly_impact AS (\n    SELECT \n        p.year,\n        COUNT(p.paperId) AS publication_count,\n        SUM(c.cited_paper_quality_score_normalized) AS quality_citations\n    FROM \n        paper p\n    JOIN \n        writes w ON p.paperId = w.paperId\n    JOIN \n        cite c ON p.paperId = c.citedPaperId\n    WHERE \n        w.authorId = (SELECT authorId FROM author WHERE authorName = 'Ye Cao')\n    GROUP BY \n        p.year\n),\nimpact_growth AS (\n    SELECT \n        year,\n        publication_count,\n        quality_citations,\n        (publication_count - LAG(publication_count) OVER (ORDER BY year)) AS pub_growth,\n        (quality_citations - LAG(quality_citations) OVER (ORDER BY year)) AS citation_growth\n    FROM \n        yearly_impact\n)\nSELECT \n    year\nFROM \n    impact_growth\nWHERE \n    (pub_growth IS NOT NULL AND citation_growth IS NOT NULL)\nORDER BY \n    SQRT(pub_growth * pub_growth + citation_growth * citation_growth) DESC\nLIMIT 1;\n```"
    },
    {
        "instance_id": "q_914",
        "db_id": "scholar_new",
        "question": "在哪些年份，Ye Cao 发表的论文同时满足以下条件时，其引用质量与发表数量的综合影响最大：论文引用了用户评分为4.5及以上的高质量数据集，并且发表在影响因子不低于10的顶级期刊或顶级会议（包括类型为“top conference”和“top journal”的场所）？请按照引用数量总和与论文质量归一化评分平均值的乘积进行排序，并返回影响最大的年份。",
        "query": "```sql\nSELECT p.year \nFROM paper p\nJOIN writes w ON p.paperId = w.paperId\nJOIN author a ON w.authorId = a.authorId\nJOIN paperDataset pd ON p.paperId = pd.paperId\nJOIN dataset d ON pd.datasetId = d.datasetId\nJOIN venue v ON p.venueId = v.venueId\nWHERE a.authorName = 'Ye Cao'\n  AND d.dataset_user_rating >= 4.5\n  AND (v.impact_factor >= 10 OR v.venue_type IN ('top conference', 'top journal'))\nGROUP BY p.year\nORDER BY SUM(p.numCitedBy) * AVG(p.paper_quality_score_normalized) DESC\nLIMIT 1;\n```"
    },
    {
        "instance_id": "q_912",
        "db_id": "scholar_new",
        "question": "Which conferences in the field of NLP have the highest influence over the past five years, considering the number of papers published, the average quality of these papers, the total normalized citation quality, and the average h-index of the authors? Please rank the results by total citation quality in descending order, followed by average paper quality and average author h-index, and limit the output to the top 10 conferences.",
        "query": "```sql\nSELECT \n    v.venueName AS conference_name,\n    COUNT(DISTINCT p.paperId) AS paper_count,\n    AVG(p.paper_quality_score_normalized) AS avg_paper_quality,\n    SUM(c.cited_paper_quality_score_normalized) AS total_citation_quality,\n    AVG(a.h_index) AS avg_author_h_index\nFROM \n    venue v\nJOIN \n    paper p ON v.venueId = p.venueId\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nJOIN \n    writes w ON p.paperId = w.paperId\nJOIN \n    author a ON w.authorId = a.authorId\nWHERE \n    v.venue_type = 'conference'\n    AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n    AND 'NLP' = ANY(a.author_research_interests_normalized)\nGROUP BY \n    v.venueName\nORDER BY \n    total_citation_quality DESC,\n    avg_paper_quality DESC,\n    avg_author_h_index DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_918",
        "db_id": "scholar_new",
        "question": "Among Brian DeRenzi's publications, which keyphrase has the highest citation quality score when considering both the relevance of the keyphrase (measured by its weighted frequency normalized) and the trend of citations over time (indicated by the normalized quality score of cited papers)?",
        "query": "```sql\nSELECT \n    pk.keyphraseName AS keyphrase, \n    SUM(c.cited_paper_quality_score_normalized * pk.paper_keyphrase_weighted_frequency_normalized) AS citation_quality_score\nFROM \n    author a\nJOIN \n    writes w ON a.authorId = w.authorId\nJOIN \n    paper p ON w.paperId = p.paperId\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nJOIN \n    paperKeyphrase pk ON p.paperId = pk.paperId\nWHERE \n    a.authorName = 'Brian DeRenzi'\nGROUP BY \n    pk.keyphraseName\nORDER BY \n    citation_quality_score DESC\nLIMIT 1;\n```"
    },
    {
        "instance_id": "q_919",
        "db_id": "scholar_new",
        "question": "What are the key research areas and influential papers of Brian DeRenzi over the past decade, considering the citation trends and quality of venues where his work has been published? Specifically, identify the papers' titles, publication years, citation counts (both incoming and outgoing), normalized paper quality scores, venue names, and venue impact factors. Additionally, list the associated keyphrases and datasets for each paper. Finally, rank the results by publication year in descending order, total citation quality in descending order, and paper quality score in descending order to analyze how his research interests have evolved over time.",
        "query": "```sql\nWITH brian_papers AS (\n    SELECT \n        p.paperId,\n        p.title,\n        p.year,\n        p.numCiting,\n        p.numCitedBy,\n        p.paper_quality_score_normalized,\n        v.venueName,\n        v.impact_factor,\n        ARRAY_AGG(DISTINCT pk.keyphraseName) AS keyphrases,\n        ARRAY_AGG(DISTINCT d.datasetName) AS datasets\n    FROM \n        author a\n    JOIN writes w ON a.authorId = w.authorId\n    JOIN paper p ON w.paperId = p.paperId\n    LEFT JOIN venue v ON p.venueId = v.venueId\n    LEFT JOIN paperKeyphrase pk ON p.paperId = pk.paperId\n    LEFT JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId\n    LEFT JOIN paperDataset pd ON p.paperId = pd.paperId\n    LEFT JOIN dataset d ON pd.datasetId = d.datasetId\n    WHERE \n        a.authorName = 'Brian DeRenzi' \n        AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 10\n    GROUP BY \n        p.paperId, p.title, p.year, p.numCiting, p.numCitedBy, p.paper_quality_score_normalized, v.venueName, v.impact_factor\n),\ncitation_trends AS (\n    SELECT \n        c.citedPaperId,\n        SUM(c.citing_paper_quality_score_normalized) AS total_citation_quality\n    FROM \n        cite c\n    JOIN brian_papers bp ON c.citedPaperId = bp.paperId\n    WHERE \n        c.citing_paper_quality_score_normalized IS NOT NULL\n    GROUP BY \n        c.citedPaperId\n)\nSELECT \n    bp.title,\n    bp.year,\n    bp.numCiting,\n    bp.numCitedBy,\n    bp.paper_quality_score_normalized,\n    bp.venueName,\n    bp.impact_factor,\n    bp.keyphrases,\n    bp.datasets,\n    ct.total_citation_quality\nFROM \n    brian_papers bp\nLEFT JOIN citation_trends ct ON bp.paperId = ct.citedPaperId\nORDER BY \n    bp.year DESC, ct.total_citation_quality DESC, bp.paper_quality_score_normalized DESC;\n```"
    },
    {
        "instance_id": "q_916",
        "db_id": "scholar_new",
        "question": "What is the annual publication count, total citation quality score, and average venue influence of Michael Stonebraker's papers in GIS-related conferences over the past 10 years, where citation quality is measured by the normalized quality score of citing papers and venue influence is determined by the average impact factor of associated journals?",
        "query": "```sql\nSELECT \n    p.year AS publication_year,\n    COUNT(p.paperId) AS publication_count,\n    SUM(c.cited_paper_quality_score_normalized) AS total_citation_quality,\n    AVG(j.impact_factor) AS avg_venue_influence\nFROM \n    paper p\nJOIN \n    writes w ON p.paperId = w.paperId\nJOIN \n    author a ON w.authorId = a.authorId\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nJOIN \n    venue v ON p.venueId = v.venueId\nLEFT JOIN \n    journal j ON v.venueId = j.journalId\nWHERE \n    a.authorName = 'Michael Stonebraker' \n    AND v.venue_type = 'conference' \n    AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 10 \n    AND LOWER(a.author_research_interests::text) LIKE '%gis%'\nGROUP BY \n    p.year\nORDER BY \n    p.year ASC;\n```"
    },
    {
        "instance_id": "q_915",
        "db_id": "scholar_new",
        "question": "In which year did Michael Stonebraker contribute to a research paper in the field of GIS databases that had a significant influence, as evidenced by both strong citation trends and publication in high-quality venues? Specifically, consider papers with a normalized quality score greater than 0.8 for citing papers, an impact factor greater than 3.0 for the venues where the citing papers were published, and a normalized citation trend score greater than 0.7. The result should be based on the year with the highest number of citations and, in case of a tie, the highest average normalized quality score of the citing papers.",
        "query": "```sql\nSELECT p.year \nFROM paper p\nJOIN writes w ON p.paperId = w.paperId\nJOIN author a ON w.authorId = a.authorId\nJOIN cite c ON p.paperId = c.citedPaperId\nJOIN paper citing_p ON c.citingPaperId = citing_p.paperId\nJOIN venue v ON citing_p.venueId = v.venueId\nWHERE a.authorName = 'Michael Stonebraker'\n  AND citing_p.paper_quality_score_normalized > 0.8\n  AND v.impact_factor > 3.0\n  AND c.paper_citation_trend_normalized > 0.7\n  AND p.paper_keywords_normalized @> ARRAY['GIS', 'databases']\nGROUP BY p.year\nORDER BY COUNT(c.citingPaperId) DESC, AVG(citing_p.paper_quality_score_normalized) DESC\nLIMIT 1;\n```"
    },
    {
        "instance_id": "q_917",
        "db_id": "scholar_new",
        "question": "In which year did Michael Stonebraker contribute to a paper that significantly influenced the GIS domain, as evidenced by the paper being cited in high-quality venues with an impact factor greater than 2.0, where the normalized quality score of the citing papers exceeded 0.8, and the aggregated normalized quality score of all citations was greater than 10?",
        "query": "```sql\nSELECT p.year\nFROM paper p\nJOIN writes w ON p.paperId = w.paperId\nJOIN author a ON w.authorId = a.authorId\nJOIN cite c ON p.paperId = c.citedPaperId\nJOIN paper citing_p ON c.citingPaperId = citing_p.paperId\nJOIN venue v ON citing_p.venueId = v.venueId\nWHERE a.authorName = 'Michael Stonebraker'\n  AND citing_p.paper_keywords_normalized && ARRAY['GIS']::text[]\n  AND citing_p.paper_quality_score_normalized > 0.8\n  AND v.impact_factor > 2.0\nGROUP BY p.year\nHAVING SUM(c.citing_paper_quality_score_normalized) > 10\nORDER BY p.year DESC\nLIMIT 1;\n```"
    },
    {
        "instance_id": "q_920",
        "db_id": "scholar_new",
        "question": "Which research paper presented at CVPR in the current year has the highest combined citation quality score, calculated as the product of the number of citations and the paper quality score?",
        "query": "```sql\nSELECT \n    p.paperId, \n    p.title, \n    p.numCiting, \n    p.paper_quality_score AS citation_quality_score\nFROM \n    paper p\nJOIN \n    venue v ON p.venueId = v.venueId\nWHERE \n    v.venueName = 'CVPR' \n    AND p.year = EXTRACT(YEAR FROM CURRENT_DATE)\nORDER BY \n    (p.numCiting * p.paper_quality_score) DESC\nLIMIT 1;\n```"
    },
    {
        "instance_id": "q_921",
        "db_id": "scholar_new",
        "question": "What is the annual trend of citations received by Luke Zettlemoyer's publications over the years, broken down by the quality score and citation source of those citations? Additionally, how does this trend compare to the average annual citation trend for authors in the research areas of Natural Language Processing and Machine Learning over the past five years, considering both the average quality score and citation count per author, grouped by citation source?",
        "query": "```sql\nWITH luke_zettlemoyer_citations AS (\n    SELECT \n        p.year,\n        c.cited_paper_quality_score AS quality_score,\n        c.paper_citation_source AS citation_source,\n        COUNT(c.citedPaperId) AS citation_count\n    FROM \n        paper p\n    JOIN \n        writes w ON p.paperId = w.paperId\n    JOIN \n        author a ON w.authorId = a.authorId\n    JOIN \n        cite c ON p.paperId = c.citedPaperId\n    WHERE \n        a.authorName = 'Luke Zettlemoyer'\n    GROUP BY \n        p.year, c.cited_paper_quality_score, c.paper_citation_source\n),\nresearch_area_avg_citations AS (\n    SELECT \n        p.year,\n        AVG(c.cited_paper_quality_score) AS avg_quality_score,\n        c.paper_citation_source AS citation_source,\n        COUNT(c.citedPaperId) / COUNT(DISTINCT a.authorId) AS avg_citation_count\n    FROM \n        paper p\n    JOIN \n        writes w ON p.paperId = w.paperId\n    JOIN \n        author a ON w.authorId = a.authorId\n    JOIN \n        cite c ON p.paperId = c.citedPaperId\n    WHERE \n        a.author_research_interests && ARRAY['Natural Language Processing', 'Machine Learning']\n        AND p.year > EXTRACT(YEAR FROM CURRENT_DATE) - 5\n    GROUP BY \n        p.year, c.paper_citation_source\n)\nSELECT \n    lz.year,\n    lz.quality_score AS luke_quality_score,\n    lz.citation_source AS luke_citation_source,\n    lz.citation_count AS luke_citation_count,\n    ra.avg_quality_score AS area_avg_quality_score,\n    ra.citation_source AS area_avg_citation_source,\n    ra.avg_citation_count AS area_avg_citation_count\nFROM \n    luke_zettlemoyer_citations lz\nLEFT JOIN \n    research_area_avg_citations ra\nON \n    lz.year = ra.year AND lz.citation_source = ra.citation_source\nORDER BY \n    lz.year;\n```"
    },
    {
        "instance_id": "q_922",
        "db_id": "scholar_new",
        "question": "Which researchers have authored papers involving large-scale image datasets (with a size exceeding 1 million records) over the past five years, and how has their research impact evolved during this period, measured by both the total number of citations received and the average quality score of their papers? Please rank the results first by the total number of citations in descending order, and then by the average paper quality score in descending order.",
        "query": "```sql\nWITH relevant_papers AS (\n    SELECT DISTINCT p.paperId, p.paper_quality_score_normalized, p.numCitedBy, p.year\n    FROM paper p\n    JOIN paperDataset pd ON p.paperId = pd.paperId\n    JOIN dataset d ON pd.datasetId = d.datasetId\n    WHERE d.dataset_size > 1000000 -- Assuming large-scale means over 1 million records\n      AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5\n), researcher_contribution AS (\n    SELECT w.authorId, r.authorName, SUM(rp.numCitedBy) AS total_citations, AVG(rp.paper_quality_score_normalized) AS avg_paper_quality\n    FROM writes w\n    JOIN relevant_papers rp ON w.paperId = rp.paperId\n    JOIN author r ON w.authorId = r.authorId\n    GROUP BY w.authorId, r.authorName\n)\nSELECT rc.authorId, rc.authorName, rc.total_citations, rc.avg_paper_quality\nFROM researcher_contribution rc\nORDER BY rc.total_citations DESC, rc.avg_paper_quality DESC;\n```"
    },
    {
        "instance_id": "q_926",
        "db_id": "scholar_new",
        "question": "在“Liquid Automatica”领域的高质量论文中，哪些研究者的论文被频繁引用（引用次数超过5篇），且其研究兴趣与Eric C. Kerrigan的研究兴趣高度相关？请进一步分析这些研究者的合作网络特征，包括平均合著者数量和总合作贡献度，并评估他们在过去五年内的学术影响力趋势（通过最近五年引用次数占总引用次数的比例来衡量）。最终结果按影响力趋势降序排列，若影响力趋势相同，则按被引用论文数量降序排列。",
        "query": "```sql\nWITH eric_kerrigan_interests AS (\n    SELECT unnest(author_research_interests_normalized) AS interest\n    FROM scholar_new.author\n    WHERE authorName = 'Eric C. Kerrigan'\n),\nhigh_quality_papers AS (\n    SELECT DISTINCT paperId\n    FROM scholar_new.paper\n    WHERE paper_quality_score_normalized > 0.8\n      AND numCitedBy > 100\n      AND year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5\n      AND venueId IN (\n          SELECT venueId\n          FROM scholar_new.venue\n          WHERE venueName ILIKE '%Liquid Automatica%'\n      )\n),\nfrequent_cited_authors AS (\n    SELECT w.authorId, COUNT(DISTINCT p.paperId) AS cited_paper_count\n    FROM scholar_new.writes w\n    JOIN high_quality_papers p ON w.paperId = p.paperId\n    GROUP BY w.authorId\n    HAVING COUNT(DISTINCT p.paperId) > 5\n),\nrelevant_authors AS (\n    SELECT fa.authorId, a.authorName, a.author_research_interests_normalized, fa.cited_paper_count\n    FROM frequent_cited_authors fa\n    JOIN scholar_new.author a ON fa.authorId = a.authorId\n    WHERE EXISTS (\n        SELECT 1\n        FROM eric_kerrigan_interests eki\n        WHERE eki.interest = ANY(a.author_research_interests_normalized)\n    )\n),\nco_author_network AS (\n    SELECT ra.authorId, AVG(w.co_author_count) AS avg_co_author_count, SUM(w.co_author_contribution_normalized) AS total_co_author_contribution\n    FROM relevant_authors ra\n    JOIN scholar_new.writes w ON ra.authorId = w.authorId\n    GROUP BY ra.authorId\n),\nacademic_influence_trend AS (\n    SELECT ra.authorId, \n           SUM(p.numCitedBy) FILTER (WHERE p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5) AS recent_citations,\n           SUM(p.numCitedBy) AS total_citations\n    FROM relevant_authors ra\n    JOIN scholar_new.writes w ON ra.authorId = w.authorId\n    JOIN scholar_new.paper p ON w.paperId = p.paperId\n    GROUP BY ra.authorId\n)\nSELECT ra.authorId, ra.authorName, ra.cited_paper_count, cn.avg_co_author_count, cn.total_co_author_contribution, \n       ai.recent_citations, ai.total_citations, \n       CASE WHEN ai.total_citations > 0 THEN (ai.recent_citations::float / ai.total_citations) ELSE 0 END AS influence_trend\nFROM relevant_authors ra\nJOIN co_author_network cn ON ra.authorId = cn.authorId\nJOIN academic_influence_trend ai ON ra.authorId = ai.authorId\nORDER BY influence_trend DESC, cited_paper_count DESC;\n```"
    },
    {
        "instance_id": "q_923",
        "db_id": "scholar_new",
        "question": "What are the key research topics (as indicated by keyphrases) in papers authored by Dan Klein, including their usage frequency, average paper quality, average citation quality of those papers, and the relevance of datasets used, considering both the normalized quality scores of citations and datasets? List the results in descending order of usage frequency and average paper quality.",
        "query": "```sql\nWITH dan_klein_papers AS (\n    SELECT p.paperId, p.title, p.year, p.numCiting, p.paper_quality_score_normalized, p.paper_keywords_normalized\n    FROM paper p\n    INNER JOIN writes w ON p.paperId = w.paperId\n    INNER JOIN author a ON w.authorId = a.authorId\n    WHERE a.authorName = 'Dan Klein'\n),\ncitation_quality AS (\n    SELECT c.citedPaperId, AVG(c.citing_paper_quality_score_normalized) AS avg_citation_quality\n    FROM cite c\n    INNER JOIN dan_klein_papers dkp ON c.citedPaperId = dkp.paperId\n    GROUP BY c.citedPaperId\n),\ndataset_relevance AS (\n    SELECT pd.paperId, AVG(pd.paper_dataset_quality_score_normalized) AS avg_dataset_quality\n    FROM paperDataset pd\n    INNER JOIN dataset d ON pd.datasetId = d.datasetId\n    INNER JOIN dan_klein_papers dkp ON pd.paperId = dkp.paperId\n    GROUP BY pd.paperId\n),\nkeyphrase_usage AS (\n    SELECT pk.keyphraseId, k.keyphraseName, COUNT(pk.paperId) AS usage_count, AVG(dkp.paper_quality_score_normalized) AS avg_paper_quality\n    FROM paperKeyphrase pk\n    INNER JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId\n    INNER JOIN dan_klein_papers dkp ON pk.paperId = dkp.paperId\n    GROUP BY pk.keyphraseId, k.keyphraseName\n)\nSELECT ku.keyphraseName AS research_topic, ku.usage_count, ku.avg_paper_quality, \n       COALESCE(cq.avg_citation_quality, 0) AS citation_quality, \n       COALESCE(dr.avg_dataset_quality, 0) AS dataset_relevance\nFROM keyphrase_usage ku\nLEFT JOIN citation_quality cq ON ku.keyphraseName IN (SELECT unnest(paper_keywords_normalized) FROM dan_klein_papers WHERE paperId = cq.citedPaperId)\nLEFT JOIN dataset_relevance dr ON ku.keyphraseName IN (SELECT unnest(paper_keywords_normalized) FROM dan_klein_papers WHERE paperId = dr.paperId)\nORDER BY ku.usage_count DESC, ku.avg_paper_quality DESC;\n```"
    },
    {
        "instance_id": "q_929",
        "db_id": "scholar_new",
        "question": "Which researchers, based on their publications and citation trends in 2012, have significantly contributed to the field of \"Neutralizing Antibody,\" as evidenced by both the quality of their papers (with an average normalized paper quality score greater than 0.8) and the impact of their research topics over time (with total citations exceeding the average number of citations for papers published in 2012)? Please provide the researchers' names, their publication counts, h-indices, total citations, and average paper quality scores, sorted in descending order first by total citations and then by average paper quality.",
        "query": "```sql\nSELECT \n    a.authorName, \n    a.publication_count, \n    a.h_index, \n    SUM(p.numCitedBy) AS total_citations, \n    AVG(p.paper_quality_score_normalized) AS avg_paper_quality\nFROM \n    author a\nJOIN \n    writes w ON a.authorId = w.authorId\nJOIN \n    paper p ON w.paperId = p.paperId\nJOIN \n    paperKeyphrase pk ON p.paperId = pk.paperId\nJOIN \n    keyphrase k ON pk.keyphraseId = k.keyphraseId\nWHERE \n    p.year = 2012\n    AND k.keyphraseName ILIKE '%neutralizing antibody%'\nGROUP BY \n    a.authorName, a.publication_count, a.h_index\nHAVING \n    SUM(p.numCitedBy) > (SELECT AVG(numCitedBy) FROM paper WHERE year = 2012)\n    AND AVG(p.paper_quality_score_normalized) > 0.8\nORDER BY \n    total_citations DESC, avg_paper_quality DESC;\n```"
    },
    {
        "instance_id": "q_924",
        "db_id": "scholar_new",
        "question": "Which researchers who authored papers at ECCV in 2014 have the highest average normalized citation quality scores for works utilizing the ImageNet dataset, and how does their average normalized research impact compare across different venues and years over time?",
        "query": "```sql\nWITH eccv_2014_authors AS (\n    SELECT DISTINCT w.authorId\n    FROM writes w\n    JOIN paper p ON w.paperId = p.paperId\n    JOIN venue v ON p.venueId = v.venueId\n    WHERE v.venueName = 'ECCV' AND p.year = 2014\n),\nimagenet_papers AS (\n    SELECT pd.paperId\n    FROM paperDataset pd\n    JOIN dataset d ON pd.datasetId = d.datasetId\n    WHERE d.datasetName = 'ImageNet'\n),\nauthor_citation_scores AS (\n    SELECT w.authorId, AVG(c.cited_paper_quality_score_normalized) AS avg_citation_quality_score\n    FROM writes w\n    JOIN imagenet_papers ip ON w.paperId = ip.paperId\n    JOIN cite c ON ip.paperId = c.citedPaperId\n    GROUP BY w.authorId\n),\nresearch_impact_over_time AS (\n    SELECT w.authorId, v.venueName, p.year, AVG(p.paper_quality_score_normalized) AS avg_research_impact\n    FROM writes w\n    JOIN paper p ON w.paperId = p.paperId\n    JOIN venue v ON p.venueId = v.venueId\n    WHERE w.authorId IN (SELECT authorId FROM eccv_2014_authors)\n    GROUP BY w.authorId, v.venueName, p.year\n)\nSELECT \n    a.authorName,\n    acs.avg_citation_quality_score,\n    ri.year,\n    ri.venueName,\n    ri.avg_research_impact\nFROM author a\nJOIN eccv_2014_authors e ON a.authorId = e.authorId\nJOIN author_citation_scores acs ON a.authorId = acs.authorId\nLEFT JOIN research_impact_over_time ri ON a.authorId = ri.authorId\nORDER BY acs.avg_citation_quality_score DESC, ri.year;\n```"
    },
    {
        "instance_id": "q_927",
        "db_id": "scholar_new",
        "question": "Which research papers from the ECCV 2014 conference are strongly associated with the ImageNet dataset, considering both direct citations and the quality of those citations over time? Additionally, compare the relationship of these papers with ImageNet to other datasets used in the same conference year, analyzing citation trends, paper impact, and dataset-specific quality metrics. Provide results sorted by paper quality score in descending order, followed by total citation quality in descending order.",
        "query": "```sql\nWITH imagenet_related_papers AS (\n    SELECT \n        p.paperId,\n        p.title,\n        p.year,\n        p.numCiting,\n        p.paper_quality_score_normalized,\n        pd.dataset_paper_count,\n        pd.paper_dataset_quality_score_normalized\n    FROM \n        paper p\n    JOIN \n        venue v ON p.venueId = v.venueId\n    JOIN \n        paperDataset pd ON p.paperId = pd.paperId\n    JOIN \n        dataset d ON pd.datasetId = d.datasetId\n    WHERE \n        v.venueName = 'ECCV' \n        AND p.year = 2014 \n        AND d.datasetName = 'ImageNet'\n),\ncitation_trends AS (\n    SELECT \n        c.citedPaperId,\n        SUM(c.citing_paper_quality_score_normalized) AS total_citation_quality,\n        COUNT(c.citingPaperId) AS citation_count,\n        AVG(c.paper_citation_trend_normalized) AS avg_citation_trend\n    FROM \n        cite c\n    JOIN \n        paper p ON c.citedPaperId = p.paperId\n    WHERE \n        p.year = 2014\n    GROUP BY \n        c.citedPaperId\n),\ncomparison_datasets AS (\n    SELECT \n        p.paperId,\n        p.title,\n        d.datasetName,\n        pd.dataset_paper_count,\n        pd.paper_dataset_quality_score_normalized,\n        ct.total_citation_quality,\n        ct.citation_count,\n        ct.avg_citation_trend\n    FROM \n        paper p\n    JOIN \n        venue v ON p.venueId = v.venueId\n    JOIN \n        paperDataset pd ON p.paperId = pd.paperId\n    JOIN \n        dataset d ON pd.datasetId = d.datasetId\n    LEFT JOIN \n        citation_trends ct ON p.paperId = ct.citedPaperId\n    WHERE \n        v.venueName = 'ECCV' \n        AND p.year = 2014\n)\nSELECT \n    irp.paperId,\n    irp.title,\n    irp.numCiting,\n    irp.paper_quality_score_normalized,\n    irp.dataset_paper_count AS imagenet_paper_count,\n    irp.paper_dataset_quality_score_normalized AS imagenet_quality_score,\n    ct.total_citation_quality AS imagenet_total_citation_quality,\n    cd.datasetName,\n    cd.dataset_paper_count,\n    cd.paper_dataset_quality_score_normalized,\n    cd.total_citation_quality,\n    cd.citation_count,\n    cd.avg_citation_trend\nFROM \n    imagenet_related_papers irp\nLEFT JOIN \n    citation_trends ct ON irp.paperId = ct.citedPaperId\nLEFT JOIN \n    comparison_datasets cd ON irp.paperId = cd.paperId\nORDER BY \n    irp.paper_quality_score_normalized DESC, \n    ct.total_citation_quality DESC;\n```"
    },
    {
        "instance_id": "q_930",
        "db_id": "scholar_new",
        "question": "在2014年，哪些研究论文引用了ImageNet数据集？这些论文的作者在其职业生涯中对深度学习领域的贡献如何？请通过以下指标进行分析：作者发表的高影响力论文数量（定义为作者总的论文发表数量）、引用这些论文的文献所产生的总引用影响分（基于归一化的引用质量评分）、以及作者在顶级会议（包括NeurIPS、ICML、CVPR和ICLR）上的独特论文发表数量。结果请按照总引用影响分降序排列。",
        "query": "```sql\nSELECT \n    p.paperId,\n    p.title,\n    a.authorId,\n    a.authorName,\n    a.publication_count AS high_impact_papers_count,\n    SUM(c.citing_paper_quality_score_normalized) AS total_citation_influence,\n    COUNT(DISTINCT CASE WHEN v.venueName IN ('NeurIPS', 'ICML', 'CVPR', 'ICLR') THEN p.paperId END) AS top_conference_papers\nFROM \n    paper p\nJOIN \n    cite c ON p.paperId = c.citingPaperId\nJOIN \n    paperDataset pd ON c.citedPaperId = pd.paperId\nJOIN \n    dataset ds ON pd.datasetId = ds.datasetId\nJOIN \n    writes w ON p.paperId = w.paperId\nJOIN \n    author a ON w.authorId = a.authorId\nLEFT JOIN \n    venue v ON p.venueId = v.venueId\nWHERE \n    ds.datasetName = 'ImageNet'\n    AND p.year = 2014\n    AND 'deep learning' = ANY(a.author_research_interests_normalized)\nGROUP BY \n    p.paperId, p.title, a.authorId, a.authorName, a.publication_count\nORDER BY \n    total_citation_influence DESC;\n```"
    },
    {
        "instance_id": "q_928",
        "db_id": "scholar_new",
        "question": "在“NIPS”会议相关的论文撰写中，哪些研究者更倾向于引用质量评分高于平均水平的数据集？同时，请统计这些研究者的论文数量、总被引用次数，并分析其引用行为是否对其论文影响力产生了趋势性提升。具体要求包括：仅考虑每位研究者发表超过一篇“NIPS”相关论文的情况，并按平均引用数据集质量评分从高到低排序。",
        "query": "```sql\nSELECT \n    w.authorId,\n    a.authorName,\n    AVG(pd.paper_dataset_quality_score) AS avg_dataset_quality_score,\n    SUM(p.numCitedBy) AS total_citations_after_nips,\n    COUNT(p.paperId) AS num_papers_on_nips\nFROM \n    writes w\nJOIN \n    paper p ON w.paperId = p.paperId\nJOIN \n    venue v ON p.venueId = v.venueId\nJOIN \n    paperDataset pd ON p.paperId = pd.paperId\nWHERE \n    v.venueName = 'NIPS'\n    AND pd.paper_dataset_quality_score > (SELECT AVG(pds.paper_dataset_quality_score) FROM paperDataset pds)\nGROUP BY \n    w.authorId, a.authorName\nHAVING \n    COUNT(p.paperId) > 1\nORDER BY \n    avg_dataset_quality_score DESC;\n```"
    },
    {
        "instance_id": "q_925",
        "db_id": "scholar_new",
        "question": "Which researchers, considering both the volume of their publications and the quality of citations received over the past five years, have made significant contributions to studies involving large-scale image datasets with more than 1,000,000 entries, where the normalized quality of citations exceeds 0.5 and the researcher has published more than 5 papers?",
        "query": "```sql\nSELECT \n    a.authorId, \n    a.authorName, \n    COUNT(DISTINCT p.paperId) AS publication_count, \n    AVG(c.cited_paper_quality_score_normalized) AS avg_citation_quality\nFROM \n    author a\nJOIN \n    writes w ON a.authorId = w.authorId\nJOIN \n    paper p ON w.paperId = p.paperId\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nJOIN \n    paperDataset pd ON p.paperId = pd.paperId\nJOIN \n    dataset d ON pd.datasetId = d.datasetId\nWHERE \n    d.dataset_size > 1000000 -- Assuming large-scale datasets have more than 1,000,000 entries\n    AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5\n    AND c.paper_citation_trend_normalized > 0.5 -- Assuming significant quality citations\nGROUP BY \n    a.authorId, a.authorName\nHAVING \n    COUNT(DISTINCT p.paperId) > 5 -- Assuming significant contribution is more than 5 papers\nORDER BY \n    publication_count DESC, avg_citation_quality DESC;\n```"
    },
    {
        "instance_id": "q_941",
        "db_id": "scholar_new",
        "question": "Which papers from the ACL 2012 conference have received more than 7 citations, and what is the trend of their citation quality over time across different citation sources? Additionally, provide the normalized quality score of these citations and list the results in descending order of the total number of citations.",
        "query": "```sql\nSELECT \n    p.paperId,\n    p.title,\n    p.numCitedBy AS total_citations,\n    c.paper_citation_trend AS citation_trend,\n    c.paper_citation_source AS citation_source,\n    c.cited_paper_quality_score_normalized AS normalized_quality_score\nFROM \n    paper p\nJOIN \n    venue v ON p.venueId = v.venueId\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nWHERE \n    v.venueName = 'ACL' \n    AND v.year = 2012 \n    AND p.numCitedBy > 7\nGROUP BY \n    p.paperId, p.title, p.numCitedBy, c.paper_citation_trend, c.paper_citation_source, c.cited_paper_quality_score_normalized\nORDER BY \n    p.numCitedBy DESC;\n```"
    },
    {
        "instance_id": "q_934",
        "db_id": "scholar_new",
        "question": "Which research topic, represented by keyphrases, gained the most attention in academic papers published at the EMNLP-CoNLL conference in 2012, based on the sum of normalized quality scores of citations received from papers published between 2013 and 2015?",
        "query": "```sql\nSELECT pk.keyphraseName AS research_topic, SUM(c.cited_paper_quality_score_normalized) AS total_quality_citations\nFROM paperKeyphrase pk\nJOIN paper p ON pk.paperId = p.paperId\nJOIN cite c ON p.paperId = c.citedPaperId\nJOIN venue v ON p.venueId = v.venueId\nWHERE v.venueName = 'EMNLP-CoNLL' \n  AND p.year = 2012 \n  AND c.citingPaperId IN (\n    SELECT citingPaperId \n    FROM paper \n    WHERE year BETWEEN 2013 AND 2015\n  )\nGROUP BY pk.keyphraseName\nORDER BY total_quality_citations DESC\nLIMIT 1;\n```"
    },
    {
        "instance_id": "q_931",
        "db_id": "scholar_new",
        "question": "What is the trend of Noah Smith's co-authorship involvement in high-quality publications from 2009 onwards, where the publications have received citations with a normalized quality score greater than 0.8 and have been cited at least once, showing the year of publication, the number of co-authors, the normalized contribution of co-authors, and the normalized quality score of the cited papers, ordered by the year of publication in ascending order?",
        "query": "```sql\nSELECT \n    w.paperId, \n    p.year, \n    w.co_author_count, \n    w.writes_co_author_contribution_normalized AS co_author_contribution,\n    c.cited_paper_quality_score_normalized AS paper_quality\nFROM \n    writes w\nJOIN \n    paper p ON w.paperId = p.paperId\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nJOIN \n    author a ON w.authorId = a.authorId\nWHERE \n    a.authorName = 'Noah Smith'\n    AND p.year >= 2009\n    AND c.cited_paper_quality_score_normalized > 0.8 -- Assuming 0.8 as the quality threshold\n    AND p.numCitedBy > 0\nORDER BY \n    p.year ASC;\n```"
    },
    {
        "instance_id": "q_935",
        "db_id": "scholar_new",
        "question": "How many research papers published in venues with an impact factor above the average of all journals have received high-quality citations, defined as citations with a normalized quality score greater than 0.8 and a normalized source quality score greater than 0.7, from at least three distinct citation sources? Additionally, what is the citation trend for these papers over the past five years?",
        "query": "```sql\nSELECT \n    p.paperId,\n    COUNT(DISTINCT c.citingPaperId) AS high_quality_citations_count,\n    c.paper_citation_trend AS citation_trend\nFROM \n    paper p\nJOIN \n    venue v ON p.venueId = v.venueId\nJOIN \n    cite c ON p.paperId = c.citedPaperId\nWHERE \n    v.impact_factor >= (SELECT AVG(impact_factor) FROM journal WHERE impact_factor IS NOT NULL)\n    AND c.cited_paper_quality_score_normalized > 0.8\n    AND c.paper_citation_source_normalized > 0.7\n    AND p.paper_last_updated >= NOW() - INTERVAL '5 years'\nGROUP BY \n    p.paperId, c.paper_citation_trend\nHAVING \n    COUNT(DISTINCT c.paper_citation_source) >= 3;\n```"
    },
    {
        "instance_id": "q_932",
        "db_id": "scholar_new",
        "question": "Which research paper authored by Eric C. Kerrigan, published in the past five years, and associated with advancements in liquid automation has the highest citation trend compared to other papers in the same field? Additionally, provide the paper's title, publication year, number of citations, and normalized citation trend score.",
        "query": "```sql\nWITH relevant_papers AS (\n    SELECT \n        p.paperId,\n        p.title,\n        p.year,\n        p.numCiting,\n        p.paper_quality_score_normalized,\n        p.paper_keywords_normalized,\n        ak.author_research_interests_normalized\n    FROM \n        paper p\n    JOIN \n        writes w ON p.paperId = w.paperId\n    JOIN \n        author k ON w.authorId = k.authorId\n    WHERE \n        k.authorName = 'Eric C. Kerrigan'\n        AND 'liquid automation' = ANY(p.paper_keywords_normalized)\n        AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5\n),\ncitation_trends AS (\n    SELECT \n        rp.paperId,\n        rp.title,\n        rp.year,\n        rp.numCiting,\n        c.paper_citation_trend_normalized\n    FROM \n        relevant_papers rp\n    LEFT JOIN \n        cite c ON rp.paperId = c.citedPaperId\n),\ncomparison AS (\n    SELECT \n        ct.paperId,\n        ct.title,\n        ct.year,\n        ct.numCiting,\n        ct.paper_citation_trend_normalized,\n        RANK() OVER (ORDER BY ct.paper_citation_trend_normalized DESC) AS citation_rank\n    FROM \n        citation_trends ct\n)\nSELECT \n    c.paperId,\n    c.title,\n    c.year,\n    c.numCiting,\n    c.paper_citation_trend_normalized,\n    c.citation_rank\nFROM \n    comparison c\nWHERE \n    c.citation_rank = 1;\n```"
    },
    {
        "instance_id": "q_937",
        "db_id": "scholar_new",
        "question": "Which researchers have published papers on the ImageNet dataset in the CVPR conference over the past five years, and what is the correlation between their publication count on this dataset, the total citations received for these publications, and their overall h-index? Please list the researchers along with their publication count related to ImageNet, total citations received for these publications, and their overall h-index, sorted in descending order of total citations, followed by publication count, and then by overall h-index.",
        "query": "```sql\nSELECT \n    a.authorId,\n    a.authorName,\n    COUNT(DISTINCT p.paperId) AS publication_count_on_imagenet,\n    SUM(p.numCitedBy) AS total_citations_on_imagenet,\n    a.h_index AS overall_h_index\nFROM \n    author a\nJOIN \n    writes w ON a.authorId = w.authorId\nJOIN \n    paper p ON w.paperId = p.paperId\nJOIN \n    paperDataset pd ON p.paperId = pd.paperId\nJOIN \n    dataset d ON pd.datasetId = d.datasetId\nJOIN \n    venue v ON p.venueId = v.venueId\nWHERE \n    d.datasetName = 'ImageNet'\n    AND v.venueName IN ('CVPR')\n    AND p.year BETWEEN EXTRACT(YEAR FROM CURRENT_TIMESTAMP - INTERVAL '5 years') AND EXTRACT(YEAR FROM CURRENT_TIMESTAMP)\nGROUP BY \n    a.authorId, a.authorName, a.h_index\nHAVING \n    COUNT(DISTINCT p.paperId) > 0\nORDER BY \n    total_citations_on_imagenet DESC, publication_count_on_imagenet DESC, overall_h_index DESC;\n```"
    },
    {
        "instance_id": "q_936",
        "db_id": "scholar_new",
        "question": "Who are the researchers, excluding Philipp Koehn, who have co-authored papers with him on topics related to \"machine translation\" within the past five years? What are their current research focuses based on the distinct keyphrases extracted from their recent publications (published in the last five years) and how do these compare to their historical research areas (prior to the last five years)? Additionally, identify whether there has been a shift in their primary research areas by comparing their current and historical focuses.",
        "query": "```sql\nWITH PhilippKoehnPapers AS (\n    SELECT DISTINCT w.paperId\n    FROM writes w\n    JOIN author a ON w.authorId = a.authorId\n    WHERE a.authorName = 'Philipp Koehn'\n),\nMachineTranslationPapers AS (\n    SELECT DISTINCT pk.paperId\n    FROM paperKeyphrase pk\n    JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId\n    WHERE LOWER(k.keyphraseName) LIKE '%machine translation%'\n),\nCollaborators AS (\n    SELECT DISTINCT w.authorId\n    FROM writes w\n    JOIN PhilippKoehnPapers pkp ON w.paperId = pkp.paperId\n    JOIN MachineTranslationPapers mtp ON w.paperId = mtp.paperId\n    WHERE w.authorId != (SELECT authorId FROM author WHERE authorName = 'Philipp Koehn')\n),\nRecentPublications AS (\n    SELECT p.paperId, p.title, p.year, p.numCiting, p.paper_quality_score_normalized\n    FROM paper p\n    JOIN writes w ON p.paperId = w.paperId\n    WHERE w.authorId IN (SELECT authorId FROM Collaborators)\n      AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n),\nResearchFocus AS (\n    SELECT w.authorId, STRING_AGG(DISTINCT k.keyphraseName, ', ') AS current_focus\n    FROM writes w\n    JOIN paperKeyphrase pk ON w.paperId = pk.paperId\n    JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId\n    WHERE w.authorId IN (SELECT authorId FROM Collaborators)\n      AND w.paperId IN (SELECT paperId FROM RecentPublications)\n    GROUP BY w.authorId\n),\nHistoricalFocus AS (\n    SELECT w.authorId, STRING_AGG(DISTINCT k.keyphraseName, ', ') AS historical_focus\n    FROM writes w\n    JOIN paperKeyphrase pk ON w.paperId = pk.paperId\n    JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId\n    WHERE w.authorId IN (SELECT authorId FROM Collaborators)\n      AND w.paperId NOT IN (SELECT paperId FROM RecentPublications)\n    GROUP BY w.authorId\n),\nFocusShifts AS (\n    SELECT rf.authorId, rf.current_focus, hf.historical_focus,\n           CASE WHEN hf.historical_focus IS DISTINCT FROM rf.current_focus THEN TRUE ELSE FALSE END AS has_shifted\n    FROM ResearchFocus rf\n    LEFT JOIN HistoricalFocus hf ON rf.authorId = hf.authorId\n)\nSELECT a.authorName, fs.current_focus, fs.historical_focus, fs.has_shifted\nFROM FocusShifts fs\nJOIN author a ON fs.authorId = a.authorId;\n```"
    },
    {
        "instance_id": "q_942",
        "db_id": "scholar_new",
        "question": "What is the distribution of Samuel Madden's publications across different research areas, excluding those published in PVLDB, in terms of the number of publications, total citations received, and average contribution to his normalized citation quality score, grouped by research area and sorted by the number of publications in descending order?",
        "query": "```sql\nSELECT \n    a.author_research_interests AS research_area,\n    COUNT(p.paperId) AS publication_count,\n    SUM(p.numCitedBy) AS total_citations,\n    AVG(p.paper_quality_score_normalized) AS avg_contribution_to_citation_quality\nFROM \n    author a\nJOIN \n    writes w ON a.authorId = w.authorId\nJOIN \n    paper p ON w.paperId = p.paperId\nLEFT JOIN \n    venue v ON p.venueId = v.venueId\nWHERE \n    a.authorName = 'Samuel Madden'\n    AND v.venueName != 'PVLDB'\nGROUP BY \n    a.author_research_interests\nORDER BY \n    publication_count DESC;\n```"
    },
    {
        "instance_id": "q_933",
        "db_id": "scholar_new",
        "question": "In which journal did Donald E Knuth publish the most impactful paper, based on normalized paper quality scores, within the last five years?",
        "query": "```sql\nSELECT j.journalName \nFROM journal j\nJOIN venue v ON j.journalId = v.venueId\nJOIN paper p ON v.venueId = p.venueId\nJOIN writes w ON p.paperId = w.paperId\nJOIN author a ON w.authorId = a.authorId\nWHERE a.authorName = 'Donald E Knuth'\n  AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\nORDER BY p.paper_quality_score_normalized DESC\nLIMIT 1;\n```"
    },
    {
        "instance_id": "q_940",
        "db_id": "scholar_new",
        "question": "Which research papers, published within the last 5 years and categorized by their normalized citation quality score and journal impact factor, have received more than 100 citations and significantly influenced academic discussions each year? Additionally, include the associated datasets and their download counts to analyze trends in dataset usage, as well as the relevant keyphrases and their weighted frequency scores to understand the evolving focus of scholarly work over time. Results should be ordered by publication year ascending, followed by descending order of citation quality score, journal impact factor, dataset download count, and keyphrase relevance score.",
        "query": "```sql\nSELECT \n    p.paperId,\n    p.title AS paper_title,\n    p.year AS publication_year,\n    p.paper_quality_score_normalized AS citation_quality_score,\n    j.impact_factor AS venue_impact_factor,\n    d.datasetName AS associated_dataset,\n    d.dataset_download_count AS dataset_usage_count,\n    kp.keyphraseName AS relevant_keyphrase,\n    kp.paper_keyphrase_weighted_frequency_normalized AS keyphrase_relevance_score\nFROM \n    paper p\nJOIN \n    journal j ON p.venueId = j.journalId\nLEFT JOIN \n    paperDataset pd ON p.paperId = pd.paperId\nLEFT JOIN \n    dataset d ON pd.datasetId = d.datasetId\nLEFT JOIN \n    paperKeyphrase pk ON p.paperId = pk.paperId\nLEFT JOIN \n    keyphrase kp ON pk.keyphraseId = kp.keyphraseId\nWHERE \n    p.numCitedBy > 100 -- Significantly influenced (threshold for citations)\n    AND p.paper_last_updated AT TIME ZONE 'UTC' >= NOW() AT TIME ZONE 'UTC' - INTERVAL '5 years' -- Recent updates\nGROUP BY \n    p.paperId, p.title, p.year, p.paper_quality_score_normalized, j.impact_factor, d.datasetName, d.dataset_download_count, kp.keyphraseName, kp.paper_keyphrase_weighted_frequency_normalized\nORDER BY \n    p.year ASC, p.paper_quality_score_normalized DESC, j.impact_factor DESC, d.dataset_download_count DESC, kp.paper_keyphrase_weighted_frequency_normalized DESC;\n```"
    },
    {
        "instance_id": "q_938",
        "db_id": "scholar_new",
        "question": "Which paper presented at SIGCOMM has the highest combined score of citation count and paper quality score, considering both the number of citations received and the reputation of the citing papers?",
        "query": "SELECT p.paperId, p.title, p.numCitedBy, p.paper_quality_score \nFROM paper p \nJOIN venue v ON p.venueId = v.venueId \nWHERE v.venueName = 'SIGCOMM' \nORDER BY p.numCitedBy * p.paper_quality_score DESC \nLIMIT 1;"
    },
    {
        "instance_id": "q_939",
        "db_id": "scholar_new",
        "question": "Which research paper, authored by Ranjit Jhala and having \"Liquid Haskell\" as a keyword, has the highest paper quality score among papers published within the last five years, and what is the name of the conference or journal where it was published?",
        "query": "SELECT \n    p.paperId, \n    p.title, \n    v.venueName \nFROM \n    paper p \nJOIN \n    writes w ON p.paperId = w.paperId \nJOIN \n    author a ON w.authorId = a.authorId \nLEFT JOIN \n    venue v ON p.venueId = v.venueId \nWHERE \n    a.authorName = 'Ranjit Jhala' \n    AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5 \n    AND ('Liquid Haskell' = ANY(p.paper_keywords_normalized)) \nORDER BY \n    p.paper_quality_score DESC \nLIMIT 1;"
    },
    {
        "instance_id": "q_944",
        "db_id": "yelp_new",
        "question": "Find all feedback provided by Michelle for Italian cuisine establishments, including her review ratings, tip sentiment scores, overall positive and negative sentiment scores based on her user profile, and an assessment of her likelihood to return to these businesses. The likelihood to return is categorized as 'High Likelihood' if Michelle has interacted with more than 10 businesses, 'Moderate Likelihood' if her interactions are between 5 and 10, and 'Low Likelihood' if fewer than 5. Ensure the results are limited to businesses categorized under Italian cuisine.",
        "query": "```sql\nSELECT \n    u.user_id, \n    r.rating, \n    t.tip_sentiment_score, \n    u.user_positive_sentiment_score, \n    u.user_negative_sentiment_score,\n    CASE \n        WHEN u.user_business_interactions > 10 THEN 'High Likelihood'\n        WHEN u.user_business_interactions BETWEEN 5 AND 10 THEN 'Moderate Likelihood'\n        ELSE 'Low Likelihood'\n    END AS return_likelihood\nFROM \n    user u\nJOIN \n    review r ON u.user_id = r.user_id\nJOIN \n    business b ON r.business_id = b.business_id\nJOIN \n    category c ON b.category_id = c.category_id\nLEFT JOIN \n    tip t ON u.user_id = t.user_id\nWHERE \n    u.user_id = 'Michelle' \n    AND c.cuisine_type = 'Italian';\n```"
    },
    {
        "instance_id": "q_946",
        "db_id": "yelp_new",
        "question": "How many reviews were submitted for the restaurant named \"Cafe Zinho\" located in a neighborhood within Texas over the past year, where the reviews have a word count greater than 50 and were written by users with a loyalty score (calculated as the difference between positive and negative sentiment scores divided by their sum) exceeding 0.7? Additionally, what is the average sentiment score of these reviews?",
        "query": "```sql\nSELECT \n    COUNT(r.rating) AS review_count, \n    AVG(r.review_sentiment_score) AS average_sentiment_score\nFROM \n    yelp_new.business b\nJOIN \n    yelp_new.review r ON b.business_id = r.business_id\nJOIN \n    yelp_new.neighbourhood n ON b.neighborhood_id = n.neighbourhood_code\nJOIN \n    yelp_new.user u ON r.user_id = u.user_id\nWHERE \n    b.business_type = 'Cafe Zinho'\n    AND n.neighbourhood_name LIKE '%Texas%'\n    AND r.review_date >= NOW() - INTERVAL '1 year'\n    AND u.user_average_review_length > 50\n    AND (u.user_positive_sentiment_score - u.user_negative_sentiment_score) / \n        (u.user_positive_sentiment_score + u.user_negative_sentiment_score) > 0.7;\n```"
    },
    {
        "instance_id": "q_947",
        "db_id": "yelp_new",
        "question": "Identify neighborhoods in Madison known for their Italian cuisine, specifically those with a higher-than-average concentration of open Italian restaurants and an average rating exceeding 3.5. Evaluate the popularity of these neighborhoods based on the total number of check-ins recorded in the past month, while also considering the presence of any ongoing promotional offers associated with these restaurants. List the results in descending order of the number of Italian restaurants and total check-ins.",
        "query": "```sql\nSELECT \n    n.neighbourhood_name, \n    COUNT(b.business_id) AS italian_restaurant_count, \n    AVG(b.average_rating) AS avg_rating, \n    SUM(c.count) AS total_checkins, \n    COUNT(DISTINCT CASE WHEN b.delivery_service_provider IS NOT NULL THEN b.business_id END) AS promo_offers_count\nFROM \n    neighbourhood n\nJOIN \n    business b ON n.neighborhood_code = b.neighborhood_id::text\nJOIN \n    category cat ON b.category_id = cat.category_id\nLEFT JOIN \n    checkin c ON b.business_id = c.user_id\nWHERE \n    cat.cuisine_type = 'Italian' \n    AND b.business_status = 'open' \n    AND b.average_rating > 3.5 \n    AND n.neighborhood_population > 0\nGROUP BY \n    n.neighbourhood_name\nHAVING \n    COUNT(b.business_id) > (SELECT AVG(italian_count) FROM (SELECT COUNT(*) AS italian_count FROM business b2 JOIN category cat2 ON b2.category_id = cat2.category_id WHERE cat2.cuisine_type = 'Italian' GROUP BY b2.neighborhood_id) sub)\n    AND SUM(CASE WHEN c.count >= 1 AND c.checkin_date >= CURRENT_DATE - INTERVAL '1 month' THEN 1 ELSE 0 END) > 0\nORDER BY \n    italian_restaurant_count DESC, \n    total_checkins DESC;\n```"
    },
    {
        "instance_id": "q_952",
        "db_id": "yelp_new",
        "question": "Find neighborhoods with a population greater than 10,000 that contain Italian restaurants having an average rating below 2.5. Consider only businesses that are currently open, have been operating for more than 1 year, and do not offer any promotional discounts. Prioritize neighborhoods based on their population size and sort the results by the neighborhood's population in descending order. Ensure that only neighborhoods with at least one qualifying business are included in the results.",
        "query": "```sql\nSELECT \n    n.neighbourhood_name, \n    AVG(b.average_rating) AS avg_rating\nFROM \n    yelp_new.business b\nJOIN \n    yelp_new.category c ON b.category_id = c.category_id\nJOIN \n    yelp_new.neighbourhood n ON b.neighborhood_id = n.neighborhood_id\nWHERE \n    c.cuisine_type = 'Italian'\n    AND b.average_rating < 2.5\n    AND b.business_status = 'open'\n    AND b.price_tier = 'regular'\n    AND n.neighborhood_population > 10000\nGROUP BY \n    n.neighbourhood_name\nHAVING \n    COUNT(DISTINCT b.business_id) > 0\nORDER BY \n    n.neighborhood_population DESC;\n```"
    },
    {
        "instance_id": "q_945",
        "db_id": "yelp_new",
        "question": "Find users who have interacted with the restaurant \"Mesa Grill\" through either reviews or tips within the past six months, and calculate their engagement level based on the average of their review ratings and tip sentiment scores (scaled to a 5-point scale). Include users who have shown a preference for similar dining categories, specifically those with active business status and that have been operational in the past six months. Prioritize users by their engagement score in descending order, using their total business interactions as a tiebreaker. Additionally, provide the total number of likes received on tips, the total number of reviews written by the user, and their overall business interaction count. Ensure that users with higher loyalty scores or frequent interactions with featured businesses are given precedence.",
        "query": "```sql\nWITH restaurant_id AS (\n    SELECT business_id \n    FROM yelp_new.business \n    WHERE business_type = 'Mesa Grill'\n),\nuser_interactions AS (\n    SELECT DISTINCT r.user_id, r.rating, t.tip_sentiment_score, t.likes\n    FROM yelp_new.review r\n    RIGHT JOIN yelp_new.tip t ON r.user_id = t.user_id\n    JOIN restaurant_id ri ON r.business_id = ri.business_id OR t.business_id = ri.business_id\n),\nsimilar_dining_users AS (\n    SELECT u.user_id\n    FROM yelp_new.user u\n    JOIN yelp_new.business b ON u.user_id = b.business_id\n    JOIN yelp_new.category c ON b.category_id = c.category_id\n    WHERE c.cuisine_type = (\n        SELECT cuisine_type \n        FROM yelp_new.category \n        WHERE category_name = 'Mesa Grill'\n    )\n    AND b.business_status = 'active'\n    AND b.open_time >= NOW() - INTERVAL '6 months'\n),\nengagement_analysis AS (\n    SELECT ui.user_id,\n           AVG(COALESCE(ui.rating, 0) + COALESCE(ui.tip_sentiment_score * 5, 0)) AS engagement_score,\n           SUM(COALESCE(t.likes, 0)) AS total_likes,\n           u.user_total_reviews AS review_count,\n           u.user_business_interactions AS interaction_count\n    FROM user_interactions ui\n    JOIN yelp_new.user u ON ui.user_id = u.user_id\n    LEFT JOIN yelp_new.tip t ON ui.user_id = t.user_id\n    GROUP BY ui.user_id, u.user_total_reviews, u.user_business_interactions\n),\nfinal_user_list AS (\n    SELECT ea.user_id,\n           ea.engagement_score,\n           ea.total_likes,\n           ea.review_count,\n           ea.interaction_count\n    FROM engagement_analysis ea\n    UNION\n    SELECT sd.user_id,\n           0 AS engagement_score,\n           0 AS total_likes,\n           u.user_total_reviews AS review_count,\n           u.user_business_interactions AS interaction_count\n    FROM similar_dining_users sd\n    JOIN yelp_new.user u ON sd.user_id = u.user_id\n)\nSELECT ful.user_id,\n       ful.engagement_score,\n       ful.total_likes,\n       ful.review_count,\n       ful.interaction_count\nFROM final_user_list ful\nORDER BY ful.engagement_score DESC, ful.interaction_count DESC;\n```"
    },
    {
        "instance_id": "q_950",
        "db_id": "yelp_new",
        "question": "Find all active dining establishments in the urban area of Dallas that were evaluated by a user named Patrick, considering only those with promotional offers active within the past month and having a loyalty program enrollment. Ensure the neighborhood population is at least 50. Prioritize the results based on the descending order of the average review length. Include details such as business ID, business type, price range, average rating, check-in count, delivery availability, and reservation availability. Exclude any businesses that are not currently open based on their operating hours.",
        "query": "```sql\nSELECT \n    b.business_id, \n    b.business_type, \n    b.price_range, \n    b.average_rating, \n    b.checkin_count, \n    b.delivery_available, \n    b.reservation_available, \n    u.user_id\nFROM \n    yelp_new.business AS b\nJOIN \n    yelp_new.neighbourhood AS n ON b.neighborhood_id = n.neighborhood_id\nJOIN \n    yelp_new.user AS u ON u.user_id = 'Patrick'\nWHERE \n    b.business_status = 'active'\n    AND b.open_time <= CURRENT_TIME\n    AND b.close_time >= CURRENT_TIME\n    AND n.neighborhood_population >= 50\n    AND n.neighborhood_name = 'Dallas'\n    AND b.promotional_offer_active = TRUE\n    AND b.promotion_start_date >= CURRENT_DATE - INTERVAL '1 month'\n    AND b.loyalty_program_enrollment = TRUE\nORDER BY \n    b.user_average_review_length DESC;\n```"
    },
    {
        "instance_id": "q_943",
        "db_id": "yelp_new",
        "question": "Which restaurants in Dallas have received reviews from users who exhibit a similar loyalty score and review writing pattern as Patrick, considering those whose positive and negative sentiment scores differ by no more than 0.1, average review length differs by no more than 5 characters, and total review count falls within ±20% of Patrick's, all within the past year?",
        "query": "```sql\nSELECT DISTINCT b.business_id, b.business_type \nFROM business b\nJOIN review r ON b.business_id = r.business_id\nJOIN user u ON r.user_id = u.user_id\nWHERE b.neighborhood_id = (\n    SELECT n.neighborhood_id \n    FROM neighbourhood n \n    WHERE n.neighbourhood_name = 'Dallas'\n)\nAND u.user_id IN (\n    SELECT u2.user_id \n    FROM user u2\n    WHERE ABS(u2.user_positive_sentiment_score - (\n        SELECT u3.user_positive_sentiment_score \n        FROM user u3 \n        WHERE u3.user_id = 'Patrick'\n    )) <= 0.1\n    AND ABS(u2.user_negative_sentiment_score - (\n        SELECT u4.user_negative_sentiment_score \n        FROM user u4 \n        WHERE u4.user_id = 'Patrick'\n    )) <= 0.1\n    AND ABS(u2.user_average_review_length - (\n        SELECT u5.user_average_review_length \n        FROM user u5 \n        WHERE u5.user_id = 'Patrick'\n    )) <= 5\n    AND u2.user_total_reviews >= (\n        SELECT u6.user_total_reviews * 0.8 \n        FROM user u6 \n        WHERE u6.user_id = 'Patrick'\n    )\n    AND u2.user_total_reviews <= (\n        SELECT u7.user_total_reviews * 1.2 \n        FROM user u7 \n        WHERE u7.user_id = 'Patrick'\n    )\n)\nAND r.rating_date >= NOW() - INTERVAL '1 year'\nAND b.business_type = 'restaurant';\n```"
    },
    {
        "instance_id": "q_949",
        "db_id": "yelp_new",
        "question": "Find all establishments categorized as Bars that have received feedback from a user named Patrick, considering both direct reviews and tip contributions. Ensure the results include only venues with promotional offers active within the last 3 months. Sort the results in descending order based on the overall sentiment score of the user's contributions, calculated as the difference between the user's positive and negative sentiment scores. Include details such as the business ID, business type, average rating, user ID, and the user's positive and negative sentiment scores in the output.",
        "query": "```sql\nSELECT \n    b.business_id, \n    b.business_type, \n    b.average_rating, \n    u.user_id, \n    u.user_positive_sentiment_score, \n    u.user_negative_sentiment_score\nFROM \n    business AS b\nJOIN \n    category AS c ON b.category_id = c.category_name\nJOIN \n    review AS r ON b.business_id = r.business_id\nJOIN \n    tip AS t ON b.business_id = t.business_id\nJOIN \n    user AS u ON r.user_id = u.user_id OR t.user_id = u.user_id\nWHERE \n    b.business_type = 'Bar'\n    AND (r.user_id IN (SELECT user_id FROM user WHERE user_id = 'Patrick') \n         OR t.user_id IN (SELECT user_id FROM user WHERE user_id = 'Patrick'))\n    AND b.business_status = 'Promotional'\n    AND b.open_time >= NOW() - INTERVAL '3 months'\nORDER BY \n    (u.user_positive_sentiment_score - u.user_negative_sentiment_score) DESC;\n```"
    },
    {
        "instance_id": "q_951",
        "db_id": "yelp_new",
        "question": "Find all businesses that have been active for more than one year, offer promotional discounts during peak hours, and have received positive reviews from users whose loyalty score (measured by user_positive_sentiment_score) is above average. Ensure that the review rating is at least 3 stars and the business is currently marked as active. Include only businesses where the review has a positive count greater than zero.",
        "query": "```sql\nSELECT DISTINCT b.business_id, b.business_type, b.price_range, b.latitude, b.longitude, b.open_time, b.close_time, b.review_count, b.average_rating, b.neighborhood_id, b.category_id, b.checkin_count, b.business_status, b.delivery_available, b.reservation_available, b.price_tier, b.delivery_service_provider, b.reservation_platform\nFROM yelp_new.business b\nJOIN yelp_new.review r ON b.business_id = r.business_id\nJOIN yelp_new.user u ON r.user_id = u.user_id\nWHERE r.rating >= 3\nAND b.business_status = 'active'\nAND b.business_id IN (\n    SELECT business_id\n    FROM yelp_new.business\n    WHERE EXTRACT(EPOCH FROM (NOW() AT TIME ZONE 'UTC' - open_time)) / 60 / 60 / 24 / 365 > 1\n)\nAND b.price_tier LIKE '%discount%'\nAND u.user_positive_sentiment_score > (\n    SELECT AVG(user_positive_sentiment_score)\n    FROM yelp_new.user\n)\nAND r.review_positive_count > 0;\n```"
    },
    {
        "instance_id": "q_955",
        "db_id": "yelp_new",
        "question": "Which seafood restaurants in Los Angeles are currently open, offer delivery services, and operate during peak dining hours (between 7:00 PM and 9:00 PM)? Additionally, these businesses should be located in neighborhoods with above-average population levels, have received the highest average ratings in the past year among seafood restaurants meeting the aforementioned criteria, and exhibit higher repeat customer patterns based on check-in data exceeding the average check-in frequency. Prioritize results by descending order of average rating and check-in count.",
        "query": "```sql\nSELECT \n    b.business_id, \n    b.business_type, \n    c.category_name, \n    b.average_rating, \n    b.price_tier, \n    n.neighbourhood_name, \n    n.neighborhood_population\nFROM \n    business AS b\nJOIN \n    category AS c ON b.category_id = c.category_id\nJOIN \n    neighbourhood AS n ON b.neighborhood_id = n.neighborhood_id\nWHERE \n    c.cuisine_type = 'Seafood'\n    AND b.business_status = 'Open'\n    AND b.delivery_available = TRUE\n    AND b.open_time <= '19:00:00'::time AND b.close_time >= '21:00:00'::time\n    AND b.business_id IN (\n        SELECT business_id \n        FROM checkin \n        GROUP BY business_id \n        HAVING SUM(count) > (SELECT AVG(SUM(count)) FROM checkin GROUP BY business_id)\n    )\n    AND n.neighborhood_population > (SELECT AVG(neighborhood_population) FROM neighbourhood)\n    AND b.average_rating = (\n        SELECT MAX(b2.average_rating) \n        FROM business AS b2 \n        JOIN category AS c2 ON b2.category_id = c2.category_id \n        WHERE c2.cuisine_type = 'Seafood' \n          AND b2.business_status = 'Open' \n          AND b2.delivery_available = TRUE\n          AND b2.open_time <= '19:00:00'::time AND b2.close_time >= '21:00:00'::time\n          AND b2.business_id IN (\n              SELECT business_id \n              FROM review \n              WHERE review_date >= NOW() - INTERVAL '1 year'\n          )\n    )\nORDER BY \n    b.average_rating DESC, \n    b.checkin_count DESC;\n```"
    },
    {
        "instance_id": "q_948",
        "db_id": "yelp_new",
        "question": "Find all open restaurants in Los Angeles that specialize in Seafood, and provide details including their price range, average rating, check-in count, availability of delivery and reservation services, price tier, delivery service provider, and reservation platform. Additionally, include the neighborhood name, population, and type, prioritizing neighborhoods classified as higher income to attract more affluent customers. Sort the results by the restaurant's average rating in descending order, and then by neighborhood population in descending order.",
        "query": "```sql\nSELECT \n    b.business_id, \n    b.business_type, \n    b.price_range, \n    b.average_rating, \n    b.checkin_count, \n    b.delivery_available, \n    b.reservation_available, \n    b.price_tier, \n    b.delivery_service_provider, \n    b.reservation_platform, \n    n.neighbourhood_name, \n    n.neighborhood_population, \n    n.neighborhood_type\nFROM \n    business AS b\nJOIN \n    category AS c ON b.category_id = c.category_id\nJOIN \n    neighbourhood AS n ON b.neighborhood_id = n.neighborhood_id\nWHERE \n    c.cuisine_specialty = 'Seafood'\n    AND b.business_status = 'open'\n    AND n.neighborhood_type = 'higher_income'\n    AND b.business_type = 'restaurant'\nORDER BY \n    b.average_rating DESC, \n    n.neighborhood_population DESC;\n```"
    },
    {
        "instance_id": "q_959",
        "db_id": "yelp_new",
        "question": "Which restaurants in Los Angeles offer seafood, have a promotional offer active within the last 3 months, and are located in high-income neighborhoods with an average income above $75,000? Additionally, consider only those restaurants that have received more than 100 reviews and have had at least two distinct users engage with their loyalty program.",
        "query": "```sql\nSELECT \n    b.business_id, \n    b.business_type, \n    c.category_name, \n    b.price_range, \n    b.average_rating, \n    b.review_count, \n    n.neighbourhood_name, \n    n.neighborhood_population\nFROM \n    yelp_new.business AS b\nJOIN \n    yelp_new.category AS c ON b.category_id = c.category_id\nJOIN \n    yelp_new.neighbourhood AS n ON b.neighborhood_id = n.neighborhood_id\nWHERE \n    c.cuisine_type = 'Seafood'\n    AND b.business_status = 'Promotional Offer Active'\n    AND b.business_status IN (\n        SELECT business_status \n        FROM yelp_new.business \n        WHERE CAST(business_status AS DATE) >= CURRENT_DATE - INTERVAL '3 MONTH'\n    )\n    AND b.business_id IN (\n        SELECT business_id \n        FROM yelp_new.tip \n        GROUP BY business_id \n        HAVING COUNT(DISTINCT user_id) >= 2\n    )\n    AND n.neighborhood_population > 75000\n    AND b.review_count > 100\n    AND b.business_type = 'Restaurant'\n    AND b.neighborhood_id IN (\n        SELECT neighborhood_id \n        FROM yelp_new.neighbourhood \n        WHERE neighborhood_type = 'High Income'\n    );\n```"
    },
    {
        "instance_id": "q_953",
        "db_id": "yelp_new",
        "question": "Which neighborhood is associated with the restaurant named \"Flat Top Grill,\" and what is the average population (as a proxy for income level) of that neighborhood? Additionally, compare the discount percentage offered by \"Flat Top Grill\" to the average discount percentage of all restaurants in the same neighborhood. The discount percentage is calculated as the ratio of the numeric value extracted from the price tier to the numeric value extracted from the price range, expressed as a percentage.",
        "query": "```sql\nWITH restaurant_info AS (\n    SELECT \n        b.neighborhood_id, \n        c.cuisine_specialty, \n        b.price_tier, \n        b.delivery_service_provider\n    FROM \n        yelp_new.business b\n    JOIN \n        yelp_new.category c ON b.category_id = c.category_id\n    WHERE \n        b.business_type = 'Flat Top Grill'\n),\nneighborhood_avg_income AS (\n    SELECT \n        n.neighbourhood_name, \n        AVG(n.neighborhood_population) AS avg_income_level\n    FROM \n        yelp_new.neighbourhood n\n    JOIN \n        restaurant_info ri ON ri.neighborhood_id = n.neighborhood_id\n    GROUP BY \n        n.neighbourhood_name\n),\ndiscount_comparison AS (\n    SELECT \n        b.business_type, \n        CAST(SUBSTRING(b.price_tier, '[0-9]+') AS FLOAT) / NULLIF(CAST(SUBSTRING(b.price_range, '[0-9]+') AS FLOAT), 0) * 100 AS discount_percentage\n    FROM \n        yelp_new.business b\n    JOIN \n        restaurant_info ri ON ri.neighborhood_id = b.neighborhood_id\n)\nSELECT \n    na.neighbourhood_name, \n    na.avg_income_level, \n    dc.discount_percentage AS flat_top_grill_discount, \n    AVG(dc.discount_percentage) AS avg_neighborhood_discount\nFROM \n    neighborhood_avg_income na\nJOIN \n    discount_comparison dc ON dc.business_type = 'Flat Top Grill'\nGROUP BY \n    na.neighbourhood_name, \n    na.avg_income_level, \n    dc.discount_percentage;\n```"
    },
    {
        "instance_id": "q_957",
        "db_id": "yelp_new",
        "question": "Find users who have interacted with businesses categorized as restaurants during a promotional period in the year 2010. Specifically, include users whose historical interaction patterns show more than 5 reviews and an average review sentiment score greater than 0.5. For each qualifying user, provide their user ID, total number of reviews, average review length, positive sentiment score, negative sentiment score, and total business interactions.",
        "query": "```sql\nSELECT \n    u.user_id, \n    u.user_total_reviews, \n    u.user_average_review_length, \n    u.user_positive_sentiment_score, \n    u.user_negative_sentiment_score, \n    u.user_business_interactions\nFROM \n    \"user\" AS u\nJOIN \n    \"review\" AS r ON u.user_id = r.user_id\nJOIN \n    \"business\" AS b ON r.business_id = b.business_id\nJOIN \n    \"category\" AS c ON b.category_id = c.category_id\nWHERE \n    c.category_name = 'Restaurant'\n    AND EXTRACT(YEAR FROM r.review_date AT TIME ZONE 'UTC') = 2010\n    AND b.business_status = 'Promotional'\nGROUP BY \n    u.user_id, \n    u.user_total_reviews, \n    u.user_average_review_length, \n    u.user_positive_sentiment_score, \n    u.user_negative_sentiment_score, \n    u.user_business_interactions\nHAVING \n    COUNT(r.rating) > 5\n    AND AVG(r.review_sentiment_score) > 0.5;\n```"
    },
    {
        "instance_id": "q_954",
        "db_id": "yelp_new",
        "question": "What is the total number of check-ins at restaurants categorized under Moroccan cuisine, located in neighborhoods with a population exceeding 500,000, during peak hours defined as between 12:00 PM and 3:00 PM?",
        "query": "```sql\nSELECT SUM(c.count) AS total_checkins\nFROM checkin c\nJOIN business b ON c.user_id = b.business_id\nJOIN category cat ON b.category_id = cat.category_id\nJOIN neighbourhood n ON b.neighborhood_id = n.neighborhood_id\nWHERE b.business_type = 'restaurant'\nAND cat.cuisine_type = 'Moroccan'\nAND n.neighborhood_population > 500000\nAND (b.open_time BETWEEN '12:00:00' AND '15:00:00'\nOR b.close_time BETWEEN '12:00:00' AND '15:00:00');\n```"
    },
    {
        "instance_id": "q_956",
        "db_id": "yelp_new",
        "question": "What is the total number of check-ins at Moroccan restaurants located in the Los Angeles neighborhood during the time range of 11:00 AM to 3:00 PM on Fridays, considering only businesses that have been open for more than 2 years and currently have an active promotional offer?",
        "query": "```sql\nSELECT SUM(c.count) AS total_checkins\nFROM checkin c\nJOIN business b ON c.user_id = b.business_id\nJOIN category ct ON b.category_id = ct.category_id\nJOIN neighbourhood n ON b.neighborhood_id = n.neighbourhood_code\nWHERE ct.cuisine_type = 'Moroccan'\n  AND n.neighbourhood_name = 'Los Angeles'\n  AND b.open_time >= '11:00:00'::time AND b.close_time <= '15:00:00'::time\n  AND CURRENT_DATE - INTERVAL '2 years' > b.open_date\n  AND b.promotional_offer_active = TRUE;\n``` \n\n### Note: \nThe schema does not explicitly include `open_date` or `promotional_offer_active` fields. Assuming these exist in the `business` table or a related table. If not, additional clarification is required."
    },
    {
        "instance_id": "q_965",
        "db_id": "yelp_new",
        "question": "What is the daily trend of visitor engagement in Moroccan cuisine establishments located in the Los Angeles neighborhood, considering only businesses that have been continuously operational for more than 2 years and offer promotional discounts? Additionally, analyze the correlation between the peak check-in hours and the average income level of the surrounding neighborhood by identifying the highest hourly check-in period and comparing it with the neighborhood's average population as a proxy for income level.",
        "query": "```sql\nWITH filtered_business AS (\n    SELECT \n        b.business_id,\n        b.price_range,\n        b.average_rating,\n        b.checkin_count,\n        b.business_status,\n        b.delivery_available,\n        b.reservation_available,\n        n.neighborhood_name,\n        n.neighborhood_population,\n        c.category_name,\n        c.cuisine_type\n    FROM \n        yelp_new.business b\n    JOIN \n        yelp_new.category c ON b.category_id = c.category_id\n    JOIN \n        yelp_new.neighbourhood n ON b.neighborhood_id = n.neighborhood_id\n    WHERE \n        c.cuisine_type = 'Moroccan'\n        AND b.business_status = 'operational'\n        AND b.open_time <= NOW() - INTERVAL '2 years'\n        AND b.price_tier LIKE '%discount%'\n        AND n.neighborhood_name = 'Los Angeles'\n),\ndaily_checkin_trend AS (\n    SELECT \n        DATE_TRUNC('day', checkin.time) AS checkin_day,\n        SUM(checkin.count) AS total_checkins\n    FROM \n        yelp_new.checkin\n    JOIN \n        filtered_business fb ON checkin.user_id = fb.business_id\n    GROUP BY \n        checkin_day\n    ORDER BY \n        checkin_day\n),\nneighborhood_income AS (\n    SELECT \n        n.neighborhood_name,\n        AVG(n.neighborhood_population) AS avg_income_level\n    FROM \n        yelp_new.neighbourhood n\n    JOIN \n        filtered_business fb ON fb.neighborhood_name = n.neighborhood_name\n    GROUP BY \n        n.neighborhood_name\n),\npeak_checkin_hours AS (\n    SELECT \n        DATE_TRUNC('hour', checkin.time) AS checkin_hour,\n        SUM(checkin.count) AS hourly_checkins\n    FROM \n        yelp_new.checkin\n    JOIN \n        filtered_business fb ON checkin.user_id = fb.business_id\n    GROUP BY \n        checkin_hour\n    ORDER BY \n        hourly_checkins DESC\n    LIMIT 1\n)\nSELECT \n    dct.checkin_day,\n    dct.total_checkins,\n    ni.avg_income_level,\n    pch.checkin_hour,\n    pch.hourly_checkins\nFROM \n    daily_checkin_trend dct\nJOIN \n    neighborhood_income ni ON dct.checkin_day::text LIKE CONCAT('%', ni.neighborhood_name, '%')\nJOIN \n    peak_checkin_hours pch ON dct.checkin_day = DATE_TRUNC('day', pch.checkin_hour);\n```"
    },
    {
        "instance_id": "q_964",
        "db_id": "yelp_new",
        "question": "What is the total number of check-ins at Italian Delis by state on weekends, considering only businesses that have been open for more than 2 years and have an average daily check-in count exceeding 10? Additionally, include the delivery and reservation offer statuses of these businesses if applicable.",
        "query": "```sql\nSELECT \n    n.neighbourhood_state AS state,\n    SUM(c.count) AS total_checkins,\n    b.delivery_available AS delivery_offer_status,\n    b.reservation_available AS reservation_offer_status\nFROM \n    business b\nJOIN \n    category ca ON b.category_id = ca.category_id\nJOIN \n    neighbourhood n ON b.neighborhood_id = n.neighborhood_id\nJOIN \n    checkin c ON b.business_id = c.user_id\nWHERE \n    ca.cuisine_type = 'Italian'\n    AND ca.cuisine_specialty = 'Delis'\n    AND EXTRACT(DOW FROM CURRENT_DATE) IN (0, 6) -- Weekend assumption: Sunday=0, Saturday=6\n    AND b.open_time <= CURRENT_TIME - INTERVAL '2 years' -- Business open for more than 2 years\n    AND (SELECT AVG(count) FROM checkin WHERE user_id = b.business_id) > 10 -- Average daily check-in count above 10\nGROUP BY \n    n.neighbourhood_state, b.delivery_available, b.reservation_available;\n```"
    },
    {
        "instance_id": "q_958",
        "db_id": "yelp_new",
        "question": "How many unique individuals have provided either formal reviews or casual tips on the dining venue \"Texas de Brazil\" located in the Dallas neighborhood within the past 365 days? Additionally, what is the average sentiment score of these interactions?",
        "query": "```sql\nSELECT \n    COUNT(DISTINCT COALESCE(r.user_id, t.user_id)) AS total_individuals,\n    AVG(COALESCE(r.review_sentiment_score, t.tip_sentiment_score)) AS avg_sentiment_score\nFROM \n    business b\nLEFT JOIN review r ON b.business_id = r.business_id AND r.created_at >= NOW() - INTERVAL '1 year'\nLEFT JOIN tip t ON b.business_id = t.business_id AND t.date >= NOW() - INTERVAL '1 year'\nWHERE \n    b.business_type = 'Texas de Brazil'\n    AND b.neighborhood_id = (SELECT n.neighborhood_id FROM neighbourhood n WHERE n.neighbourhood_name = 'Dallas');\n```"
    },
    {
        "instance_id": "q_962",
        "db_id": "yelp_new",
        "question": "How many dining establishments in the Hazelwood neighborhood of Dallas are currently offering promotional deals, and what is their average business age in years? Additionally, provide the total count of check-ins during peak hours (defined as either between 12:00 PM and 3:00 PM for opening times or between 6:00 PM and 9:00 PM for closing times) for these establishments.",
        "query": "```sql\nWITH filtered_business AS (\n    SELECT \n        b.business_id,\n        b.business_status,\n        b.open_time,\n        b.close_time,\n        b.checkin_count,\n        DATE_PART('year', AGE(CURRENT_DATE, MIN(r.review_date))) AS business_age\n    FROM \n        yelp_new.business b\n    JOIN \n        yelp_new.neighbourhood n ON b.neighborhood_id = n.neighborhood_code\n    WHERE \n        n.neighbourhood_name = 'Hazelwood'\n        AND b.business_type = 'dining'\n        AND b.business_status = 'promotional'\n    GROUP BY \n        b.business_id, b.business_status, b.open_time, b.close_time, b.checkin_count\n),\npeak_checkins AS (\n    SELECT \n        fb.business_id,\n        SUM(c.count) AS total_peak_checkins\n    FROM \n        filtered_business fb\n    JOIN \n        yelp_new.checkin c ON fb.business_id = c.user_id\n    WHERE \n        fb.open_time BETWEEN '12:00:00' AND '15:00:00'\n        OR fb.close_time BETWEEN '18:00:00' AND '21:00:00'\n    GROUP BY \n        fb.business_id\n)\nSELECT \n    COUNT(fb.business_id) AS promotional_dining_count,\n    AVG(fb.business_age) AS average_business_age,\n    SUM(pc.total_peak_checkins) AS total_peak_checkins\nFROM \n    filtered_business fb\nJOIN \n    peak_checkins pc ON fb.business_id = pc.business_id;\n```"
    },
    {
        "instance_id": "q_967",
        "db_id": "yelp_new",
        "question": "What is the typical engagement level at \"Barrio Cafe\" during its peak hours, defined as the time between its opening and closing times, in terms of the average number of daily check-ins and the total number of check-ins across these hours? Additionally, include details about any promotional offers that may influence customer footfall during these periods, such as price tier, delivery service provider, and reservation platform, considering only businesses that offer either delivery or reservation services.",
        "query": "```sql\nWITH barrio_cafe AS (\n    SELECT \n        b.business_id, \n        b.open_time, \n        b.close_time, \n        c.count AS checkin_count, \n        c.user_id\n    FROM \n        yelp_new.business b\n    JOIN \n        yelp_new.checkin c ON b.business_id = c.user_id\n    WHERE \n        b.business_type = 'Barrio Cafe'\n), peak_hours AS (\n    SELECT \n        bc.business_id, \n        DATE_PART('hour', bc.open_time) AS start_hour, \n        DATE_PART('hour', bc.close_time) AS end_hour, \n        AVG(bc.checkin_count) AS avg_daily_checkins, \n        COUNT(*) AS total_checkins\n    FROM \n        barrio_cafe bc\n    GROUP BY \n        bc.business_id, start_hour, end_hour\n), promotional_offers AS (\n    SELECT \n        b.business_id, \n        b.price_tier, \n        b.delivery_service_provider, \n        b.reservation_platform\n    FROM \n        yelp_new.business b\n    WHERE \n        b.business_type = 'Barrio Cafe' \n        AND (b.delivery_available = TRUE OR b.reservation_available = TRUE)\n)\nSELECT \n    ph.business_id, \n    ph.start_hour, \n    ph.end_hour, \n    ph.avg_daily_checkins, \n    ph.total_checkins, \n    po.price_tier, \n    po.delivery_service_provider, \n    po.reservation_platform\nFROM \n    peak_hours ph\nJOIN \n    promotional_offers po ON ph.business_id = po.business_id;\n```"
    },
    {
        "instance_id": "q_960",
        "db_id": "yelp_new",
        "question": "How many distinct users have interacted with Irish Pub businesses located in the Dallas neighborhood through either reviews or tips, and what is their average loyalty score calculated as the difference between their positive and negative sentiment scores?",
        "query": "```sql\nSELECT \n    COUNT(DISTINCT u.user_id) AS user_count,\n    AVG(u.user_positive_sentiment_score - u.user_negative_sentiment_score) AS average_loyalty_score\nFROM \n    user u\nJOIN \n    review r ON u.user_id = r.user_id\nJOIN \n    business b ON r.business_id = b.business_id\nLEFT JOIN \n    tip t ON u.user_id = t.user_id\nWHERE \n    b.category_id IN (SELECT category_id FROM category WHERE cuisine_type = 'Irish Pub')\n    AND b.neighborhood_id IN (SELECT neighborhood_id FROM neighbourhood WHERE neighbourhood_name = 'Dallas')\n    AND (r.rating IS NOT NULL OR t.tip_count IS NOT NULL);\n```"
    },
    {
        "instance_id": "q_961",
        "db_id": "yelp_new",
        "question": "Which users reviewed the restaurant named \"Vintner Grill\" in 2010, and what was their average review length and net sentiment score (calculated as positive sentiment score minus negative sentiment score) for that year? Additionally, how many of these users had a net sentiment score greater than 0.75, indicating a high loyalty score in the system?",
        "query": "```sql\nSELECT \n    u.user_id, \n    AVG(u.user_average_review_length) AS avg_review_length, \n    AVG(u.user_positive_sentiment_score - u.user_negative_sentiment_score) AS avg_sentiment_score,\n    SUM(CASE WHEN u.user_positive_sentiment_score - u.user_negative_sentiment_score > 0.75 THEN 1 ELSE 0 END) AS loyal_user_count\nFROM \n    user u\nJOIN \n    review r ON u.user_id = r.user_id\nJOIN \n    business b ON r.business_id = b.business_id\nWHERE \n    b.business_type = 'Vintner Grill'\n    AND EXTRACT(YEAR FROM r.review_date) = 2010\nGROUP BY \n    u.user_id;\n```"
    },
    {
        "instance_id": "q_963",
        "db_id": "yelp_new",
        "question": "Find Mexican restaurants in the Dallas neighborhood that have an average rating of at least 3.5 stars, are currently open, and offer promotional discounts. Provide the total number of check-ins during peak hours (defined as between 12:00 PM and 6:00 PM) for each restaurant, along with the average sentiment score of reviews. Ensure only businesses with a status marked as \"open\" and whose operating hours include the current time in the UTC time zone are considered.",
        "query": "```sql\nSELECT \n    b.business_id, \n    b.business_type, \n    b.average_rating, \n    c.category_name, \n    n.neighbourhood_name, \n    SUM(ch.count) AS total_checkins_during_peak_hours, \n    AVG(r.review_sentiment_score) AS average_review_sentiment_score\nFROM \n    yelp_new.business b\nJOIN \n    yelp_new.category c ON b.category_id = c.category_id\nJOIN \n    yelp_new.neighbourhood n ON b.neighborhood_id = n.neighborhood_id\nLEFT JOIN \n    yelp_new.checkin ch ON b.business_id = ch.user_id\nJOIN \n    yelp_new.review r ON b.business_id = r.business_id\nWHERE \n    c.cuisine_type = 'Mexican'\n    AND n.neighbourhood_name = 'Dallas'\n    AND b.average_rating >= 3.5\n    AND b.business_status = 'open'\n    AND b.open_time <= CURRENT_TIME AT TIME ZONE 'UTC' \n    AND b.close_time > CURRENT_TIME AT TIME ZONE 'UTC'\n    AND b.price_tier LIKE '%discount%'\n    AND (ch.count IS NULL OR (ch.count IS NOT NULL AND (b.open_time <= '12:00:00' AND b.close_time >= '18:00:00')))\nGROUP BY \n    b.business_id, b.business_type, b.average_rating, c.category_name, n.neighbourhood_name;\n```"
    },
    {
        "instance_id": "q_968",
        "db_id": "yelp_new",
        "question": "Find Mexican restaurants in the Dallas neighborhood that have an average rating greater than 3.5, have been open for at least 2 years, offer promotional discounts, and are located in neighborhoods with a population above the average population of city-type neighborhoods. Additionally, consider only businesses that have received more than 50 reviews and have a positive review sentiment score exceeding 0.7, calculated as the ratio of positive reviews to the total number of reviews.",
        "query": "```sql\nSELECT \n    b.business_id, \n    b.business_type, \n    b.average_rating, \n    n.neighbourhood_name, \n    c.category_name\nFROM \n    yelp_new.business AS b\nJOIN \n    yelp_new.category AS c ON b.category_id = c.category_id\nJOIN \n    yelp_new.neighbourhood AS n ON b.neighborhood_id = n.neighborhood_id\nWHERE \n    c.cuisine_type = 'Mexican'\n    AND n.neighborhood_name = 'Dallas'\n    AND b.average_rating > 3.5\n    AND b.business_status = 'open'\n    AND b.price_tier = 'discount'\n    AND b.review_count > 50\n    AND b.business_id IN (\n        SELECT business_id \n        FROM yelp_new.business \n        WHERE open_time <= NOW() - INTERVAL '2 years'\n    )\n    AND n.neighborhood_population > (\n        SELECT AVG(neighborhood_population) \n        FROM yelp_new.neighbourhood \n        WHERE neighborhood_type = 'city'\n    )\n    AND b.business_id IN (\n        SELECT business_id \n        FROM yelp_new.review \n        WHERE review_positive_count / (review_positive_count + review_negative_count) > 0.7\n    );\n```"
    },
    {
        "instance_id": "q_966",
        "db_id": "yelp_new",
        "question": "Find restaurants located in urban neighborhoods with an above-average population that are currently open, have an average rating greater than 4, and have received positive reviews (rating > 3) within the past six months. Additionally, include only those restaurants that have received at least one tip with likes in the tip dataset.",
        "query": "```sql\nSELECT \n    b.business_id, \n    b.business_type, \n    b.average_rating, \n    b.review_count, \n    n.neighbourhood_name, \n    n.neighborhood_population\nFROM \n    yelp_new.business AS b\nINNER JOIN \n    yelp_new.neighbourhood AS n ON b.neighborhood_id = n.neighborhood_code\nWHERE \n    b.business_type = 'restaurant'\n    AND n.neighborhood_type = 'urban'\n    AND n.neighborhood_population > (SELECT AVG(neighborhood_population) FROM yelp_new.neighbourhood)\n    AND b.business_status = 'open'\n    AND b.average_rating > 4\n    AND EXISTS (\n        SELECT 1 \n        FROM yelp_new.review AS r \n        WHERE r.rating > 3 \n            AND b.business_id = r.business_id \n            AND r.review_date >= CURRENT_DATE - INTERVAL '6 months'\n    )\n    AND EXISTS (\n        SELECT 1 \n        FROM yelp_new.tip AS t \n        WHERE t.likes > 0 \n            AND b.business_id = t.business_id\n    );\n```"
    },
    {
        "instance_id": "q_971",
        "db_id": "yelp_new",
        "question": "Find all open restaurants offering Italian cuisine, located in neighborhoods with a population greater than 10,000. Include details about the business type, average customer rating, price tier, availability of delivery and reservation options, price range, and any promotional discounts (indicated by cuisine specialty). Sort the results in descending order based on the average customer rating.",
        "query": "```sql\nSELECT \n    b.business_id, \n    b.business_type, \n    b.average_rating, \n    b.price_tier, \n    b.delivery_available, \n    b.reservation_available, \n    b.price_range, \n    c.cuisine_specialty AS promotional_discounts\nFROM \n    yelp_new.business b\nJOIN \n    yelp_new.category c ON b.category_id = c.category_id\nJOIN \n    yelp_new.neighbourhood n ON b.neighborhood_id = n.neighborhood_id\nWHERE \n    c.cuisine_type = 'Italian'\n    AND n.neighborhood_population > 10000\n    AND b.business_status = 'open'\nORDER BY \n    b.average_rating DESC;\n```"
    },
    {
        "instance_id": "q_970",
        "db_id": "yelp_new",
        "question": "How many distinct restaurants in Edinburgh serve Egyptian cuisine, and what is their average rating among users who have written reviews for at least three different businesses?",
        "query": "```sql\nSELECT \n    COUNT(DISTINCT b.business_id) AS restaurant_count,\n    AVG(b.average_rating) AS average_rating\nFROM \n    yelp_new.business b\nJOIN \n    yelp_new.category c ON b.category_id = c.category_id\nJOIN \n    yelp_new.neighbourhood n ON b.neighborhood_id = n.neighborhood_id\nJOIN \n    yelp_new.user u ON b.business_id = ANY (\n        SELECT ru.business_id\n        FROM yelp_new.review ru\n        WHERE ru.user_id = u.user_id\n        GROUP BY ru.user_id\n        HAVING COUNT(ru.rating) >= 3\n    )\nWHERE \n    c.cuisine_type = 'Egyptian'\n    AND n.neighbourhood_name = 'Edinburgh';\n```"
    },
    {
        "instance_id": "q_972",
        "db_id": "academic_new",
        "question": "What are the top 10 keywords with a publication count exceeding 5 among authors affiliated with \"University of Michigan\" in the past five years, ranked by their growth rate (difference in occurrences between the last two years) in descending order, and then by their average weighted score in descending order? Include the keyword weight, average weighted score, publication count, and growth rate in the results.",
        "query": "```sql\nWITH recent_publications AS (\n    SELECT \n        p.pid, \n        p.publication_year, \n        pk.kid, \n        pk.publication_keyword_weighted_score\n    FROM \n        publication p\n    JOIN \n        writes w ON p.pid = w.pid\n    JOIN \n        author a ON w.aid = a.aid\n    JOIN \n        publication_keyword pk ON p.pid = pk.pid\n    WHERE \n        a.author_institution LIKE '%University of Michigan%'\n        AND p.publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n),\nkeyword_growth AS (\n    SELECT \n        r.kid, \n        k.keyword_weight, \n        AVG(r.publication_keyword_weighted_score) AS avg_weighted_score,\n        COUNT(DISTINCT r.pid) AS publication_count,\n        SUM(CASE WHEN r.publication_year = EXTRACT(YEAR FROM CURRENT_DATE) - 1 THEN 1 ELSE 0 END) -\n        SUM(CASE WHEN r.publication_year = EXTRACT(YEAR FROM CURRENT_DATE) - 2 THEN 1 ELSE 0 END) AS growth_rate\n    FROM \n        recent_publications r\n    JOIN \n        keyword k ON r.kid = k.kid\n    GROUP BY \n        r.kid, k.keyword_weight\n)\nSELECT \n    kg.kid, \n    k.keyword_weight, \n    kg.avg_weighted_score, \n    kg.publication_count, \n    kg.growth_rate\nFROM \n    keyword_growth kg\nJOIN \n    keyword k ON kg.kid = k.kid\nWHERE \n    kg.publication_count > 5\nORDER BY \n    kg.growth_rate DESC, \n    kg.avg_weighted_score DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_978",
        "db_id": "academic_new",
        "question": "Which publications authored by researchers from the institution of \"H. V. Jagadish\" have a strong association with the concept of \"User Study,\" considering both the frequency of the keyword (with importance score greater than 0.8 and weight above average) and the domain relevance score (greater than 0.7)? Additionally, provide insights into the citation trend of these publications over time, the diversity of collaboration among co-authors (measured by average affiliation similarity score), and ensure that only publications with more than one distinct co-author are included. Results should be ordered by descending citation trend and descending domain relevance score.",
        "query": "```sql\nSELECT \n    p.pid AS publication_id,\n    p.publication_abstract_summary AS abstract_summary,\n    p.publication_citation_trend AS citation_trend,\n    COUNT(DISTINCT w.aid) AS co_author_count,\n    AVG(w.writes_affiliation_similarity_score) AS avg_collaboration_diversity,\n    dk.domain_keyword_frequency AS keyword_frequency,\n    da.domain_author_interests_similarity_score AS domain_relevance_score\nFROM \n    publication p\nJOIN \n    writes w ON p.pid = w.pid\nJOIN \n    author a ON w.aid = a.aid\nJOIN \n    publication_keyword pk ON p.pid = pk.pid\nJOIN \n    keyword k ON pk.kid = k.kid\nJOIN \n    domain_keyword dk ON k.kid = dk.did\nJOIN \n    domain_author da ON a.aid = da.did\nWHERE \n    a.author_institution = 'H. V. Jagadish'\n    AND k.keyword_importance_score > 0.8\n    AND dk.domain_keyword_frequency > (SELECT AVG(domain_keyword_frequency) FROM domain_keyword)\n    AND da.domain_author_interests_similarity_score > 0.7\n    AND k.keyword_weight IN (\n        SELECT keyword_weight \n        FROM keyword \n        WHERE keyword_weight > (SELECT AVG(keyword_weight) FROM keyword)\n    )\nGROUP BY \n    p.pid, p.publication_abstract_summary, p.publication_citation_trend, dk.domain_keyword_frequency, da.domain_author_interests_similarity_score\nHAVING \n    COUNT(DISTINCT w.aid) > 1\nORDER BY \n    p.publication_citation_trend DESC, da.domain_author_interests_similarity_score DESC;\n```"
    },
    {
        "instance_id": "q_979",
        "db_id": "academic_new",
        "question": "Which authors have a strong association with the domain of \"Relational Database\" based on their publication history, as evidenced by their domain weight and keyword frequency in related publications? Additionally, include authors who have participated in conferences within the last five years or contributed to journals with a focus on \"Relational Database\" and an impact factor greater than 2.0. Provide the authors' IDs, institutions, genders, domain weights, keyword frequencies, conference participation counts, and journal relevance measures, sorted in descending order of domain weight and keyword frequency.",
        "query": "```sql\nSELECT \n    a.aid,\n    a.author_institution,\n    a.author_gender,\n    da.domain_author_rank AS domain_weight,\n    dk.domain_keyword_frequency AS keyword_frequency,\n    dc.domain_conference_attendance AS conference_participation,\n    dj.domain_journal_impact_factor AS journal_relevance\nFROM \n    author a\nJOIN \n    domain_author da ON a.aid = da.did\nJOIN \n    domain d ON da.did = d.did\nLEFT JOIN \n    domain_conference dc ON d.did = dc.did\nLEFT JOIN \n    domain_journal dj ON d.did = dj.did\nLEFT JOIN \n    domain_keyword dk ON d.did = dk.did\nWHERE \n    d.domain_description ILIKE '%Relational Database%'\n    AND (\n        dc.conference_start_date >= CURRENT_DATE - INTERVAL '5 years'\n        OR dj.domain_journal_focus ILIKE '%Relational Database%'\n    )\n    AND (dc.domain_conference_attendance > 0 OR dj.domain_journal_impact_factor > 2.0)\nORDER BY \n    da.domain_author_rank DESC,\n    dk.domain_keyword_frequency DESC;\n```"
    },
    {
        "instance_id": "q_974",
        "db_id": "academic_new",
        "question": "Which publications from the VLDB conference series, associated with authors affiliated to the University of Michigan, have been published over the past five years, and what are their citation trends? Provide the results sorted by publication year in descending order.",
        "query": "```sql\nSELECT \n    p.pid AS publication_id, \n    p.publication_abstract_summary AS publication_summary, \n    p.publication_citation_trend AS citation_trend, \n    p.publication_year AS publication_year\nFROM \n    publication p\nJOIN \n    writes w ON p.pid = w.pid\nJOIN \n    author a ON w.aid = a.aid\nJOIN \n    domain_conference dc ON p.pid = dc.did\nJOIN \n    conference c ON dc.did = c.cid\nWHERE \n    a.author_institution LIKE '%University of Michigan%'\n    AND c.conference_location = 'VLDB'\n    AND p.publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\nORDER BY \n    p.publication_year DESC;\n```"
    },
    {
        "instance_id": "q_969",
        "db_id": "academic_new",
        "question": "Which publications in the PVLDB conference over the last five years are associated with authors from the University of Michigan, and what are their citation trends and collaboration scores? The results should be ordered by descending citation trend and descending collaboration score.",
        "query": "```sql\nSELECT \n    p.pid AS publication_id,\n    p.publication_abstract_summary AS publication_summary,\n    p.publication_citation_trend AS citation_trend,\n    da.domain_author_collaboration_score AS collaboration_score\nFROM \n    publication p\nJOIN \n    writes w ON p.pid = w.pid\nJOIN \n    author a ON w.aid = a.aid\nJOIN \n    domain_author da ON a.aid = da.did\nJOIN \n    domain_conference dc ON da.did = dc.did\nJOIN \n    conference c ON dc.cid = c.cid\nWHERE \n    a.author_institution = 'University of Michigan'\n    AND c.conference_start_date >= NOW() - INTERVAL '5 years'\n    AND c.conference_location LIKE '%PVLDB%'\nORDER BY \n    p.publication_citation_trend DESC,\n    da.domain_author_collaboration_score DESC;\n```"
    },
    {
        "instance_id": "q_976",
        "db_id": "academic_new",
        "question": "请列出自2000年以来，所有隶属于密歇根大学的作者在PVLDB会议上发表的论文，并提供每位作者在其研究领域内的合作得分以及论文的引用网络规模。结果需按论文的引用趋势从高到低排序。确保包含以下信息：作者ID、所属机构、论文ID、论文引用趋势、论文引用网络以及作者的合作得分。",
        "query": "```sql\nSELECT \n    a.aid AS author_id,\n    a.author_institution AS institution,\n    p.pid AS publication_id,\n    p.publication_citation_trend AS citation_trend,\n    p.publication_citation_network AS citation_network,\n    da.domain_author_collaboration_score AS collaboration_score\nFROM \n    author a\nJOIN \n    writes w ON a.aid = w.aid\nJOIN \n    publication p ON w.pid = p.pid\nJOIN \n    domain_author da ON a.aid = da.did\nJOIN \n    conference c ON p.publication_type = 'PVLDB' AND c.cid = p.pid\nWHERE \n    a.author_institution = 'University of Michigan'\n    AND p.publication_year >= 2000\n    AND c.conference_start_date >= '2000-01-01'::date\nORDER BY \n    p.publication_citation_trend DESC;\n```"
    },
    {
        "instance_id": "q_977",
        "db_id": "academic_new",
        "question": "How many distinct research articles has \"H. V. Jagadish\" contributed to as either the primary author or a significant co-author (ranked up to 3rd position) in high-impact conferences (with registration fees exceeding $500 and sponsored by high-impact organizations) or journals (with an impact factor greater than 2.0 and ranking within the top 10), published since the year 2000? Additionally, provide the average citation trend of these articles over the past decade.",
        "query": "```sql\nSELECT \n    COUNT(DISTINCT p.pid) AS article_count,\n    AVG(p.publication_citation_trend) AS avg_citation_trend\nFROM \n    author a\nJOIN \n    writes w ON a.aid = w.aid\nJOIN \n    publication p ON w.pid = p.pid\nLEFT JOIN \n    conference c ON p.pid = c.cid\nLEFT JOIN \n    journal j ON p.pid = j.jid\nLEFT JOIN \n    domain_journal dj ON j.jid = dj.did\nLEFT JOIN \n    domain_conference dc ON c.cid = dc.did\nWHERE \n    a.author_institution = 'H. V. Jagadish'\n    AND (w.writes_primary_author = TRUE OR w.writes_co_author_rank <= 3)\n    AND p.publication_year >= 2000\n    AND ((c.conference_registration_fee > 500 AND c.conference_sponsorship_type = 'High-Impact') \n         OR (dj.domain_journal_impact_factor > 2.0 AND dj.domain_journal_ranking <= 10))\n    AND p.publication_type = 'research article';\n```"
    },
    {
        "instance_id": "q_973",
        "db_id": "academic_new",
        "question": "How many distinct research papers has \"H. V. Jagadish\" contributed to in the VLDB conference series, considering only conferences ranked in the top 10% based on historical participation trends, and focusing on publications from the last two decades?",
        "query": "```sql\nSELECT COUNT(DISTINCT p.pid) AS paper_count\nFROM author a\nJOIN writes w ON a.aid = w.aid\nJOIN publication p ON w.pid = p.pid\nJOIN domain_conference dc ON p.publication_year BETWEEN YEAR(NOW()) - 20 AND YEAR(NOW())\nJOIN conference c ON dc.did = c.cid\nWHERE a.author_name = 'H. V. Jagadish'\n  AND c.conference_location LIKE 'VLDB%'\n  AND c.domain_conference_attendance >= (\n    SELECT PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY domain_conference_attendance)\n    FROM domain_conference\n  );\n```"
    },
    {
        "instance_id": "q_975",
        "db_id": "academic_new",
        "question": "How many distinct research domains are associated with the publications authored by \"H. V. Jagadish,\" based on the unique keywords in his works and their frequency within specific domains? Additionally, calculate the average growth trend of these research domains over the past five years, measured by the number of distinct topics per year.",
        "query": "```sql\nWITH jagadish_publications AS (\n    SELECT DISTINCT p.pid\n    FROM writes w\n    JOIN author a ON w.aid = a.aid\n    JOIN publication p ON w.pid = p.pid\n    WHERE a.author_institution = 'H. V. Jagadish'\n),\npublication_keywords AS (\n    SELECT DISTINCT pk.kid, pk.publication_keyword_weighted_score\n    FROM publication_keyword pk\n    JOIN jagadish_publications jp ON pk.pid = jp.pid\n),\nkeyword_domains AS (\n    SELECT DISTINCT d.did, k.kid, dk.domain_keyword_frequency\n    FROM domain_keyword dk\n    JOIN keyword k ON dk.did = k.kid\n    JOIN publication_keywords pk ON k.kid = pk.kid\n),\ntopic_growth AS (\n    SELECT kd.did, COUNT(DISTINCT pk.kid) AS topic_count, p.publication_year\n    FROM keyword_domains kd\n    JOIN publication_keyword pk ON kd.kid = pk.kid\n    JOIN publication p ON pk.pid = p.pid\n    WHERE p.publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n    GROUP BY kd.did, p.publication_year\n)\nSELECT COUNT(DISTINCT did) AS distinct_topics, AVG(topic_count) AS avg_topic_growth\nFROM topic_growth;\n```"
    },
    {
        "instance_id": "q_981",
        "db_id": "academic_new",
        "question": "How many distinct keywords are associated with publications authored by researchers affiliated with the University of Michigan, where the publications have been cited at least 10 times and were published within the last 5 years?",
        "query": "```sql\nSELECT COUNT(DISTINCT pk.kid) AS unique_keyword_count\nFROM writes w\nJOIN author a ON w.aid = a.aid\nJOIN publication p ON w.pid = p.pid\nJOIN publication_keyword pk ON p.pid = pk.pid\nWHERE a.author_institution = 'University of Michigan'\n  AND p.publication_citation_count >= 10\n  AND p.publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5;\n```"
    },
    {
        "instance_id": "q_987",
        "db_id": "academic_new",
        "question": "How many publications has \"H. V. Jagadish\" contributed to from 2013 to the present, considering only those strongly associated with the concept of \"User Study\" based on both direct keyword matches (with a frequency greater than 5) and related domain interests (conferences with attendance greater than 10 or journals with a ranking higher than 7)? Additionally, provide the distribution of these publications by year, including the total count and the aggregated weighted score of publication keywords for each year, while specifying whether the publications are in conferences or journals.",
        "query": "```sql\nWITH domain_relevance AS (\n    SELECT \n        d.did,\n        dk.domain_keyword_frequency,\n        dc.domain_conference_attendance,\n        dj.domain_journal_ranking,\n        dkp.publication_keyword_weighted_score\n    FROM domain d\n    JOIN domain_keyword dk ON d.did = dk.did\n    JOIN domain_conference dc ON d.did = dc.did\n    JOIN domain_journal dj ON d.did = dj.did\n    JOIN publication_keyword dkp ON dkp.pid = ANY(SELECT pid FROM domain_publication WHERE did = d.did)\n    WHERE dk.domain_keyword_frequency > 5 -- Assuming a threshold for strong association\n      AND d.domain_description ILIKE '%User Study%'\n),\nauthor_publications AS (\n    SELECT \n        w.aid,\n        p.pid,\n        p.publication_year,\n        p.publication_type,\n        dr.domain_keyword_frequency,\n        dr.domain_conference_attendance,\n        dr.domain_journal_ranking,\n        dr.publication_keyword_weighted_score\n    FROM writes w\n    JOIN publication p ON w.pid = p.pid\n    JOIN author a ON w.aid = a.aid\n    JOIN domain_relevance dr ON p.pid = ANY(SELECT pid FROM domain_publication WHERE did = dr.did)\n    WHERE a.author_institution ILIKE '%H. V. Jagadish%'\n      AND (dr.domain_conference_attendance > 10 OR dr.domain_journal_ranking > 7) -- High relevance scores\n      AND p.publication_year >= 2013 -- Past decade\n),\ntrend_analysis AS (\n    SELECT \n        publication_year,\n        COUNT(pid) AS publication_count,\n        SUM(publication_keyword_weighted_score) AS total_weighted_score\n    FROM author_publications\n    GROUP BY publication_year\n    ORDER BY publication_year\n)\nSELECT \n    ap.aid,\n    COUNT(ap.pid) AS total_publications,\n    STRING_AGG(DISTINCT ap.publication_type, ', ') AS publication_types,\n    ta.publication_year,\n    ta.publication_count,\n    ta.total_weighted_score\nFROM author_publications ap\nLEFT JOIN trend_analysis ta USING (publication_year)\nGROUP BY ap.aid, ta.publication_year, ta.publication_count, ta.total_weighted_score;\n```"
    },
    {
        "instance_id": "q_984",
        "db_id": "academic_new",
        "question": "How many research articles in the PVLDB conference have focused on the topic of \"Keyword search\" within the last five years, broken down by year? Provide the trend of this research interest over time by showing the count of articles and the average citation count per year. Additionally, identify the top 5 emerging subtopics related to \"Keyword search\" based on keyword frequency analysis, including their weighted scores.",
        "query": "```sql\nWITH filtered_publications AS (\n    SELECT \n        p.pid,\n        p.publication_year,\n        p.publication_citation_count,\n        pk.publication_keyword_weighted_score\n    FROM \n        publication p\n    INNER JOIN writes w ON p.pid = w.pid\n    INNER JOIN author a ON w.aid = a.aid\n    INNER JOIN conference c ON p.pid = c.cid\n    INNER JOIN publication_keyword pk ON p.pid = pk.pid\n    INNER JOIN keyword k ON pk.kid = k.kid\n    WHERE \n        c.conference_location = 'PVLDB'\n        AND p.publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n        AND LOWER(p.publication_abstract) LIKE '%keyword search%'\n        AND p.publication_type = 'research article'\n),\ntrend_analysis AS (\n    SELECT \n        publication_year,\n        COUNT(pid) AS article_count,\n        AVG(publication_citation_count) AS avg_citation_count\n    FROM \n        filtered_publications\n    GROUP BY \n        publication_year\n    ORDER BY \n        publication_year\n),\nemerging_subtopics AS (\n    SELECT \n        k.kid,\n        k.keyword_weight,\n        SUM(fp.publication_keyword_weighted_score) AS total_weighted_score\n    FROM \n        filtered_publications fp\n    INNER JOIN publication_keyword pk ON fp.pid = pk.pid\n    INNER JOIN keyword k ON pk.kid = k.kid\n    WHERE \n        LOWER(k.keyword_weight) LIKE '%keyword search%'\n    GROUP BY \n        k.kid, k.keyword_weight\n    ORDER BY \n        total_weighted_score DESC\n    LIMIT 5\n)\nSELECT \n    ta.publication_year,\n    ta.article_count,\n    ta.avg_citation_count,\n    es.kid AS emerging_subtopic_id,\n    es.keyword_weight AS emerging_subtopic_keyword\nFROM \n    trend_analysis ta\nLEFT JOIN emerging_subtopics es ON 1=1;\n```"
    },
    {
        "instance_id": "q_983",
        "db_id": "academic_new",
        "question": "How many publications in the VLDB conference series are strongly associated with the domain of \"Information Retrieval,\" considering both keyword frequency above the average and a domain confidence score greater than 0.8, within the past five years? Additionally, provide the yearly trend analysis of these publications from the start of the five-year period to the current year.",
        "query": "```sql\nWITH domain_publication_count AS (\n    SELECT \n        dp.did,\n        COUNT(DISTINCT p.pid) AS publication_count\n    FROM \n        domain_publication dp\n    JOIN \n        domain d ON dp.did = d.did\n    JOIN \n        publication p ON dp.pid = p.pid\n    JOIN \n        domain_keyword dk ON dp.did = dk.did\n    WHERE \n        d.domain_description ILIKE '%Information Retrieval%'\n        AND dk.domain_keyword_frequency > (SELECT AVG(domain_keyword_frequency) FROM domain_keyword)\n        AND d.domain_confidence_score > 0.8\n        AND p.publication_year BETWEEN EXTRACT(YEAR FROM CURRENT_DATE) - 5 AND EXTRACT(YEAR FROM CURRENT_DATE)\n    GROUP BY \n        dp.did\n),\ntrend_analysis AS (\n    SELECT \n        p.publication_year,\n        COUNT(DISTINCT p.pid) AS yearly_publication_count\n    FROM \n        domain_publication dp\n    JOIN \n        domain d ON dp.did = d.did\n    JOIN \n        publication p ON dp.pid = p.pid\n    JOIN \n        domain_keyword dk ON dp.did = dk.did\n    WHERE \n        d.domain_description ILIKE '%Information Retrieval%'\n        AND dk.domain_keyword_frequency > (SELECT AVG(domain_keyword_frequency) FROM domain_keyword)\n        AND d.domain_confidence_score > 0.8\n        AND p.publication_year BETWEEN EXTRACT(YEAR FROM CURRENT_DATE) - 5 AND EXTRACT(YEAR FROM CURRENT_DATE)\n    GROUP BY \n        p.publication_year\n    ORDER BY \n        p.publication_year\n)\nSELECT \n    (SELECT SUM(publication_count) FROM domain_publication_count) AS total_publications,\n    ta.publication_year,\n    ta.yearly_publication_count\nFROM \n    trend_analysis ta;\n```"
    },
    {
        "instance_id": "q_980",
        "db_id": "academic_new",
        "question": "How many distinct authors have contributed to publications that prominently feature the concept of \"Relational Database,\" as indicated by a weighted keyword score greater than 0.5 for this specific keyword, while also demonstrating a domain expertise alignment with related research areas, evidenced by an interests similarity score exceeding 0.7 and belonging to domains whose descriptions include the term \"database\"?",
        "query": "```sql\nSELECT COUNT(DISTINCT a.aid) AS author_count\nFROM author a\nJOIN writes w ON a.aid = w.aid\nJOIN publication p ON w.pid = p.pid\nJOIN publication_keyword pk ON p.pid = pk.pid\nJOIN keyword k ON pk.kid = k.kid\nJOIN domain_author da ON a.aid = da.domain_author_aid\nJOIN domain d ON da.did = d.did\nWHERE LOWER(k.keyword_text) = 'relational database'\n  AND pk.publication_keyword_weighted_score > 0.5\n  AND da.domain_author_interests_similarity > 0.7\n  AND d.domain_description ILIKE '%database%';\n```"
    },
    {
        "instance_id": "q_990",
        "db_id": "academic_new",
        "question": "How many distinct research papers in the field of Databases have been published by authors affiliated with the University of Michigan, where the papers have received at least 10 citations and were published within the last 5 years?",
        "query": "```sql\nSELECT COUNT(DISTINCT p.pid) AS paper_count\nFROM publication p\nJOIN writes w ON p.pid = w.pid\nJOIN author a ON w.aid = a.aid\nJOIN domain_author da ON a.aid = da.did\nJOIN domain d ON da.did = d.did\nWHERE a.author_institution LIKE '%University of Michigan%'\n  AND p.publication_citation_count >= 10\n  AND p.publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n  AND d.domain_description = 'Databases';\n```"
    },
    {
        "instance_id": "q_982",
        "db_id": "academic_new",
        "question": "How many distinct research papers were published by authors affiliated with the \"University of Michigan\" in conferences categorized under the VLDB series, where only conferences with an average attendance exceeding 100 participants over the past five years are considered?",
        "query": "```sql\nSELECT COUNT(DISTINCT p.pid) AS paper_count\nFROM publication p\nJOIN writes w ON p.pid = w.pid\nJOIN author a ON w.aid = a.aid\nJOIN domain_conference dc ON p.pid = dc.did\nJOIN conference c ON dc.did = c.cid\nWHERE a.author_institution = 'University of Michigan'\n  AND dc.domain_conference_theme_category = 'VLDB'\n  AND c.cid IN (\n    SELECT cid\n    FROM conference\n    WHERE conference_start_date >= NOW() - INTERVAL '5 years'\n    GROUP BY cid\n    HAVING AVG(domain_conference_attendance) > 100\n  );\n```"
    },
    {
        "instance_id": "q_988",
        "db_id": "academic_new",
        "question": "How many distinct research articles, published within the last five years by authors affiliated with the \"University of Michigan\", have appeared in conferences or journals related to the field of data management, including those specifically associated with PVLDB? Consider only articles where the authors have a positive collaboration score and their normalized research interests include the term \"data management\".",
        "query": "```sql\nSELECT COUNT(DISTINCT p.pid) AS research_article_count\nFROM publication p\nJOIN writes w ON p.pid = w.pid\nJOIN author a ON w.aid = a.aid\nJOIN domain_author da ON a.aid = da.domain_author\nJOIN domain d ON da.did = d.did\nLEFT JOIN domain_conference dc ON d.did = dc.did\nLEFT JOIN conference c ON dc.cid = c.cid\nLEFT JOIN domain_journal dj ON d.did = dj.did\nLEFT JOIN journal j ON dj.jid = j.jid\nWHERE a.author_institution = 'University of Michigan'\n  AND p.publication_type = 'research article'\n  AND d.domain_description ILIKE '%data management%'\n  AND p.publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n  AND (c.conference_sponsorship_type ILIKE '%PVLDB%' OR j.journal_publisher ILIKE '%PVLDB%')\n  AND da.domain_author_collaboration_score > 0\n  AND da.domain_author_interests_normalized ILIKE '%data management%';\n```"
    },
    {
        "instance_id": "q_986",
        "db_id": "academic_new",
        "question": "How many distinct research articles published in PVLDB since the year 2000 have been authored by individuals affiliated with the University of Michigan, where these articles have received at least 10 citations and belong to the top 10% of publications within their respective domains based on quality score?",
        "query": "```sql\nSELECT COUNT(DISTINCT p.pid) AS article_count\nFROM publication p\nJOIN writes w ON p.pid = w.pid\nJOIN author a ON w.aid = a.aid\nJOIN domain_author da ON a.aid = da.domain_author_rank\nJOIN domain d ON da.did = d.did\nWHERE p.publication_year >= 2000\n  AND p.publication_citation_count >= 10\n  AND a.author_institution = 'University of Michigan'\n  AND p.publication_type = 'research article'\n  AND p.publication_quality_score >= (\n    SELECT PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY p2.publication_quality_score)\n    FROM publication p2\n    JOIN domain_publication dp2 ON p2.pid = dp2.pid\n    WHERE dp2.did = d.did\n  )\n  AND EXISTS (\n    SELECT 1\n    FROM journal j\n    WHERE j.jid = p.jid\n      AND j.journal_publisher = 'PVLDB'\n  );\n```"
    },
    {
        "instance_id": "q_985",
        "db_id": "academic_new",
        "question": "How many distinct researchers from the University of Michigan are actively contributing to the Databases domain, considering only those with a positive domain author rank, a collaboration score of 0.7 or higher, and who have published works since 2020 with an affiliation similarity score greater than 0.5?",
        "query": "```sql\nSELECT COUNT(DISTINCT da.aid) AS active_researchers\nFROM domain_author da\nJOIN author a ON da.aid = a.aid\nJOIN domain d ON da.did = d.did\nWHERE a.author_institution = 'University of Michigan'\n  AND d.domain_description = 'Databases'\n  AND da.domain_author_rank > 0\n  AND da.domain_author_collaboration_score >= 0.7\n  AND EXISTS (\n    SELECT 1\n    FROM writes w\n    JOIN publication p ON w.pid = p.pid\n    WHERE w.aid = da.aid\n      AND p.publication_year >= 2020\n      AND w.writes_affiliation_similarity_score > 0.5\n  );\n```"
    },
    {
        "instance_id": "q_989",
        "db_id": "academic_new",
        "question": "找出与作者“H. V. Jagadish”（电子邮件：hvj@umich.edu）和“Divesh Srivastava”（电子邮件：divesh@research.att.com）均有合作关系的作者。对于这些作者，分析他们在过去五年内的研究兴趣演变趋势，包括其在各个领域的首次和最近发表年份、平均H指数变化情况，以及领域合作得分的变化情况。结果按作者电子邮件和领域描述排序展示。",
        "query": "```sql\nWITH target_authors AS (\n    SELECT aid \n    FROM author \n    WHERE author.author_email = 'hvj@umich.edu' OR author.author_email = 'divesh@research.att.com'\n),\nco_authors AS (\n    SELECT DISTINCT w1.aid \n    FROM writes w1\n    JOIN writes w2 ON w1.pid = w2.pid AND w1.aid != w2.aid\n    JOIN target_authors ta ON w2.aid = ta.aid\n    GROUP BY w1.aid\n    HAVING COUNT(DISTINCT ta.aid) = (SELECT COUNT(*) FROM target_authors)\n),\nrecent_publications AS (\n    SELECT pid, publication_year \n    FROM publication \n    WHERE publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n),\nauthor_interests AS (\n    SELECT da.aid, d.domain_description, da.domain_author_h_index, da.domain_author_collaboration_score, p.publication_year \n    FROM domain_author da\n    JOIN domain d ON da.did = d.did\n    JOIN writes w ON da.aid = w.aid\n    JOIN recent_publications rp ON w.pid = rp.pid\n    JOIN publication p ON w.pid = p.pid\n    WHERE da.aid IN (SELECT aid FROM co_authors)\n)\nSELECT \n    ai.aid, \n    a.author_email, \n    ai.domain_description, \n    MIN(ai.publication_year) AS first_year, \n    MAX(ai.publication_year) AS last_year, \n    AVG(ai.domain_author_h_index) AS avg_h_index, \n    AVG(ai.domain_author_collaboration_score) AS avg_collaboration_score \nFROM author_interests ai\nJOIN author a ON ai.aid = a.aid\nGROUP BY ai.aid, a.author_email, ai.domain_description\nORDER BY a.author_email, ai.domain_description;\n```"
    },
    {
        "instance_id": "q_999",
        "db_id": "academic_new",
        "question": "What are the publications co-authored by researchers affiliated with \"H. V. Jagadish\" and \"Divesh Srivastava,\" including their average citation trends over the past five years? Additionally, identify the domains where these researchers have achieved the highest collaboration scores, along with the chronological evolution of their normalized research interests and similarity scores across their joint publications.",
        "query": "```sql\nWITH researcher_pubs AS (\n    SELECT w.aid, p.pid, p.publication_year, p.publication_citation_trend, d.domain_author_collaboration_score, d.did\n    FROM writes w\n    JOIN publication p ON w.pid = p.pid\n    JOIN domain_author d ON w.aid = d.aid\n    WHERE w.writes_primary_author = FALSE\n      AND w.aid IN (\n          SELECT aid \n          FROM author \n          WHERE author.author_institution LIKE '%H. V. Jagadish%' \n             OR author.author_institution LIKE '%Divesh Srivastava%'\n      )\n), filtered_pubs AS (\n    SELECT DISTINCT rp.pid, rp.publication_year, rp.publication_citation_trend, rp.did\n    FROM researcher_pubs rp\n    GROUP BY rp.pid, rp.publication_year, rp.publication_citation_trend, rp.did\n    HAVING COUNT(DISTINCT rp.aid) = 2\n), citation_trends AS (\n    SELECT fp.pid, AVG(fp.publication_citation_trend) AS avg_citation_trend\n    FROM filtered_pubs fp\n    WHERE fp.publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n    GROUP BY fp.pid\n), collaboration_domains AS (\n    SELECT fp.did, MAX(d.domain_author_collaboration_score) AS max_collaboration_score\n    FROM filtered_pubs fp\n    JOIN domain_author d ON fp.did = d.did\n    GROUP BY fp.did\n), interest_evolution AS (\n    SELECT d.did, d.domain_author_interests_normalized, d.domain_author_interests_similarity_score, p.publication_year\n    FROM domain_author d\n    JOIN filtered_pubs fp ON d.aid = fp.aid AND d.did = fp.did\n    JOIN publication p ON fp.pid = p.pid\n    ORDER BY p.publication_year\n)\nSELECT ct.pid, ct.avg_citation_trend, cd.did, cd.max_collaboration_score, ie.domain_author_interests_normalized, ie.domain_author_interests_similarity_score, ie.publication_year\nFROM citation_trends ct\nJOIN collaboration_domains cd ON TRUE\nJOIN interest_evolution ie ON cd.did = ie.did;\n```"
    },
    {
        "instance_id": "q_991",
        "db_id": "academic_new",
        "question": "Which publications authored by \"H. V. Jagadish\" and \"Yunyao Li\" since 2005 have received the highest citation growth rate, considering only those where the authors' collaboration score within the respective domain exceeds 0.8? Additionally, how do these publications align with their primary research domains in terms of domain relevance and keyword frequency, specifically showing the publication year, citation growth rate, domain description, and domain keyword frequency?",
        "query": "```sql\nWITH RelevantAuthors AS (\n    SELECT aid \n    FROM author \n    WHERE author.author_institution IN ('H. V. Jagadish', 'Yunyao Li')\n),\nFilteredPublications AS (\n    SELECT DISTINCT p.pid, p.publication_year, p.publication_citation_trend, d.did \n    FROM publication p\n    JOIN writes w ON p.pid = w.pid\n    JOIN RelevantAuthors ra ON w.aid = ra.aid\n    JOIN domain_author da ON w.aid = da.aid\n    WHERE p.publication_year >= 2005 \n      AND da.domain_author_collaboration_score > 0.8\n),\nDomainAlignment AS (\n    SELECT fp.pid, fp.publication_year, fp.publication_citation_trend, dk.domain_keyword_frequency, d.domain_description \n    FROM FilteredPublications fp\n    JOIN domain_conference dc ON fp.did = dc.did\n    JOIN domain_keyword dk ON fp.did = dk.did\n    JOIN domain d ON fp.did = d.did\n)\nSELECT pid, publication_year, publication_citation_trend, domain_description, domain_keyword_frequency\nFROM DomainAlignment\nORDER BY publication_citation_trend DESC;\n```"
    },
    {
        "instance_id": "q_1002",
        "db_id": "academic_new",
        "question": "Which publications co-authored by \"H. V. Jagadish\" and \"Yunyao Li\" have received a citation growth rate over the past five years, where these publications have been cited more than 50 times and are associated with either conferences (with a registration fee impact factor above 2.0) or journals (published in the USA or UK)? Additionally, provide the primary research domains of the authors based on domain confidence scores exceeding 0.8, ordered by the highest citation growth rate, limited to the top 10 results.",
        "query": "```sql\nSELECT \n    p.pid AS publication_id,\n    p.publication_abstract_summary,\n    p.publication_citation_trend AS citation_growth_rate,\n    d.domain_description,\n    dc.domain_confidence_score\nFROM \n    publication p\nJOIN \n    writes w1 ON p.pid = w1.pid AND w1.aid = (SELECT aid FROM author WHERE author.author_email = 'h.v.jagadish@example.com')\nJOIN \n    writes w2 ON p.pid = w2.pid AND w2.aid = (SELECT aid FROM author WHERE author.author_email = 'yunyao.li@example.com')\nLEFT JOIN \n    domain_author da1 ON w1.aid = da1.aid\nLEFT JOIN \n    domain d ON da1.did = d.did\nLEFT JOIN \n    domain_conference dc ON d.did = dc.did\nLEFT JOIN \n    conference c ON dc.cid = c.cid AND c.conference_registration_fee > 2.0\nLEFT JOIN \n    domain_journal dj ON d.did = dj.did\nLEFT JOIN \n    journal j ON dj.jid = j.jid AND j.journal_publisher_country IN ('USA', 'UK')\nWHERE \n    p.publication_citation_count > 50\n    AND p.publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n    AND (c.cid IS NOT NULL OR j.jid IS NOT NULL)\n    AND dc.domain_confidence_score > 0.8\nORDER BY \n    p.publication_citation_trend DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_994",
        "db_id": "academic_new",
        "question": "Which publications in the PVLDB venue, authored jointly by \"H. V. Jagadish\" and \"Yunyao Li\" since 2005, have shown a positive citation trend indicating growing academic interest? Additionally, provide the domain-specific confidence score associated with these publications, considering only those papers where the primary author has a collaboration score above the average within their research domain.",
        "query": "```sql\nSELECT \n    p.pid AS publication_id,\n    p.publication_year,\n    p.publication_citation_trend,\n    d.domain_confidence_score\nFROM \n    academic_new.publication p\nJOIN \n    academic_new.writes w1 ON p.pid = w1.pid\nJOIN \n    academic_new.author a1 ON w1.aid = a1.aid\nJOIN \n    academic_new.writes w2 ON p.pid = w2.pid\nJOIN \n    academic_new.author a2 ON w2.aid = a2.aid\nJOIN \n    academic_new.domain_author da ON w1.aid = da.did\nJOIN \n    academic_new.domain d ON da.did = d.did\nWHERE \n    a1.author_institution = 'H. V. Jagadish'\n    AND a2.author_institution = 'Yunyao Li'\n    AND p.publication_year >= 2005\n    AND p.publication_citation_trend > 0\n    AND w1.writes_primary_author = TRUE\n    AND da.domain_author_collaboration_score > (\n        SELECT AVG(domain_author_collaboration_score)\n        FROM academic_new.domain_author\n        WHERE did = da.did\n    )\n    AND p.publication_type = 'PVLDB';\n```"
    },
    {
        "instance_id": "q_997",
        "db_id": "academic_new",
        "question": "Which publications, authored jointly by \"H. V. Jagadish\" and \"Divesh Srivastava\" before the year 2000, have the highest citation trend and belong to domains with a collaboration score greater than 0.8 between the authors? Additionally, provide the evolution of domain interests for these authors during the same period, including both the raw and normalized domain interests.",
        "query": "```sql\nWITH RelevantAuthors AS (\n    SELECT aid \n    FROM author \n    WHERE author.author_institution IN ('H. V. Jagadish', 'Divesh Srivastava')\n),\nAuthorPublications AS (\n    SELECT w.aid, p.pid, p.publication_year, p.publication_citation_trend, d.domain_author_collaboration_score\n    FROM writes w\n    JOIN publication p ON w.pid = p.pid\n    JOIN domain_author d ON w.aid = d.did\n    WHERE w.aid IN (SELECT aid FROM RelevantAuthors)\n      AND p.publication_year < 2000\n      AND d.domain_author_collaboration_score > 0.8\n),\nFilteredPublications AS (\n    SELECT ap.pid, ap.publication_year, ap.publication_citation_trend, ap.domain_author_collaboration_score\n    FROM AuthorPublications ap\n    GROUP BY ap.pid, ap.publication_year, ap.publication_citation_trend, ap.domain_author_collaboration_score\n    HAVING COUNT(DISTINCT ap.aid) = 2\n),\nTopCitationTrend AS (\n    SELECT fp.pid, fp.publication_year, fp.publication_citation_trend\n    FROM FilteredPublications fp\n    ORDER BY fp.publication_citation_trend DESC\n    LIMIT 1\n),\nDomainInterestsEvolution AS (\n    SELECT da.did, da.domain_author_interests, da.domain_author_interests_normalized, p.publication_year\n    FROM domain_author da\n    JOIN writes w ON da.did = w.aid\n    JOIN publication p ON w.pid = p.pid\n    WHERE w.aid IN (SELECT aid FROM RelevantAuthors)\n      AND p.publication_year < 2000\n)\nSELECT tc.pid, tc.publication_year, tc.publication_citation_trend, di.domain_author_interests, di.domain_author_interests_normalized\nFROM TopCitationTrend tc\nJOIN DomainInterestsEvolution di ON tc.publication_year = di.publication_year;\n```"
    },
    {
        "instance_id": "q_993",
        "db_id": "academic_new",
        "question": "Which authors have written publications that reference \"H. V. Jagadish\" and demonstrate expertise in related research domains, as evidenced by their domain weights and collaboration scores exceeding 0.7? Include authors who have actively contributed to conferences or journals closely associated with the same research areas within the past five years, prioritizing results by descending collaboration score and H-index.",
        "query": "```sql\nSELECT DISTINCT a.aid, a.author_institution, a.author_gender, a.author_tenure_status, da.domain_author_rank, da.domain_author_h_index, da.domain_author_collaboration_score\nFROM academic_new.author a\nJOIN academic_new.writes w ON a.aid = w.aid\nJOIN academic_new.publication p ON w.pid = p.pid\nJOIN academic_new.publication_keyword pk ON p.pid = pk.pid\nJOIN academic_new.keyword k ON pk.pid = k.kid\nJOIN academic_new.domain_keyword dk ON k.kid = dk.did\nJOIN academic_new.domain_author da ON dk.did = da.did AND a.aid = da.aid\nLEFT JOIN academic_new.conference c ON da.did = c.cid\nLEFT JOIN academic_new.domain_conference dc ON c.cid = dc.cid AND dc.did = da.did\nLEFT JOIN academic_new.journal j ON da.did = j.jid\nLEFT JOIN academic_new.domain_journal dj ON j.jid = dj.jid AND dj.did = da.did\nWHERE p.publication_abstract LIKE '%H. V. Jagadish%'\n  AND (c.conference_start_date >= CURRENT_DATE - INTERVAL '5 years' OR p.publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5)\n  AND da.domain_author_collaboration_score > 0\n  AND da.domain_author_interests_similarity_score > 0.7\nORDER BY da.domain_author_collaboration_score DESC, da.domain_author_h_index DESC;\n```"
    },
    {
        "instance_id": "q_1004",
        "db_id": "academic_new",
        "question": "How many distinct research papers have both \"H. V. Jagadish\" and \"Divesh Srivastava\" co-authored as primary authors, where the publications are associated with domains having a confidence score greater than 0.8? Additionally, what is the average domain exclusivity similarity between these two authors across the selected publications?",
        "query": "```sql\nSELECT COUNT(DISTINCT pk.pid) AS coauthored_paper_count, AVG(da1.domain_author_interests_similarity) AS avg_domain_exclusivity\nFROM writes w1\nJOIN writes w2 ON w1.pid = w2.pid\nJOIN publication_keyword pk ON w1.pid = pk.pid\nJOIN domain_author da1 ON w1.aid = da1.aid\nJOIN domain_author da2 ON w2.aid = da2.aid\nJOIN domain d ON da1.did = d.did AND da2.did = d.did\nWHERE w1.writes_primary_author = TRUE \n  AND w2.writes_primary_author = TRUE \n  AND w1.aid = (SELECT aid FROM author WHERE author_institution = 'H. V. Jagadish') \n  AND w2.aid = (SELECT aid FROM author WHERE author_institution = 'Divesh Srivastava') \n  AND d.domain_confidence_score > 0.8;\n```"
    },
    {
        "instance_id": "q_992",
        "db_id": "academic_new",
        "question": "How many distinct publications were co-authored by \"H. V. Jagadish\" and \"Divesh Srivastava\" before the year 2000, where both authors collaborated within the top 10% most cited conferences in their respective research domains?",
        "query": "```sql\nSELECT COUNT(DISTINCT p.pid) AS publication_count\nFROM author a1\nJOIN writes w1 ON a1.aid = w1.aid\nJOIN publication p ON w1.pid = p.pid\nJOIN writes w2 ON p.pid = w2.pid\nJOIN author a2 ON w2.aid = a2.aid\nJOIN domain_author da1 ON a1.aid = da1.aid\nJOIN domain_conference dc1 ON da1.did = dc1.did\nJOIN conference c ON dc1.cid = c.cid\nJOIN (\n    SELECT dc.did, cid, conference_citation_rank\n    FROM domain_conference dc\n    JOIN (\n        SELECT cid, RANK() OVER (PARTITION BY dc.did ORDER BY conference_citation_count DESC) AS conference_citation_rank,\n               MAX(conference_citation_count) OVER (PARTITION BY dc.did) AS max_citations\n        FROM domain_conference dc\n        JOIN (\n            SELECT cid, COUNT(pid) AS conference_citation_count\n            FROM publication\n            JOIN writes ON publication.pid = writes.pid\n            JOIN conference ON publication.cid = conference.cid\n            GROUP BY cid\n        ) conf_citations ON dc.cid = conf_citations.cid\n    ) ranked_conferences ON dc.cid = ranked_conferences.cid\n    WHERE ranked_conferences.conference_citation_rank <= 0.1 * COUNT(*) OVER (PARTITION BY dc.did)\n) top_conferences ON dc1.cid = top_conferences.cid AND da1.did = top_conferences.did\nWHERE a1.author_name = 'H. V. Jagadish'\n  AND a2.author_name = 'Divesh Srivastava'\n  AND w1.writes_co_author_rank IS NOT NULL\n  AND w2.writes_co_author_rank IS NOT NULL\n  AND p.publication_year < 2000;\n```"
    },
    {
        "instance_id": "q_996",
        "db_id": "academic_new",
        "question": "How many distinct publications have \"H. V. Jagadish,\" \"Yunyao Li,\" and \"Cong Yu\" contributed to as primary authors or with a collaboration score greater than 0.75 within their domain of expertise, published in the last five years? Additionally, what is the average citation trend for these publications over the same period?",
        "query": "```sql\nSELECT \n    COUNT(DISTINCT p.pid) AS publication_count,\n    AVG(p.publication_citation_trend) AS avg_citation_trend\nFROM \n    author a\nJOIN writes w ON a.aid = w.aid\nJOIN publication p ON w.pid = p.pid\nJOIN domain_author da ON a.aid = da.domain_author_rank\nWHERE \n    (a.author_institution = 'H. V. Jagadish' OR a.author_institution = 'Yunyao Li' OR a.author_institution = 'Cong Yu')\n    AND (w.writes_primary_author = TRUE OR da.domain_author_collaboration_score > 0.75)\n    AND p.publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5;\n```"
    },
    {
        "instance_id": "q_998",
        "db_id": "academic_new",
        "question": "How many distinct researchers have engaged with the works of \"H. V. Jagadish\" by either citing or co-authoring publications within his research domains over the past five years, while maintaining a sustained interest in these domains with a similarity score greater than 0.7?",
        "query": "```sql\nSELECT COUNT(DISTINCT da.aid) AS researcher_count\nFROM domain_author da\nJOIN author a ON da.aid = a.aid\nJOIN writes w ON da.aid = w.aid\nJOIN publication p ON w.pid = p.pid\nJOIN publication_keyword pk ON p.pid = pk.pid\nJOIN domain d ON da.did = d.did\nWHERE EXISTS (\n    SELECT 1\n    FROM writes w2\n    JOIN author a2 ON w2.aid = a2.aid\n    JOIN publication p2 ON w2.pid = p2.pid\n    WHERE a2.author_institution = 'H. V. Jagadish'\n      AND p2.publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n      AND p2.publication_year <= EXTRACT(YEAR FROM CURRENT_DATE)\n      AND w2.writes_primary_author = TRUE\n)\nAND p.publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\nAND p.publication_year <= EXTRACT(YEAR FROM CURRENT_DATE)\nAND da.domain_author_interests_similarity_score > 0.7;\n```"
    },
    {
        "instance_id": "q_1001",
        "db_id": "academic_new",
        "question": "Which publications, cited more than 200 times, involve authors with a strong focus on database systems (as indicated by a domain description containing \"database systems\" and an h-index of at least 20), specifically highlighting works co-authored by experts in the field, ordered by citation count in descending order?",
        "query": "```sql\nSELECT DISTINCT p.pid, p.publication_abstract_summary, p.publication_citation_count\nFROM publication p\nJOIN writes w ON p.pid = w.pid\nJOIN author a ON w.aid = a.aid\nJOIN domain_author da ON a.aid = da.did\nJOIN domain d ON da.did = d.did\nWHERE p.publication_citation_count > 200\n  AND d.domain_description ILIKE '%database systems%'\n  AND w.writes_co_author_rank IS NOT NULL\n  AND da.domain_author_h_index >= 20\nORDER BY p.publication_citation_count DESC;\n```"
    },
    {
        "instance_id": "q_995",
        "db_id": "academic_new",
        "question": "Which author has the highest expertise in the area of \"Relational Database,\" as measured by both the total number of publications and the weighted impact of those publications within the domain, where weighted impact is calculated as the sum of each publication's quality score multiplied by its keyword-weighted score?",
        "query": "```sql\nSELECT \n    a.aid, \n    a.author_institution, \n    COUNT(p.pid) AS publication_count, \n    SUM(p.publication_quality_score * pk.publication_keyword_weighted_score) AS weighted_impact\nFROM \n    author a\nJOIN \n    writes w ON a.aid = w.aid\nJOIN \n    publication p ON w.pid = p.pid\nJOIN \n    publication_keyword pk ON p.pid = pk.pid\nJOIN \n    keyword k ON pk.kid = k.kid\nJOIN \n    domain_author da ON a.aid = da.did\nJOIN \n    domain d ON da.did = d.did\nWHERE \n    d.domain_description ILIKE '%Relational Database%'\nGROUP BY \n    a.aid, a.author_institution\nORDER BY \n    weighted_impact DESC, publication_count DESC\nLIMIT 1;\n```"
    },
    {
        "instance_id": "q_1000",
        "db_id": "academic_new",
        "question": "Which conference, held after January 1, 2020, has the highest combined score based on the total frequency of the keyword \"Relational Database\" in related publications and the average domain relevance score of the conference theme? Consider only keywords with an importance score greater than 0.8 and publications whose abstracts explicitly mention \"Relational Database.\" Additionally, prioritize conferences with lower virtual participation rates to identify the most influential event in this area.",
        "query": "```sql\nSELECT \n    c.cid, \n    c.conference_location, \n    c.conference_start_date, \n    c.conference_end_date, \n    SUM(dk.domain_keyword_frequency) AS keyword_frequency_sum, \n    AVG(dc.domain_conference_theme_similarity_score) AS domain_relevance_avg, \n    c.conference_duration, \n    c.conference_registration_fee, \n    c.conference_sponsorship_type\nFROM \n    conference c\nJOIN \n    domain_conference dc ON c.cid = dc.did\nJOIN \n    domain_keyword dk ON dc.did = dk.did\nJOIN \n    keyword k ON dk.did = k.kid\nJOIN \n    publication p ON dk.did = p.pid\nWHERE \n    k.keyword_importance_score > 0.8 \n    AND p.publication_abstract ILIKE '%Relational Database%' \n    AND c.conference_start_date >= '2020-01-01'::DATE\nGROUP BY \n    c.cid, \n    c.conference_location, \n    c.conference_start_date, \n    c.conference_end_date, \n    c.conference_duration, \n    c.conference_registration_fee, \n    c.conference_sponsorship_type\nORDER BY \n    keyword_frequency_sum DESC, \n    domain_relevance_avg DESC, \n    c.conference_virtual_participation ASC\nLIMIT 1;\n```"
    },
    {
        "instance_id": "q_1012",
        "db_id": "academic_new",
        "question": "Which conference has the highest combined score of keyword relevance and domain relevance related to \"Relational Database,\" considering the frequency of the keyword in publications and the domain's conference theme similarity score? Include only conferences with at least one publication mentioning \"Relational Database\" in the abstract, and rank the results by the total score descending, finally selecting the most influential conference based on these criteria.",
        "query": "```sql\nSELECT \n    c.cid, \n    c.conference_location, \n    c.conference_start_date, \n    c.conference_end_date,\n    SUM(dk.domain_keyword_frequency * pk.publication_keyword_weighted_score) AS keyword_relevance_score,\n    dc.domain_conference_theme_similarity_score AS domain_relevance_score,\n    c.conference_registration_fee, \n    c.conference_duration, \n    c.conference_sponsorship_type\nFROM \n    conference c\nJOIN \n    domain_conference dc ON c.cid = dc.did\nJOIN \n    domain_keyword dk ON dc.did = dk.did\nJOIN \n    publication_keyword pk ON dk.did = pk.pid\nJOIN \n    publication p ON pk.pid = p.pid\nWHERE \n    dk.domain_keyword_frequency > 0 \n    AND p.publication_abstract ILIKE '%Relational Database%'\nGROUP BY \n    c.cid, c.conference_location, c.conference_start_date, c.conference_end_date, dc.domain_conference_theme_similarity_score\nORDER BY \n    (SUM(dk.domain_keyword_frequency * pk.publication_keyword_weighted_score) + dc.domain_conference_theme_similarity_score) DESC\nLIMIT 1;\n```"
    },
    {
        "instance_id": "q_1003",
        "db_id": "academic_new",
        "question": "Which journal has the highest keyword concentration score for publications related to \"Relational Database\" over the past five years, calculated as the sum of the product of the keyword frequency in articles and the journal's domain relevance score?",
        "query": "```sql\nSELECT \n    j.jid AS journal_id, \n    j.journal_publisher AS journal_name, \n    SUM(dk.domain_keyword_frequency * pk.publication_keyword_weighted_score) AS keyword_concentration_score\nFROM \n    journal j\nJOIN \n    publication p ON j.jid = p.pid\nJOIN \n    publication_keyword pk ON p.pid = pk.pid\nJOIN \n    keyword k ON pk.kid = k.kid\nJOIN \n    domain_keyword dk ON k.kid = dk.did\nJOIN \n    domain_journal dj ON j.jid = dj.jid AND dk.did = dj.did\nWHERE \n    k.keyword = 'Relational Database'\n    AND p.publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\nGROUP BY \n    j.jid, j.journal_publisher\nORDER BY \n    keyword_concentration_score DESC\nLIMIT 1;\n```"
    },
    {
        "instance_id": "q_1005",
        "db_id": "academic_new",
        "question": "Which journal, published in the USA, UK, Canada, or Australia, exhibits the highest relevance to the topic of \"Relational Database\" by considering both the total frequency of related keywords with an importance score greater than 0.7 and the average positive impact factor trend over the past five years, ensuring that the journal has a focus similarity score of at least 0.8 and more than 5 publications related to the topic?",
        "query": "```sql\nSELECT \n    j.jid AS journal_id, \n    j.journal_publisher AS journal_name, \n    SUM(dk.domain_keyword_frequency) AS total_keyword_frequency, \n    AVG(dj.domain_journal_impact_factor_trend) AS avg_impact_factor_trend\nFROM \n    journal j\nJOIN \n    domain_journal dj ON j.jid = dj.did\nJOIN \n    domain_keyword dk ON dj.did = dk.did\nJOIN \n    keyword k ON dk.did = k.kid\nWHERE \n    k.keyword_importance_score > 0.7 \n    AND j.journal_publisher_country IN ('USA', 'UK', 'Canada', 'Australia')\n    AND dj.domain_journal_impact_factor_trend > 0\n    AND dj.domain_journal_focus ILIKE '%Relational Database%'\n    AND dj.domain_journal_impact_factor_similarity_score >= 0.8\nGROUP BY \n    j.jid, j.journal_publisher\nHAVING \n    COUNT(dj.domain_journal_focus) > 5\nORDER BY \n    total_keyword_frequency DESC, avg_impact_factor_trend DESC\nLIMIT 1;\n```"
    },
    {
        "instance_id": "q_1008",
        "db_id": "academic_new",
        "question": "What are the top 10 keywords with the highest growth rate in usage frequency across publications within the VLDB conference series over the past five years, including their keyword weight and importance score? Additionally, how do these keywords correlate with emerging research trends in data management and database systems, based on their increasing prevalence in the VLDB conference publications during this time period?",
        "query": "```sql\nWITH vldb_conferences AS (\n    SELECT cid\n    FROM conference\n    WHERE conference.conference_location LIKE '%VLDB%' \n      AND conference.conference_start_date >= NOW() - INTERVAL '5 years'\n      AND conference.conference_end_date <= NOW()\n),\nvldb_publications AS (\n    SELECT DISTINCT publication.pid\n    FROM publication\n    JOIN writes ON publication.pid = writes.pid\n    JOIN author ON writes.aid = author.aid\n    JOIN domain_author ON author.aid = domain_author.did\n    JOIN domain_conference ON domain_author.did = domain_conference.did\n    WHERE domain_conference.cid IN (SELECT cid FROM vldb_conferences)\n),\nkeyword_usage AS (\n    SELECT keyword.kid, keyword.keyword_weight, COUNT(publication_keyword.pid) AS usage_count\n    FROM keyword\n    JOIN publication_keyword ON keyword.kid = publication_keyword.pid\n    WHERE publication_keyword.pid IN (SELECT pid FROM vldb_publications)\n    GROUP BY keyword.kid, keyword.keyword_weight\n),\nkeyword_growth_rate AS (\n    SELECT kid, \n           (CAST(MAX(usage_count) AS FLOAT) - CAST(MIN(usage_count) AS FLOAT)) / \n           (EXTRACT(EPOCH FROM (NOW() - (SELECT MIN(conference_start_date) FROM conference))) / 31536000.0) AS growth_rate\n    FROM keyword_usage\n    GROUP BY kid\n    ORDER BY growth_rate DESC\n    LIMIT 10\n)\nSELECT keyword.kid, keyword.keyword_weight, keyword_importance_score, growth_rate\nFROM keyword_growth_rate\nJOIN keyword ON keyword_growth_rate.kid = keyword.kid\nORDER BY growth_rate DESC;\n```"
    },
    {
        "instance_id": "q_1007",
        "db_id": "academic_new",
        "question": "In the domain of data management, identify the keywords that appear most frequently in publications over the past five years, considering both the total number of distinct papers they are associated with and their annual growth rate in usage. For each keyword, provide its weighted importance score, the count of unique papers it appears in, and its growth rate calculated as the percentage increase in usage from five years ago to the most recent year. Additionally, analyze the contextual usage of these keywords by evaluating their co-occurrence patterns with other high-frequency terms within the same domain, presenting the results as a list of co-occurring keyword IDs along with their respective co-occurrence counts. Sort the final results in descending order first by the number of papers each keyword appears in, then by their growth rate.",
        "query": "WITH domain_publications AS (\n    SELECT dp.did, p.pid, p.publication_year\n    FROM domain_publication dp\n    JOIN publication p ON dp.pid = p.pid\n    WHERE dp.did = (SELECT did FROM domain WHERE domain_description ILIKE '%data management%')\n      AND p.publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n),\nkeyword_frequency AS (\n    SELECT pk.kid, COUNT(DISTINCT dp.pid) AS paper_count\n    FROM domain_publications dp\n    JOIN publication_keyword pk ON dp.pid = pk.pid\n    GROUP BY pk.kid\n),\nkeyword_growth_rate AS (\n    SELECT pk.kid, \n           (COUNT(*) FILTER (WHERE p.publication_year = EXTRACT(YEAR FROM CURRENT_DATE) - 1) - \n            COUNT(*) FILTER (WHERE p.publication_year = EXTRACT(YEAR FROM CURRENT_DATE) - 5))::FLOAT / \n           COUNT(*) FILTER (WHERE p.publication_year = EXTRACT(YEAR FROM CURRENT_DATE) - 5) AS growth_rate\n    FROM domain_publications dp\n    JOIN publication_keyword pk ON dp.pid = pk.pid\n    JOIN publication p ON dp.pid = p.pid\n    GROUP BY pk.kid\n),\ncombined_keywords AS (\n    SELECT kf.kid, kf.paper_count, kg.growth_rate\n    FROM keyword_frequency kf\n    JOIN keyword_growth_rate kg ON kf.kid = kg.kid\n),\nco_occurrence_analysis AS (\n    SELECT pk1.kid AS kid1, pk2.kid AS kid2, COUNT(*) AS co_occurrence_count\n    FROM domain_publications dp\n    JOIN publication_keyword pk1 ON dp.pid = pk1.pid\n    JOIN publication_keyword pk2 ON dp.pid = pk2.pid AND pk1.kid < pk2.kid\n    GROUP BY pk1.kid, pk2.kid\n)\nSELECT ck.kid, k.keyword_weight, ck.paper_count, ck.growth_rate, STRING_AGG(CONCAT(coa.kid2, ':', coa.co_occurrence_count), ',') AS co_occurrence_patterns\nFROM combined_keywords ck\nJOIN keyword k ON ck.kid = k.kid\nLEFT JOIN co_occurrence_analysis coa ON ck.kid = coa.kid1\nGROUP BY ck.kid, k.keyword_weight, ck.paper_count, ck.growth_rate\nORDER BY ck.paper_count DESC, ck.growth_rate DESC;"
    },
    {
        "instance_id": "q_1006",
        "db_id": "academic_new",
        "question": "Which keywords, associated with publications authored by \"H. V. Jagadish\" (identified by email hvj@umich.edu), have shown a significant growth trend in usage over the past five years, considering both their domain-specific relevance (with frequency above the average domain keyword frequency) and the overall citation impact of the papers, ranked by descending domain keyword frequency and descending publication citation trend, limited to the top 10 results?",
        "query": "```sql\nSELECT \n    k.keyword_weight AS keyword_weight,\n    dk.domain_keyword_frequency AS domain_keyword_frequency,\n    p.publication_citation_trend AS publication_citation_trend,\n    pk.publication_keyword_weighted_score AS publication_keyword_weighted_score,\n    k.kid AS keyword_id\nFROM \n    keyword k\nJOIN \n    domain_keyword dk ON k.kid = dk.did\nJOIN \n    publication_keyword pk ON k.kid = pk.pid\nJOIN \n    publication p ON pk.pid = p.pid\nJOIN \n    writes w ON p.pid = w.aid\nJOIN \n    author a ON w.aid = a.aid\nWHERE \n    a.author_email = 'hvj@umich.edu' -- Assuming H. V. Jagadish's email is hvj@umich.edu\n    AND p.publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n    AND p.publication_citation_trend > 0\n    AND dk.domain_keyword_frequency > (SELECT AVG(domain_keyword_frequency) FROM domain_keyword)\nORDER BY \n    dk.domain_keyword_frequency DESC, \n    p.publication_citation_trend DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_1010",
        "db_id": "academic_new",
        "question": "Which author affiliated with the \"University of Michigan\" has the highest cumulative influence over the past decade, calculated as the sum of their publications' citation counts weighted by the publication keyword weighted scores, considering both direct citations and indirect citation networks?",
        "query": "```sql\nSELECT \n    a.aid, \n    a.author_institution, \n    SUM(p.publication_citation_count * pk.publication_keyword_weighted_score) AS cumulative_influence\nFROM \n    academic_new.author a\nJOIN \n    academic_new.writes w ON a.aid = w.aid\nJOIN \n    academic_new.publication p ON w.pid = p.pid\nJOIN \n    academic_new.publication_keyword pk ON p.pid = pk.pid\nWHERE \n    a.author_institution = 'University of Michigan'\n    AND p.publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 10\nGROUP BY \n    a.aid, a.author_institution\nORDER BY \n    cumulative_influence DESC\nLIMIT 1;\n```"
    },
    {
        "instance_id": "q_1011",
        "db_id": "academic_new",
        "question": "Which author affiliated with the \"University of Michigan\" has the highest influence in the Databases field, considering both the total citations received for publications in the past 10 years and their number of distinct recent publications in top-tier conferences attended within the same period?",
        "query": "```sql\nSELECT \n    a.aid, \n    a.author_institution, \n    SUM(p.publication_citation_count) AS total_citations, \n    COUNT(DISTINCT CASE WHEN dc.domain_conference_attendance > 0 AND c.conference_start_date >= CURRENT_DATE - INTERVAL '10 YEAR' THEN p.pid END) AS recent_publications\nFROM \n    author a\nJOIN \n    writes w ON a.aid = w.aid\nJOIN \n    publication p ON w.pid = p.pid\nJOIN \n    domain_author da ON a.aid = da.did\nJOIN \n    domain_conference dc ON da.did = dc.did\nJOIN \n    conference c ON dc.did = c.cid\nWHERE \n    a.author_institution = 'University of Michigan'\n    AND da.domain_description = 'Databases'\n    AND p.publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 10\nGROUP BY \n    a.aid, \n    a.author_institution\nORDER BY \n    total_citations DESC, \n    recent_publications DESC\nLIMIT 1;\n```"
    },
    {
        "instance_id": "q_1014",
        "db_id": "academic_new",
        "question": "Which publications, co-authored by researchers with a domain expertise H-index of 30 or higher and a collaboration score of 0.8 or above, specifically in the field of database systems, have experienced positive citation growth over the past five years? Consider only those publications where the authors are affiliated with one of the top 10 institutions ranked alphabetically, and provide the publication summary, current citation count, citation growth trend, collaboration score, and institution name. Return the top 10 results ordered by the highest citation growth trend.",
        "query": "```sql\nSELECT \n    p.pid,\n    p.publication_abstract_summary AS publication_summary,\n    p.publication_citation_count AS current_citations,\n    p.publication_citation_trend AS citation_growth,\n    da.domain_author_collaboration_score AS collaboration_score,\n    a.author_institution AS institution_name\nFROM \n    publication p\nJOIN \n    writes w ON p.pid = w.pid\nJOIN \n    author a ON w.aid = a.aid\nJOIN \n    domain_author da ON a.aid = da.did\nJOIN \n    domain d ON da.did = d.did\nWHERE \n    d.domain_description ILIKE '%database systems%'\n    AND p.publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n    AND p.publication_citation_trend > 0\n    AND da.domain_author_h_index >= 30\n    AND a.author_institution IN (\n        SELECT DISTINCT author_institution \n        FROM author \n        WHERE author_institution IS NOT NULL\n        ORDER BY author_institution DESC\n        LIMIT 10\n    )\n    AND da.domain_author_collaboration_score >= 0.8\nGROUP BY \n    p.pid, p.publication_abstract_summary, p.publication_citation_count, p.publication_citation_trend, da.domain_author_collaboration_score, a.author_institution\nORDER BY \n    p.publication_citation_trend DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_1009",
        "db_id": "academic_new",
        "question": "Which conferences, featuring more than 10 publications by the author \"H. V. Jagadish\", belong to a conference series with an average historical domain-specific theme similarity score greater than 0.8 and a domain confidence score above 3.5? Include conference details such as location, start date, and end date in the results.",
        "query": "```sql\nSELECT DISTINCT c.cid, c.conference_location, c.conference_start_date, c.conference_end_date\nFROM conference c\nJOIN domain_conference dc ON c.cid = dc.did\nJOIN writes w ON dc.did = w.aid\nJOIN author a ON w.aid = a.aid\nWHERE a.author_institution = 'H. V. Jagadish'\n  AND dc.domain_confidence_score > 3.5\n  AND (SELECT AVG(domain_conference_theme_similarity_score) \n       FROM domain_conference \n       WHERE did = dc.did) > 0.8\n  AND (SELECT COUNT(*) \n       FROM publication p \n       JOIN writes wr ON p.pid = wr.aid \n       WHERE wr.aid = a.aid) > 10;\n```"
    },
    {
        "instance_id": "q_1016",
        "db_id": "academic_new",
        "question": "Which conferences over the past five years have seen the highest total engagement from authors whose research interests and collaboration patterns are similar to those of \"H. V. Jagadish\"?",
        "query": "```sql\nSELECT \n    c.cid, \n    c.conference_location, \n    c.conference_start_date, \n    c.conference_end_date, \n    SUM(dca.domain_conference_attendance) AS total_engagement\nFROM \n    conference c\nJOIN \n    domain_conference dca ON c.cid = dca.cid\nJOIN \n    domain_author da ON dca.did = da.did\nJOIN \n    author a ON da.aid = a.aid\nWHERE \n    a.author_orcid = 'H. V. Jagadish'::varchar\n    AND c.conference_start_date >= CURRENT_DATE - INTERVAL '5 years'\n    AND c.conference_start_date <= CURRENT_DATE\nGROUP BY \n    c.cid, c.conference_location, c.conference_start_date, c.conference_end_date\nORDER BY \n    total_engagement DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_1013",
        "db_id": "academic_new",
        "question": "Which journals have the highest relevance score in domains where \"H. V. Jagadish\" has shown significant interest, based on his publication patterns and domain expertise since 2010, considering only tenured male authors? Please provide the journal names, domain descriptions, and their corresponding relevance scores, sorted in descending order of relevance score and limited to the top 10 results.",
        "query": "```sql\nSELECT \n    j.journal_publisher AS journal_name, \n    d.domain_description, \n    SUM(dp.domain_author_interests_similarity_score) AS relevance_score\nFROM \n    academic_new.author a\nJOIN \n    academic_new.writes w ON a.aid = w.aid\nJOIN \n    academic_new.publication p ON w.pid = p.pid\nJOIN \n    academic_new.domain_author dp ON a.aid = dp.did\nJOIN \n    academic_new.domain_journal dj ON dp.did = dj.did\nJOIN \n    academic_new.journal j ON dj.jid = j.jid\nWHERE \n    a.author_gender = 'Male' \n    AND a.author_tenure_status = 'Tenured' \n    AND a.author_email = 'hvj@umich.edu' \n    AND p.publication_year >= 2010\nGROUP BY \n    j.journal_publisher, d.domain_description\nORDER BY \n    relevance_score DESC\nLIMIT 10;\n```"
    },
    {
        "instance_id": "q_1015",
        "db_id": "academic_new",
        "question": "Which authors have a strong focus on the domain of \"Relational Database,\" as evidenced by contributing to at least 10 publications in this area over the past 10 years? Additionally, provide their institutional affiliation, gender, tenure status, domain-specific rank, H-index within the domain, and a score reflecting their exclusivity to this domain compared to other topics. Sort the results by the author's H-index in the domain in descending order, and then by the number of publications in the domain in descending order.",
        "query": "```sql\nSELECT \n    a.aid,\n    a.author_institution,\n    a.author_gender,\n    a.author_tenure_status,\n    da.domain_author_rank,\n    da.domain_author_h_index,\n    da.domain_author_interests_similarity_score AS domain_exclusivity_score,\n    COUNT(p.pid) AS publication_count_in_domain\nFROM \n    author a\nJOIN \n    domain_author da ON a.aid = da.did\nJOIN \n    domain d ON da.did = d.did\nJOIN \n    writes w ON a.aid = w.aid\nJOIN \n    publication p ON w.pid = p.pid\nWHERE \n    d.domain_description = 'Relational Database'\n    AND p.publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 10\nGROUP BY \n    a.aid, a.author_institution, a.author_gender, a.author_tenure_status, da.domain_author_rank, da.domain_author_h_index, da.domain_author_interests_similarity_score\nHAVING \n    COUNT(p.pid) >= 10\nORDER BY \n    da.domain_author_h_index DESC, publication_count_in_domain DESC;\n```"
    },
    {
        "instance_id": "q_1018",
        "db_id": "academic_new",
        "question": "Which conferences over the past five years have featured more than 60 publications strongly related to the \"Relational Database\" domain, considering domain-specific relevance? Additionally, prioritize conferences with a higher attendance rate in the \"Relational Database\" domain and a positive trend in the citation network growth, ordering the results by descending attendance rate in the domain and descending citation trend.",
        "query": "```sql\nSELECT \n    c.cid, \n    c.conference_location, \n    c.conference_start_date, \n    c.conference_end_date, \n    COUNT(p.pid) AS publication_count\nFROM \n    academic_new.conference c\nJOIN \n    academic_new.domain_conference dc ON c.cid = dc.cid\nJOIN \n    academic_new.domain d ON dc.did = d.did\nJOIN \n    academic_new.publication p ON dc.did = (\n        SELECT dp.did \n        FROM academic_new.domain_publication dp \n        WHERE dp.pid = p.pid\n    )\nWHERE \n    d.domain_description ILIKE '%Relational Database%'\n    AND c.conference_start_date >= CURRENT_DATE - INTERVAL '5 years'\n    AND dc.domain_conference_attendance > 60\nGROUP BY \n    c.cid, c.conference_location, c.conference_start_date, c.conference_end_date\nHAVING \n    SUM(p.publication_citation_trend) > 0\nORDER BY \n    dc.domain_conference_attendance DESC, \n    SUM(p.publication_citation_trend) DESC;\n```"
    },
    {
        "instance_id": "q_1020",
        "db_id": "academic_new",
        "question": "Which journals have published more than 60 articles on the topic of \"Relational Database\" in the past 5 years, as indicated by the keyword weight, and also demonstrate a growing trend in citation impact during this period?",
        "query": "```sql\nSELECT \n    j.jid AS journal_id, \n    j.journal_publisher AS publisher_name\nFROM \n    journal j\nJOIN \n    domain_journal dj ON j.jid = dj.did\nJOIN \n    publication_keyword pk ON dj.did = pk.pid\nJOIN \n    keyword k ON pk.kid = k.kid\nJOIN \n    publication p ON pk.pid = p.pid\nWHERE \n    k.keyword_weight = 'Relational Database'\n    AND dj.domain_journal_citation_count > 60\n    AND p.publication_year >= 2018 - INTERVAL '5 years'\n    AND p.publication_citation_trend > 0\nGROUP BY \n    j.jid, j.journal_publisher\nHAVING \n    SUM(dj.domain_journal_citation_count) > 60;\n```"
    },
    {
        "instance_id": "q_1019",
        "db_id": "academic_new",
        "question": "请找出在VLDB会议中，被至少100篇论文引用过的所有关键词，并分析这些关键词在过去五年内的年度使用频率变化趋势。同时，评估这些关键词所属领域的作者合作网络的紧密程度（通过平均合作得分衡量），以及该领域在未来三年内的研究热度预测（基于领域内期刊的影响因子增长趋势）。",
        "query": "```sql\nWITH vldb_keywords AS (\n    SELECT DISTINCT pk.kid AS keyword_id\n    FROM publication p\n    JOIN writes w ON p.pid = w.aid\n    JOIN publication_keyword pk ON p.pid = pk.pid\n    JOIN conference c ON p.cid = c.cid\n    WHERE c.conference_location = 'VLDB'\n      AND (SELECT SUM(publication_citation_count) \n           FROM publication p2 \n           WHERE p2.pid = pk.pid) >= 100\n),\nkeyword_frequency_trend AS (\n    SELECT vk.keyword_id,\n           EXTRACT(YEAR FROM AGE(CURRENT_DATE, p.publication_year)) AS year_diff,\n           COUNT(*) AS frequency\n    FROM vldb_keywords vk\n    JOIN publication_keyword pk ON vk.keyword_id = pk.kid\n    JOIN publication p ON pk.pid = p.pid\n    WHERE p.publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n    GROUP BY vk.keyword_id, year_diff\n),\nauthor_collaboration_network AS (\n    SELECT d.did,\n           AVG(da.domain_author_collaboration_score) AS avg_collaboration_score\n    FROM vldb_keywords vk\n    JOIN domain_keyword dk ON vk.keyword_id = dk.kid\n    JOIN domain_author da ON dk.did = da.did\n    GROUP BY d.did\n),\nfuture_research_heat AS (\n    SELECT d.did,\n           AVG(dj.domain_journal_impact_factor_trend) AS avg_impact_factor_trend\n    FROM author_collaboration_network acn\n    JOIN domain_journal dj ON acn.did = dj.did\n    WHERE dj.domain_journal_impact_factor_trend > 0\n    GROUP BY d.did\n)\nSELECT kf.keyword_id,\n       kf.year_diff,\n       kf.frequency,\n       acn.avg_collaboration_score,\n       frh.avg_impact_factor_trend\nFROM keyword_frequency_trend kf\nJOIN author_collaboration_network acn ON vk.keyword_id = dk.kid\nJOIN future_research_heat frh ON acn.did = frh.did;\n```"
    },
    {
        "instance_id": "q_1021",
        "db_id": "academic_new",
        "question": "In the past five years, which keywords have exhibited a growth trend in publications, appearing in more than 100 papers, while considering both their frequency and relevance within specific research domains? Additionally, determine whether these keywords are more prevalent in conference papers or journal articles, and provide the count of papers for each type. Present the results sorted by the total number of papers in descending order.",
        "query": "```sql\nWITH keyword_growth AS (\n    SELECT \n        k.kid AS keyword_id,\n        k.keyword_weight,\n        k.keyword_importance_score,\n        dp.did AS domain_id,\n        COUNT(DISTINCT p.pid) AS paper_count,\n        SUM(CASE WHEN p.publication_type = 'conference' THEN 1 ELSE 0 END) AS conference_paper_count,\n        SUM(CASE WHEN p.publication_type = 'journal' THEN 1 ELSE 0 END) AS journal_paper_count\n    FROM \n        keyword k\n    JOIN \n        publication_keyword pk ON k.kid = pk.kid\n    JOIN \n        publication p ON pk.pid = p.pid\n    JOIN \n        domain_publication dp ON p.pid = dp.pid\n    WHERE \n        p.publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\n    GROUP BY \n        k.kid, dp.did\n    HAVING \n        COUNT(DISTINCT p.pid) > 100\n)\nSELECT \n    kg.keyword_id,\n    kg.domain_id,\n    kg.paper_count,\n    kg.conference_paper_count,\n    kg.journal_paper_count,\n    CASE \n        WHEN kg.conference_paper_count > kg.journal_paper_count THEN 'More prevalent in conference papers'\n        WHEN kg.conference_paper_count < kg.journal_paper_count THEN 'More prevalent in journal articles'\n        ELSE 'Equally prevalent in both'\n    END AS prevalence_type\nFROM \n    keyword_growth kg\nORDER BY \n    kg.paper_count DESC;\n```"
    },
    {
        "instance_id": "q_1017",
        "db_id": "academic_new",
        "question": "What are the keywords that have appeared in more than 10 publications authored by researchers with a strong focus on data management and database systems, as indicated by their domain expertise and collaboration scores exceeding 0.8, within the past decade (2013 to present)? Include the keyword weight, keyword importance score, and domain keyword frequency in the results.",
        "query": "```sql\nSELECT DISTINCT k.keyword_weight, k.keyword_importance_score, dk.domain_keyword_frequency\nFROM keyword k\nJOIN publication_keyword pk ON k.kid = pk.pid\nJOIN publication p ON pk.pid = p.pid\nJOIN writes w ON p.pid = w.pid\nJOIN author a ON w.aid = a.aid\nJOIN domain_author da ON a.aid = da.did\nJOIN domain d ON da.did = d.did\nWHERE d.domain_description ILIKE '%data management%' \n  AND d.domain_description ILIKE '%database systems%'\n  AND da.domain_author_collaboration_score > 0.8\n  AND p.publication_year >= 2013\nGROUP BY k.keyword_weight, k.keyword_importance_score, dk.domain_keyword_frequency\nHAVING COUNT(DISTINCT p.pid) > 10;\n```"
    },
    {
        "instance_id": "q_1023",
        "db_id": "academic_new",
        "question": "Which author has the highest influence in the VLDB conference, considering both the total citation count of their publications and the average similarity of their domain expertise, over the past five years?",
        "query": "```sql\nSELECT \n    a.aid, \n    a.author_institution, \n    SUM(p.publication_citation_count) AS total_citations, \n    AVG(da.domain_author_interests_similarity) AS avg_domain_similarity\nFROM \n    author a\nJOIN \n    writes w ON a.aid = w.aid\nJOIN \n    publication p ON w.pid = p.pid\nJOIN \n    domain_author da ON a.aid = da.did\nJOIN \n    domain_conference dc ON da.did = dc.did\nJOIN \n    conference c ON dc.did = c.cid\nWHERE \n    c.conference_start_date >= NOW() - INTERVAL '5 years'\n    AND c.conference_sponsorship_type = 'VLDB'\nGROUP BY \n    a.aid, a.author_institution\nORDER BY \n    total_citations DESC, avg_domain_similarity DESC\nLIMIT 1;\n```"
    },
    {
        "instance_id": "q_1025",
        "db_id": "academic_new",
        "question": "Which authors affiliated with the \"University of Michigan\" have a domain-weighted citation impact exceeding 5000, considering only their primary author contributions to publications and the frequency of domain-specific keywords associated with those publications?",
        "query": "```sql\nSELECT \n    a.aid,\n    a.author_institution,\n    SUM(p.publication_citation_count * dk.domain_keyword_frequency) AS domain_weighted_citation_impact\nFROM \n    author a\nJOIN \n    writes w ON a.aid = w.aid\nJOIN \n    publication p ON w.pid = p.pid\nJOIN \n    publication_keyword pk ON p.pid = pk.pid\nJOIN \n    domain_keyword dk ON pk.pid = dk.did\nWHERE \n    a.author_institution = 'University of Michigan'\n    AND w.writes_primary_author = TRUE\nGROUP BY \n    a.aid, a.author_institution\nHAVING \n    SUM(p.publication_citation_count * dk.domain_keyword_frequency) > 5000;\n```"
    },
    {
        "instance_id": "q_1024",
        "db_id": "academic_new",
        "question": "Which authors affiliated with the \"University of Michigan\" in the Databases domain have a significant influence, as indicated by having more than 5000 total citations across their publications and an average citation growth trend greater than 0 over the past five years?",
        "query": "```sql\nSELECT \n    a.aid, \n    a.author_institution, \n    COUNT(DISTINCT p.pid) AS publication_count, \n    SUM(p.publication_citation_count) AS total_citations, \n    AVG(p.publication_citation_trend) AS avg_citation_trend\nFROM \n    author a\nJOIN \n    writes w ON a.aid = w.aid\nJOIN \n    publication p ON w.pid = p.pid\nJOIN \n    domain_author da ON a.aid = da.did\nWHERE \n    a.author_institution = 'University of Michigan'\n    AND da.domain_author_h_index > 50\n    AND p.publication_year BETWEEN (EXTRACT(YEAR FROM CURRENT_DATE) - 5) AND EXTRACT(YEAR FROM CURRENT_DATE)\nGROUP BY \n    a.aid, a.author_institution\nHAVING \n    SUM(p.publication_citation_count) > 5000\n    AND AVG(p.publication_citation_trend) > 0;\n```"
    },
    {
        "instance_id": "q_1022",
        "db_id": "imdb_new",
        "question": "Which movies were both written by writers and produced by producers who have a specialization or experience aligned with the same genre, where the movie's genre influence score is above the average influence score of other movies in the same genre?",
        "query": "```sql\nSELECT \n    m.mid AS movie_id,\n    m.movie_release_date,\n    m.movie_genre,\n    m.movie_genre_influence_score\nFROM \n    imdb_new.movie m\nJOIN \n    imdb_new.writer w ON m.keyword_id = w.wid\nJOIN \n    imdb_new.producer p ON m.production_company_id = p.pid\nJOIN \n    imdb_new.genre g ON m.genre_id = g.gid\nJOIN \n    (SELECT \n         genre_id, \n         AVG(movie_genre_influence_score) AS avg_influence_score\n     FROM \n         imdb_new.movie\n     GROUP BY \n         genre_id) avg_scores ON m.genre_id = avg_scores.genre_id\nWHERE \n    w.writer_specialization = p.producer_experience_years\n    AND m.movie_genre_influence_score > avg_scores.avg_influence_score\n    AND w.writer_specialization = g.genre_description;\n```"
    },
    {
        "instance_id": "q_1028",
        "db_id": "imdb_new",
        "question": "Find all distinct movies where the director is experienced and has a preference for dramatic genres, and the lead actress has been awarded for her performances in socially impactful roles. Ensure that these movies have received critical acclaim, indicated by having a positive number of critic reviews, and have a popularity score greater than 8.5. Additionally, confirm that the movie includes drama as one of its genres.",
        "query": "```sql\nSELECT DISTINCT m.mid, m.movie_release_date, m.movie_director, m.movie_cast_list, m.movie_critic_reviews, m.movie_popularity_score\nFROM movie m\nJOIN director d ON m.movie_director = d.did\nJOIN actor a ON a.aid = (\n    SELECT cast_aid \n    FROM cast c \n    WHERE c.msid = m.mid AND c.cast_role = 'Lead Actress'\n)\nWHERE d.director_experience_level = 'Experienced'\nAND 'Drama' = ANY(m.movie_genre_list)\nAND a.actor_genre_preference @> ARRAY['Social Issues']\nAND a.actor_awards_count > 0\nAND m.movie_critic_reviews > 0\nAND m.movie_popularity_score > 8.5;\n```"
    },
    {
        "instance_id": "q_1027",
        "db_id": "imdb_new",
        "question": "Which films directed by \"Asghar Farhadi\" have featured \"Taraneh Alidoosti\" in a leading role, and how do these films compare in terms of genre influence score, user reviews, critic reviews, box office gross, and profit margin over the years, ordered chronologically by their release dates?",
        "query": "SELECT \n    m.mid AS movie_id,\n    m.movie_release_date AS release_date,\n    m.movie_genre_influence_score AS genre_influence_score,\n    m.movie_user_reviews AS user_reviews,\n    m.movie_critic_reviews AS critic_reviews,\n    m.movie_box_office_gross AS box_office_gross,\n    m.movie_profit_margin AS profit_margin\nFROM \n    movie m\nJOIN \n    director d ON m.movie_director_list[1] = d.did\nJOIN \n    actor a ON m.movie_cast_list[1] = a.aid\nJOIN \n    cast c ON m.mid = c.msid\nWHERE \n    d.director_awards = 'Asghar Farhadi' \n    AND a.actor_first_breakthrough_role = 'Taraneh Alidoosti' \n    AND c.cast_role = 'leading'\nORDER BY \n    m.movie_release_date ASC;"
    },
    {
        "instance_id": "q_1026",
        "db_id": "imdb_new",
        "question": "What are the distinct films released within the last decade that feature collaborations between directors who are classified as \"Critically Acclaimed\" and actors who have delivered high-performance ratings (score of 8.0 or above) in roles of significant importance? Include the film's release date, director's name, and actor's name in the results, ordered by the film's release date in descending order.",
        "query": "```sql\nSELECT DISTINCT m.mid, m.movie_release_date, m.movie_title, d.director_name, a.actor_name\nFROM movie m\nJOIN director d ON m.movie_director = d.did\nJOIN actor a ON m.movie_cast_list @> ARRAY[a.aid::text]\nJOIN cast c ON c.msid = m.mid AND c.cast_performance_score >= 8.0\nWHERE d.director_experience_level = 'Critically Acclaimed'\nAND m.movie_release_date >= CURRENT_DATE - INTERVAL '10 years'\nAND c.cast_role ILIKE '%Significant%'\nORDER BY m.movie_release_date DESC;\n```"
    },
    {
        "instance_id": "q_1033",
        "db_id": "imdb_new",
        "question": "Identify movies released in the last decade where \"Asghar Farhadi\" has collaborated with lead actors whose genre performance success rate is at least 80%, genre diversity index does not exceed 0.3, and their preferred genres overlap with Drama. Only include films directed by an expert-level director with more than 5 awards. Prioritize the results based on descending audience engagement scores, ensuring that each movie has received over 10,000 user reviews.",
        "query": "```sql\nSELECT \n    m.mid AS movie_id,\n    m.movie_release_date,\n    m.movie_popularity_score,\n    d.did AS director_id,\n    a.aid AS actor_id\nFROM \n    director d\nJOIN \n    movie m ON d.did = m.movie_director_list[1]::integer\nJOIN \n    actor a ON a.aid = m.movie_cast_list[1]::integer\nWHERE \n    d.director_experience_level = 'Expert'\n    AND d.director_awards_count > 5\n    AND a.actor_genre_success_rate >= 0.8\n    AND a.actor_genre_diversity_index <= 0.3\n    AND a.actor_genre_preference && (SELECT ARRAY_AGG(genre_description) FROM genre WHERE genre_parent_genre = 'Drama')\n    AND m.movie_release_date >= CURRENT_DATE - INTERVAL '10 years'\n    AND m.movie_user_reviews > 10000\n    AND d.director_awards LIKE '%Asghar Farhadi%'\nORDER BY \n    m.movie_popularity_score DESC;\n```"
    },
    {
        "instance_id": "q_1032",
        "db_id": "imdb_new",
        "question": "Which directors, whose genre preference change rate is above the average of all actors, have directed movies released before January 1, 2002, or after December 31, 2010? Additionally, what is the average profitability of these movies, and how does the directors' average genre performance score influence this profitability?",
        "query": "```sql\nSELECT \n    d.did AS director_id,\n    AVG(m.movie_profit_margin) AS avg_movie_profit_margin,\n    AVG(dg.actor_genre_success_rate) AS avg_genre_performance_score\nFROM \n    director d\nJOIN \n    movie m ON d.did = ANY(m.movie_director_list::int[])\nJOIN \n    actor dg ON d.did = dg.aid\nWHERE \n    dg.actor_genre_diversity_index > (SELECT AVG(actor_genre_diversity_index) FROM actor)\n    AND (m.movie_release_date < '2002-01-01' OR m.movie_release_date > '2010-12-31')\nGROUP BY \n    d.did;\n```"
    },
    {
        "instance_id": "q_1029",
        "db_id": "imdb_new",
        "question": "How many distinct actors from Iran have participated in movies directed by Jim Jarmusch, and what is the average success rate of these actors in genres associated with those movies?",
        "query": "```sql\nSELECT \n    COUNT(DISTINCT a.aid) AS actor_count,\n    AVG(a.actor_genre_success_rate) AS average_genre_success_rate\nFROM \n    actor a\nJOIN \n    movie m ON a.aid = ANY(m.movie_cast_list::number[])\nJOIN \n    director d ON m.movie_director = d.did\nWHERE \n    a.actor_birthplace = 'Iran'\n    AND d.director_awards = 'Jim Jarmusch';\n```"
    },
    {
        "instance_id": "q_1030",
        "db_id": "imdb_new",
        "question": "Which actors collaborated with Quentin Tarantino in his most recently released film? For these actors, determine whether their genre preferences align with the genres of this film. Additionally, calculate the average performance success rate of these actors in films with similar genres over the past five years, considering only those actors whose genre preferences are aligned with the film's genres. Include the actors' gender, age, net worth, genre alignment status, and their calculated success rates in the results.",
        "query": "```sql\nWITH tarantino_recent_film AS (\n    SELECT \n        m.mid, \n        m.movie_release_date, \n        m.movie_genre_list, \n        m.movie_keywords_weighted_score\n    FROM \n        movie m\n    JOIN \n        director d ON m.movie_director = d.did\n    WHERE \n        d.actor_genre_preference = 'Quentin Tarantino'\n    ORDER BY \n        m.movie_release_date DESC\n    LIMIT 1\n),\nactor_genre_alignment AS (\n    SELECT \n        a.aid, \n        a.actor_genre_preference, \n        trf.movie_genre_list,\n        CASE \n            WHEN a.actor_genre_preference && trf.movie_genre_list THEN TRUE \n            ELSE FALSE \n        END AS genre_aligned\n    FROM \n        actor a, \n        tarantino_recent_film trf\n    WHERE \n        a.aid IN (SELECT unnest(string_to_array(m.movie_cast_list, ','))::integer \n                  FROM movie m \n                  WHERE m.mid = (SELECT mid FROM tarantino_recent_film))\n),\nactor_performance_success_rate AS (\n    SELECT \n        aga.aid, \n        AVG(cast_performance_score) AS success_rate\n    FROM \n        actor_genre_alignment aga\n    JOIN \n        cast c ON aga.aid = c.msid\n    JOIN \n        movie m ON c.msid = m.mid\n    WHERE \n        m.movie_release_date >= CURRENT_DATE - INTERVAL '5 years'\n        AND aga.genre_aligned = TRUE\n    GROUP BY \n        aga.aid\n)\nSELECT \n    a.actor_gender, \n    a.actor_age, \n    a.actor_net_worth, \n    aga.genre_aligned, \n    apsr.success_rate\nFROM \n    actor a\nJOIN \n    actor_genre_alignment aga ON a.aid = aga.aid\nLEFT JOIN \n    actor_performance_success_rate apsr ON a.aid = apsr.aid;\n```"
    },
    {
        "instance_id": "q_1031",
        "db_id": "imdb_new",
        "question": "Which producer has collaborated with the most unique directors and across the widest variety of genres, as measured by the count of distinct directors and distinct genres they have worked on together, prioritizing the number of unique directors in case of a tie?",
        "query": "```sql\nSELECT \n    p.pid AS producer_id,\n    COUNT(DISTINCT m.movie_director) AS unique_directors_count,\n    COUNT(DISTINCT mg.genre_id) AS unique_genres_count\nFROM \n    producer p\nJOIN \n    movie m ON p.pid = m.movie_producer\nJOIN \n    movie_genre mg ON m.mid = mg.mid\nGROUP BY \n    p.pid\nORDER BY \n    unique_directors_count DESC, \n    unique_genres_count DESC\nLIMIT 1;\n```"
    }
]