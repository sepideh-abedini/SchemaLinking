[
    {
        "instance_id": "q_0",
        "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "db_id": "tennis_match_data",
        "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "schema_links": [
            "players.country_code",
            "players.first_name",
            "players.player_id",
            "matches.winner_id",
            "matches.tourney_name"
        ]
    },
    {
        "instance_id": "q_2",
        "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "db_id": "student_academics",
        "query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "schema_links": [
            "Students.last_name",
            "Degree_Programs.degree_program_id",
            "Students.first_name",
            "Degree_Programs.degree_summary_name",
            "Student_Enrolment.degree_program_id",
            "Students.student_id",
            "Students.middle_name",
            "Student_Enrolment.student_id"
        ]
    },
    {
        "instance_id": "q_4",
        "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
        "db_id": "student_academics",
        "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
        "schema_links": [
            "Students.current_address_id",
            "Students.last_name",
            "Addresses.address_id",
            "Addresses.state_province_county",
            "Students.student_id",
            "Student_Enrolment.student_id"
        ]
    },
    {
        "instance_id": "q_6",
        "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
        "db_id": "student_academics",
        "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "schema_links": [
            "Student_Enrolment.semester_id",
            "Degree_Programs.degree_program_id",
            "Degree_Programs.degree_summary_name",
            "Student_Enrolment.degree_program_id"
        ]
    },
    {
        "instance_id": "q_8",
        "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "db_id": "media_catalog",
        "query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "schema_links": [
            "cartoon.directed_by",
            "TV_Channel.id",
            "TV_Channel.country",
            "cartoon.Channel",
            "TV_Channel.series_name"
        ]
    },
    {
        "instance_id": "q_10",
        "question": "How many countries speak both English and Dutch?",
        "db_id": "city_country_sales",
        "query": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
        "schema_links": [
            "countrylanguage.Language",
            "countrylanguage.CountryCode",
            "country.Code",
            "country.Name"
        ]
    },
    {
        "instance_id": "q_13",
        "question": "Give the names of nations that speak both English and French.",
        "db_id": "city_country_sales",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
        "schema_links": [
            "countrylanguage.CountryCode",
            "country.Code",
            "country.Name",
            "countrylanguage.Language"
        ]
    },
    {
        "instance_id": "q_14",
        "question": "What are the names of nations where both English and French are official languages?",
        "db_id": "city_country_sales",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
        "schema_links": [
            "countrylanguage.Language",
            "countrylanguage.CountryCode",
            "country.Code",
            "country.Name",
            "countrylanguage.IsOfficial"
        ]
    },
    {
        "instance_id": "q_16",
        "question": "What are the countries where either English or Dutch is the official language ?",
        "db_id": "city_country_sales",
        "query": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"",
        "schema_links": [
            "countrylanguage.language",
            "countrylanguage.isofficial",
            "country.name",
            "countrylanguage.countrycode",
            "country.code"
        ]
    },
    {
        "instance_id": "q_17",
        "question": "Which countries have either English or Dutch as an official language?",
        "db_id": "city_country_sales",
        "query": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"",
        "schema_links": [
            "countrylanguage.CountryCode",
            "country.Code",
            "countrylanguage.IsOfficial",
            "countrylanguage.Language"
        ]
    },
    {
        "instance_id": "q_18",
        "question": "Which cities are in European countries where English is not the official language?",
        "db_id": "city_country_sales",
        "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "schema_links": [
            "countrylanguage.Language",
            "countrylanguage.CountryCode",
            "country.Code",
            "country.Name",
            "city.Name",
            "countrylanguage.IsOfficial",
            "city.CountryCode",
            "country.Continent"
        ]
    },
    {
        "instance_id": "q_20",
        "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
        "db_id": "dog_adoption",
        "query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
        "schema_links": [
            "Professionals.state",
            "Professionals.last_name",
            "Professionals.professional_id",
            "Professionals.cell_number",
            "Treatments.professional_id"
        ]
    },
    {
        "instance_id": "q_22",
        "question": "List the id, first name and last name of the customers who both have placed more than 2 orders and have bought at least 3 items.",
        "db_id": "customer_loyalty",
        "query": "SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2 INTERSECT SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING count(*)  >= 3",
        "schema_links": [
            "Orders.order_id",
            "Customers.customer_first_name",
            "Customers.customer_last_name",
            "Orders.customer_id",
            "Order_items.order_id",
            "Customers.customer_id"
        ]
    },
    {
        "instance_id": "q_24",
        "question": "Which customers did not make any orders? List the first name, middle initial and last name.",
        "db_id": "customer_loyalty",
        "query": "SELECT customer_first_name ,  customer_middle_initial ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id",
        "schema_links": [
            "Customers.customer_first_name",
            "Customers.customer_last_name",
            "Orders.customer_id",
            "Customers.customer_middle_initial",
            "Customers.customer_id"
        ]
    },
    {
        "instance_id": "q_25",
        "question": "WHat are the first and last names, and middle initials of all customers who did not make any orders?",
        "db_id": "customer_loyalty",
        "query": "SELECT customer_first_name ,  customer_middle_initial ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id",
        "schema_links": [
            "Customers.customer_first_name",
            "Customers.customer_last_name",
            "Orders.customer_id",
            "Customers.customer_middle_initial",
            "Customers.customer_id"
        ]
    },
    {
        "instance_id": "q_26",
        "question": "What are the id, name, price and color of the products which have not been ordered for at least twice?",
        "db_id": "customer_loyalty",
        "query": "SELECT product_id ,  product_name ,  product_price ,  product_color FROM Products EXCEPT SELECT T1.product_id ,  T1.product_name ,  T1.product_price ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.product_id HAVING count(*)  >=  2",
        "schema_links": [
            "Products.product_name",
            "Orders.order_id",
            "Products.product_color",
            "Order_items.order_id",
            "Order_items.product_id",
            "Products.product_id",
            "Products.product_price"
        ]
    },
    {
        "instance_id": "q_27",
        "question": "List all the distinct product names, price and descriptions which are bought by female customers.",
        "db_id": "customer_loyalty",
        "query": "SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'",
        "schema_links": [
            "Products.product_name",
            "Products.product_description",
            "Orders.order_id",
            "Order_items.order_id",
            "Order_items.product_id",
            "Customers.gender_code",
            "Orders.customer_id",
            "Customers.customer_id",
            "Products.product_id",
            "Products.product_price"
        ]
    },
    {
        "instance_id": "q_29",
        "question": "List the biographical data and student id for the students who take 2 or more classes and the students who have less than 2 detentions.",
        "db_id": "student_life_cycle",
        "query": "SELECT T1.bio_data ,  T1.student_id FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  >=  2 UNION SELECT T1.bio_data ,  T1.student_id FROM Students AS T1 JOIN Detention AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  <  2",
        "schema_links": [
            "Detention.student_id",
            "Classes.student_id",
            "Students.bio_data",
            "Students.student_id"
        ]
    },
    {
        "instance_id": "q_30",
        "question": "What are the biographical data and student id of the students who either took two or more classes and or have less than two detentions?",
        "db_id": "student_life_cycle",
        "query": "SELECT T1.bio_data ,  T1.student_id FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  >=  2 UNION SELECT T1.bio_data ,  T1.student_id FROM Students AS T1 JOIN Detention AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  <  2",
        "schema_links": [
            "Detention.student_id",
            "Classes.student_id",
            "Students.bio_data",
            "Students.student_id"
        ]
    },
    {
        "instance_id": "q_31",
        "question": "List the details of the teachers who teach some class whose detail has the substring 'data' but do not teach a class whose detail contains the prefix 'net'",
        "db_id": "student_life_cycle",
        "query": "SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.class_details LIKE '%data%' EXCEPT SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.class_details LIKE 'net%'",
        "schema_links": [
            "Classes.teacher_id",
            "Teachers.teacher_details",
            "Classes.class_details",
            "Teachers.teacher_id"
        ]
    },
    {
        "instance_id": "q_33",
        "question": "List the biographical data of the students who never had a detention or student loan .",
        "db_id": "student_life_cycle",
        "query": "select bio_data from students where student_id not in (select t1.student_id from students as t1 join detention as t2 on t1.student_id  =  t2.student_id union select t1.student_id from students as t1 join student_loans as t2 on t1.student_id  =  t2.student_id)",
        "schema_links": [
            "students.bio_data",
            "detention.student_id",
            "students.student_id",
            "student_loans.student_id"
        ]
    },
    {
        "instance_id": "q_35",
        "question": "Which students not only got the most common result but also got a result obtained by 3 students in behaviour monitoring? List the student's biographical data and details.",
        "db_id": "student_life_cycle",
        "query": "SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 ) INTERSECT SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING count(*)  =  3 )",
        "schema_links": [
            "Behaviour_Monitoring.student_id",
            "Behaviour_Monitoring.behaviour_monitoring_details",
            "Students.bio_data",
            "Students.student_id",
            "Students.student_details"
        ]
    },
    {
        "instance_id": "q_37",
        "question": "Which students only got the most common result for his or her all behaviour monitoring details? List the students' biographical information.",
        "db_id": "student_life_cycle",
        "query": "SELECT T1.bio_data FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 ) EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details NOT IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 )",
        "schema_links": [
            "Behaviour_Monitoring.student_id",
            "Behaviour_Monitoring.behaviour_monitoring_details",
            "Students.bio_data",
            "Students.student_id"
        ]
    },
    {
        "instance_id": "q_38",
        "question": "What is the biographical information of the students who got the most common result for their behaviour monitoring details ?",
        "db_id": "student_life_cycle",
        "query": "select t1.bio_data from students as t1 join behaviour_monitoring as t2 on t1.student_id  =  t2.student_id where t2.behaviour_monitoring_details in ( select behaviour_monitoring_details from behaviour_monitoring group by behaviour_monitoring_details order by count(*) desc limit 1 ) except select t1.bio_data from students as t1 join behaviour_monitoring as t2 on t1.student_id  =  t2.student_id where t2.behaviour_monitoring_details not in ( select behaviour_monitoring_details from behaviour_monitoring group by behaviour_monitoring_details order by count(*) desc limit 1 )",
        "schema_links": [
            "students.bio_data",
            "behaviour_monitoring.behaviour_monitoring_details",
            "behaviour_monitoring.student_id",
            "students.student_id"
        ]
    },
    {
        "instance_id": "q_39",
        "question": "How many students have joined in the most common type of event? List the number, the event type and description.",
        "db_id": "student_life_cycle",
        "query": "SELECT count(*) ,  T2.event_type_code ,  T3.event_type_description FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id JOIN Ref_Event_Types AS T3 ON T2.event_type_code  =  T3.event_type_code GROUP BY T2.event_type_code ORDER BY count(*) DESC LIMIT 1",
        "schema_links": [
            "Student_Events.student_id",
            "Ref_Event_Types.event_type_description",
            "Student_Events.event_type_code",
            "Students.student_id",
            "Ref_Event_Types.event_type_code"
        ]
    },
    {
        "instance_id": "q_40",
        "question": "What is the type of event the most students joined? Give me the number of students, and the event type code and description.",
        "db_id": "student_life_cycle",
        "query": "SELECT count(*) ,  T2.event_type_code ,  T3.event_type_description FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id JOIN Ref_Event_Types AS T3 ON T2.event_type_code  =  T3.event_type_code GROUP BY T2.event_type_code ORDER BY count(*) DESC LIMIT 1",
        "schema_links": [
            "Student_Events.student_id",
            "Ref_Event_Types.event_type_description",
            "Student_Events.event_type_code",
            "Students.student_id",
            "Ref_Event_Types.event_type_code"
        ]
    },
    {
        "instance_id": "q_41",
        "question": "In which cities are there any properties equipped with a swimming pool?",
        "db_id": "property_hub",
        "query": "SELECT T2.town_city FROM Properties AS T1 JOIN Addresses AS T2 ON T1.property_address_id  =  T2.address_id JOIN Property_Features AS T3 ON T1.property_id  =  T3.property_id JOIN Features AS T4 ON T4.feature_id  =  T3.feature_id WHERE T4.feature_name  =  'swimming pool';",
        "schema_links": [
            "Addresses.address_id",
            "Property_Features.property_id",
            "Features.feature_id",
            "Property_Features.feature_id",
            "Features.feature_name",
            "Addresses.town_city",
            "Properties.property_id",
            "Properties.property_address_id"
        ]
    },
    {
        "instance_id": "q_43",
        "question": "List the last names and ids of users who have at least 2 properties and searched at most twice.",
        "db_id": "property_hub",
        "query": "SELECT T1.last_name ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  <=  2 INTERSECT SELECT T3.last_name ,  T3.user_id FROM Users AS T3 JOIN Properties AS T4 ON T3.user_id  =  T4.owner_user_id GROUP BY T3.user_id HAVING count(*)  >=  2;",
        "schema_links": [
            "Users.last_name",
            "User_Searches.user_id",
            "Users.user_id",
            "Properties.owner_user_id"
        ]
    },
    {
        "instance_id": "q_45",
        "question": "What is the process outcome description and process status description for the document with id 0?",
        "db_id": "document_flow",
        "query": "SELECT T2.process_outcome_description ,  T3.process_status_description FROM Documents_processes AS T1 JOIN Process_outcomes AS T2 ON T1.process_outcome_code  =  T2.process_outcome_code JOIN Process_Status AS T3 ON T1.process_status_code  =  T3.process_status_code WHERE T1.document_id  =  0",
        "schema_links": [
            "Documents_processes.process_outcome_code",
            "Process_Status.process_status_code",
            "Process_outcomes.process_outcome_description",
            "Documents_processes.document_id",
            "Process_Status.process_status_description",
            "Documents_processes.process_status_code",
            "Process_outcomes.process_outcome_code"
        ]
    },
    {
        "instance_id": "q_46",
        "question": "What are the id, sic code and agency id of the client who has attended 1 meeting and has any invoice.",
        "db_id": "agency_meetings",
        "query": "SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id HAVING count(*)  =  1 INTERSECT SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id",
        "schema_links": [
            "clients.sic_code",
            "meetings.client_id",
            "clients.client_id",
            "invoices.client_id",
            "clients.agency_id"
        ]
    },
    {
        "instance_id": "q_48",
        "question": "List the start time, end time of each meeting, and the corresponding client detail and staff detail.",
        "db_id": "agency_meetings",
        "query": "SELECT T1.start_date_time ,  T1.end_date_time ,  T2.client_details ,  T4.staff_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id JOIN staff_in_meetings AS T3 ON T1.meeting_id  =  T3.meeting_id JOIN staff AS T4 ON T3.staff_id  =  T4.staff_id",
        "schema_links": [
            "staff.staff_id",
            "staff_in_meetings.meeting_id",
            "staff.staff_details",
            "clients.client_details",
            "meetings.client_id",
            "staff_in_meetings.staff_id",
            "meetings.start_date_time",
            "meetings.meeting_id",
            "clients.client_id",
            "meetings.end_date_time"
        ]
    },
    {
        "instance_id": "q_50",
        "question": "What are the entry names of catalog with the attribute possessed by most entries.",
        "db_id": "catalog_sales",
        "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)",
        "schema_links": [
            "Catalog_Contents.catalog_entry_name",
            "Catalog_Contents_Additional_Attributes.attribute_value",
            "Catalog_Contents_Additional_Attributes.catalog_entry_id",
            "Catalog_Contents.catalog_entry_id"
        ]
    },
    {
        "instance_id": "q_51",
        "question": "Find the entry names of the catalog with the attribute that have the most entries.",
        "db_id": "catalog_sales",
        "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)",
        "schema_links": [
            "Catalog_Contents_Additional_Attributes.attribute_value",
            "Catalog_Contents.catalog_entry_name",
            "Catalog_Contents_Additional_Attributes.catalog_entry_id",
            "Catalog_Contents.catalog_entry_id"
        ]
    },
    {
        "instance_id": "q_52",
        "question": "Find the name of tracks which are in Movies playlist but not in music playlist.",
        "db_id": "music_catalog",
        "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'",
        "schema_links": [
            "playlist_tracks.playlist_id",
            "tracks.name",
            "playlist_tracks.track_id",
            "playlists.name",
            "playlists.id",
            "tracks.id"
        ]
    },
    {
        "instance_id": "q_56",
        "question": "What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks?",
        "db_id": "music_sales",
        "query": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'",
        "schema_links": [
            "Track.GenreID",
            "Track.AlbumId",
            "Album.AlbumId",
            "Genre.GenreID",
            "Genre.Name",
            "Album.Title"
        ]
    },
    {
        "instance_id": "q_58",
        "question": "Show the apartment numbers of apartments with bookings that have status code both \"Provisional\" and \"Confirmed\"",
        "db_id": "apt_booking",
        "query": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"",
        "schema_links": [
            "Apartments.apt_number",
            "Apartment_Bookings.apt_id",
            "Apartment_Bookings.booking_status_code",
            "Apartments.apt_id"
        ]
    },
    {
        "instance_id": "q_60",
        "question": "Show the apartment numbers of apartments with unit status availability of both 0 and 1.",
        "db_id": "apt_booking",
        "query": "SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  1",
        "schema_links": [
            "View_Unit_Status.available_yn",
            "Apartments.apt_number",
            "Apartments.apt_id",
            "View_Unit_Status.apt_id"
        ]
    },
    {
        "instance_id": "q_61",
        "question": "Which apartments have unit status availability of both 0 and 1? Return their apartment numbers.",
        "db_id": "apt_booking",
        "query": "SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  1",
        "schema_links": [
            "View_Unit_Status.available_yn",
            "Apartments.apt_id",
            "Apartments.apt_number",
            "Apartment.apt_number",
            "View_Unit_Status.apt_id"
        ]
    },
    {
        "instance_id": "q_62",
        "question": "What are the coupon amount of the coupons owned by both good and bad customers?",
        "db_id": "rental_insight",
        "query": "SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'good' INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'bad'",
        "schema_links": [
            "customers.coupon_id",
            "Discount_Coupons.coupon_id",
            "customers.good_or_bad_customer",
            "Discount_Coupons.coupon_amount"
        ]
    },
    {
        "instance_id": "q_63",
        "question": "Which shipping agent shipped the most documents? List the shipping agent name and the number of documents.",
        "db_id": "document_hub",
        "query": "SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1;",
        "schema_links": [
            "Ref_Shipping_Agents.shipping_agent_name",
            "Documents.document_id",
            "Ref_Shipping_Agents.shipping_agent_code",
            "Documents.shipping_agent_code"
        ]
    },
    {
        "instance_id": "q_64",
        "question": "List the document ids of documents with the status done and type Paper, which not shipped by the shipping agent named USPS.",
        "db_id": "document_hub",
        "query": "SELECT document_id FROM Documents WHERE document_status_code  =  \"done\" AND document_type_code = \"Paper\" EXCEPT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";",
        "schema_links": [
            "Documents.document_status_code",
            "Ref_Shipping_Agents.shipping_agent_name",
            "Documents.document_id",
            "Documents.document_type_code",
            "Ref_Shipping_Agents.shipping_agent_code",
            "Documents.shipping_agent_code"
        ]
    },
    {
        "instance_id": "q_66",
        "question": "Which employee has showed up in most circulation history documents. List the employee's name and the number of drafts and copies.",
        "db_id": "document_hub",
        "query": "SELECT Employees.employee_name , count(*) FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Circulation_History.document_id , Circulation_History.draft_number , Circulation_History.copy_number ORDER BY count(*) DESC LIMIT 1;",
        "schema_links": [
            "Circulation_History.document_id",
            "Circulation_History.draft_number",
            "Employees.employee_name",
            "Circulation_History.copy_number",
            "Employees.employee_id",
            "Circulation_History.employee_id"
        ]
    },
    {
        "instance_id": "q_67",
        "question": "Find the id and forenames of drivers who participated both the races with name Australian Grand Prix and the races with name Chinese Grand Prix?",
        "db_id": "race_analysis",
        "query": "SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Australian Grand Prix\" INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Chinese Grand Prix\"",
        "schema_links": [
            "races.name",
            "results.driverid",
            "results.raceid",
            "drivers.driverid",
            "races.raceid",
            "drivers.forename"
        ]
    },
    {
        "instance_id": "q_69",
        "question": "What are the forenames and surnames of drivers who participated in the races named Australian Grand Prix but not the races named Chinese Grand Prix?",
        "db_id": "race_analysis",
        "query": "SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\"",
        "schema_links": [
            "races.name",
            "results.driverid",
            "results.raceid",
            "drivers.driverid",
            "drivers.surname",
            "races.raceid",
            "drivers.forename"
        ]
    },
    {
        "instance_id": "q_71",
        "question": "What are the drivers' first, last names and id who had more than 8 pit stops or participated in more than 5 race results?",
        "db_id": "race_analysis",
        "query": "SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  8 UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5",
        "schema_links": [
            "results.driverid",
            "pitstops.driverid",
            "drivers.driverid",
            "drivers.surname",
            "drivers.forename"
        ]
    },
    {
        "instance_id": "q_73",
        "question": "What are the drivers' last names and id who had 11 pit stops and participated in more than 5 race results?",
        "db_id": "race_analysis",
        "query": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5",
        "schema_links": [
            "results.driverid",
            "pitstops.driverid",
            "drivers.driverid",
            "drivers.surname"
        ]
    },
    {
        "instance_id": "q_75",
        "question": "Find the names of customers who are not living in the state of California.",
        "db_id": "order_customer_product",
        "query": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'",
        "schema_links": [
            "addresses.state_province_county",
            "customer_addresses.customer_id",
            "addresses.address_id",
            "customers.customer_id",
            "customer_addresses.address_id",
            "customers.customer_name"
        ]
    },
    {
        "instance_id": "q_76",
        "question": "Which assets have 2 parts and have less than 2 fault logs? List the asset id and detail.",
        "db_id": "asset_maintenance",
        "query": "SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  =  2 INTERSECT SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  <  2",
        "schema_links": [
            "Asset_Parts.asset_id",
            "Assets.asset_details",
            "Fault_Log.asset_id",
            "Assets.asset_id"
        ]
    },
    {
        "instance_id": "q_77",
        "question": "Which third party companies have at least 2 maintenance engineers or have at least 2 maintenance contracts? List the company id and name.",
        "db_id": "asset_maintenance",
        "query": "SELECT T1.company_id ,  T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id HAVING count(*)  >=  2 UNION SELECT T3.company_id ,  T3.company_name FROM Third_Party_Companies AS T3 JOIN Maintenance_Contracts AS T4 ON T3.company_id  =  T4.maintenance_contract_company_id GROUP BY T3.company_id HAVING count(*)  >=  2",
        "schema_links": [
            "Maintenance_Engineers.company_id",
            "Maintenance_Contracts.maintenance_contract_company_id",
            "Third_Party_Companies.company_name",
            "Third_Party_Companies.company_id"
        ]
    },
    {
        "instance_id": "q_78",
        "question": "What is the description of the type of the company who concluded its contracts most recently?",
        "db_id": "asset_maintenance",
        "query": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id JOIN Ref_Company_Types AS T3 ON T1.company_type_code  =  T3.company_type_code ORDER BY T2.contract_end_date DESC LIMIT 1",
        "schema_links": [
            "Third_Party_Companies.company_type_code",
            "Ref_Company_Types.company_type_code",
            "Maintenance_Contracts.maintenance_contract_company_id",
            "Third_Party_Companies.company_name",
            "Third_Party_Companies.company_id",
            "Maintenance_Contracts.contract_end_date"
        ]
    },
    {
        "instance_id": "q_79",
        "question": "What is the first names of the professors from the history department who do not teach a class.",
        "db_id": "course_department",
        "query": "SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num  =  T5.prof_num",
        "schema_links": [
            "employee.emp_num",
            "professor.dept_code",
            "employee.emp_fname",
            "department.dept_name",
            "department.dept_code",
            "professor.emp_num",
            "CLASS.prof_num"
        ]
    },
    {
        "instance_id": "q_81",
        "question": "Find the first name of student who is taking classes from accounting and Computer Info. Systems departments",
        "db_id": "course_department",
        "query": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Computer Info. Systems'",
        "schema_links": [
            "department.dept_name",
            "course.dept_code",
            "student.stu_fname",
            "department.dept_code",
            "CLASS.class_code",
            "CLASS.crs_code",
            "class.crs_code",
            "enroll.class_code",
            "enroll.stu_num",
            "student.stu_num",
            "course.crs_code",
            "class.class_code"
        ]
    },
    {
        "instance_id": "q_83",
        "question": "Find the first names and offices of all instructors who have taught some course and the course description and the department name.",
        "db_id": "course_department",
        "query": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description ,  T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num JOIN department AS T5 ON T4.dept_code  =  T5.dept_code",
        "schema_links": [
            "employee.emp_num",
            "professor.dept_code",
            "department.dept_name",
            "course.crs_description",
            "professor.emp_num",
            "department.dept_code",
            "CLASS.crs_code",
            "class.crs_code",
            "professor.prof_office",
            "employee.emp_fname",
            "course.crs_code",
            "CLASS.prof_num",
            "class.prof_num"
        ]
    },
    {
        "instance_id": "q_84",
        "question": "What are the first names, office locations, and departments of all instructors, and also what are the descriptions of the courses they teach?",
        "db_id": "course_department",
        "query": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description ,  T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num JOIN department AS T5 ON T4.dept_code  =  T5.dept_code",
        "schema_links": [
            "employee.emp_num",
            "professor.dept_code",
            "department.dept_name",
            "course.crs_description",
            "professor.emp_num",
            "department.dept_code",
            "CLASS.crs_code",
            "professor.prof_office",
            "employee.emp_fname",
            "course.crs_code",
            "CLASS.prof_num"
        ]
    },
    {
        "instance_id": "q_85",
        "question": "Find the first names and degree of all professors who are teaching some class in Computer Info. Systems department.",
        "db_id": "course_department",
        "query": "SELECT DISTINCT T2.emp_fname ,  T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Computer Info. Systems'",
        "schema_links": [
            "employee.emp_num",
            "professor.dept_code",
            "employee.emp_fname",
            "department.dept_name",
            "professor.emp_num",
            "department.dept_code",
            "CLASS.prof_num",
            "professor.prof_high_degree",
            "class.prof_num"
        ]
    },
    {
        "instance_id": "q_86",
        "question": "What are the different first names and highest degree attained for professors teaching in the Computer Information Systems department?",
        "db_id": "course_department",
        "query": "SELECT DISTINCT T2.emp_fname ,  T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Computer Info. Systems'",
        "schema_links": [
            "employee.emp_num",
            "professor.dept_code",
            "employee.emp_fname",
            "department.dept_name",
            "department.dept_code",
            "professor.emp_num",
            "CLASS.prof_num",
            "professor.prof_high_degree"
        ]
    },
    {
        "instance_id": "q_87",
        "question": "display the full name (first and last name ) of employee with ID and name of the country presently where (s)he is working.",
        "db_id": "employee_department",
        "query": "SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
        "schema_links": [
            "locations.location_id",
            "employees.first_name",
            "departments.department_id",
            "employees.department_id",
            "countries.country_name",
            "departments.location_id",
            "employees.last_name",
            "locations.country_id",
            "employees.employee_id",
            "countries.country_id"
        ]
    },
    {
        "instance_id": "q_88",
        "question": "What the full names, ids of each employee and the name of the country they are in?",
        "db_id": "employee_department",
        "query": "SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
        "schema_links": [
            "countries.country_id",
            "locations.location_id",
            "employees.first_name",
            "departments.department_id",
            "employees.department_id",
            "departments.location_id",
            "employees.last_name",
            "locations.country_id",
            "employees.employee_id",
            "countries.country_name"
        ]
    },
    {
        "instance_id": "q_89",
        "question": "Which claims caused more than 2 settlements or have the maximum claim value? List the date the claim was made and the claim id.",
        "db_id": "claim_insurance",
        "query": "SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.Claim_id HAVING count(*)  >  2 UNION SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id WHERE T1.Amount_Claimed  =  ( SELECT max(Amount_Claimed) FROM Claims )",
        "schema_links": [
            "Claims.Date_Claim_Made",
            "Settlements.Claim_id",
            "Claims.Amount_Claimed",
            "Claims.Claim_id"
        ]
    },
    {
        "instance_id": "q_91",
        "question": "Which customer had at least 2 policies but did not file any claims? List the customer details and id.",
        "db_id": "claim_insurance",
        "query": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id",
        "schema_links": [
            "Customer_Policies.policy_id",
            "Customers.Customer_id",
            "Customers.customer_details",
            "Customer_Policies.customer_id",
            "Customers.customer_id",
            "Claims.policy_id"
        ]
    },
    {
        "instance_id": "q_93",
        "question": "Find the name of physicians who are affiliated with both Surgery and Psychiatry departments.",
        "db_id": "health_care",
        "query": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Psychiatry'",
        "schema_links": [
            "physician.name",
            "affiliated_with.physician",
            "affiliated_with.department",
            "department.DepartmentID",
            "department.name",
            "physician.EmployeeID"
        ]
    },
    {
        "instance_id": "q_95",
        "question": "List the project details of the project both producing patent and paper as outcomes.",
        "db_id": "grant_document",
        "query": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Paper' INTERSECT SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Patent'",
        "schema_links": [
            "Projects.project_id",
            "Projects.project_details",
            "Project_outcomes.outcome_code",
            "Project_outcomes.project_id"
        ]
    },
    {
        "instance_id": "q_97",
        "question": "Find out the send dates of the documents with the grant amount of more than 5000 were granted by organisation type described",
        "db_id": "grant_document",
        "query": "SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'",
        "schema_links": [
            "Organisations.organisation_id",
            "Organisations.organisation_type",
            "Grants.grant_id",
            "documents.grant_id",
            "Grants.grant_amount",
            "organisation_Types.organisation_type",
            "organisation_Types.organisation_type_description",
            "Grants.organisation_id",
            "documents.sent_date"
        ]
    },
    {
        "instance_id": "q_99",
        "question": "What are the task details, task id and project id for the projects which are detailed as 'omnis' or  have more than 2 outcomes?",
        "db_id": "grant_document",
        "query": "SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'omnis' UNION SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.project_id HAVING count(*)  >  2",
        "schema_links": [
            "Projects.project_id",
            "Projects.project_details",
            "Tasks.task_id",
            "Tasks.project_id",
            "Tasks.task_details",
            "Project_outcomes.project_id"
        ]
    },
    {
        "instance_id": "q_101",
        "question": "For grants with both documents described as 'Regular' and documents described as 'Initial Application', list its start date.",
        "db_id": "grant_document",
        "query": "SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Initial Application'",
        "schema_links": [
            "Documents.grant_id",
            "Grants.grant_id",
            "Documents.document_type_code",
            "Document_Types.document_description",
            "Grants.grant_start_date",
            "Document_Types.document_type_code"
        ]
    },
    {
        "instance_id": "q_103",
        "question": "Find the average access counts of documents with functional area \"Acknowledgement\".",
        "db_id": "document_access",
        "query": "SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  \"Acknowledgement\"",
        "schema_links": [
            "functional_areas.functional_area_description",
            "document_functional_areas.document_code",
            "functional_areas.functional_area_code",
            "documents.access_count",
            "documents.document_code",
            "document_functional_areas.functional_area_code"
        ]
    },
    {
        "instance_id": "q_105",
        "question": "What are the name and payment method of customers who have both mailshots in 'Order' outcome and mailshots in 'No Response' outcome.",
        "db_id": "customer_order_data",
        "query": "SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'Order' INTERSECT SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'No Response'",
        "schema_links": [
            "mailshot_customers.customer_id",
            "customers.customer_id",
            "customers.payment_method",
            "mailshot_customers.outcome_code",
            "customers.customer_name"
        ]
    },
    {
        "instance_id": "q_106",
        "question": "Find the name and address of the customers who have both New and Pending orders.",
        "db_id": "customer_order",
        "query": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"",
        "schema_links": [
            "customers.customer_address",
            "customers.customer_id",
            "customer_orders.customer_id",
            "customer_orders.order_status_code",
            "customers.customer_name"
        ]
    },
    {
        "instance_id": "q_107",
        "question": "What are the names and addressed of customers who have both New and Pending orders?",
        "db_id": "customer_order",
        "query": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"",
        "schema_links": [
            "customers.customer_address",
            "customers.customer_id",
            "customer_orders.customer_id",
            "customer_orders.order_status_code",
            "customers.customer_name"
        ]
    },
    {
        "instance_id": "q_108",
        "question": "What is the id and name of the department store that has both marketing and managing department?",
        "db_id": "customer_order",
        "query": "SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"marketing\" INTERSECT SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"managing\"",
        "schema_links": [
            "department_stores.store_name",
            "departments.dept_store_id",
            "department_stores.dept_store_id",
            "departments.department_name"
        ]
    },
    {
        "instance_id": "q_110",
        "question": "List the names of all the distinct customers who bought a keyboard.",
        "db_id": "customer_order",
        "query": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"keyboard\"",
        "schema_links": [
            "products.product_id",
            "order_items.order_id",
            "products.product_name",
            "customers.customer_id",
            "customer_orders.order_id",
            "customer_orders.customer_id",
            "order_items.product_id",
            "customers.customer_name"
        ]
    },
    {
        "instance_id": "q_112",
        "question": "Find the name and gender of the staff who has been assigned the job of Sales Person but never Clerical Staff.",
        "db_id": "customer_order",
        "query": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\"",
        "schema_links": [
            "staff.staff_id",
            "staff.staff_name",
            "staff.staff_gender",
            "Staff_Department_Assignments.staff_id",
            "Staff_Department_Assignments.job_title_code"
        ]
    },
    {
        "instance_id": "q_116",
        "question": "What is the description of the service type which offers both the photo product and the film product?",
        "db_id": "booking_services",
        "query": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'photo' INTERSECT SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'film'",
        "schema_links": [
            "Services.Service_Type_Code",
            "Services.Product_Name",
            "Ref_Service_Types.Service_Type_Code",
            "Ref_Service_Types.Service_Type_Description"
        ]
    },
    {
        "instance_id": "q_118",
        "question": "What are the id of problems reported by the staff named Dameon Frami or Jolie Weber?",
        "db_id": "problem_tracking",
        "query": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\"",
        "schema_links": [
            "staff.staff_id",
            "problems.reported_by_staff_id",
            "problems.product_id",
            "staff.staff_last_name",
            "staff.staff_first_name"
        ]
    },
    {
        "instance_id": "q_120",
        "question": "What are the product ids for the problems reported by Christop Berge with closure authorised by Ashley Medhurst?",
        "db_id": "problem_tracking",
        "query": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\" AND T2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Ashley\" AND T2.staff_last_name = \"Medhurst\"",
        "schema_links": [
            "staff.staff_id",
            "problems.reported_by_staff_id",
            "problems.product_id",
            "staff.staff_last_name",
            "staff.staff_first_name",
            "problems.closure_authorised_by_staff_id"
        ]
    },
    {
        "instance_id": "q_122",
        "question": "What are the ids of the problems reported before the date of any problem reported by Lysanne Turcotte?",
        "db_id": "problem_tracking",
        "query": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  <  ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Lysanne\" AND T4.staff_last_name = \"Turcotte\" )",
        "schema_links": [
            "staff.staff_id",
            "problems.reported_by_staff_id",
            "problems.date_problem_reported",
            "staff.staff_last_name",
            "staff.staff_first_name",
            "problems.problem_id"
        ]
    },
    {
        "instance_id": "q_124",
        "question": "What are the ids of the problems reported after the date of any problems reported by Rylan Homenick?",
        "db_id": "problem_tracking",
        "query": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  >  ( SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Rylan\" AND T4.staff_last_name = \"Homenick\" )",
        "schema_links": [
            "staff.staff_id",
            "problems.reported_by_staff_id",
            "problems.date_problem_reported",
            "staff.staff_last_name",
            "staff.staff_first_name",
            "problems.problem_id"
        ]
    },
    {
        "instance_id": "q_126",
        "question": "Find the first and last name of the staff members who reported problems from the product \"rem\" but not \"aut\"?",
        "db_id": "problem_tracking",
        "query": "SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\"",
        "schema_links": [
            "staff.staff_id",
            "problems.reported_by_staff_id",
            "problems.product_id",
            "product.product_id",
            "staff.staff_last_name",
            "staff.staff_first_name",
            "product.product_name"
        ]
    },
    {
        "instance_id": "q_127",
        "question": "Which staff members who reported problems from the product \"rem\" but not \"aut\"? Give me their first and last names.",
        "db_id": "problem_tracking",
        "query": "SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\"",
        "schema_links": [
            "staff.staff_id",
            "problems.reported_by_staff_id",
            "problems.product_id",
            "product.product_id",
            "staff.staff_last_name",
            "staff.staff_first_name",
            "product.product_name"
        ]
    },
    {
        "instance_id": "q_128",
        "question": "Find the products which have problems reported by both Lacey Bosco and Kenton Champlin?",
        "db_id": "problem_tracking",
        "query": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Lacey\" AND T3.staff_last_name = \"Bosco\" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Kenton\" AND T3.staff_last_name = \"Champlin\"",
        "schema_links": [
            "staff.staff_id",
            "problems.reported_by_staff_id",
            "problems.product_id",
            "product.product_id",
            "staff.staff_last_name",
            "staff.staff_first_name",
            "product.product_name"
        ]
    },
    {
        "instance_id": "q_130",
        "question": "Show the names of customers who have both an order in completed status and an order in part status.",
        "db_id": "customer_hub",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'Completed' INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'Part'",
        "schema_links": [
            "customers.customer_id",
            "customer_orders.customer_id",
            "customer_orders.order_status_code",
            "customers.customer_name"
        ]
    },
    {
        "instance_id": "q_131",
        "question": "What are the name and phone of the customer with the most ordered product quantity?",
        "db_id": "customer_hub",
        "query": "SELECT  T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T3.order_id  =  T2.order_id GROUP BY T1.customer_id ORDER BY sum(T3.order_quantity) DESC LIMIT 1",
        "schema_links": [
            "order_items.order_id",
            "customer_orders.order_id",
            "customers.customer_id",
            "order_items.order_quantity",
            "customer_orders.customer_id",
            "customers.customer_phone",
            "customers.customer_name"
        ]
    },
    {
        "instance_id": "q_132",
        "question": "What are the names of the tourist attractions and the dates when the tourists named Vincent or Vivian visited there?",
        "db_id": "tourist_attraction",
        "query": "SELECT T1.Name ,  T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" OR T2.Tourist_Details  =  \"Vivian\"",
        "schema_links": [
            "Tourist_Attractions.Tourist_Attraction_ID",
            "VISITS.Tourist_Attraction_ID",
            "VISITS.Visit_Date",
            "VISITS.Tourist_ID",
            "Tourist_Attractions.Name",
            "VISITORS.Tourist_ID",
            "VISITORS.Tourist_Details"
        ]
    },
    {
        "instance_id": "q_134",
        "question": "What are the names of the tourist attractions that have parking or shopping as their feature details?",
        "db_id": "tourist_attraction",
        "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'",
        "schema_links": [
            "Tourist_Attractions.tourist_attraction_id",
            "Features.feature_Details",
            "Tourist_Attraction_Features.tourist_attraction_id",
            "Features.Feature_ID",
            "Tourist_Attraction_Features.Feature_ID",
            "Tourist_Attractions.Name"
        ]
    },
    {
        "instance_id": "q_136",
        "question": "What are the names of the tourist attractions Vincent and Marcelle visit?",
        "db_id": "tourist_attraction",
        "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Marcelle\"",
        "schema_links": [
            "Tourist_Attractions.Tourist_Attraction_ID",
            "VISITS.Tourist_Attraction_ID",
            "VISITS.Tourist_ID",
            "Tourist_Attractions.Name",
            "VISITORS.Tourist_ID",
            "VISITORS.Tourist_Details"
        ]
    },
    {
        "instance_id": "q_138",
        "question": "What are the names of tourist attraction that Alison visited but Rosalind did not visit?",
        "db_id": "tourist_attraction",
        "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\"",
        "schema_links": [
            "Tourist_Attractions.Tourist_Attraction_ID",
            "VISITS.Tourist_Attraction_ID",
            "VISITS.Tourist_ID",
            "Tourist_Attractions.Name",
            "VISITORS.Tourist_ID",
            "VISITORS.Tourist_Details"
        ]
    },
    {
        "instance_id": "q_139",
        "question": "Find the the names of the tourist attractions that the tourist named Alison visited but Rosalind did not visit.",
        "db_id": "tourist_attraction",
        "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\"",
        "schema_links": [
            "Tourist_Attractions.Tourist_Attraction_ID",
            "VISITS.Tourist_Attraction_ID",
            "VISITS.Tourist_ID",
            "Tourist_Attractions.Name",
            "VISITORS.Tourist_ID",
            "VISITORS.Tourist_Details"
        ]
    },
    {
        "instance_id": "q_140",
        "question": "Find the names of customers who never ordered product Latte.",
        "db_id": "customer_interaction",
        "query": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'",
        "schema_links": [
            "products.product_id",
            "products.product_details",
            "order_items.order_id",
            "customers.customer_id",
            "customer_orders.order_id",
            "customer_orders.customer_id",
            "order_items.product_id",
            "customers.customer_name"
        ]
    },
    {
        "instance_id": "q_144",
        "question": "Find the last name of the latest contact individual of the organization \"Labour Party\".",
        "db_id": "service_hub",
        "query": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.organization_name  =  \"Labour Party\" ORDER BY t2.date_contact_to DESC LIMIT 1",
        "schema_links": [
            "organization_contact_individuals.organization_id",
            "organization_contact_individuals.date_contact_to",
            "individuals.individual_id",
            "organization_contact_individuals.individual_id",
            "organizations.organization_id",
            "organizations.organization_name",
            "individuals.individual_last_name"
        ]
    },
    {
        "instance_id": "q_146",
        "question": "Find the last name of the first ever contact person of the organization with the highest UK Vat number.",
        "db_id": "service_hub",
        "query": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.uk_vat_number  =  (SELECT max(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT 1",
        "schema_links": [
            "organizations.uk_vat_number",
            "organization_contact_individuals.organization_id",
            "organization_contact_individuals.date_contact_to",
            "individuals.individual_id",
            "organization_contact_individuals.individual_id",
            "organizations.organization_id",
            "individuals.individual_last_name"
        ]
    },
    {
        "instance_id": "q_148",
        "question": "Find the names of the customers who have order status both \"On Road\" and \"Shipped\".",
        "db_id": "order_management",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"",
        "schema_links": [
            "orders.customer_id",
            "customers.customer_id",
            "orders.order_status",
            "customers.customer_name"
        ]
    },
    {
        "instance_id": "q_150",
        "question": "Find the id of the customers who have order status both \"On Road\" and \"Shipped\".",
        "db_id": "order_management",
        "query": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"",
        "schema_links": [
            "customers.customer_id",
            "orders.order_status",
            "orders.customer_id"
        ]
    },
    {
        "instance_id": "q_152",
        "question": "List the names of the customers who have once bought product \"food\".",
        "db_id": "order_management",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1",
        "schema_links": [
            "products.product_id",
            "orders.customer_id",
            "orders.order_id",
            "order_items.order_id",
            "products.product_name",
            "customers.customer_id",
            "order_items.product_id",
            "customers.customer_name"
        ]
    },
    {
        "instance_id": "q_154",
        "question": "List the names of customers who have once canceled the purchase of the product \"food\" (the item status is \"Cancel\").",
        "db_id": "order_management",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = \"Cancel\" AND T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1",
        "schema_links": [
            "products.product_id",
            "orders.customer_id",
            "orders.order_id",
            "order_items.order_item_status",
            "order_items.order_id",
            "products.product_name",
            "customers.customer_id",
            "order_items.product_id",
            "customers.customer_name"
        ]
    },
    {
        "instance_id": "q_156",
        "question": "what is the smallest city in the largest state",
        "db_id": "geography_data",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
        "schema_links": [
            "city.population",
            "city.city_name",
            "city.state_name",
            "state.area",
            "state.state_name"
        ]
    },
    {
        "instance_id": "q_157",
        "question": "how many states have a higher point than the highest point of the state with the largest capital city in the us",
        "db_id": "geography_data",
        "query": "SELECT COUNT ( state_name ) FROM highlow WHERE highest_elevation  >  ( SELECT highest_elevation FROM highlow WHERE state_name  =  ( SELECT state_name FROM state WHERE capital  =  ( SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city ) ) ) );",
        "schema_links": [
            "city.population",
            "city.city_name",
            "state.capital",
            "highlow.state_name",
            "highlow.highest_elevation",
            "state.state_name"
        ]
    },
    {
        "instance_id": "q_158",
        "question": "what is the largest city in smallest state through which the mississippi runs",
        "db_id": "geography_data",
        "query": "SELECT city_name FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) AND area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ) ) ORDER BY population DESC LIMIT 1;",
        "schema_links": [
            "river.river_name",
            "city.city_name",
            "river.traverse",
            "city.state_name",
            "state.area",
            "state.state_name"
        ]
    },
    {
        "instance_id": "q_161",
        "question": "what is the largest state bordering california",
        "db_id": "geography_data",
        "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" );",
        "schema_links": [
            "border_info.border",
            "border_info.state_name",
            "state.area",
            "state.state_name"
        ]
    },
    {
        "instance_id": "q_164",
        "question": "what is the longest river in the largest state",
        "db_id": "geography_data",
        "query": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) ) ) AND traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
        "schema_links": [
            "river.river_name",
            "river.LENGTH",
            "river.traverse",
            "state.area",
            "state.state_name"
        ]
    },
    {
        "instance_id": "q_165",
        "question": "what is the longest river in the states that border tennessee",
        "db_id": "geography_data",
        "query": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" ) ) AND traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" );",
        "schema_links": [
            "border_info.border",
            "river.river_name",
            "border_info.state_name",
            "river.LENGTH",
            "river.traverse"
        ]
    },
    {
        "instance_id": "q_168",
        "question": "what is the most populous state through which the mississippi runs",
        "db_id": "geography_data",
        "query": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "schema_links": [
            "state.population",
            "river.traverse",
            "river.river_name",
            "state.state_name"
        ]
    },
    {
        "instance_id": "q_170",
        "question": "what is the population of the largest city in the state with the largest area",
        "db_id": "geography_data",
        "query": "SELECT population FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
        "schema_links": [
            "city.population",
            "city.state_name",
            "state.area",
            "state.state_name"
        ]
    },
    {
        "instance_id": "q_171",
        "question": "which state has the lowest point that borders idaho",
        "db_id": "geography_data",
        "query": "SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"idaho\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"idaho\" );",
        "schema_links": [
            "border_info.border",
            "border_info.state_name",
            "highlow.lowest_elevation",
            "highlow.state_name"
        ]
    },
    {
        "instance_id": "q_172",
        "question": "what is the largest city in a state that borders california",
        "db_id": "geography_data",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" );",
        "schema_links": [
            "border_info.border",
            "city.population",
            "border_info.state_name",
            "city.city_name",
            "city.state_name"
        ]
    },
    {
        "instance_id": "q_175",
        "question": "what is the largest state that borders the state with the highest population",
        "db_id": "geography_data",
        "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT state_name FROM border_info WHERE border IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) ) ) ) AND state_name IN ( SELECT state_name FROM border_info WHERE border IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) ) );",
        "schema_links": [
            "border_info.border",
            "border_info.state_name",
            "state.population",
            "state.area",
            "state.state_name"
        ]
    },
    {
        "instance_id": "q_177",
        "question": "what is the smallest state through which the longest river runs",
        "db_id": "geography_data",
        "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river ) ) ) AND state_name IN ( SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river ) );",
        "schema_links": [
            "river.LENGTH",
            "river.traverse",
            "state.area",
            "state.state_name"
        ]
    },
    {
        "instance_id": "q_178",
        "question": "how many people live in the smallest state bordering wyoming",
        "db_id": "geography_data",
        "query": "SELECT population FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"wyoming\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"wyoming\" );",
        "schema_links": [
            "border_info.border",
            "border_info.state_name",
            "state.population",
            "state.state_name"
        ]
    },
    {
        "instance_id": "q_179",
        "question": "what is the largest state that borders the state with the lowest point in the usa",
        "db_id": "geography_data",
        "query": "SELECT t1.state_name FROM highlow AS t3 JOIN border_info AS t1 ON t3.state_name  =  t1.border JOIN state AS t2 ON t2.state_name  =  t1.border WHERE t3.lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow ) ORDER BY t2.area DESC LIMIT 1;",
        "schema_links": [
            "border_info.border",
            "border_info.state_name",
            "highlow.lowest_elevation",
            "highlow.state_name",
            "state.area",
            "state.state_name"
        ]
    },
    {
        "instance_id": "q_180",
        "question": "papers that are coauthored by Peter Mertens and Dina Barbian",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "schema_links": [
            "author.authorname",
            "author.authorid",
            "writes.authorid",
            "writes.paperid"
        ]
    },
    {
        "instance_id": "q_187",
        "question": "papers by authors Peter Mertens and Dina Barbian",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "schema_links": [
            "writes.authorid",
            "writes.paperid",
            "author.authorname",
            "author.authorid"
        ]
    },
    {
        "instance_id": "q_201",
        "question": "who has written the most syntactic parsing papers ?",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "schema_links": [
            "keyphrase.keyphrasename",
            "paperkeyphrase.paperid",
            "keyphrase.keyphraseid",
            "paperkeyphrase.keyphraseid",
            "writes.authorid",
            "writes.paperid",
            "paper.paperid"
        ]
    },
    {
        "instance_id": "q_207",
        "question": "Who are the authors with the most published papers in syntactic parsing ?",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "schema_links": [
            "keyphrase.keyphrasename",
            "paperkeyphrase.paperid",
            "keyphrase.keyphraseid",
            "paperkeyphrase.keyphraseid",
            "writes.authorid",
            "writes.paperid",
            "paper.paperid"
        ]
    },
    {
        "instance_id": "q_212",
        "question": "How many papers did David M. Blei publish at AISTATS ?",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";",
        "schema_links": [
            "paper.venueid",
            "venue.venuename",
            "author.authorname",
            "author.authorid",
            "writes.authorid",
            "writes.paperid",
            "paper.paperid",
            "venue.venueid"
        ]
    },
    {
        "instance_id": "q_213",
        "question": "How many papers does David M. Blei have in AISTATS ?",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";",
        "schema_links": [
            "paper.venueid",
            "venue.venuename",
            "author.authorname",
            "author.authorid",
            "writes.authorid",
            "writes.paperid",
            "paper.paperid",
            "venue.venueid"
        ]
    },
    {
        "instance_id": "q_216",
        "question": "how many papers does David M. Blei have in AISTATS ?",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";",
        "schema_links": [
            "paper.venueid",
            "venue.venuename",
            "author.authorname",
            "author.authorid",
            "writes.authorid",
            "writes.paperid",
            "paper.paperid",
            "venue.venueid"
        ]
    },
    {
        "instance_id": "q_220",
        "question": "which EMNLP 2010 papers have the most citations ?",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2010 AND t2.venuename  =  \"EMNLP\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citedpaperid ) DESC;",
        "schema_links": [
            "paper.year",
            "paper.venueid",
            "venue.venuename",
            "cite.citedpaperid",
            "paper.paperid",
            "venue.venueid"
        ]
    },
    {
        "instance_id": "q_224",
        "question": "What papers were published at CVPR in 2016 about Class consistent multi-modal fusion with binary features applied to RGB-D Object Dataset ?",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"RGB-D Object Dataset\" AND t3.title  =  \"Class consistent multi-modal fusion with binary features\" AND t3.year  =  2016 AND t4.venuename  =  \"CVPR\";",
        "schema_links": [
            "paper.year",
            "dataset.datasetid",
            "paper.venueid",
            "venue.venuename",
            "dataset.datasetname",
            "paperdataset.datasetid",
            "paperdataset.paperid",
            "paper.paperid",
            "paper.title",
            "venue.venueid"
        ]
    },
    {
        "instance_id": "q_226",
        "question": "what kind of papers does Luke Zettlemoyer publish",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
        "schema_links": [
            "paperkeyphrase.paperid",
            "author.authorname",
            "author.authorid",
            "keyphrase.keyphraseid",
            "paperkeyphrase.keyphraseid",
            "writes.authorid",
            "writes.paperid",
            "paper.paperid"
        ]
    },
    {
        "instance_id": "q_227",
        "question": "Keyphrases used by Luke Zettlemoyer",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
        "schema_links": [
            "paperkeyphrase.paperid",
            "author.authorname",
            "author.authorid",
            "keyphrase.keyphraseid",
            "paperkeyphrase.keyphraseid",
            "writes.authorid",
            "writes.paperid",
            "paper.paperid"
        ]
    },
    {
        "instance_id": "q_228",
        "question": "What keywords are in papers by Luke Zettlemoyer ?",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
        "schema_links": [
            "paperkeyphrase.paperid",
            "author.authorname",
            "author.authorid",
            "keyphrase.keyphraseid",
            "paperkeyphrase.keyphraseid",
            "writes.authorid",
            "writes.paperid",
            "paper.paperid"
        ]
    },
    {
        "instance_id": "q_239",
        "question": "How many papers by Ed Desmond contain the keyphrases Semantic Parsing ?",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t1.paperid JOIN author AS t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  \"Ed Desmond\" AND t4.keyphrasename  =  \"Semantic Parsing\";",
        "schema_links": [
            "keyphrase.keyphrasename",
            "paperkeyphrase.paperid",
            "author.authorname",
            "author.authorid",
            "keyphrase.keyphraseid",
            "paperkeyphrase.keyphraseid",
            "writes.authorid",
            "writes.paperid"
        ]
    },
    {
        "instance_id": "q_243",
        "question": "acl papers in 2012 on Parsing",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
        "schema_links": [
            "paper.year",
            "paper.venueid",
            "keyphrase.keyphrasename",
            "paperkeyphrase.paperid",
            "venue.venuename",
            "keyphrase.keyphraseid",
            "paperkeyphrase.keyphraseid",
            "paper.paperid",
            "venue.venueid"
        ]
    },
    {
        "instance_id": "q_251",
        "question": "papers on Parsing appeared at acl in 2012",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
        "schema_links": [
            "paper.year",
            "paper.venueid",
            "keyphrase.keyphrasename",
            "paperkeyphrase.paperid",
            "venue.venuename",
            "keyphrase.keyphraseid",
            "paperkeyphrase.keyphraseid",
            "paper.paperid",
            "venue.venueid"
        ]
    },
    {
        "instance_id": "q_253",
        "question": "who published Parsing papers at acl 2012",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
        "schema_links": [
            "keyphrase.keyphrasename",
            "paperkeyphrase.paperid",
            "paper.paperid",
            "paper.year",
            "paper.venueid",
            "venue.venuename",
            "keyphrase.keyphraseid",
            "paperkeyphrase.keyphraseid",
            "venue.venueid"
        ]
    },
    {
        "instance_id": "q_256",
        "question": "keyphrases used by Luke S Zettlemoyer for each year",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t2.keyphraseid  ,  t3.year FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Luke S Zettlemoyer\" ORDER BY t3.year  ,  t2.keyphraseid;",
        "schema_links": [
            "paper.year",
            "paperkeyphrase.paperid",
            "author.authorname",
            "author.authorid",
            "paperkeyphrase.keyphraseid",
            "writes.authorid",
            "writes.paperid",
            "paper.paperid"
        ]
    },
    {
        "instance_id": "q_257",
        "question": "recent research interests of sanjeev arora",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t1.keyphrasename  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"sanjeev arora\" ORDER BY t3.year DESC;",
        "schema_links": [
            "paper.year",
            "keyphrase.keyphrasename",
            "paperkeyphrase.paperid",
            "author.authorname",
            "author.authorid",
            "keyphrase.keyphraseid",
            "paperkeyphrase.keyphraseid",
            "writes.authorid",
            "writes.paperid",
            "paper.paperid"
        ]
    },
    {
        "instance_id": "q_263",
        "question": "brian curless convolution paper",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "schema_links": [
            "keyphrase.keyphrasename",
            "paperkeyphrase.paperid",
            "author.authorname",
            "author.authorid",
            "keyphrase.keyphraseid",
            "paperkeyphrase.keyphraseid",
            "writes.authorid",
            "writes.paperid",
            "paper.paperid"
        ]
    },
    {
        "instance_id": "q_264",
        "question": "convolution by brian curless",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "schema_links": [
            "keyphrase.keyphrasename",
            "paperkeyphrase.paperid",
            "author.authorname",
            "author.authorid",
            "keyphrase.keyphraseid",
            "paperkeyphrase.keyphraseid",
            "writes.authorid",
            "writes.paperid",
            "paper.paperid"
        ]
    },
    {
        "instance_id": "q_266",
        "question": "brian curless 's paper about convolution",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "schema_links": [
            "keyphrase.keyphrasename",
            "paperkeyphrase.paperid",
            "writes.paperid",
            "paper.paperid",
            "author.authorname",
            "author.authorid",
            "keyphrase.keyphraseid",
            "paperkeyphrase.keyphraseid",
            "writes.authorid"
        ]
    },
    {
        "instance_id": "q_278",
        "question": "What TAIL paper published in NIPS ?",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";",
        "schema_links": [
            "paper.venueid",
            "keyphrase.keyphrasename",
            "paperkeyphrase.paperid",
            "venue.venuename",
            "keyphrase.keyphraseid",
            "paperkeyphrase.keyphraseid",
            "paper.paperid",
            "venue.venueid"
        ]
    },
    {
        "instance_id": "q_282",
        "question": "papers at NIPS related to TAIL",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";",
        "schema_links": [
            "paper.venueid",
            "keyphrase.keyphrasename",
            "paperkeyphrase.paperid",
            "venue.venuename",
            "keyphrase.keyphraseid",
            "paperkeyphrase.keyphraseid",
            "paper.paperid",
            "venue.venueid"
        ]
    },
    {
        "instance_id": "q_288",
        "question": "keyphrases used by Christof Dallermassl in 2000",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;",
        "schema_links": [
            "paper.year",
            "paperkeyphrase.paperid",
            "author.authorname",
            "author.authorid",
            "paperkeyphrase.keyphraseid",
            "writes.authorid",
            "writes.paperid",
            "paper.paperid"
        ]
    },
    {
        "instance_id": "q_294",
        "question": "How many papers were written on Multiuser Receiver in the Decision Feedback this year ?",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Multiuser Receiver in the Decision Feedback\" AND t3.year  =  2016 GROUP BY t3.paperid HAVING COUNT ( DISTINCT t1.keyphrasename )  >  1;",
        "schema_links": [
            "paper.year",
            "keyphrase.keyphrasename",
            "paperkeyphrase.paperid",
            "keyphrase.keyphraseid",
            "paperkeyphrase.keyphraseid",
            "paper.paperid"
        ]
    },
    {
        "instance_id": "q_295",
        "question": "When does Michael Stonebraker publish the first VLDB paper ?",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t3.year FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Michael Stonebraker\" AND t4.venuename  =  \"VLDB\" ORDER BY t3.year;",
        "schema_links": [
            "paper.year",
            "paper.venueid",
            "venue.venuename",
            "author.authorname",
            "author.authorid",
            "writes.authorid",
            "writes.paperid",
            "paper.paperid",
            "venue.venueid"
        ]
    },
    {
        "instance_id": "q_296",
        "question": "semantic parsing dataset",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
        "schema_links": [
            "dataset.datasetid",
            "keyphrase.keyphrasename",
            "paperkeyphrase.paperid",
            "keyphrase.keyphraseid",
            "paperdataset.datasetid",
            "paperkeyphrase.keyphraseid",
            "paperdataset.paperid"
        ]
    },
    {
        "instance_id": "q_297",
        "question": "data sets for semantic parsing",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
        "schema_links": [
            "dataset.datasetid",
            "keyphrase.keyphrasename",
            "paperkeyphrase.paperid",
            "keyphrase.keyphraseid",
            "paperdataset.datasetid",
            "paperkeyphrase.keyphraseid",
            "paperdataset.paperid"
        ]
    },
    {
        "instance_id": "q_309",
        "question": "what was the first deep learning paper ?",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t2.datasetid  ,  t4.year FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN paper AS t4 ON t4.paperid  =  t3.paperid JOIN keyphrase AS t5 ON t1.keyphraseid  =  t5.keyphraseid WHERE t5.keyphrasename  =  \"deep learning\" ORDER BY t4.year ASC;",
        "schema_links": [
            "paper.year",
            "dataset.datasetid",
            "keyphrase.keyphrasename",
            "paperkeyphrase.paperid",
            "keyphrase.keyphraseid",
            "paperdataset.datasetid",
            "paperkeyphrase.keyphraseid",
            "paper.paperid",
            "paperdataset.paperid"
        ]
    },
    {
        "instance_id": "q_311",
        "question": "the papers on semantic parsing by li dong at acl in 2016",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t2.paperid FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN paper AS t2 ON t2.paperid  =  t5.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN writes AS t4 ON t4.paperid  =  t2.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"li dong\" AND t3.keyphrasename  =  \"semantic parsing\" AND t2.year  =  2016 AND t6.venuename  =  \"acl\";",
        "schema_links": [
            "keyphrase.keyphrasename",
            "paperkeyphrase.paperid",
            "writes.paperid",
            "paper.paperid",
            "paper.year",
            "paper.venueid",
            "venue.venuename",
            "author.authorname",
            "author.authorid",
            "keyphrase.keyphraseid",
            "paperkeyphrase.keyphraseid",
            "writes.authorid",
            "venue.venueid"
        ]
    },
    {
        "instance_id": "q_312",
        "question": "who has the most papers in semantic parsing after 2005 ?",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"semantic parsing\" AND t4.year  >  2005 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "schema_links": [
            "paper.year",
            "keyphrase.keyphrasename",
            "paperkeyphrase.paperid",
            "keyphrase.keyphraseid",
            "paperkeyphrase.keyphraseid",
            "writes.authorid",
            "writes.paperid",
            "paper.paperid"
        ]
    },
    {
        "instance_id": "q_315",
        "question": "How many citations does Dan Makumbi 's Genetic Identity paper have ?",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT COUNT ( t5.citingpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t3 ON t2.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t2.paperid JOIN cite AS t5 ON t4.paperid  =  t5.citedpaperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Dan Makumbi\" AND t3.keyphrasename  =  \"Genetic Identity\";",
        "schema_links": [
            "keyphrase.keyphrasename",
            "paperkeyphrase.paperid",
            "writes.paperid",
            "author.authorname",
            "author.authorid",
            "keyphrase.keyphraseid",
            "paperkeyphrase.keyphraseid",
            "cite.citingpaperid",
            "writes.authorid",
            "cite.citedpaperid"
        ]
    },
    {
        "instance_id": "q_316",
        "question": "what topics does oren etzioni write about most ?",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT COUNT ( t2.keyphraseid )  ,  t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"oren etzioni\" GROUP BY t2.keyphraseid ORDER BY COUNT ( t2.keyphraseid ) DESC;",
        "schema_links": [
            "paperkeyphrase.paperid",
            "author.authorname",
            "author.authorid",
            "paperkeyphrase.keyphraseid",
            "writes.authorid",
            "writes.paperid",
            "paper.paperid"
        ]
    },
    {
        "instance_id": "q_317",
        "question": "How many papers related to deep learning cited the dataset ImageNet ?",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT COUNT ( t4.paperid ) FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paper AS t4 ON t4.paperid  =  t3.paperid JOIN paperkeyphrase AS t1 ON t4.paperid  =  t1.paperid JOIN keyphrase AS t5 ON t1.keyphraseid  =  t5.keyphraseid WHERE t2.datasetname  =  \"ImageNet\" AND t5.keyphrasename  =  \"deep learning\";",
        "schema_links": [
            "dataset.datasetid",
            "keyphrase.keyphrasename",
            "paperkeyphrase.paperid",
            "dataset.datasetname",
            "keyphrase.keyphraseid",
            "paperdataset.datasetid",
            "paperkeyphrase.keyphraseid",
            "paper.paperid",
            "paperdataset.paperid"
        ]
    },
    {
        "instance_id": "q_318",
        "question": "most cited papers on parsing",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "schema_links": [
            "keyphrase.keyphrasename",
            "paperkeyphrase.paperid",
            "keyphrase.keyphraseid",
            "paperkeyphrase.keyphraseid",
            "cite.citedpaperid",
            "paper.paperid"
        ]
    },
    {
        "instance_id": "q_330",
        "question": "What is the most cited paper by ohad shamir ?",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "schema_links": [
            "author.authorname",
            "author.authorid",
            "writes.authorid",
            "writes.paperid",
            "cite.citedpaperid",
            "paper.paperid"
        ]
    },
    {
        "instance_id": "q_331",
        "question": "What is the highest cited paper by ohad shamir ?",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "schema_links": [
            "author.authorname",
            "author.authorid",
            "writes.authorid",
            "writes.paperid",
            "cite.citedpaperid",
            "paper.paperid"
        ]
    },
    {
        "instance_id": "q_333",
        "question": "What is ohad shamir 's highest cited paper ?",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "schema_links": [
            "author.authorname",
            "author.authorid",
            "writes.authorid",
            "writes.paperid",
            "cite.citedpaperid",
            "paper.paperid"
        ]
    },
    {
        "instance_id": "q_337",
        "question": "who wrote the most papers for CVPR 2007",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;",
        "schema_links": [
            "paper.year",
            "paper.venueid",
            "venue.venuename",
            "writes.authorid",
            "writes.paperid",
            "paper.paperid",
            "venue.venueid"
        ]
    },
    {
        "instance_id": "q_341",
        "question": "who published the most papers in CVPR 2007",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;",
        "schema_links": [
            "paper.year",
            "paper.venueid",
            "venue.venuename",
            "writes.authorid",
            "writes.paperid",
            "paper.paperid",
            "venue.venueid"
        ]
    },
    {
        "instance_id": "q_351",
        "question": "What is the paper with the most citation about Artificial Intelligence ?",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citingpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"Artificial Intelligence\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citingpaperid ) DESC;",
        "schema_links": [
            "keyphrase.keyphrasename",
            "paperkeyphrase.paperid",
            "keyphrase.keyphraseid",
            "paperkeyphrase.keyphraseid",
            "cite.citingpaperid",
            "cite.citedpaperid",
            "paper.paperid"
        ]
    },
    {
        "instance_id": "q_353",
        "question": "topics at ACL 2014",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2014 AND t4.venuename  =  \"ACL\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;",
        "schema_links": [
            "paper.year",
            "paper.venueid",
            "paperkeyphrase.paperid",
            "venue.venuename",
            "keyphrase.keyphraseid",
            "paperkeyphrase.keyphraseid",
            "paper.paperid",
            "venue.venueid"
        ]
    },
    {
        "instance_id": "q_361",
        "question": "how is the most cited author in CVPR ?",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid JOIN cite AS t4 ON t1.paperid  =  t4.citedpaperid WHERE t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;",
        "schema_links": [
            "paper.venueid",
            "venue.venuename",
            "cite.citingpaperid",
            "writes.authorid",
            "writes.paperid",
            "cite.citedpaperid",
            "paper.paperid",
            "venue.venueid"
        ]
    },
    {
        "instance_id": "q_365",
        "question": "what are syntactic parsing papers not written by chris dyer",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != \"chris dyer\" AND t5.keyphrasename  =  \"syntactic parsing\";",
        "schema_links": [
            "keyphrase.keyphrasename",
            "paperkeyphrase.paperid",
            "author.authorname",
            "author.authorid",
            "keyphrase.keyphraseid",
            "paperkeyphrase.keyphraseid",
            "writes.authorid",
            "writes.paperid",
            "paper.paperid"
        ]
    },
    {
        "instance_id": "q_366",
        "question": "syntactic parsing papers not written by chris dyer",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != \"chris dyer\" AND t5.keyphrasename  =  \"syntactic parsing\";",
        "schema_links": [
            "keyphrase.keyphrasename",
            "paperkeyphrase.paperid",
            "author.authorname",
            "author.authorid",
            "keyphrase.keyphraseid",
            "paperkeyphrase.keyphraseid",
            "writes.authorid",
            "writes.paperid",
            "paper.paperid"
        ]
    },
    {
        "instance_id": "q_367",
        "question": "Who cites Daniel A Reed the most",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT COUNT ( t4.citingpaperid )  ,  t3.authorid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t4 ON t2.paperid  =  t4.citedpaperid JOIN writes AS t3 ON t3.paperid  =  t4.citingpaperid WHERE t1.authorname  =  \"Daniel A Reed\" GROUP BY t3.authorid ORDER BY COUNT ( t4.citingpaperid ) DESC;",
        "schema_links": [
            "author.authorname",
            "author.authorid",
            "cite.citingpaperid",
            "writes.authorid",
            "writes.paperid",
            "cite.citedpaperid"
        ]
    },
    {
        "instance_id": "q_369",
        "question": "Who writes a lot of papers in Machine Learning ?",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename  =  \"Machine Learning\" GROUP BY t1.authorname ORDER BY COUNT ( DISTINCT t3.paperid ) DESC;",
        "schema_links": [
            "keyphrase.keyphrasename",
            "paperkeyphrase.paperid",
            "author.authorname",
            "author.authorid",
            "keyphrase.keyphraseid",
            "paperkeyphrase.keyphraseid",
            "writes.authorid",
            "writes.paperid"
        ]
    },
    {
        "instance_id": "q_378",
        "question": "What authors wrote papers about Bacterial Wilt in 2016 ?",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid JOIN author AS t5 ON t3.authorid  =  t5.authorid WHERE t2.keyphrasename  =  \"Bacterial Wilt\" AND t4.year  =  2016;",
        "schema_links": [
            "paper.year",
            "keyphrase.keyphrasename",
            "paperkeyphrase.paperid",
            "author.authorid",
            "keyphrase.keyphraseid",
            "paperkeyphrase.keyphraseid",
            "writes.authorid",
            "writes.paperid",
            "paper.paperid"
        ]
    },
    {
        "instance_id": "q_380",
        "question": "what keyphrases get most citations ?",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT COUNT ( t3.citingpaperid )  ,  t1.keyphrasename FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN cite AS t3 ON t2.paperid  =  t3.citedpaperid GROUP BY t1.keyphrasename ORDER BY COUNT ( t3.citingpaperid ) DESC;",
        "schema_links": [
            "keyphrase.keyphrasename",
            "paperkeyphrase.paperid",
            "keyphrase.keyphraseid",
            "paperkeyphrase.keyphraseid",
            "cite.citingpaperid",
            "cite.citedpaperid"
        ]
    },
    {
        "instance_id": "q_381",
        "question": "which ACL 2014 papers about Parsing used Jeopardy! Questions ?",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";",
        "schema_links": [
            "keyphrase.keyphrasename",
            "paperkeyphrase.paperid",
            "paperdataset.datasetid",
            "paper.paperid",
            "paper.year",
            "dataset.datasetid",
            "paper.venueid",
            "venue.venuename",
            "dataset.datasetname",
            "keyphrase.keyphraseid",
            "paperkeyphrase.keyphraseid",
            "paperdataset.paperid",
            "venue.venueid"
        ]
    },
    {
        "instance_id": "q_384",
        "question": "Parsing papers from ACL 2014 that used Jeopardy! Questions",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";",
        "schema_links": [
            "keyphrase.keyphrasename",
            "paperkeyphrase.paperid",
            "paperdataset.datasetid",
            "paper.paperid",
            "paper.year",
            "dataset.datasetid",
            "paper.venueid",
            "venue.venuename",
            "dataset.datasetname",
            "keyphrase.keyphraseid",
            "paperkeyphrase.keyphraseid",
            "paperdataset.paperid",
            "venue.venueid"
        ]
    },
    {
        "instance_id": "q_386",
        "question": "which venue publishes the most papers about deep learning",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t4.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"deep learning\" GROUP BY t4.venueid ORDER BY COUNT ( t3.paperid ) DESC;",
        "schema_links": [
            "paper.venueid",
            "keyphrase.keyphrasename",
            "paperkeyphrase.paperid",
            "keyphrase.keyphraseid",
            "paperkeyphrase.keyphraseid",
            "paper.paperid",
            "venue.venueid"
        ]
    },
    {
        "instance_id": "q_387",
        "question": "papers published in eccv 2016 by ali farhadi",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ali farhadi\" AND t3.year  =  2016 AND t4.venuename  =  \"eccv\";",
        "schema_links": [
            "paper.year",
            "paper.venueid",
            "venue.venuename",
            "author.authorname",
            "author.authorid",
            "writes.authorid",
            "writes.paperid",
            "paper.paperid",
            "venue.venueid"
        ]
    },
    {
        "instance_id": "q_390",
        "question": "What are some papers dealing with Semantic Data in YAGO ?",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t1 ON t3.datasetid  =  t1.datasetid JOIN paperkeyphrase AS t2 ON t2.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid WHERE t1.datasetname  =  \"YAGO\" AND t4.keyphrasename  =  \"Semantic Data\";",
        "schema_links": [
            "dataset.datasetid",
            "keyphrase.keyphrasename",
            "paperkeyphrase.paperid",
            "dataset.datasetname",
            "keyphrase.keyphraseid",
            "paperdataset.datasetid",
            "paperkeyphrase.keyphraseid",
            "paperdataset.paperid"
        ]
    },
    {
        "instance_id": "q_391",
        "question": "Who has published more papers in chi ?",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"chi\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t2.paperid ) DESC;",
        "schema_links": [
            "paper.venueid",
            "venue.venuename",
            "writes.authorid",
            "writes.paperid",
            "paper.paperid",
            "venue.venueid"
        ]
    },
    {
        "instance_id": "q_394",
        "question": "who published the most at chi",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"chi\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t2.paperid ) DESC;",
        "schema_links": [
            "paper.venueid",
            "venue.venuename",
            "writes.authorid",
            "writes.paperid",
            "paper.paperid",
            "venue.venueid"
        ]
    },
    {
        "instance_id": "q_395",
        "question": "In what year did Ye Cao publish the most papers",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname LIKE \"Ye Cao\" GROUP BY t3.year ORDER BY COUNT ( DISTINCT t3.paperid ) DESC;",
        "schema_links": [
            "paper.year",
            "author.authorname",
            "author.authorid",
            "writes.authorid",
            "writes.paperid",
            "paper.paperid"
        ]
    },
    {
        "instance_id": "q_397",
        "question": "What are the best NLP conferences ?",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid )  ,  t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"NLP\" GROUP BY t3.venueid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;",
        "schema_links": [
            "paper.venueid",
            "keyphrase.keyphrasename",
            "paperkeyphrase.paperid",
            "keyphrase.keyphraseid",
            "paperkeyphrase.keyphraseid",
            "cite.citingpaperid",
            "cite.citedpaperid",
            "paper.paperid"
        ]
    },
    {
        "instance_id": "q_398",
        "question": "what keyphrase does Brian DeRenzi write about that gets most citations ?",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t1.keyphrasename  ,  SUM ( t3.numcitedby ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Brian DeRenzi\" GROUP BY t1.keyphrasename ORDER BY SUM ( t3.numcitedby ) DESC;",
        "schema_links": [
            "keyphrase.keyphrasename",
            "paperkeyphrase.paperid",
            "writes.paperid",
            "paper.paperid",
            "paper.numcitedby",
            "author.authorname",
            "author.authorid",
            "keyphrase.keyphraseid",
            "paperkeyphrase.keyphraseid",
            "writes.authorid"
        ]
    },
    {
        "instance_id": "q_399",
        "question": "main topics of work by Brian DeRenzi",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t1.keyphrasename  ,  SUM ( t3.numcitedby ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Brian DeRenzi\" GROUP BY t1.keyphrasename ORDER BY SUM ( t3.numcitedby ) DESC;",
        "schema_links": [
            "keyphrase.keyphrasename",
            "paperkeyphrase.paperid",
            "writes.paperid",
            "paper.paperid",
            "paper.numcitedby",
            "author.authorname",
            "author.authorid",
            "keyphrase.keyphraseid",
            "paperkeyphrase.keyphraseid",
            "writes.authorid"
        ]
    },
    {
        "instance_id": "q_400",
        "question": "When was Michael Stonebraker GIS Database published ?",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Michael Stonebraker\" AND t5.keyphrasename  =  \"GIS Database\";",
        "schema_links": [
            "keyphrase.keyphrasename",
            "paperkeyphrase.paperid",
            "writes.paperid",
            "paper.paperid",
            "paper.year",
            "author.authorname",
            "author.authorid",
            "keyphrase.keyphraseid",
            "paperkeyphrase.keyphraseid",
            "writes.authorid"
        ]
    },
    {
        "instance_id": "q_403",
        "question": "What is the most popular paper this year in CVPR ?",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2016 AND t2.venuename  =  \"CVPR\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citingpaperid ) DESC;",
        "schema_links": [
            "paper.year",
            "paper.venueid",
            "venue.venuename",
            "cite.citingpaperid",
            "cite.citedpaperid",
            "paper.paperid",
            "venue.venueid"
        ]
    },
    {
        "instance_id": "q_404",
        "question": "How many citations does luke zettlemoyer have per year",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT COUNT ( t4.citedpaperid )  ,  t3.year FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"luke zettlemoyer\" GROUP BY t3.year;",
        "schema_links": [
            "paper.year",
            "author.authorname",
            "author.authorid",
            "writes.authorid",
            "writes.paperid",
            "cite.citedpaperid",
            "paper.paperid"
        ]
    },
    {
        "instance_id": "q_405",
        "question": "authors working on ImageNet",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t1 ON t3.datasetid  =  t1.datasetid JOIN paper AS t4 ON t4.paperid  =  t3.paperid JOIN writes AS t2 ON t2.paperid  =  t4.paperid WHERE t1.datasetname  =  \"ImageNet\" GROUP BY t2.paperid;",
        "schema_links": [
            "dataset.datasetid",
            "dataset.datasetname",
            "paperdataset.datasetid",
            "writes.paperid",
            "paper.paperid",
            "paperdataset.paperid"
        ]
    },
    {
        "instance_id": "q_406",
        "question": "Eric C. Kerrigan 's Liquid Automatica paper",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t2.paperid FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t5.paperid JOIN paper AS t2 ON t4.paperid  =  t2.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid JOIN venue AS t6 ON t6.venueid  =  t2.venueid WHERE t1.authorname  =  \"Eric C. Kerrigan\" AND t3.keyphrasename  =  \"Liquid\" AND t6.venuename  =  \"Automatica\";",
        "schema_links": [
            "keyphrase.keyphrasename",
            "paperkeyphrase.paperid",
            "writes.paperid",
            "paper.paperid",
            "paper.venueid",
            "venue.venuename",
            "author.authorname",
            "author.authorid",
            "keyphrase.keyphraseid",
            "paperkeyphrase.keyphraseid",
            "writes.authorid",
            "venue.venueid"
        ]
    },
    {
        "instance_id": "q_407",
        "question": "keyphrases used by dan klein in his emnlp papers",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid JOIN writes AS t5 ON t5.paperid  =  t3.paperid JOIN author AS t1 ON t5.authorid  =  t1.authorid WHERE t1.authorname  =  \"dan klein\" AND t4.venuename  =  \"emnlp\";",
        "schema_links": [
            "paper.venueid",
            "paperkeyphrase.paperid",
            "venue.venuename",
            "author.authorname",
            "author.authorid",
            "paperkeyphrase.keyphraseid",
            "writes.authorid",
            "writes.paperid",
            "paper.paperid",
            "venue.venueid"
        ]
    },
    {
        "instance_id": "q_409",
        "question": "the papers at eccv in 2014 using ImageNet dataset",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t3.year  =  2014 AND t4.venuename  =  \"eccv\";",
        "schema_links": [
            "paper.year",
            "dataset.datasetid",
            "paper.venueid",
            "venue.venuename",
            "dataset.datasetname",
            "paperdataset.datasetid",
            "paper.paperid",
            "paperdataset.paperid",
            "venue.venueid"
        ]
    },
    {
        "instance_id": "q_410",
        "question": "which papers in eccv 2014 use ImageNet ?",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t3.year  =  2014 AND t4.venuename  =  \"eccv\";",
        "schema_links": [
            "dataset.datasetname",
            "paper.paperid",
            "paper.year",
            "venue.venuename"
        ]
    },
    {
        "instance_id": "q_412",
        "question": "Euclidean Distance papers citing NIPS papers",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t5.citingpaperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN cite AS t5 ON t2.paperid  =  t5.citingpaperid JOIN paper AS t3 ON t3.paperid  =  t5.citedpaperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Euclidean Distance\" AND t4.venuename  =  \"NIPS\";",
        "schema_links": [
            "paperkeyphrase.keyphraseid",
            "keyphrase.keyphraseid",
            "paperkeyphrase.paperid",
            "cite.citingpaperid",
            "paper.paperid",
            "cite.citedpaperid",
            "venue.venueid",
            "paper.venueid",
            "keyphrase.keyphrasename",
            "venue.venuename"
        ]
    },
    {
        "instance_id": "q_415",
        "question": "What was the topic of best paper in 2012 EMNLP-CoNLL ?",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid )  ,  t1.keyphraseid  ,  t2.paperid FROM paper AS t2 JOIN cite AS t4 ON t2.paperid  =  t4.citedpaperid JOIN paperkeyphrase AS t1 ON t2.paperid  =  t1.paperid JOIN venue AS t3 ON t3.venueid  =  t2.venueid WHERE t2.year  =  2012 AND t3.venuename  =  \"EMNLP-CoNLL\" GROUP BY t2.paperid  ,  t1.keyphraseid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;",
        "schema_links": [
            "paper.year",
            "paper.venueid",
            "paperkeyphrase.paperid",
            "venue.venuename",
            "paperkeyphrase.keyphraseid",
            "cite.citingpaperid",
            "cite.citedpaperid",
            "paper.paperid",
            "venue.venueid"
        ]
    },
    {
        "instance_id": "q_417",
        "question": "Number of ACL papers with more than 2 citations",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  >  2;",
        "schema_links": [
            "paper.venueid",
            "venue.venuename",
            "cite.citingpaperid",
            "cite.citedpaperid",
            "paper.paperid",
            "venue.venueid"
        ]
    },
    {
        "instance_id": "q_418",
        "question": "What is the name of Eric C. Kerrigan 's Liquid Automatica paper ?",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t2.title FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t5.paperid JOIN paper AS t2 ON t4.paperid  =  t2.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid JOIN venue AS t6 ON t6.venueid  =  t2.venueid WHERE t1.authorname LIKE \"Eric C. Kerrigan\" AND t3.keyphrasename  =  \"Liquid\" AND t6.venuename  =  \"Automatica\";",
        "schema_links": [
            "keyphrase.keyphrasename",
            "paperkeyphrase.paperid",
            "writes.paperid",
            "paper.paperid",
            "paper.venueid",
            "venue.venuename",
            "author.authorname",
            "author.authorid",
            "keyphrase.keyphraseid",
            "paperkeyphrase.keyphraseid",
            "writes.authorid",
            "paper.title",
            "venue.venueid"
        ]
    },
    {
        "instance_id": "q_419",
        "question": "How many papers used ImageNet datasets in cvpr ?",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t4.venuename  =  \"cvpr\";",
        "schema_links": [
            "dataset.datasetid",
            "paper.venueid",
            "venue.venuename",
            "dataset.datasetname",
            "paperdataset.datasetid",
            "paper.paperid",
            "paperdataset.paperid",
            "venue.venueid"
        ]
    },
    {
        "instance_id": "q_420",
        "question": "I want the co-authors of papers on Machine Translation Output with Philipp Koehn",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t1.authorid FROM paperkeyphrase AS t6 JOIN keyphrase AS t3 ON t6.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t6.paperid JOIN writes AS t5 ON t5.paperid  =  t4.paperid JOIN author AS t1 ON t5.authorid  =  t1.authorid JOIN author AS t2 ON t4.authorid  =  t2.authorid WHERE t2.authorname  =  \"Philipp Koehn\" AND t3.keyphrasename  =  \"Machine Translation Output\";",
        "schema_links": [
            "keyphrase.keyphrasename",
            "paperkeyphrase.paperid",
            "author.authorname",
            "author.authorid",
            "keyphrase.keyphraseid",
            "paperkeyphrase.keyphraseid",
            "writes.authorid",
            "writes.paperid"
        ]
    },
    {
        "instance_id": "q_422",
        "question": "which journal did Donald E Knuth publish his last paper ?",
        "db_id": "academic_insight",
        "query": "SELECT DISTINCT t3.journalid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Donald E Knuth\" GROUP BY t3.journalid  ,  t3.year ORDER BY t3.year DESC;",
        "schema_links": [
            "paper.year",
            "paper.journalid",
            "author.authorname",
            "author.authorid",
            "writes.authorid",
            "writes.paperid",
            "paper.paperid"
        ]
    },
    {
        "instance_id": "q_426",
        "question": "List all the reviews by Michelle for Italian restaurant",
        "db_id": "business_hub",
        "query": "SELECT t4.text FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN review AS t4 ON t4.business_id  =  t1.business_id JOIN USER AS t5 ON t5.user_id  =  t4.user_id WHERE t2.category_name  =  \"Italian\" AND t3.category_name  =  \"category_category_name1\" AND t5.name  =  \"Michelle\";",
        "schema_links": [
            "category.category_name",
            "review.user_id",
            "review.business_id",
            "USER.name",
            "business.business_id",
            "user.name",
            "category.business_id",
            "USER.user_id",
            "review.text",
            "user.user_id"
        ]
    },
    {
        "instance_id": "q_427",
        "question": "find the number of reviews written for \" Cafe Zinho \" restaurant in Texas",
        "db_id": "business_hub",
        "query": "SELECT COUNT ( DISTINCT t3.text ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"restaurant\";",
        "schema_links": [
            "category.category_name",
            "review.business_id",
            "business.name",
            "business.business_id",
            "business.state",
            "category.business_id",
            "review.text"
        ]
    },
    {
        "instance_id": "q_428",
        "question": "List all the neighbourhoods with Italian restaurant in Madison",
        "db_id": "business_hub",
        "query": "SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id  =  t2.business_id JOIN category AS t4 ON t4.business_id  =  t2.business_id JOIN neighbourhood AS t1 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" AND t3.category_name  =  \"Italian\" AND t4.category_name  =  \"restaurant\";",
        "schema_links": [
            "category.category_name",
            "business.business_id",
            "category.business_id",
            "neighbourhood.business_id",
            "business.city",
            "neighbourhood.neighbourhood_name"
        ]
    },
    {
        "instance_id": "q_429",
        "question": "List all the neighbourhoods with Italian restaurant rated less than 2.5 in Madison",
        "db_id": "business_hub",
        "query": "SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id  =  t2.business_id JOIN category AS t4 ON t4.business_id  =  t2.business_id JOIN neighbourhood AS t1 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" AND t2.rating  <  2.5 AND t3.category_name  =  \"Italian\" AND t4.category_name  =  \"restaurant\";",
        "schema_links": [
            "category.category_name",
            "business.rating",
            "business.business_id",
            "category.business_id",
            "neighbourhood.business_id",
            "business.city",
            "neighbourhood.neighbourhood_name"
        ]
    },
    {
        "instance_id": "q_430",
        "question": "Find all users who reviewed restaurant \" Mesa Grill \"",
        "db_id": "business_hub",
        "query": "SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.name  =  \"Mesa Grill\" AND t2.category_name  =  \"restaurant\";",
        "schema_links": [
            "category.category_name",
            "review.user_id",
            "review.business_id",
            "USER.name",
            "business.name",
            "business.business_id",
            "user.name",
            "category.business_id",
            "USER.user_id",
            "user.user_id"
        ]
    },
    {
        "instance_id": "q_431",
        "question": "Find all restaurant reviewed by Patrick in \" Dallas \"",
        "db_id": "business_hub",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t2.category_name  =  \"restaurant\" AND t4.name  =  \"Patrick\";",
        "schema_links": [
            "category.business_id",
            "business.business_id",
            "business.name",
            "business.city",
            "category.category_name",
            "review.business_id",
            "user.user_id",
            "user.name"
        ]
    },
    {
        "instance_id": "q_433",
        "question": "Find all Bars reviewed by Patrick",
        "db_id": "business_hub",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  \"Bars\" AND t4.name  =  \"Patrick\";",
        "schema_links": [
            "category.category_name",
            "review.user_id",
            "review.business_id",
            "USER.name",
            "business.name",
            "business.business_id",
            "user.name",
            "category.business_id",
            "USER.user_id",
            "user.user_id"
        ]
    },
    {
        "instance_id": "q_434",
        "question": "Find all Bars reviewed by Patrick with at least 3 stars",
        "db_id": "business_hub",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.rating  >=  3 AND t2.category_name  =  \"Bars\" AND t4.name  =  \"Patrick\";",
        "schema_links": [
            "category.category_name",
            "review.user_id",
            "review.business_id",
            "business.rating",
            "business.name",
            "USER.name",
            "business.business_id",
            "user.name",
            "category.business_id",
            "USER.user_id",
            "user.user_id"
        ]
    },
    {
        "instance_id": "q_435",
        "question": "Find all restaurant Seafood in Los Angeles",
        "db_id": "business_hub",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Seafood\" AND t3.category_name  =  \"restaurant\";",
        "schema_links": [
            "category.category_name",
            "business.name",
            "business.business_id",
            "category.business_id",
            "business.city"
        ]
    },
    {
        "instance_id": "q_436",
        "question": "List all the Seafood restaurant in \" Los Angeles \"",
        "db_id": "business_hub",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Seafood\" AND t3.category_name  =  \"restaurant\";",
        "schema_links": [
            "category.category_name",
            "business.name",
            "business.business_id",
            "category.business_id",
            "business.city"
        ]
    },
    {
        "instance_id": "q_438",
        "question": "What neighbourhood is restaurant \" Flat Top Grill \" in ?",
        "db_id": "business_hub",
        "query": "SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id  =  t2.business_id JOIN neighbourhood AS t1 ON t1.business_id  =  t2.business_id WHERE t2.name  =  \"Flat Top Grill\" AND t3.category_name  =  \"category_category_name0\";",
        "schema_links": [
            "category.category_name",
            "business.name",
            "business.business_id",
            "category.business_id",
            "neighbourhood.business_id",
            "neighbourhood.neighbourhood_name"
        ]
    },
    {
        "instance_id": "q_439",
        "question": "List all users who reviewed businesses that are restaurant in 2010 .",
        "db_id": "business_hub",
        "query": "SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  \"restaurant\" AND t3.year  =  2010;",
        "schema_links": [
            "category.category_name",
            "review.user_id",
            "review.business_id",
            "USER.name",
            "business.business_id",
            "user.name",
            "category.business_id",
            "review.year",
            "USER.user_id",
            "user.user_id"
        ]
    },
    {
        "instance_id": "q_440",
        "question": "find the total checkins in Moroccan restaurant in \" Los Angeles \"",
        "db_id": "business_hub",
        "query": "SELECT SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN checkin AS t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"restaurant\" AND t3.category_name  =  \"Moroccan\";",
        "schema_links": [
            "category.category_name",
            "business.business_id",
            "category.business_id",
            "business.city",
            "checkin.business_id",
            "checkin.count"
        ]
    },
    {
        "instance_id": "q_441",
        "question": "find the total checkins in Moroccan restaurant in \" Los Angeles \" on Friday",
        "db_id": "business_hub",
        "query": "SELECT SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN checkin AS t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Moroccan\" AND t3.category_name  =  \"restaurant\" AND t4.day  =  \"Friday\";",
        "schema_links": [
            "category.category_name",
            "checkin.day",
            "business.business_id",
            "category.business_id",
            "business.city",
            "checkin.business_id",
            "checkin.count"
        ]
    },
    {
        "instance_id": "q_442",
        "question": "find the total checkins in Moroccan restaurant in \" Los Angeles \" per day",
        "db_id": "business_hub",
        "query": "SELECT t4.day  ,  SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN checkin AS t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Moroccan\" AND t3.category_name  =  \"restaurant\" GROUP BY t4.day;",
        "schema_links": [
            "category.category_name",
            "checkin.day",
            "business.business_id",
            "category.business_id",
            "business.city",
            "checkin.business_id",
            "checkin.count"
        ]
    },
    {
        "instance_id": "q_443",
        "question": "find the total checkins in Italian Delis in each state on Sunday",
        "db_id": "business_hub",
        "query": "SELECT t1.state  ,  SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN checkin AS t4 ON t4.business_id  =  t1.business_id WHERE t2.category_name  =  \"Italian\" AND t3.category_name  =  \"Delis\" AND t4.day  =  \"Sunday\" GROUP BY t1.state;",
        "schema_links": [
            "category.category_name",
            "checkin.day",
            "business.business_id",
            "business.state",
            "category.business_id",
            "checkin.business_id",
            "checkin.count"
        ]
    },
    {
        "instance_id": "q_444",
        "question": "How many people reviewed the restaurant \" Texas de Brazil \" in Dallas Texas ?",
        "db_id": "business_hub",
        "query": "SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t1.name  =  \"Texas de Brazil\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"restaurant\";",
        "schema_links": [
            "category.category_name",
            "review.user_id",
            "review.business_id",
            "USER.name",
            "business.name",
            "business.business_id",
            "business.state",
            "category.business_id",
            "USER.user_id",
            "business.city",
            "user.user_id"
        ]
    },
    {
        "instance_id": "q_445",
        "question": "How many restaurant are there in the Hazelwood district of Dallas ?",
        "db_id": "business_hub",
        "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t3 JOIN business AS t1 ON t3.business_id  =  t1.business_id JOIN neighbourhood AS t2 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t3.category_name  =  \"restaurant\" AND t2.neighbourhood_name  =  \"Hazelwood\";",
        "schema_links": [
            "category.category_name",
            "business.name",
            "business.business_id",
            "category.business_id",
            "neighbourhood.business_id",
            "business.city",
            "neighbourhood.neighbourhood_name"
        ]
    },
    {
        "instance_id": "q_446",
        "question": "Find the average number of checkins in restaurant \" Barrio Cafe \" per day",
        "db_id": "business_hub",
        "query": "SELECT AVG ( t3.count )  ,  t3.day FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN checkin AS t3 ON t3.business_id  =  t1.business_id WHERE t1.name  =  \"Barrio Cafe\" AND t2.category_name  =  \"restaurant\" GROUP BY t3.day;",
        "schema_links": [
            "category.category_name",
            "business.name",
            "checkin.day",
            "business.business_id",
            "category.business_id",
            "checkin.business_id",
            "checkin.count"
        ]
    },
    {
        "instance_id": "q_447",
        "question": "How many users have reviewed Irish Pub in Dallas ?",
        "db_id": "business_hub",
        "query": "SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t2.category_name  =  \"Irish Pub\";",
        "schema_links": [
            "category.category_name",
            "review.user_id",
            "review.business_id",
            "USER.name",
            "business.business_id",
            "user.name",
            "category.business_id",
            "USER.user_id",
            "business.city",
            "user.user_id"
        ]
    },
    {
        "instance_id": "q_448",
        "question": "How many people reviewed restaurant \" Vintner Grill \" in 2010 ?",
        "db_id": "business_hub",
        "query": "SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.name  =  \"Vintner Grill\" AND t2.category_name  =  \"category_category_name0\" AND t3.year  =  2010;",
        "schema_links": [
            "review.user_id",
            "review.business_id",
            "USER.name",
            "business.name",
            "business.business_id",
            "USER.user_id",
            "user.user_id",
            "category.category_name",
            "category.business_id",
            "review.year"
        ]
    },
    {
        "instance_id": "q_449",
        "question": "Find all Mexican restaurant in Dallas with at least 3.5 stars",
        "db_id": "business_hub",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  3.5 AND t2.category_name  =  \"Mexican\" AND t3.category_name  =  \"restaurant\";",
        "schema_links": [
            "category.category_name",
            "business.rating",
            "business.name",
            "business.business_id",
            "category.business_id",
            "business.city"
        ]
    },
    {
        "instance_id": "q_451",
        "question": "Find all restaurant with Valet Service in Dallas Texas",
        "db_id": "business_hub",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"Valet Service\" AND t3.category_name  =  \"restaurant\";",
        "schema_links": [
            "category.category_name",
            "business.name",
            "business.business_id",
            "business.state",
            "category.business_id",
            "business.city"
        ]
    },
    {
        "instance_id": "q_454",
        "question": "return me the keywords in the papers of \" University of Michigan \" .",
        "db_id": "academic_network",
        "query": "SELECT t1.keyword FROM organization AS t6 JOIN author AS t2 ON t6.oid  =  t2.oid JOIN writes AS t4 ON t4.aid  =  t2.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN publication_keyword AS t3 ON t5.pid  =  t3.pid JOIN keyword AS t1 ON t3.kid  =  t1.kid WHERE t6.name  =  \"University of Michigan\";",
        "schema_links": [
            "writes.pid",
            "publication.pid",
            "organization.oid",
            "keyword.keyword",
            "publication_keyword.pid",
            "keyword.kid",
            "publication_keyword.kid",
            "author.aid",
            "author.oid",
            "organization.name",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_455",
        "question": "return me the papers of \" H. V. Jagadish \" containing keyword \" User Study \" .",
        "db_id": "academic_network",
        "query": "SELECT t5.title FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t5 ON t5.pid  =  t3.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.keyword  =  \"User Study\";",
        "schema_links": [
            "keyword.kid",
            "publication_keyword.kid",
            "writes.pid",
            "author.name",
            "publication.pid",
            "publication_keyword.pid",
            "publication.title",
            "author.aid",
            "keyword.keyword",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_456",
        "question": "return me the authors who have papers containing keyword \" Relational Database \" .",
        "db_id": "academic_network",
        "query": "SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  \"Relational Database\";",
        "schema_links": [
            "keyword.kid",
            "publication_keyword.kid",
            "writes.pid",
            "author.name",
            "publication.pid",
            "publication_keyword.pid",
            "author.aid",
            "keyword.keyword",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_457",
        "question": "return me all the papers in VLDB conference in \" University of Michigan \" .",
        "db_id": "academic_network",
        "query": "SELECT t5.title FROM organization AS t3 JOIN author AS t1 ON t3.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN conference AS t2 ON t5.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" AND t3.name  =  \"University of Michigan\";",
        "schema_links": [
            "writes.pid",
            "conference.name",
            "publication.cid",
            "publication.pid",
            "publication.title",
            "organization.oid",
            "author.aid",
            "author.oid",
            "conference.cid",
            "organization.name",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_458",
        "question": "return me all the papers in PVLDB in \" University of Michigan \" .",
        "db_id": "academic_network",
        "query": "SELECT t5.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t2.name  =  \"University of Michigan\";",
        "schema_links": [
            "writes.pid",
            "publication.pid",
            "publication.jid",
            "publication.title",
            "organization.oid",
            "author.aid",
            "journal.jid",
            "author.oid",
            "journal.name",
            "organization.name",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_459",
        "question": "return me all the papers in PVLDB after 2000 in \" University of Michigan \" .",
        "db_id": "academic_network",
        "query": "SELECT t5.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t2.name  =  \"University of Michigan\" AND t5.year  >  2000;",
        "schema_links": [
            "writes.pid",
            "publication.pid",
            "publication.jid",
            "publication.title",
            "publication.year",
            "organization.oid",
            "author.aid",
            "journal.jid",
            "author.oid",
            "journal.name",
            "organization.name",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_460",
        "question": "return me the number of papers by \" H. V. Jagadish \" on PVLDB after 2000 .",
        "db_id": "academic_network",
        "query": "SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"PVLDB\" AND t4.year  >  2000;",
        "schema_links": [
            "writes.pid",
            "publication.pid",
            "publication.jid",
            "publication.title",
            "publication.year",
            "author.name",
            "journal.jid",
            "journal.name",
            "author.aid",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_461",
        "question": "return me the number of papers by \" H. V. Jagadish \" on VLDB conference after 2000 .",
        "db_id": "academic_network",
        "query": "SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"VLDB\" AND t4.year  >  2000;",
        "schema_links": [
            "writes.pid",
            "conference.name",
            "publication.cid",
            "publication.pid",
            "publication.title",
            "publication.year",
            "author.name",
            "conference.cid",
            "author.aid",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_462",
        "question": "return me the number of the keywords related to \" H. V. Jagadish \" .",
        "db_id": "academic_network",
        "query": "SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\";",
        "schema_links": [
            "keyword.kid",
            "publication_keyword.kid",
            "writes.pid",
            "author.name",
            "keyword.keyword",
            "publication.pid",
            "author.aid",
            "publication_keyword.pid",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_463",
        "question": "return me the number of keywords in the papers of \" University of Michigan \" .",
        "db_id": "academic_network",
        "query": "SELECT COUNT ( DISTINCT t1.keyword ) FROM organization AS t6 JOIN author AS t2 ON t6.oid  =  t2.oid JOIN writes AS t4 ON t4.aid  =  t2.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN publication_keyword AS t3 ON t5.pid  =  t3.pid JOIN keyword AS t1 ON t3.kid  =  t1.kid WHERE t6.name  =  \"University of Michigan\";",
        "schema_links": [
            "keyword.kid",
            "publication_keyword.kid",
            "writes.pid",
            "publication.pid",
            "publication_keyword.pid",
            "author.aid",
            "organization.oid",
            "author.oid",
            "organization.name",
            "keyword.keyword",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_465",
        "question": "return me the number of papers in PVLDB containing keyword \" Keyword search \" .",
        "db_id": "academic_network",
        "query": "SELECT COUNT ( DISTINCT t4.title ) FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t4 ON t4.pid  =  t2.pid JOIN journal AS t3 ON t4.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t1.keyword  =  \"Keyword search\";",
        "schema_links": [
            "keyword.kid",
            "publication_keyword.kid",
            "publication.pid",
            "publication_keyword.pid",
            "publication.jid",
            "publication.title",
            "journal.jid",
            "journal.name",
            "keyword.keyword"
        ]
    },
    {
        "instance_id": "q_466",
        "question": "return me the number of papers in VLDB conference containing keyword \" Information Retrieval \" .",
        "db_id": "academic_network",
        "query": "SELECT COUNT ( DISTINCT t4.title ) FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t4 ON t4.pid  =  t3.pid JOIN conference AS t2 ON t4.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" AND t1.keyword  =  \"Information Retrieval\";",
        "schema_links": [
            "keyword.kid",
            "publication_keyword.kid",
            "conference.name",
            "publication.cid",
            "publication.pid",
            "publication_keyword.pid",
            "publication.title",
            "conference.cid",
            "keyword.keyword"
        ]
    },
    {
        "instance_id": "q_467",
        "question": "return me the number of authors who have papers containing keyword \" Relational Database \" .",
        "db_id": "academic_network",
        "query": "SELECT COUNT ( DISTINCT t2.name ) FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  \"Relational Database\";",
        "schema_links": [
            "keyword.kid",
            "publication_keyword.kid",
            "writes.pid",
            "author.name",
            "keyword.keyword",
            "publication.pid",
            "author.aid",
            "publication_keyword.pid",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_468",
        "question": "return me the number of papers in \" University of Michigan \" in Databases area .",
        "db_id": "academic_network",
        "query": "SELECT COUNT ( DISTINCT t4.title ) FROM domain_author AS t6 JOIN author AS t1 ON t6.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t6.did JOIN domain_publication AS t2 ON t3.did  =  t2.did JOIN organization AS t5 ON t5.oid  =  t1.oid JOIN publication AS t4 ON t4.pid  =  t2.pid WHERE t3.name  =  \"Databases\" AND t5.name  =  \"University of Michigan\";",
        "schema_links": [
            "DOMAIN.did",
            "publication.pid",
            "domain_publication.pid",
            "publication.title",
            "organization.oid",
            "domain_author.aid",
            "domain_publication.did",
            "author.aid",
            "DOMAIN.name",
            "domain_author.did",
            "author.oid",
            "organization.name"
        ]
    },
    {
        "instance_id": "q_469",
        "question": "return me the number of papers in VLDB conference in \" University of Michigan \" .",
        "db_id": "academic_network",
        "query": "SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t3 JOIN author AS t1 ON t3.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN conference AS t2 ON t5.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" AND t3.name  =  \"University of Michigan\";",
        "schema_links": [
            "writes.pid",
            "conference.name",
            "publication.cid",
            "publication.pid",
            "publication.title",
            "organization.oid",
            "author.aid",
            "conference.cid",
            "author.oid",
            "organization.name",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_470",
        "question": "return me the number of papers in PVLDB in \" University of Michigan \" .",
        "db_id": "academic_network",
        "query": "SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t2.name  =  \"University of Michigan\";",
        "schema_links": [
            "writes.pid",
            "publication.pid",
            "publication.jid",
            "author.aid",
            "publication.title",
            "journal.jid",
            "organization.oid",
            "author.oid",
            "journal.name",
            "organization.name",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_471",
        "question": "return me the number of papers in PVLDB after 2000 in \" University of Michigan \" .",
        "db_id": "academic_network",
        "query": "SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t2.name  =  \"University of Michigan\" AND t5.year  >  2000;",
        "schema_links": [
            "writes.pid",
            "publication.pid",
            "publication.jid",
            "publication.title",
            "publication.year",
            "organization.oid",
            "author.aid",
            "journal.jid",
            "author.oid",
            "journal.name",
            "organization.name",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_472",
        "question": "return me the number of researchers in Databases area in \" University of Michigan \" .",
        "db_id": "academic_network",
        "query": "SELECT COUNT ( DISTINCT t1.name ) FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\" AND t2.name  =  \"University of Michigan\";",
        "schema_links": [
            "domain.did",
            "author.name",
            "organization.name",
            "DOMAIN.did",
            "domain.name",
            "organization.oid",
            "DOMAIN.name",
            "domain_author.did",
            "domain_author.aid",
            "author.oid",
            "author.aid"
        ]
    },
    {
        "instance_id": "q_473",
        "question": "return me the authors who have cooperated both with \" H. V. Jagadish \" and \" Divesh Srivastava \" .",
        "db_id": "academic_network",
        "query": "SELECT t2.name FROM writes AS t4 JOIN author AS t2 ON t4.aid  =  t2.aid JOIN publication AS t7 ON t4.pid  =  t7.pid JOIN writes AS t5 ON t5.pid  =  t7.pid JOIN writes AS t6 ON t6.pid  =  t7.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t3 ON t6.aid  =  t3.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t3.name  =  \"Divesh Srivastava\";",
        "schema_links": [
            "writes.pid",
            "author.name",
            "publication.pid",
            "author.aid",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_474",
        "question": "return me the papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" .",
        "db_id": "academic_network",
        "query": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\";",
        "schema_links": [
            "writes.pid",
            "author.name",
            "publication.pid",
            "publication.title",
            "author.aid",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_475",
        "question": "return me the papers written by \" H. V. Jagadish \" and \" Yunyao Li \" after 2005 .",
        "db_id": "academic_network",
        "query": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Yunyao Li\" AND t5.year  >  2005;",
        "schema_links": [
            "writes.pid",
            "author.name",
            "publication.pid",
            "publication.title",
            "publication.year",
            "author.aid",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_476",
        "question": "return me the papers written by \" H. V. Jagadish \" and \" Yunyao Li \" on PVLDB .",
        "db_id": "academic_network",
        "query": "SELECT t6.title FROM publication AS t6 JOIN journal AS t4 ON t6.jid  =  t4.jid JOIN writes AS t3 ON t3.pid  =  t6.pid JOIN writes AS t5 ON t5.pid  =  t6.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t2 ON t3.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Yunyao Li\" AND t4.name  =  \"PVLDB\";",
        "schema_links": [
            "writes.pid",
            "author.name",
            "publication.pid",
            "publication.jid",
            "publication.title",
            "journal.jid",
            "journal.name",
            "author.aid",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_479",
        "question": "return me the authors who have cited the papers by \" H. V. Jagadish \" .",
        "db_id": "academic_network",
        "query": "SELECT t2.name FROM publication AS t7 JOIN cite AS t5 ON t7.pid  =  t5.citing JOIN publication AS t6 ON t6.pid  =  t5.cited JOIN writes AS t3 ON t3.pid  =  t7.pid JOIN writes AS t4 ON t4.pid  =  t6.pid JOIN author AS t2 ON t3.aid  =  t2.aid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";",
        "schema_links": [
            "writes.pid",
            "author.name",
            "publication.pid",
            "cite.cited",
            "author.aid",
            "cite.citing",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_480",
        "question": "return me the number of papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" .",
        "db_id": "academic_network",
        "query": "SELECT COUNT ( DISTINCT t5.title ) FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\";",
        "schema_links": [
            "writes.pid",
            "author.name",
            "publication.pid",
            "publication.title",
            "author.aid",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_482",
        "question": "return me the number of papers written by \" H. V. Jagadish \" , \" Yunyao Li \" , and \" Cong Yu \" .",
        "db_id": "academic_network",
        "query": "SELECT COUNT ( DISTINCT t7.title ) FROM writes AS t4 JOIN author AS t2 ON t4.aid  =  t2.aid JOIN publication AS t7 ON t4.pid  =  t7.pid JOIN writes AS t5 ON t5.pid  =  t7.pid JOIN writes AS t6 ON t6.pid  =  t7.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t3 ON t6.aid  =  t3.aid WHERE t2.name  =  \"Cong Yu\" AND t1.name  =  \"H. V. Jagadish\" AND t3.name  =  \"Yunyao Li\";",
        "schema_links": [
            "writes.pid",
            "author.name",
            "publication.pid",
            "publication.title",
            "author.aid",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_484",
        "question": "return me the papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" with more than 200 citations .",
        "db_id": "academic_network",
        "query": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\" AND t5.citation_num  >  200;",
        "schema_links": [
            "writes.pid",
            "publication.citation_num",
            "author.name",
            "publication.pid",
            "publication.title",
            "author.aid",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_485",
        "question": "return me the author who has the most number of papers containing keyword \" Relational Database \" .",
        "db_id": "academic_network",
        "query": "SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;",
        "schema_links": [
            "writes.pid",
            "publication.pid",
            "publication.title",
            "keyword.keyword",
            "publication_keyword.pid",
            "keyword.kid",
            "publication_keyword.kid",
            "author.name",
            "author.aid",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_488",
        "question": "return me the journal that has the most number of papers containing keyword \" Relational Database \" .",
        "db_id": "academic_network",
        "query": "SELECT t3.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t3.name ORDER BY COUNT ( DISTINCT t2.title ) DESC LIMIT 1;",
        "schema_links": [
            "publication.pid",
            "publication.jid",
            "publication.title",
            "publication_keyword.pid",
            "keyword.keyword",
            "keyword.kid",
            "publication_keyword.kid",
            "journal.jid",
            "journal.name"
        ]
    },
    {
        "instance_id": "q_489",
        "question": "return me the journal, which has the most number of papers containing keyword \" Relational Database \" .",
        "db_id": "academic_network",
        "query": "SELECT t3.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t3.name ORDER BY COUNT ( DISTINCT t2.title ) DESC LIMIT 1;",
        "schema_links": [
            "keyword.kid",
            "publication_keyword.kid",
            "keyword.keyword",
            "publication.pid",
            "publication.jid",
            "journal.jid",
            "publication.title",
            "journal.name",
            "publication_keyword.pid"
        ]
    },
    {
        "instance_id": "q_490",
        "question": "return me the keyword, which have been contained by the most number of papers in VLDB conference .",
        "db_id": "academic_network",
        "query": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" GROUP BY t1.keyword ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;",
        "schema_links": [
            "keyword.kid",
            "publication_keyword.kid",
            "conference.name",
            "keyword.keyword",
            "publication.cid",
            "publication.pid",
            "publication.title",
            "conference.cid",
            "publication_keyword.pid"
        ]
    },
    {
        "instance_id": "q_491",
        "question": "return me the keyword, which have been contained by the most number of papers in PVLDB .",
        "db_id": "academic_network",
        "query": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" GROUP BY t1.keyword ORDER BY COUNT ( DISTINCT t2.title ) DESC LIMIT 1;",
        "schema_links": [
            "keyword.kid",
            "publication_keyword.kid",
            "keyword.keyword",
            "publication.pid",
            "publication.jid",
            "journal.jid",
            "publication.title",
            "journal.name",
            "publication_keyword.pid"
        ]
    },
    {
        "instance_id": "q_493",
        "question": "return me the author in the \" University of Michigan \" whose papers have the most total citations .",
        "db_id": "academic_network",
        "query": "SELECT t1.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\" GROUP BY t1.name ORDER BY SUM ( t4.citation_num ) DESC LIMIT 1;",
        "schema_links": [
            "writes.pid",
            "author.name",
            "publication.citation_num",
            "organization.name",
            "publication.pid",
            "organization.oid",
            "author.oid",
            "author.aid",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_494",
        "question": "return me the author in the \" University of Michigan \" whose papers in Databases area have the most total citations .",
        "db_id": "academic_network",
        "query": "SELECT t1.name FROM DOMAIN AS t4 JOIN domain_publication AS t2 ON t4.did  =  t2.did JOIN publication AS t5 ON t5.pid  =  t2.pid JOIN writes AS t3 ON t3.pid  =  t5.pid JOIN author AS t1 ON t3.aid  =  t1.aid JOIN organization AS t6 ON t6.oid  =  t1.oid WHERE t4.name  =  \"Databases\" AND t6.name  =  \"University of Michigan\" GROUP BY t1.name ORDER BY SUM ( t5.citation_num ) DESC LIMIT 1;",
        "schema_links": [
            "writes.pid",
            "DOMAIN.did",
            "publication.pid",
            "domain_publication.pid",
            "domain.name",
            "organization.oid",
            "domain.did",
            "author.name",
            "publication.citation_num",
            "domain_publication.did",
            "author.aid",
            "DOMAIN.name",
            "author.oid",
            "organization.name",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_496",
        "question": "return me the conferences, which have more than 10 papers by \" H. V. Jagadish \" .",
        "db_id": "academic_network",
        "query": "SELECT t2.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" GROUP BY t2.name HAVING COUNT ( DISTINCT t4.title )  >  10;",
        "schema_links": [
            "writes.pid",
            "author.name",
            "conference.name",
            "publication.cid",
            "publication.pid",
            "publication.title",
            "conference.cid",
            "author.aid",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_497",
        "question": "return me the conference, which have the most number of papers by \" H. V. Jagadish \" .",
        "db_id": "academic_network",
        "query": "SELECT t2.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1;",
        "schema_links": [
            "writes.pid",
            "conference.name",
            "author.name",
            "publication.cid",
            "publication.pid",
            "publication.title",
            "conference.cid",
            "author.aid",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_498",
        "question": "return me the journal, which have the most number of papers by \" H. V. Jagadish \" .",
        "db_id": "academic_network",
        "query": "SELECT t2.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1;",
        "schema_links": [
            "writes.pid",
            "author.name",
            "publication.pid",
            "publication.jid",
            "journal.jid",
            "publication.title",
            "journal.name",
            "author.aid",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_499",
        "question": "return me the authors who have more than 10 papers containing keyword \" Relational Database \" .",
        "db_id": "academic_network",
        "query": "SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t2.name HAVING COUNT ( DISTINCT t3.title )  >  10;",
        "schema_links": [
            "writes.pid",
            "publication.pid",
            "publication.title",
            "keyword.keyword",
            "publication_keyword.pid",
            "keyword.kid",
            "publication_keyword.kid",
            "author.name",
            "author.aid",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_500",
        "question": "return me the conferences, which have more than 60 papers containing keyword \" Relational Database \" .",
        "db_id": "academic_network",
        "query": "SELECT t2.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t2.name HAVING COUNT ( DISTINCT t3.title )  >  60;",
        "schema_links": [
            "keyword.kid",
            "publication_keyword.kid",
            "conference.name",
            "publication.cid",
            "publication.pid",
            "publication_keyword.pid",
            "publication.title",
            "conference.cid",
            "keyword.keyword"
        ]
    },
    {
        "instance_id": "q_504",
        "question": "return me the keywords, which have been contained by more than 10 papers of \" H. V. Jagadish \" .",
        "db_id": "academic_network",
        "query": "SELECT t1.keyword FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" GROUP BY t1.keyword HAVING COUNT ( DISTINCT t3.title )  >  10;",
        "schema_links": [
            "writes.pid",
            "publication.pid",
            "publication.title",
            "keyword.keyword",
            "publication_keyword.pid",
            "keyword.kid",
            "publication_keyword.kid",
            "author.name",
            "author.aid",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_507",
        "question": "return me the author in the \" University of Michigan \" in Databases area whose papers have more than 5000 total citations .",
        "db_id": "academic_network",
        "query": "SELECT t1.name FROM domain_author AS t6 JOIN author AS t1 ON t6.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t6.did JOIN organization AS t5 ON t5.oid  =  t1.oid JOIN writes AS t2 ON t2.aid  =  t1.aid JOIN publication AS t4 ON t2.pid  =  t4.pid WHERE t3.name  =  \"Databases\" AND t5.name  =  \"University of Michigan\" GROUP BY t1.name HAVING SUM ( t4.citation_num )  >  5000;",
        "schema_links": [
            "writes.pid",
            "DOMAIN.did",
            "publication.pid",
            "domain.name",
            "organization.oid",
            "domain_author.aid",
            "domain.did",
            "publication.citation_num",
            "author.name",
            "author.aid",
            "DOMAIN.name",
            "author.oid",
            "domain_author.did",
            "organization.name",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_508",
        "question": "Find all movies written and produced by \" Woody Allen \"",
        "db_id": "movie_entertainment",
        "query": "SELECT t2.title FROM movie AS t2 JOIN made_by AS t3 ON t2.mid  =  t3.msid JOIN producer AS t1 ON t1.pid  =  t3.pid JOIN written_by AS t5 ON t5.msid  =  t2.mid JOIN writer AS t4 ON t5.wid  =  t4.wid WHERE t1.name  =  \"Woody Allen\" AND t4.name  =  \"Woody Allen\";",
        "schema_links": [
            "producer.name",
            "movie.mid",
            "written_by.msid",
            "made_by.msid",
            "movie.title",
            "writer.name",
            "written_by.wid",
            "made_by.pid",
            "producer.pid",
            "writer.wid"
        ]
    },
    {
        "instance_id": "q_509",
        "question": "Find all movies directed by \" Asghar Farhadi \" and featuring \" Taraneh Alidoosti \"",
        "db_id": "movie_entertainment",
        "query": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\";",
        "schema_links": [
            "directed_by.did",
            "CAST.aid",
            "actor.name",
            "movie.mid",
            "movie.title",
            "director.did",
            "actor.aid",
            "director.name",
            "directed_by.msid",
            "CAST.msid"
        ]
    },
    {
        "instance_id": "q_510",
        "question": "What are all the movies directed by \" Asghar Farhadi \" featuring \" Taraneh Alidoosti \" ?",
        "db_id": "movie_entertainment",
        "query": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\";",
        "schema_links": [
            "movie.mid",
            "directed_by.did",
            "CAST.aid",
            "movie.title",
            "director.did",
            "actor.name",
            "actor.aid",
            "director.name",
            "directed_by.msid",
            "CAST.msid"
        ]
    },
    {
        "instance_id": "q_513",
        "question": "How many movies did \" Quentin Tarantino \" direct before 2002 and after 2010 ?",
        "db_id": "movie_entertainment",
        "query": "SELECT COUNT ( DISTINCT t4.title  ) FROM director AS t3 JOIN directed_by AS t2 ON t3.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN made_by AS t5 ON t4.mid  =  t5.msid JOIN producer AS t1 ON t1.pid  =  t5.pid WHERE t3.name  =  \"Quentin Tarantino\" AND t4.release_year  <  2010 AND t4.release_year  >  2002;",
        "schema_links": [
            "movie.mid",
            "directed_by.did",
            "made_by.msid",
            "movie.title",
            "director.did",
            "made_by.pid",
            "director.name",
            "movie.release_year",
            "producer.pid",
            "directed_by.msid"
        ]
    },
    {
        "instance_id": "q_514",
        "question": "find the number of actors from Iran who played in \" Jim Jarmusch \" movies",
        "db_id": "movie_entertainment",
        "query": "SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN directed_by AS t2 ON t5.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.nationality  =  \"Iran\" AND t3.name  =  \"Jim Jarmusch\";",
        "schema_links": [
            "directed_by.did",
            "CAST.aid",
            "cast.msid",
            "actor.name",
            "movie.mid",
            "director.did",
            "actor.aid",
            "director.name",
            "CAST.msid",
            "cast.aid",
            "directed_by.msid",
            "actor.nationality"
        ]
    },
    {
        "instance_id": "q_515",
        "question": "Find the actors who played in the latest movie by \" Quentin Tarantino \"",
        "db_id": "movie_entertainment",
        "query": "SELECT t1.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN directed_by AS t2 ON t5.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t3.name  =  \"Quentin Tarantino\" ORDER BY t5.release_year DESC LIMIT 1;",
        "schema_links": [
            "directed_by.did",
            "CAST.aid",
            "cast.msid",
            "actor.name",
            "movie.release_year",
            "movie.mid",
            "director.did",
            "actor.aid",
            "director.name",
            "cast.aid",
            "directed_by.msid",
            "CAST.msid"
        ]
    },
    {
        "instance_id": "q_516",
        "question": "Which producer has worked with the most number of directors ?",
        "db_id": "movie_entertainment",
        "query": "SELECT t1.name FROM director AS t3 JOIN directed_by AS t2 ON t3.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN made_by AS t5 ON t4.mid  =  t5.msid JOIN producer AS t1 ON t1.pid  =  t5.pid GROUP BY t1.name ORDER BY COUNT ( DISTINCT t3.name  ) DESC LIMIT 1;",
        "schema_links": [
            "producer.name",
            "movie.mid",
            "directed_by.did",
            "made_by.msid",
            "director.did",
            "made_by.pid",
            "director.name",
            "producer.pid",
            "directed_by.msid"
        ]
    },
    {
        "instance_id": "q_533",
        "db_id": "tennis_stats",
        "question": "Which players, identified by their country code and first name, have won matches in both the WTA Championships and the Australian Open tournaments? Consider only players who have shown a positive trend in their recent form score (player_current_form_index > 0) and have consistent performance metrics across these tournaments as indicated by a non-negative ranking points change (rank_change >= 0). Ensure that the player's performance metrics are marked as true.",
        "query": " SELECT DISTINCT p.player_country_code, p.player_first_name FROM players p JOIN matches m1 ON p.player_id = m1.winner_id JOIN tournaments t1 ON m1.tournament_id = t1.tournament_id JOIN matches m2 ON p.player_id = m2.winner_id JOIN tournaments t2 ON m2.tournament_id = t2.tournament_id JOIN rankings r ON p.player_id = r.ranking AND r.rank_change >= 0 WHERE t1.tournament_name = 'WTA Championships' AND t2.tournament_name = 'Australian Open' AND p.player_current_form_index > 0 AND p.player_performance_metrics IS TRUE; ",
        "schema_links": [
            "tournaments.tournament_id",
            "tournaments.tournament_name",
            "rankings.ranking",
            "matches.winner_id",
            "rankings.rank_change",
            "players.player_current_form_index",
            "matches.tournament_id",
            "players.player_first_name",
            "players.player_performance_metrics",
            "players.player_id",
            "players.player_country_code"
        ]
    },
    {
        "instance_id": "q_522",
        "db_id": "tennis_stats",
        "question": "Which players, identified by their player IDs and country codes, have won titles in at least two distinct high-profile tournaments, including the WTA Championships and major Opens such as the Australian Open, French Open, Wimbledon, and US Open, while maintaining an upward ranking trend over the past year, having a positive current form index, and participating only in non-canceled matches where they scored more points than their opponents? Additionally, these players must have at least one title to their name, and the tournaments considered must be of the \"Grand Slam\" level.",
        "query": " SELECT DISTINCT p.player_id, p.player_country_code FROM wta_1_new.players AS p JOIN wta_1_new.matches AS m ON p.player_id = m.winner_id JOIN wta_1_new.tournaments AS t ON m.tournament_id = t.tournament_id WHERE t.tournament_name IN ('WTA Championships', 'Australian Open', 'French Open', 'Wimbledon', 'US Open')   AND p.player_ranking_trend = 'up'   AND p.player_current_form_index > 0   AND p.player_total_titles > 0   AND m.match_cancellation_reason IS NULL   AND m.tournament_level = 'Grand Slam'   AND m.match_winner_points > m.match_loser_points   AND p.player_highest_ranking_date >= NOW() - INTERVAL '1 year' GROUP BY p.player_id, p.player_country_code HAVING COUNT(DISTINCT t.tournament_name) >= 2; ",
        "schema_links": [
            "tournaments.tournament_id",
            "players.player_highest_ranking_date",
            "tournaments.tournament_name",
            "matches.match_winner_points",
            "matches.tournament_level",
            "matches.match_loser_points",
            "matches.winner_id",
            "players.player_current_form_index",
            "players.player_ranking_trend",
            "matches.tournament_id",
            "matches.match_cancellation_reason",
            "players.player_total_titles",
            "players.player_id",
            "players.player_country_code"
        ]
    },
    {
        "instance_id": "q_527",
        "db_id": "course_enrollment",
        "question": "Which students are currently enrolled in a Bachelor's degree program, including their full names? Additionally, identify any students who have changed their major within the last academic year, providing their new major and the reason for the change.",
        "query": " SELECT      s.STUDENT_ID,     CONCAT(s.FIRST_NAME, ' ', s.LAST_NAME) AS FULL_NAME,     dp.DEGREE_SUMMARY_NAME AS CURRENT_MAJOR,     e.ENROLLMENT_REASON AS REASON_FOR_CHANGE FROM      Students s JOIN      Student_Enrolment e ON s.STUDENT_ID = e.STUDENT_ID JOIN      Degree_Programs dp ON e.DEGREE_PROGRAM_ID = dp.DEPARTMENT_ID LEFT JOIN      (SELECT           STUDENT_ID,           DEGREE_SUMMARY_NAME AS NEW_MAJOR,           ENROLLMENT_REASON,           PROGRAM_ENROLLMENT_DATE      FROM           Student_Enrolment      JOIN           Degree_Programs ON Student_Enrolment.DEGREE_PROGRAM_ID = Degree_Programs.DEPARTMENT_ID      WHERE           PROGRAM_ENROLLMENT_DATE >= DATEADD(YEAR, -1, GETDATE())) recent_changes      ON s.STUDENT_ID = recent_changes.STUDENT_ID WHERE      dp.DEGREE_PROGRAM_LEVEL = 'Bachelor'     AND e.ENROLLMENT_STATUS = 'Enrolled'; ",
        "schema_links": [
            "Degree_Programs.DEGREE_SUMMARY_NAME",
            "Students.STUDENT_ID",
            "Student_Enrolment.STUDENT_ID",
            "Student_Enrolment.PROGRAM_ENROLLMENT_DATE",
            "Students.LAST_NAME",
            "Students.FIRST_NAME",
            "Student_Enrolment.ENROLLMENT_REASON",
            "Degree_Programs.DEGREE_PROGRAM_LEVEL",
            "Student_Enrolment.ENROLLMENT_STATUS",
            "Degree_Programs.DEPARTMENT_ID",
            "Student_Enrolment.DEGREE_PROGRAM_ID"
        ]
    },
    {
        "instance_id": "q_523",
        "db_id": "course_enrollment",
        "question": "Which students enrolled in a Bachelors program have changed their major at least once, and what are their full names (first name and last name concatenated), current cities, and current GPAs as indicators of academic performance trends? Additionally, include any notes from the student enrollment audit log that mention \"major change\" for these students. Ensure that the students have more than one distinct enrollment reason recorded in their enrollment history.",
        "query": " SELECT      s.STUDENT_ID,     CONCAT(s.FIRST_NAME, ' ', s.LAST_NAME) AS FULL_NAME,     s.CURRENT_CITY,     s.CURRENT_GPA AS ACADEMIC_PERFORMANCE_TRENDS,     se.STUDENT_ENROLLMENT_AUDIT_LOG AS MAJOR_CHANGE_NOTES FROM      Students s JOIN      Student_Enrolment se ON s.STUDENT_ID = se.STUDENT_ID JOIN      Degree_Programs dp ON se.DEGREE_PROGRAM_ID = dp.DEPARTMENT_ID WHERE      dp.DEGREE_PROGRAM_LEVEL = 'Bachelors'     AND se.STUDENT_ENROLLMENT_AUDIT_LOG LIKE '%major change%' GROUP BY      s.STUDENT_ID, FULL_NAME, s.CURRENT_CITY, s.CURRENT_GPA, se.STUDENT_ENROLLMENT_AUDIT_LOG HAVING      COUNT(DISTINCT se.ENROLLMENT_REASON) > 1; ",
        "schema_links": [
            "Students.CURRENT_CITY",
            "Students.CURRENT_GPA",
            "Students.STUDENT_ID",
            "Student_Enrolment.STUDENT_ID",
            "Students.LAST_NAME",
            "Students.FIRST_NAME",
            "Student_Enrolment.ENROLLMENT_REASON",
            "Degree_Programs.DEGREE_PROGRAM_LEVEL",
            "Degree_Programs.DEPARTMENT_ID",
            "Student_Enrolment.DEGREE_PROGRAM_ID",
            "Student_Enrolment.STUDENT_ENROLLMENT_AUDIT_LOG"
        ]
    },
    {
        "instance_id": "q_520",
        "db_id": "course_enrollment",
        "question": "Find the unique identifiers, current GPAs, cities of residence, home countries, academic focuses, and academic interests of students who are currently living in North Carolina, have not enrolled in any degree programs, and have mentioned advisory interactions as a retention reason. Additionally, ensure these students do not have an active student loan status.",
        "query": " SELECT DISTINCT s.STUDENT_ID, s.CURRENT_GPA, s.CURRENT_CITY, s.HOME_COUNTRY, s.STUDENT_ACADEMIC_FOCUS, s.STUDENT_ACADEMIC_INTERESTS FROM Students s LEFT JOIN Student_Enrolment se ON s.STUDENT_ID = se.STUDENT_ID WHERE se.DEGREE_PROGRAM_ID IS NULL  AND s.CURRENT_CITY = 'North Carolina'  AND s.STUDENT_RETENTION_REASON LIKE '%advisory interactions%'  AND s.STUDENT_LOAN_STATUS = FALSE; ",
        "schema_links": [
            "Students.STUDENT_ACADEMIC_INTERESTS",
            "Students.STUDENT_LOAN_STATUS",
            "Students.CURRENT_CITY",
            "Students.CURRENT_GPA",
            "Students.STUDENT_ID",
            "Student_Enrolment.STUDENT_ID",
            "Students.STUDENT_ACADEMIC_FOCUS",
            "Students.HOME_COUNTRY",
            "Students.STUDENT_RETENTION_REASON",
            "Student_Enrolment.DEGREE_PROGRAM_ID"
        ]
    },
    {
        "instance_id": "q_526",
        "db_id": "course_enrollment",
        "question": "Which students, currently residing in North Carolina, have never enrolled in any degree programs, exhibit a low likelihood (less than 0.3) of enrolling in the upcoming semester based on their historical enrollment prediction model, and are not associated with any degree programs that have an upcoming semester enrollment likelihood of less than 0.2?",
        "query": " SELECT      s.STUDENT_ID,      s.CURRENT_ADDRESS_ID,      s.GENDER,      s.DATE_OF_BIRTH,      s.EMAIL_ADDRESS,      s.PHONE_NUMBER,      s.HOME_COUNTRY,      s.CURRENT_CITY,      s.CURRENT_GPA,      s.STUDENT_LOAN_STATUS,      s.STUDENT_RETENTION_REASON,      s.STUDENT_ACADEMIC_FOCUS FROM      Students s LEFT JOIN      Student_Enrolment se ON s.STUDENT_ID = se.STUDENT_ID LEFT JOIN      Degree_Programs dp ON se.DEGREE_PROGRAM_ID = dp.DEPARTMENT_ID WHERE      s.CURRENT_CITY = 'North Carolina'     AND se.STUDENT_ID IS NULL     AND s.STUDENT_ENROLLMENT_PREDICTION_MODEL < 0.3     AND dp.PROGRAM_ADMISSION_STATUS != 'Accepted'     AND dp.DEGREE_PROGRAM_ENROLLMENT_TRENDS ->> 'upcoming_semester_likelihood' < '0.2'; ",
        "schema_links": [
            "Students.STUDENT_LOAN_STATUS",
            "Students.STUDENT_ENROLLMENT_PREDICTION_MODEL",
            "Students.EMAIL_ADDRESS",
            "Students.CURRENT_CITY",
            "Students.CURRENT_GPA",
            "Students.DATE_OF_BIRTH",
            "Students.PHONE_NUMBER",
            "Degree_Programs.DEGREE_PROGRAM_ENROLLMENT_TRENDS",
            "Student_Enrolment.DEGREE_PROGRAM_ID",
            "Student_Enrolment.STUDENT_ID",
            "Students.STUDENT_ACADEMIC_FOCUS",
            "Degree_Programs.PROGRAM_ADMISSION_STATUS",
            "Students.GENDER",
            "Students.HOME_COUNTRY",
            "Students.STUDENT_RETENTION_REASON",
            "Degree_Programs.DEPARTMENT_ID",
            "Students.STUDENT_ID",
            "Students.CURRENT_ADDRESS_ID"
        ]
    },
    {
        "instance_id": "q_517",
        "db_id": "course_enrollment",
        "question": "Which semesters have had concurrent enrollments from both Master's and Bachelor's degree students, and what are the detailed academic performance trends (including average GPA, academic load, and academic results) observed during those specific periods?",
        "query": " SELECT      s.SEMESTER_NAME,      s.SEMESTER_START_DATE,      s.SEMESTER_END_DATE,      s.SEMESTER_ACADEMIC_LOAD,      s.SEMESTER_AVERAGE_GPA,      s.SEMESTER_ACADEMIC_RESULTS,      s.SEMESTER_ACADEMIC_LOAD_PERFORMANCE_DETAILS FROM      Semesters s JOIN      Student_Enrolment se ON s.SEMESTER_ID = se.SEMESTER_ID JOIN      Degree_Programs dp ON se.DEGREE_PROGRAM_ID = dp.DEPARTMENT_ID WHERE      dp.DEGREE_PROGRAM_LEVEL IN ('Masters', 'Bachelors')     AND EXISTS (         SELECT 1          FROM Student_Enrolment se_m          JOIN Degree_Programs dp_m ON se_m.DEGREE_PROGRAM_ID = dp_m.DEPARTMENT_ID         WHERE dp_m.DEGREE_PROGRAM_LEVEL = 'Masters'              AND se_m.SEMESTER_ID = s.SEMESTER_ID     )     AND EXISTS (         SELECT 1          FROM Student_Enrolment se_b          JOIN Degree_Programs dp_b ON se_b.DEGREE_PROGRAM_ID = dp_b.DEPARTMENT_ID         WHERE dp_b.DEGREE_PROGRAM_LEVEL = 'Bachelors'              AND se_b.SEMESTER_ID = s.SEMESTER_ID     ) GROUP BY      s.SEMESTER_NAME,      s.SEMESTER_START_DATE,      s.SEMESTER_END_DATE,      s.SEMESTER_ACADEMIC_LOAD,      s.SEMESTER_AVERAGE_GPA,      s.SEMESTER_ACADEMIC_RESULTS,      s.SEMESTER_ACADEMIC_LOAD_PERFORMANCE_DETAILS; ",
        "schema_links": [
            "Semesters.SEMESTER_ACADEMIC_LOAD",
            "Semesters.SEMESTER_END_DATE",
            "Semesters.SEMESTER_ID",
            "Semesters.SEMESTER_AVERAGE_GPA",
            "Semesters.SEMESTER_START_DATE",
            "Semesters.SEMESTER_ACADEMIC_LOAD_PERFORMANCE_DETAILS",
            "Semesters.SEMESTER_ACADEMIC_RESULTS",
            "Degree_Programs.DEGREE_PROGRAM_LEVEL",
            "Semesters.SEMESTER_NAME",
            "Student_Enrolment.SEMESTER_ID",
            "Degree_Programs.DEPARTMENT_ID",
            "Student_Enrolment.DEGREE_PROGRAM_ID"
        ]
    },
    {
        "instance_id": "q_524",
        "db_id": "course_enrollment",
        "question": "Which semester IDs correspond to terms where both graduate and undergraduate students were actively enrolled, with a positive academic load and non-null enrollment trends for the associated degree programs?",
        "query": "SELECT DISTINCT se.SEMESTER_ID   FROM Student_Enrolment se   JOIN Degree_Programs dp ON se.DEGREE_PROGRAM_ID = dp.DEPARTMENT_ID   JOIN Semesters s ON se.SEMESTER_ID = s.SEMESTER_NAME   WHERE se.ENROLLMENT_STATUS = 'Active'   AND (dp.DEGREE_PROGRAM_LEVEL = 'Graduate' OR dp.DEGREE_PROGRAM_LEVEL = 'Undergraduate')   AND s.SEMESTER_ACADEMIC_LOAD > 0   AND dp.DEGREE_PROGRAM_ENROLLMENT_TRENDS IS NOT NULL;",
        "schema_links": [
            "Semesters.SEMESTER_ACADEMIC_LOAD",
            "Degree_Programs.DEGREE_PROGRAM_LEVEL",
            "Semesters.SEMESTER_NAME",
            "Student_Enrolment.SEMESTER_ID",
            "Student_Enrolment.ENROLLMENT_STATUS",
            "Degree_Programs.DEPARTMENT_ID",
            "Degree_Programs.DEGREE_PROGRAM_ENROLLMENT_TRENDS",
            "Student_Enrolment.DEGREE_PROGRAM_ID"
        ]
    },
    {
        "instance_id": "q_519",
        "db_id": "cartoon_metrics",
        "question": "Which TV channels are currently airing cartoons produced by Ben Jones or Michael Chang, and what is the target audience for these cartoons? Additionally, provide the country of origin for the TV channels airing these cartoons, ensuring that only cartoons with an original air date on or before today are included. Results should be listed in alphabetical order by the TV channel name.",
        "query": "SELECT DISTINCT      TV_Channel.series_name AS Channel_Name,      Cartoon.Cartoon_Age_Rating AS Target_Audience,      TV_Channel.TV_Series_Production_Country AS Country_of_Origin FROM      Cartoon JOIN TV_series ON Cartoon.id = TV_series.id JOIN TV_Channel ON TV_Channel.series_name = TV_series.Episode WHERE      TV_series.Episode_Writer IN ('Ben Jones', 'Michael Chang')     AND Cartoon.Original_air_date <= CURRENT_DATE ORDER BY      TV_Channel.series_name;",
        "schema_links": [
            "Cartoon.Cartoon_Age_Rating",
            "Cartoon.id",
            "TV_series.id",
            "TV_Channel.TV_Series_Production_Country",
            "TV_series.Episode",
            "TV_Channel.series_name",
            "TV_series.Episode_Writer",
            "Cartoon.Original_air_date"
        ]
    },
    {
        "instance_id": "q_521",
        "db_id": "cartoon_metrics",
        "question": "Which TV channels, identified by their series name and production country, are currently airing cartoons targeted at a children audience, specifically those with episodes directed by Ben Jones or Michael Chang? Additionally, provide the titles of these cartoons and their production countries. Only include channels whose license has not expired as of today's date.",
        "query": " SELECT DISTINCT      TV_Channel.series_name,      TV_Channel.TV_Series_Production_Country AS Channel_Production_Country,      Cartoon.Title,      Cartoon.Series_Production_Company AS Cartoon_Production_Country FROM      Cartoon JOIN      TV_series ON Cartoon.id = TV_series.id JOIN      TV_Channel ON TV_series.series_name = TV_Channel.series_name WHERE      Cartoon.Cartoon_Age_Rating = 'Children'     AND (Cartoon.Episode_Writer = 'Ben Jones' OR Cartoon.Episode_Writer = 'Michael Chang')     AND TV_Channel.TV_Channel_License_Expiry > CURRENT_DATE; ",
        "schema_links": [
            "Cartoon.Episode_Writer",
            "Cartoon.Cartoon_Age_Rating",
            "TV_Channel.TV_Channel_License_Expiry",
            "Cartoon.Series_Production_Company",
            "Cartoon.id",
            "TV_series.id",
            "TV_Channel.TV_Series_Production_Country",
            "TV_series.series_name",
            "Cartoon.Title",
            "TV_Channel.series_name"
        ]
    },
    {
        "instance_id": "q_518",
        "db_id": "city_analysis",
        "question": "Which countries have both English and Dutch as commonly spoken languages, where the percentage of Dutch speakers is higher than that of English speakers, and the total population of the country exceeds 10 million?",
        "query": " SELECT      c.Code AS Country_Code,     c.Name AS Country_Name FROM      countrylanguage cl_en JOIN      countrylanguage cl_nl ON cl_en.CountryCode = cl_nl.CountryCode JOIN      country c ON cl_en.CountryCode = c.Code WHERE      cl_en.Language = 'English'     AND cl_nl.Language = 'Dutch'     AND cl_en.Language_Spoken = 'commonly'     AND cl_nl.Language_Spoken = 'commonly'     AND cl_nl.Language_Population_Percentage > cl_en.Language_Population_Percentage     AND c.Population > 10000000; ",
        "schema_links": [
            "countrylanguage.Language",
            "country.Population",
            "countrylanguage.CountryCode",
            "country.Code",
            "country.Name",
            "countrylanguage.Language_Spoken",
            "countrylanguage.Language_Population_Percentage"
        ]
    },
    {
        "instance_id": "q_525",
        "db_id": "city_analysis",
        "question": "How many countries have both English and Dutch as spoken languages, where each language is actively spoken by a percentage of the population greater than 0%? Additionally, identify the countries that have a government type classified as either \"Constitutional Monarchy\" or \"Parliamentary Democracy\".",
        "query": " SELECT      c.Code AS Country_Code,     c.Name AS Country_Name,     c.Government_Type AS Government_Type FROM      countrylanguage cl JOIN      country c ON cl.CountryCode = c.Code WHERE      cl.Language IN ('English', 'Dutch')     AND cl.Language_Spoken = 'T'     AND cl.Language_Population_Percentage > 0 GROUP BY      c.Code, c.Name, c.Government_Type HAVING      COUNT(DISTINCT CASE WHEN cl.Language = 'English' THEN cl.Language END) > 0     AND COUNT(DISTINCT CASE WHEN cl.Language = 'Dutch' THEN cl.Language END) > 0     AND c.Government_Type IN ('Constitutional Monarchy', 'Parliamentary Democracy'); ",
        "schema_links": [
            "countrylanguage.Language",
            "countrylanguage.CountryCode",
            "country.Code",
            "country.Name",
            "country.Government_Type",
            "countrylanguage.Language_Spoken",
            "countrylanguage.Language_Population_Percentage"
        ]
    },
    {
        "instance_id": "q_529",
        "db_id": "city_analysis",
        "question": "Which countries have both English and French as official languages, and what percentage of their populations speak each of these languages? Among these countries, which ones are classified as republics in terms of government type, and what is their average GDP per capita?",
        "query": " SELECT      c.Code AS Country_Code,     c.Name AS Country_Name,     cl1.Language_Population_Percentage AS English_Speakers_Percentage,     cl2.Language_Population_Percentage AS French_Speakers_Percentage,     c.Government_Type,     (c.GDP / c.Population) AS GDP_Per_Capita FROM      country c JOIN      countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' AND cl1.Language_Status = 'Official' JOIN      countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' AND cl2.Language_Status = 'Official' WHERE      c.Government_Type LIKE '%Republic%' GROUP BY      c.Code, c.Name, cl1.Language_Population_Percentage, cl2.Language_Population_Percentage, c.Government_Type, c.GDP, c.Population; ",
        "schema_links": [
            "country.GDP",
            "countrylanguage.Language_Status",
            "countrylanguage.Language",
            "country.Population",
            "countrylanguage.CountryCode",
            "country.Code",
            "country.Name",
            "country.Government_Type",
            "countrylanguage.Language_Population_Percentage"
        ]
    },
    {
        "instance_id": "q_530",
        "db_id": "city_analysis",
        "question": "Which countries have both English and French as official languages, and what percentage of their populations speak each language? Additionally, identify the countries where the combined percentage of people who speak these two languages exceeds 50% of the total population.",
        "query": " SELECT      c.Code AS Country_Code,     c.Name AS Country_Name,     cl1.Language_Population_Percentage AS English_Speaking_Percentage,     cl2.Language_Population_Percentage AS French_Speaking_Percentage,     (cl1.Language_Population_Percentage + cl2.Language_Population_Percentage) AS Combined_Speaking_Percentage FROM      country c JOIN      countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' AND cl1.Language_Status = 'Official' JOIN      countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' AND cl2.Language_Status = 'Official' WHERE      (cl1.Language_Population_Percentage + cl2.Language_Population_Percentage) > 50; ",
        "schema_links": [
            "countrylanguage.Language_Status",
            "countrylanguage.Language",
            "countrylanguage.CountryCode",
            "country.Code",
            "country.Name",
            "countrylanguage.Language_Population_Percentage"
        ]
    },
    {
        "instance_id": "q_531",
        "db_id": "city_analysis",
        "question": "List the countries where both English and French are widely spoken, based on their respective speaking populations. Include each country's government type and GDP per capita in the results.",
        "query": " SELECT      c.Name AS Country_Name,     c.Government_Type,     (c.GDP / c.Population) AS GDP_Per_Capita FROM      country c WHERE      EXISTS (         SELECT 1         FROM countrylanguage cl_en         WHERE cl_en.CountryCode = c.Code         AND cl_en.Language = 'English'         AND cl_en.Language_Spoken = 'Widely'     )     AND EXISTS (         SELECT 1         FROM countrylanguage cl_fr         WHERE cl_fr.CountryCode = c.Code         AND cl_fr.Language = 'French'         AND cl_fr.Language_Spoken = 'Widely'     ); ",
        "schema_links": [
            "country.GDP",
            "countrylanguage.Language",
            "country.Population",
            "countrylanguage.CountryCode",
            "country.Code",
            "country.Name",
            "country.Government_Type",
            "countrylanguage.Language_Spoken"
        ]
    },
    {
        "instance_id": "q_537",
        "db_id": "city_analysis",
        "question": "Which countries have English or Dutch as one of their predominant languages, and what percentage of their population speaks these languages? Among these countries, which ones have a government type classified as a democratic system, and what is their GDP per capita when sorted in descending order?",
        "query": " SELECT      c.Code AS Country_Code,     c.Name AS Country_Name,     cl.Language AS Predominant_Language,     cl.Language_Population_Percentage AS Language_Population_Percentage,     c.Government_Type AS Government_Type,     (c.GDP / c.Population) AS GDP_Per_Capita FROM      country c JOIN      countrylanguage cl ON c.Code = cl.CountryCode WHERE      cl.Language IN ('English', 'Dutch')     AND cl.Language_Status = 'Predominant'     AND c.Government_Type LIKE '%democratic%' ORDER BY      GDP_Per_Capita DESC; ",
        "schema_links": [
            "country.GDP",
            "countrylanguage.Language_Status",
            "countrylanguage.Language",
            "country.Population",
            "countrylanguage.CountryCode",
            "country.Code",
            "country.Name",
            "country.Government_Type",
            "countrylanguage.Language_Population_Percentage"
        ]
    },
    {
        "instance_id": "q_536",
        "db_id": "city_analysis",
        "question": "Which countries have English or Dutch as one of their predominant languages, with the language dominance being the highest in the country? For these countries, what is the percentage of the population that speaks these languages, the total population of the country, and the GDP per capita? Additionally, filter the results to include only those countries with a population greater than 10 million and a GDP per capita above the global average (calculated as the average GDP per capita across all countries with valid population and GDP data). Finally, sort the results by country name and language in ascending order.",
        "query": " SELECT      c.Name AS Country_Name,     cl.Language AS Predominant_Language,     cl.Language_Population_Percentage AS Language_Population_Percentage,     c.Population AS Country_Population,     (c.GDP / c.Population) AS GDP_Per_Capita FROM      world_1_new.country c JOIN      world_1_new.countrylanguage cl ON c.Code = cl.CountryCode WHERE      (cl.Language = 'English' OR cl.Language = 'Dutch')     AND cl.Country_Language_Dominance = 1     AND c.Population > 10000000     AND (c.GDP / c.Population) > (         SELECT AVG(GDP / Population)         FROM world_1_new.country         WHERE Population > 0 AND GDP IS NOT NULL     ) ORDER BY      c.Name, cl.Language; ",
        "schema_links": [
            "country.GDP",
            "countrylanguage.Language",
            "countrylanguage.Country_Language_Dominance",
            "country.Population",
            "countrylanguage.CountryCode",
            "country.Code",
            "country.Name",
            "countrylanguage.Language_Population_Percentage"
        ]
    },
    {
        "instance_id": "q_532",
        "db_id": "city_analysis",
        "question": "In which cities within European democratic countries, specifically Germany, France, Italy, Spain, Netherlands, Belgium, Sweden, Norway, Denmark, Finland, Greece, Portugal, Austria, Switzerland, Ireland, and the United Kingdom, do significant populations (at least 10% of the city's population) speak official languages other than English, potentially indicating diverse cultural hubs with unique market opportunities? The results should be ordered by the language population percentage in descending order.",
        "query": " SELECT      c.Name AS City_Name,     cl.Language AS City_Language,     cl.Language_Population_Percentage AS Language_Population_Percentage FROM      city c JOIN      countrylanguage cl ON c.CountryCode = cl.CountryCode JOIN      country co ON c.CountryCode = co.Code WHERE      cl.Language != 'English'     AND cl.Language_Status = 'Official'     AND cl.Language_Population_Percentage >= 10     AND co.Government_Type = 'Democracy'     AND co.Country_GDP_Growth_Rate > 2     AND co.Unemployment_Rate < 5     AND co.Name IN ('Germany', 'France', 'Italy', 'Spain', 'Netherlands', 'Belgium', 'Sweden', 'Norway', 'Denmark', 'Finland', 'Greece', 'Portugal', 'Austria', 'Switzerland', 'Ireland', 'United Kingdom') ORDER BY      cl.Language_Population_Percentage DESC; ",
        "schema_links": [
            "countrylanguage.Language_Status",
            "countrylanguage.Language",
            "countrylanguage.CountryCode",
            "country.Country_GDP_Growth_Rate",
            "countrylanguage.Language_Population_Percentage",
            "city.Name",
            "country.Unemployment_Rate",
            "country.Code",
            "country.Name",
            "country.Government_Type",
            "city.CountryCode"
        ]
    },
    {
        "instance_id": "q_534",
        "db_id": "city_analysis",
        "question": "Which non-capital cities in Europe have a primary language other than English spoken by more than 10% of their population?",
        "query": " SELECT      c.Name AS City_Name,     cl.Language AS Primary_Language,     cl.Language_Population_Percentage AS Language_Population_Percentage FROM      city c JOIN      countrylanguage cl ON c.CountryCode = cl.CountryCode WHERE      cl.Language_Status = 'Primary'      AND cl.Language <> 'English'      AND c.City_Type <> 'Capital'      AND c.City_Country_Code IN (         SELECT Code          FROM country          WHERE Name IN ('Germany', 'France', 'Italy', 'Spain', 'Netherlands', 'Belgium', 'Switzerland', 'Austria', 'Greece', 'Portugal', 'Sweden', 'Norway', 'Denmark', 'Finland', 'Ireland', 'United Kingdom')     )     AND cl.Language_Population_Percentage > 10; ",
        "schema_links": [
            "countrylanguage.Language_Status",
            "countrylanguage.Language",
            "countrylanguage.CountryCode",
            "countrylanguage.Language_Population_Percentage",
            "city.Name",
            "city.City_Country_Code",
            "country.Code",
            "country.Name",
            "city.CountryCode",
            "city.City_Type"
        ]
    },
    {
        "instance_id": "q_535",
        "db_id": "dog_health",
        "question": "Which professionals have either treated dogs with a behavior score below the average behavior score of all dogs or specialize in treatments with a duration exceeding the average treatment duration? Provide the professional's ID, last name, and contact number, where the contact number is obtained from the Owners table if the professional ID matches an owner ID.",
        "query": " SELECT DISTINCT      T.PROFESSIONAL_ID,      SUBSTRING(T.PROFESSIONAL_NAME FROM POSITION(' ' IN T.PROFESSIONAL_NAME) + 1 FOR LENGTH(T.PROFESSIONAL_NAME)) AS LAST_NAME,      O.OWNER_PHONE AS CONTACT_NUMBER FROM      Treatments T LEFT JOIN      Owners O ON T.PROFESSIONAL_ID = O.OWNER_ID WHERE      T.PROFESSIONAL_ID IN (         SELECT DISTINCT T1.PROFESSIONAL_ID         FROM Treatments T1         WHERE T1.TREATMENT_DOG_ID IN (             SELECT D.DOG_ID             FROM Dogs D             WHERE D.DOG_BEHAVIOR_SCORE < (SELECT AVG(D1.DOG_BEHAVIOR_SCORE) FROM Dogs D1)         )         UNION         SELECT DISTINCT T2.PROFESSIONAL_ID         FROM Treatments T2         WHERE T2.TREATMENT_DURATION > (SELECT AVG(T3.TREATMENT_DURATION) FROM Treatments T3)     ); ",
        "schema_links": [
            "treatments.professional_id",
            "dogs.dog_id",
            "Treatments.PROFESSIONAL_ID",
            "Owners.OWNER_PHONE",
            "Treatments.PROFESSIONAL_NAME",
            "Owners.OWNER_ID",
            "owners.owner_phone",
            "dogs.dog_behavior_score",
            "treatments.treatment_duration",
            "treatments.treatment_dog_id",
            "treatments.professional_name",
            "Treatments.TREATMENT_DOG_ID",
            "Treatments.TREATMENT_DURATION",
            "Dogs.DOG_ID",
            "Dogs.DOG_BEHAVIOR_SCORE"
        ]
    },
    {
        "instance_id": "q_543",
        "db_id": "dog_health",
        "question": "Identify the professionals whose specialty is in advanced treatment categories and who have conducted treatments within the last six months. Include professionals who either reside in Indiana or have performed treatments with an average duration exceeding two hours. Provide their professional ID, last name, and contact number. Ensure that only professionals with an advanced specialty and treatments categorized as advanced are considered.",
        "query": " SELECT DISTINCT      T.PROFESSIONAL_ID,      SUBSTRING(T.PROFESSIONAL_NAME, POSITION(' ' IN T.PROFESSIONAL_NAME) + 1) AS LAST_NAME,      O.OWNER_PHONE AS CONTACT_NUMBER FROM      Treatments T JOIN      Owners O ON T.PROFESSIONAL_ID = O.OWNER_ID WHERE      (O.OWNER_ADDRESS LIKE '%Indiana%'       OR T.TREATMENT_DURATION > 120) AND T.TREATMENT_CATEGORY IN ('Advanced') AND T.DATE_OF_TREATMENT >= NOW() - INTERVAL '6 months' AND T.TREATMENT_DOCTOR_SPECIALTY = 'Advanced'; ",
        "schema_links": [
            "treatments.professional_id",
            "Treatments.DATE_OF_TREATMENT",
            "Treatments.TREATMENT_DURATION",
            "Treatments.PROFESSIONAL_ID",
            "Owners.OWNER_PHONE",
            "treatments.treatment_doctor_specialty",
            "owners.owner_address",
            "Owners.OWNER_ID",
            "Treatments.TREATMENT_CATEGORY",
            "owners.owner_phone",
            "Treatments.TREATMENT_DOCTOR_SPECIALTY",
            "treatments.treatment_duration",
            "Owners.OWNER_ADDRESS",
            "treatments.professional_name",
            "treatments.treatment_category",
            "Treatments.PROFESSIONAL_NAME",
            "treatments.date_of_treatment"
        ]
    },
    {
        "instance_id": "q_539",
        "db_id": "customer_order_flow",
        "question": "Identify customers who have made more than two distinct purchases and acquired at least three distinct products. For each qualifying customer, include their customer ID, first name, last name, loyalty tier, and details of the most recent promotion they utilized (promotion ID, start date, and end date). Ensure that the results are ordered by loyalty tier in descending order.",
        "query": " SELECT      c.CUSTOMER_ID,     c.FIRST_NAME,     c.LAST_NAME,     c.LOYALTY_TIER,     pr.PROMOTION_RULE_ID,     pr.PROMOTION_START_DATE,     pr.PROMOTION_END_DATE FROM      Customers c JOIN      (SELECT           CUSTOMER_ID,           COUNT(DISTINCT ORDER_ID) AS purchase_count,           COUNT(DISTINCT PRODUCT_ID) AS product_count      FROM           Orders o      JOIN Order_Items oi ON o.ORDER_ID = oi.ORDER_ID      GROUP BY CUSTOMER_ID      HAVING COUNT(DISTINCT ORDER_ID) > 2 AND COUNT(DISTINCT PRODUCT_ID) >= 3) filtered_orders ON c.CUSTOMER_ID = filtered_orders.CUSTOMER_ID LEFT JOIN Orders o2 ON c.CUSTOMER_ID = o2.CUSTOMER_ID LEFT JOIN Promotion_Rules pr ON o2.ORDER_PROMOTION_RULE_ID = pr.PROMOTION_RULE_ID WHERE      pr.PROMOTION_START_DATE = (         SELECT MAX(PROMOTION_START_DATE)         FROM Promotion_Rules         WHERE PROMOTION_RULE_ID = o2.ORDER_PROMOTION_RULE_ID     ) ORDER BY c.LOYALTY_TIER DESC; ",
        "schema_links": [
            "Customers.CUSTOMER_ID",
            "Promotion_Rules.PROMOTION_RULE_ID",
            "Promotion_Rules.PROMOTION_START_DATE",
            "Promotion_Rules.PROMOTION_END_DATE",
            "Order_Items.PRODUCT_ID",
            "Orders.ORDER_ID",
            "Customers.LOYALTY_TIER",
            "Orders.CUSTOMER_ID",
            "Orders.ORDER_PROMOTION_RULE_ID",
            "Customers.FIRST_NAME",
            "Customers.LAST_NAME"
        ]
    },
    {
        "instance_id": "q_538",
        "db_id": "customer_order_flow",
        "question": "Which customers, identified by their customer IDs and segment names, have made more than two purchases within the last 90 days, have a loyalty score exceeding 800, and have used at least two different payment methods for their orders?",
        "query": " SELECT DISTINCT c.CUSTOMER_ID, c.LOYALTY_SCORE, cs.CUSTOMER_SEGMENT_NAME FROM Customers c JOIN Customer_Segments cs ON c.CUSTOMER_SEGMENT_ID = cs.CUSTOMER_SEGMENT_ID WHERE c.LOYALTY_SCORE > 800 AND c.CUSTOMER_ID IN (     SELECT o1.CUSTOMER_ID     FROM Orders o1     WHERE o1.PAYMENT_DATE >= NOW() - INTERVAL '90 days'     GROUP BY o1.CUSTOMER_ID     HAVING COUNT(o1.ORDER_ID) > 2 ) AND c.CUSTOMER_ID IN (     SELECT o2.CUSTOMER_ID     FROM Orders o2     GROUP BY o2.CUSTOMER_ID     HAVING COUNT(DISTINCT o2.PAYMENT_METHOD) >= 2 ); ",
        "schema_links": [
            "Orders.PAYMENT_DATE",
            "Customers.CUSTOMER_ID",
            "Customer_Segments.CUSTOMER_SEGMENT_ID",
            "Orders.ORDER_ID",
            "Customers.LOYALTY_SCORE",
            "Orders.CUSTOMER_ID",
            "Customers.CUSTOMER_SEGMENT_ID",
            "Customer_Segments.CUSTOMER_SEGMENT_NAME",
            "Orders.PAYMENT_METHOD"
        ]
    },
    {
        "instance_id": "q_548",
        "db_id": "customer_order_flow",
        "question": "Which customers, who have been enrolled in the loyalty program for more than six months, have not placed any orders in the last three months and are at risk of churning? Please provide their customer ID, loyalty score, and loyalty tier. Only include customers who have not engaged in any transactions within the specified time frame.",
        "query": " SELECT      c.CUSTOMER_ID,     c.LOYALTY_SCORE,     c.LOYALTY_TIER FROM      Customers c LEFT JOIN      Orders o ON c.CUSTOMER_ID = o.ORDER_ID WHERE      o.ORDER_ID IS NULL     AND c.LOYALTY_PROGRAM_ENROLLED = TRUE     AND c.CUSTOMER_ID NOT IN (         SELECT DISTINCT CUSTOMER_ID          FROM Orders          WHERE PAYMENT_DATE >= NOW() - INTERVAL '3 months'     )     AND c.CUSTOMER_ID IN (         SELECT CUSTOMER_ID          FROM Customers          WHERE LOYALTY_PROGRAM_ENROLLED = TRUE          AND CUSTOMER_ID IN (             SELECT CUSTOMER_ID              FROM Customers              WHERE LOYALTY_PROGRAM_ENROLLED = TRUE              AND CUSTOMER_ID NOT IN (                 SELECT DISTINCT CUSTOMER_ID                  FROM Orders                  WHERE PAYMENT_DATE >= NOW() - INTERVAL '6 months'             )         )     ); ",
        "schema_links": [
            "Orders.PAYMENT_DATE",
            "Customers.CUSTOMER_ID",
            "Orders.ORDER_ID",
            "Customers.LOYALTY_SCORE",
            "Customers.LOYALTY_TIER",
            "Orders.CUSTOMER_ID",
            "Customers.LOYALTY_PROGRAM_ENROLLED"
        ]
    },
    {
        "instance_id": "q_542",
        "db_id": "customer_order_flow",
        "question": "Which customers, identified by their customer segment name, have not placed any orders and belong to the loyalty tier indicating \"Potential Churn Risk\"? Consider only those customers who have been enrolled in the loyalty program for more than six months and have not utilized any promotional offers during this period.",
        "query": " SELECT DISTINCT c.CUSTOMER_ID, cs.CUSTOMER_SEGMENT_NAME AS customer_name FROM Customers c JOIN Customer_Segments cs ON c.CUSTOMER_SEGMENT_ID = cs.CUSTOMER_SEGMENT_ID LEFT JOIN Orders o ON c.CUSTOMER_ID = o.ORDER_ID LEFT JOIN Order_Items oi ON o.ORDER_ID = oi.ORDER_ITEM_ID LEFT JOIN Promotion_Rules pr ON o.ORDER_PROMOTION_RULE_ID = pr.PROMOTION_RULE_ID WHERE c.LOYALTY_TIER = 'Potential Churn Risk'   AND c.LOYALTY_PROGRAM_ENROLLED = TRUE   AND DATEDIFF(CURRENT_TIMESTAMP, c.LOYALTY_PROGRAM_RANK) > 180   AND o.ORDER_ID IS NULL   AND pr.PROMOTION_RULE_ID IS NULL; ",
        "schema_links": [
            "Customers.CUSTOMER_ID",
            "Promotion_Rules.PROMOTION_RULE_ID",
            "Customers.LOYALTY_PROGRAM_ENROLLED",
            "Customers.LOYALTY_PROGRAM_RANK",
            "Customer_Segments.CUSTOMER_SEGMENT_ID",
            "Orders.ORDER_ID",
            "Customers.LOYALTY_TIER",
            "Orders.ORDER_PROMOTION_RULE_ID",
            "Customers.CUSTOMER_SEGMENT_ID",
            "Customer_Segments.CUSTOMER_SEGMENT_NAME",
            "Order_Items.ORDER_ITEM_ID"
        ]
    },
    {
        "instance_id": "q_544",
        "db_id": "customer_order_flow",
        "question": "What are the IDs, names, prices, and colors of products that have been ordered fewer than two times in the past 30 days, where the orders were completed and the products were not associated with any promotional campaigns during this period?",
        "query": " SELECT      p.PRODUCT_ID AS product_id,     p.PRODUCT_NAME AS product_name,     p.PRODUCT_PRICE AS product_price,     p.PRODUCT_COLOR AS product_color FROM      Products p LEFT JOIN      Orders o ON p.PRODUCT_ID = ANY(SELECT oi.ORDER_ITEM_PRODUCT_ID FROM Order_Items oi WHERE oi.ORDER_ITEM_ORDER_ID = o.ORDER_ID) LEFT JOIN      Promotion_Rules pr ON o.ORDER_PROMOTION_RULE_ID = pr.PROMOTION_RULE_ID WHERE      o.ORDER_STATUS = 'Completed'     AND o.PAYMENT_DATE >= NOW() - INTERVAL '30 days'     AND pr.PROMOTION_RULE_ID IS NULL GROUP BY      p.PRODUCT_ID, p.PRODUCT_NAME, p.PRODUCT_PRICE, p.PRODUCT_COLOR HAVING      COUNT(o.ORDER_ID) < 2; ",
        "schema_links": [
            "Orders.ORDER_STATUS",
            "Promotion_Rules.PROMOTION_RULE_ID",
            "Products.PRODUCT_COLOR",
            "Products.PRODUCT_ID",
            "Orders.PAYMENT_DATE",
            "Orders.ORDER_ID",
            "Order_Items.ORDER_ITEM_ORDER_ID",
            "Order_Items.ORDER_ITEM_PRODUCT_ID",
            "Products.PRODUCT_NAME",
            "Orders.ORDER_PROMOTION_RULE_ID",
            "Products.PRODUCT_PRICE"
        ]
    },
    {
        "instance_id": "q_541",
        "db_id": "customer_order_flow",
        "question": "Identify the unique names, prices, and descriptions of products purchased by female customers, ensuring that only customers with a defined loyalty tier are included. Organize the results by loyalty tier and product name to analyze purchasing patterns across different customer segments.",
        "query": " SELECT DISTINCT      p.PRODUCT_NAME AS product_name,      p.PRODUCT_PRICE AS product_price,      p.PRODUCT_DESCRIPTION AS product_description FROM      Products p JOIN      Order_Items oi ON p.PRODUCT_ID = oi.PRODUCT_ID JOIN      Orders o ON oi.ORDER_ID = o.ORDER_ID JOIN      Customers c ON o.CUSTOMER_ID = c.CUSTOMER_ID WHERE      c.GENDER = 'Female'     AND c.LOYALTY_TIER IS NOT NULL ORDER BY      c.LOYALTY_TIER,      p.PRODUCT_NAME;    ### 注意： 1. 假设 Products 表中存在字段 PRODUCT_NAME, PRODUCT_PRICE, 和 PRODUCT_DESCRIPTION，但模式定义未明确提供。如果这些字段不存在，请补充完整模式定义。 2. 假设 Customers 表中存在字段 GENDER，但模式定义未明确提供。如果该字段不存在，请补充完整模式定义。",
        "schema_links": [
            "Order_Items.ORDER_ID",
            "Customers.CUSTOMER_ID",
            "Customers.GENDER",
            "Products.PRODUCT_ID",
            "Order_Items.PRODUCT_ID",
            "Orders.ORDER_ID",
            "Products.PRODUCT_DESCRIPTION",
            "Products.PRODUCT_NAME",
            "Orders.CUSTOMER_ID",
            "Customers.LOYALTY_TIER",
            "Products.PRODUCT_PRICE"
        ]
    },
    {
        "instance_id": "q_540",
        "db_id": "customer_order_flow",
        "question": "What are the product names, prices, and promotion descriptions for items purchased by customers in the highest loyalty tier who used the specific payment method 'SPECIFIC_PAYMENT_METHOD' and completed their orders within the last 30 days?",
        "query": " SELECT      p.PRODUCT_ID AS PRODUCT_ID,     p.PRODUCT_BRAND AS PRODUCT_NAME,     oi.ORDER_ITEM_REVENUE AS PRICE,     pr.PROMOTION_RULE_DESCRIPTION AS DESCRIPTION FROM      Customers c JOIN      Orders o ON c.CUSTOMER_ID = o.CUSTOMER_ID JOIN      Order_Items oi ON o.ORDER_ID = oi.ORDER_ITEM_ID JOIN      Products p ON oi.ORDER_ITEM_ID = p.PRODUCT_ID LEFT JOIN      Promotion_Rules pr ON o.ORDER_PROMOTION_RULE_ID = pr.PROMOTION_RULE_ID WHERE      c.LOYALTY_TIER = (SELECT MAX(c2.LOYALTY_TIER) FROM Customers c2)     AND o.PAYMENT_METHOD = 'SPECIFIC_PAYMENT_METHOD'     AND o.PAYMENT_DATE >= NOW() - INTERVAL '1 MONTH'     AND o.ORDER_STATUS = 'Completed'; ",
        "schema_links": [
            "Products.PRODUCT_BRAND",
            "Orders.ORDER_STATUS",
            "Customers.CUSTOMER_ID",
            "Promotion_Rules.PROMOTION_RULE_DESCRIPTION",
            "Order_Items.ORDER_ITEM_REVENUE",
            "Promotion_Rules.PROMOTION_RULE_ID",
            "Products.PRODUCT_ID",
            "Orders.PAYMENT_METHOD",
            "Orders.PAYMENT_DATE",
            "Orders.ORDER_ID",
            "Orders.CUSTOMER_ID",
            "Customers.LOYALTY_TIER",
            "Orders.ORDER_PROMOTION_RULE_ID",
            "Order_Items.ORDER_ITEM_ID"
        ]
    },
    {
        "instance_id": "q_549",
        "db_id": "student_engagement",
        "question": "List the unique identifiers and personal details, including loyalty score, payment method, loyalty tier, and student preference, for students who meet the following criteria: they are enrolled in at least two different academic events, have received fewer than two detentions, have achieved either an award or a high-performance score (weighted above 4.0) within the current semester, and maintain a cumulative GPA of 3.5 or higher. Ensure that recent achievements and event participations are considered to reflect positive engagement.",
        "query": " SELECT DISTINCT s.student_id, s.loyalty_score, s.payment_method, s.loyalty_tier, s.student_preference FROM cre_Students_Information_Systems_new.Students s JOIN cre_Students_Information_Systems_new.Student_Events se ON s.student_id = se.student_id JOIN cre_Students_Information_Systems_new.Achievements a ON s.student_id = a.student_id LEFT JOIN cre_Students_Information_Systems_new.Transcripts t ON s.student_id = t.student_id WHERE se.event_participation_count >= 2 AND (     SELECT COUNT(*)      FROM cre_Students_Information_Systems_new.Student_Events se2      WHERE se2.student_id = s.student_id AND se2.event_participation_status = 'Detention' ) < 2 AND a.achievement_date >= DATE_TRUNC('semester', CURRENT_DATE) AND (a.achievement_type = 'Award' OR a.achievement_weighting > 4.0) AND t.transcript_cumulative_gpa >= 3.5; ",
        "schema_links": [
            "Transcripts.transcript_cumulative_gpa",
            "Students.payment_method",
            "Students.loyalty_tier",
            "Students.student_id",
            "Transcripts.student_id",
            "Student_Events.student_id",
            "Achievements.achievement_date",
            "Achievements.student_id",
            "Student_Events.event_participation_status",
            "Achievements.achievement_type",
            "Students.loyalty_score",
            "Achievements.achievement_weighting",
            "Student_Events.event_participation_count",
            "Students.student_preference"
        ]
    },
    {
        "instance_id": "q_546",
        "db_id": "student_engagement",
        "question": "Which students have either participated in more than one unique academic achievement within the last semester (starting from January 1, 2023) or have had fewer than two disciplinary actions recorded since January 1, 2023? Additionally, include students who may be at risk of dropping out based on a loyalty score lower than 5.0. Provide their biographical information, including their unique student identifier, loyalty score, payment method, loyalty tier, and student preferences. Ensure that students with no disciplinary actions are also included in the results.",
        "query": " SELECT      s.student_id,      s.loyalty_score,      s.payment_method,      s.loyalty_tier,      s.student_preference,     COUNT(DISTINCT a.achievement_id) AS achievement_count,     SUM(CASE WHEN se.event_participation_status = 'disciplinary' THEN 1 ELSE 0 END) AS disciplinary_actions FROM      cre_Students_Information_Systems_new.Students s LEFT JOIN      cre_Students_Information_Systems_new.Achievements a      ON s.student_id = a.student_id AND a.achievement_date >= '2023-01-01'::date LEFT JOIN      student_events.Student_Events se      ON s.student_id = se.student_id AND se.event_start_time >= '2023-01-01'::timestamp WHERE      (COUNT(DISTINCT a.achievement_id) > 1 AND se.event_participation_status != 'disciplinary')     OR (SUM(CASE WHEN se.event_participation_status = 'disciplinary' THEN 1 ELSE 0 END) < 2)     OR s.loyalty_score < 5.0 -- Assuming at-risk students have low loyalty scores GROUP BY      s.student_id, s.loyalty_score, s.payment_method, s.loyalty_tier, s.student_preference HAVING      COUNT(DISTINCT a.achievement_id) > 1      OR SUM(CASE WHEN se.event_participation_status = 'disciplinary' THEN 1 ELSE 0 END) < 2; ",
        "schema_links": [
            "Students.payment_method",
            "Students.loyalty_tier",
            "Students.student_id",
            "Student_Events.student_id",
            "Achievements.student_id",
            "Student_Events.event_participation_status",
            "Students.loyalty_score",
            "Achievements.achievement_id",
            "Students.student_preference"
        ]
    },
    {
        "instance_id": "q_545",
        "db_id": "student_engagement",
        "question": "Find teachers who have taught classes with 'data' mentioned in the class details but have never been assigned to any class whose name starts with 'net'. Additionally, provide insights into their teaching performance by including the average student attendance percentage and the number of students who dropped out of their classes in the last academic year.",
        "query": " SELECT      t.teacher_id,     t.teacher_department,     AVG(se.student_attendance_percentage) AS avg_student_attendance,     COUNT(DISTINCT CASE WHEN se.student_dropped_out = 'Yes' THEN se.student_id END) AS dropout_count FROM      Teachers t LEFT JOIN      Classes c ON t.teacher_id = c.teacher_id LEFT JOIN      Student_Enrollment se ON c.class_id = se.class_id LEFT JOIN      (SELECT DISTINCT teacher_id FROM Classes WHERE class_name LIKE 'net%') net_classes ON t.teacher_id = net_classes.teacher_id WHERE      net_classes.teacher_id IS NULL     AND c.class_details LIKE '%data%'     AND se.enrollment_year = EXTRACT(YEAR FROM CURRENT_DATE) - 1 GROUP BY      t.teacher_id, t.teacher_department; ",
        "schema_links": [
            "Teachers.teacher_department",
            "Teachers.teacher_id",
            "Student_Enrollment.class_id",
            "Student_Enrollment.student_attendance_percentage",
            "Student_Enrollment.student_dropped_out",
            "Student_Enrollment.student_id",
            "Classes.class_id",
            "Classes.class_details",
            "Classes.teacher_id",
            "Classes.class_name",
            "Student_Enrollment.enrollment_year"
        ]
    },
    {
        "instance_id": "q_552",
        "db_id": "student_engagement",
        "question": "Which teachers, who have taught at least one class in the past six months and are currently active, are associated with classes that include 'data' in their descriptions while not teaching any classes starting with 'net'? Additionally, provide details about these teachers, including their department and average rating. Ensure that only teachers with a valid performance review within the last six months and a non-null rating are considered.",
        "query": " SELECT      t.teacher_id,      t.teacher_department,      AVG(t.teacher_rating) AS average_rating FROM      Teachers t JOIN      Transcripts tr ON t.teacher_id = tr.transcript_id WHERE      tr.transcript_course_load > 0     AND tr.transcript_semester IN (         SELECT transcript_semester          FROM Transcripts          WHERE transcript_year >= EXTRACT(YEAR FROM CURRENT_DATE - INTERVAL '6 MONTH')     )     AND EXISTS (         SELECT 1          FROM Ref_Achievement_Type rat          WHERE rat.achievement_type_code LIKE '%data%'              AND rat.achievement_type_code = tr.transcript_course_load     )     AND NOT EXISTS (         SELECT 1          FROM Ref_Achievement_Type rat          WHERE rat.achievement_type_code LIKE 'net%'              AND rat.achievement_type_code = tr.transcript_course_load     )     AND t.teacher_rating IS NOT NULL     AND t.teacher_performance_review_date >= CURRENT_DATE - INTERVAL '6 MONTH' GROUP BY      t.teacher_id, t.teacher_department; ",
        "schema_links": [
            "Ref_Achievement_Type.achievement_type_code",
            "Transcripts.transcript_semester",
            "Teachers.teacher_performance_review_date",
            "Transcripts.transcript_course_load",
            "Transcripts.transcript_id",
            "Teachers.teacher_department",
            "Teachers.teacher_id",
            "Teachers.teacher_rating",
            "Transcripts.transcript_year"
        ]
    },
    {
        "instance_id": "q_547",
        "db_id": "student_engagement",
        "question": "Find students who have never been involved in disciplinary actions, such as detentions (event_type_code = 'disciplinary_action' with participation status as 'participated'), and have not participated in any financial assistance programs like student loans (event_type_code = 'financial_assistance' with participation status as 'participated'). Provide their biographical information, including loyalty score, payment method, loyalty tier, and student preferences. Additionally, list any notable achievements described in the Achievements table and highlight their participation status and ranking in any events they have been part of during their academic journey. Results should be ordered by student ID.",
        "query": " SELECT      s.student_id,     s.loyalty_score,     s.payment_method,     s.loyalty_tier,     s.student_preference,     a.achievement_description,     se.event_participation_status,     se.event_participation_ranking FROM      cre_Students_Information_Systems_new.Students s LEFT JOIN      cre_Students_Information_Systems_new.Achievements a          ON s.student_id = a.student_id LEFT JOIN      cre_Students_Information_Systems_new.Student_Events se          ON s.student_id = se.student_id WHERE      s.student_id NOT IN (         SELECT DISTINCT student_id          FROM cre_Students_Information_Systems_new.Student_Events          WHERE event_type_code = 'disciplinary_action' AND event_participation_status = 'participated'     ) AND      s.student_id NOT IN (         SELECT DISTINCT student_id          FROM cre_Students_Information_Systems_new.Student_Events          WHERE event_type_code = 'financial_assistance' AND event_participation_status = 'participated'     ) ORDER BY      s.student_id; ",
        "schema_links": [
            "Students.payment_method",
            "Students.loyalty_tier",
            "Students.student_id",
            "Achievements.achievement_description",
            "Student_Events.student_id",
            "Achievements.student_id",
            "Student_Events.event_participation_status",
            "Student_Events.event_participation_ranking",
            "Student_Events.event_type_code",
            "Students.loyalty_score",
            "Students.student_preference"
        ]
    },
    {
        "instance_id": "q_554",
        "db_id": "student_engagement",
        "question": "Identify students who have never received detentions and do not use student loans as their payment method. Provide their biographical information, including loyalty score, payment method, loyalty tier, and student preferences. Additionally, list their achievements with details such as achievement description, type, and date. Include any notable events they participated in, showing the event participation status and ranking. Analyze their academic performance by providing their GPA, semester, and year from their transcripts. Organize the results by student ID, achievement date, and event participation ranking.",
        "query": " SELECT      s.student_id,     s.loyalty_score,     s.payment_method,     s.loyalty_tier,     s.student_preference,     a.achievement_description,     a.achievement_type,     a.achievement_date,     se.event_participation_status,     se.event_participation_ranking,     t.transcript_gpa,     t.transcript_semester,     t.transcript_year FROM      cre_Students_Information_Systems_new.Students s LEFT JOIN      cre_Students_Information_Systems_new.Achievements a          ON s.student_id = a.student_id LEFT JOIN      cre_Students_Information_Systems_new.Student_Events se          ON s.student_id = se.student_id LEFT JOIN      cre_Students_Information_Systems_new.Transcripts t          ON s.student_id = t.student_id WHERE      s.payment_method NOT IN ('Student Loan')      AND s.student_id NOT IN (         SELECT DISTINCT student_id          FROM cre_Students_Information_Systems_new.Student_Events          WHERE event_participation_status = 'Detention'     ) ORDER BY      s.student_id, a.achievement_date, se.event_participation_ranking; ",
        "schema_links": [
            "Students.payment_method",
            "Transcripts.transcript_gpa",
            "Students.loyalty_tier",
            "Students.student_id",
            "Achievements.achievement_description",
            "Transcripts.transcript_semester",
            "Student_Events.student_id",
            "Achievements.achievement_date",
            "Achievements.student_id",
            "Transcripts.student_id",
            "Student_Events.event_participation_status",
            "Student_Events.event_participation_ranking",
            "Achievements.achievement_type",
            "Students.loyalty_score",
            "Transcripts.transcript_year",
            "Students.student_preference"
        ]
    },
    {
        "instance_id": "q_555",
        "db_id": "student_engagement",
        "question": "Identify students who belong to the \"specific_behavior_category\" and have demonstrated this behavior at least three times during the last academic term (from January 1, 2023, to June 30, 2023). Additionally, ensure these students maintain a consistent academic performance with a minimum GPA of 2.5 across all semesters within the same period. Provide their personal background information, including loyalty score, payment method, loyalty tier, and student preferences. Include any associated behavioral notes from the achievements records and detailed class attendance information, such as GPA, semester, and year, from their transcripts.",
        "query": " SELECT      s.student_id,      s.loyalty_score,      s.payment_method,      s.loyalty_tier,      s.student_preference,      a.achievement_description,      t.transcript_gpa,      t.transcript_semester,      t.transcript_year FROM      cre_Students_Information_Systems_new.Students s JOIN      cre_Students_Information_Systems_new.Achievements a      ON s.student_id = a.student_id JOIN      cre_Students_Information_Systems_new.Transcripts t      ON s.student_id = t.student_id WHERE      a.achievement_category = 'specific_behavior_category'     AND a.achievement_date >= '2023-01-01'::date -- Assuming last academic term starts from Jan 1, 2023     AND a.achievement_date <= '2023-06-30'::date -- Assuming last academic term ends on June 30, 2023     AND s.student_id IN (         SELECT              student_id         FROM              cre_Students_Information_Systems_new.Achievements         WHERE              achievement_category = 'specific_behavior_category'             AND achievement_date >= '2023-01-01'::date             AND achievement_date <= '2023-06-30'::date         GROUP BY              student_id         HAVING              COUNT(achievement_id) >= 3     ) GROUP BY      s.student_id,      s.loyalty_score,      s.payment_method,      s.loyalty_tier,      s.student_preference,      a.achievement_description,      t.transcript_gpa,      t.transcript_semester,      t.transcript_year HAVING      MIN(t.transcript_gpa) > 2.5; -- Assuming consistent performance means GPA > 2.5 across all semesters ",
        "schema_links": [
            "Students.payment_method",
            "Transcripts.transcript_gpa",
            "Students.loyalty_tier",
            "Students.student_id",
            "Achievements.achievement_category",
            "Achievements.achievement_description",
            "Transcripts.transcript_semester",
            "Transcripts.student_id",
            "Achievements.achievement_date",
            "Achievements.student_id",
            "Students.loyalty_score",
            "Achievements.achievement_id",
            "Transcripts.transcript_year",
            "Students.student_preference"
        ]
    },
    {
        "instance_id": "q_562",
        "db_id": "student_engagement",
        "question": "Find students who have completed events with a duration greater than 0 hours exactly three times between January 1, 2023, and the current date. Provide their student ID, loyalty score, payment method, loyalty tier, and student preference. Additionally, calculate the average GPA of these students from their transcripts. Include only those students whose behavior has been consistently recorded three times within the specified period. Ensure all data pertains to the recent evaluation timeframe.",
        "query": " SELECT      s.student_id,      s.loyalty_score,      s.payment_method,      s.loyalty_tier,      s.student_preference,      COUNT(se.event_id) AS behavior_count,      AVG(t.transcript_gpa) AS average_gpa FROM      cre_Students_Information_Systems_new.Students s LEFT JOIN      student_events.Student_Events se ON s.student_id = se.student_id LEFT JOIN      transcripts.Transcripts t ON s.student_id = t.student_id WHERE      se.event_participation_status = 'Completed'     AND se.event_duration_hours > 0     AND se.event_start_time >= '2023-01-01'::date     AND se.event_end_time <= CURRENT_DATE GROUP BY      s.student_id, s.loyalty_score, s.payment_method, s.loyalty_tier, s.student_preference HAVING      COUNT(se.event_id) = 3; ",
        "schema_links": [
            "Student_Events.event_id",
            "Student_Events.event_duration_hours",
            "Student_Events.event_start_time",
            "Student_Events.event_end_time",
            "Students.payment_method",
            "Transcripts.transcript_gpa",
            "Students.loyalty_tier",
            "Students.student_id",
            "Transcripts.student_id",
            "Student_Events.student_id",
            "Student_Events.event_participation_status",
            "Students.loyalty_score",
            "Students.student_preference"
        ]
    },
    {
        "instance_id": "q_553",
        "db_id": "student_engagement",
        "question": "Find students whose behavior segmentation consistently indicates the \"Least Severe Behavior\" across all records. Retrieve their biographical details, including loyalty score, payment method, loyalty tier, and student preferences. Additionally, provide any associated address information (province, city, district, and address type) and guardians' contact information (if available; indicate \"No Guardian Info\" if not). Also, determine whether these students have had any detentions or notable events within the last academic term (starting from January 1, 2023), indicating \"Yes\" or \"No\" accordingly. Ensure results are grouped by each student's unique identifier and related attributes.",
        "query": " SELECT      s.student_id,      s.loyalty_score,      s.payment_method,      s.loyalty_tier,      s.student_preference,      a.address_province,      a.address_city,      a.address_district,      a.address_type,      COALESCE(g.guardian_contact_info, 'No Guardian Info') AS guardian_contact_info,     CASE          WHEN se.event_participation_status = 'Detention' AND se.event_start_time >= '2023-01-01'::date THEN 'Yes'         ELSE 'No'     END AS had_detention_or_notable_event FROM      cre_Students_Information_Systems_new.Students s LEFT JOIN      cre_Students_Information_Systems_new.Students_Addresses sa ON s.student_id = sa.student_address_id LEFT JOIN      cre_Students_Information_Systems_new.Addresses a ON sa.student_address_id = a.address_id LEFT JOIN      student_events.Student_Segmentation seg ON s.student_id = seg.student_segmentation_id LEFT JOIN      student_events.Student_Events se ON s.student_id = se.student_id LEFT JOIN      guardians g ON s.student_id = g.student_id WHERE      seg.segmentation_criteria = 'Least Severe Behavior' GROUP BY      s.student_id,      s.loyalty_score,      s.payment_method,      s.loyalty_tier,      s.student_preference,      a.address_province,      a.address_city,      a.address_district,      a.address_type,      g.guardian_contact_info,      se.event_participation_status,      se.event_start_time; ",
        "schema_links": [
            "Addresses.address_id",
            "Student_Events.event_start_time",
            "Student_Segmentation.student_segmentation_id",
            "Students.payment_method",
            "Students.loyalty_tier",
            "Addresses.address_city",
            "Student_Segmentation.segmentation_criteria",
            "Students.student_id",
            "guardians.student_id",
            "Student_Events.student_id",
            "Students_Addresses.student_address_id",
            "Student_Events.event_participation_status",
            "student_events.Student_Events.event_start_time",
            "Addresses.address_province",
            "Addresses.address_district",
            "student_events.Student_Events.event_participation_status",
            "guardians.guardian_contact_info",
            "Students.loyalty_score",
            "Addresses.address_type",
            "Students.student_preference"
        ]
    },
    {
        "instance_id": "q_551",
        "db_id": "student_engagement",
        "question": "Which students have the highest frequency of behavior records within the last academic term (from September 1, 2022, to December 31, 2022), and what are their key biographical details, including loyalty score, payment method, loyalty tier, and student preference? Additionally, calculate the average achievement score for these students and count the number of detention events during the same period. Provide the top 10 results sorted by behavior record frequency in descending order.",
        "query": " SELECT      s.student_id,     s.loyalty_score,     s.payment_method,     s.loyalty_tier,     s.student_preference,     COUNT(se.event_id) AS event_frequency,     AVG(a.achievement_weighting) AS avg_achievement_score,     SUM(CASE WHEN se.event_participation_status = 'Detention' THEN 1 ELSE 0 END) AS detention_count FROM      cre_Students_Information_Systems_new.Students s LEFT JOIN      student_events.Student_Events se ON s.student_id = se.student_id LEFT JOIN      cre_Students_Information_Systems_new.Achievements a ON s.student_id = a.student_id WHERE      se.event_start_time >= '2022-09-01'::date -- Assuming last academic term start date     AND se.event_end_time <= '2022-12-31'::date -- Assuming last academic term end date GROUP BY      s.student_id, s.loyalty_score, s.payment_method, s.loyalty_tier, s.student_preference ORDER BY      event_frequency DESC LIMIT 10; ",
        "schema_links": [
            "Student_Events.event_id",
            "Student_Events.event_start_time",
            "Student_Events.event_end_time",
            "Students.payment_method",
            "Students.loyalty_tier",
            "Students.student_id",
            "Student_Events.student_id",
            "Achievements.student_id",
            "Student_Events.event_participation_status",
            "Students.loyalty_score",
            "Achievements.achievement_weighting",
            "Students.student_preference"
        ]
    },
    {
        "instance_id": "q_550",
        "db_id": "student_engagement",
        "question": "Which event type has the highest average participation rate among students, measured as the ratio of distinct participants to distinct events? Provide the corresponding event description, the total number of unique participants, the average satisfaction score achieved by students for this event type, and the most common dropout reason among classes associated with this event type.",
        "query": " SELECT      r.event_type_code AS event_type,     se.event_description,     COUNT(DISTINCT se.student_id) AS total_participants,     AVG(se.event_satisfaction_score) AS average_score,     MODE() WITHIN GROUP (ORDER BY sd.dropout_reason) AS most_common_dropout_reason FROM      student_events se JOIN      ref_event_types r ON se.event_type_code = r.event_type_code LEFT JOIN      (SELECT student_id, event_id, dropout_reason FROM student_dropout_details) sd      ON se.event_id = sd.event_id GROUP BY      r.event_type_code, se.event_description ORDER BY      COUNT(DISTINCT se.student_id) / NULLIF(COUNT(DISTINCT se.event_id), 0) DESC LIMIT 1; ",
        "schema_links": [
            "student_events.event_id",
            "student_dropout_details.dropout_reason",
            "student_dropout_details.student_id",
            "student_events.event_description",
            "student_events.student_id",
            "ref_event_types.event_type_code",
            "student_events.event_type_code",
            "student_dropout_details.event_id",
            "student_events.event_satisfaction_score"
        ]
    },
    {
        "instance_id": "q_556",
        "db_id": "student_engagement",
        "question": "What is the event type with the highest average participation score among students who have attended at least three events? Please provide the event type code, its description, the average participation score, and the total number of students who meet this criterion.",
        "query": " SELECT      r.event_type_code AS event_type_code,     r.event_type_description AS event_type_description,     AVG(s.event_satisfaction_score) AS average_participation_score,     COUNT(DISTINCT s.student_id) AS total_students FROM      student_events s JOIN      ref_event_types r ON s.event_type_code = r.event_type_code WHERE      s.student_id IN (         SELECT              se.student_id         FROM              student_events se         GROUP BY              se.student_id         HAVING              COUNT(se.event_id) >= 3     ) GROUP BY      r.event_type_code, r.event_type_description ORDER BY      average_participation_score DESC LIMIT 1; ",
        "schema_links": [
            "student_events.event_id",
            "ref_event_types.event_type_description",
            "student_events.student_id",
            "ref_event_types.event_type_code",
            "student_events.event_type_code",
            "student_events.event_satisfaction_score"
        ]
    },
    {
        "instance_id": "q_557",
        "db_id": "property_rental",
        "question": "Which cities have properties with swimming pools that are currently on the market and have been viewed by potential buyers within the last 30 days?",
        "query": "SELECT DISTINCT p.PROPERTY_ADDRESS_ID AS CITY FROM real_estate_rentals_new.Properties p JOIN real_estate_rentals_new.Property_Features pf ON p.PROPERTY_ID = pf.PROPERTY_ID JOIN real_estate_rentals_new.Features f ON pf.PROPERTY_ID = f.FEATURE_ID JOIN real_estate_rentals_new.User_Property_History uph ON p.PROPERTY_ID = uph.PROPERTY_ID WHERE f.FEATURE_DESCRIPTION = 'Swimming Pool'   AND p.PROPERTY_STATUS = 'On Market'   AND uph.DATESTAMP >= NOW() - INTERVAL '30 days'   AND uph.USER_PROPERTY_INTEREST = TRUE;",
        "schema_links": [
            "Features.FEATURE_ID",
            "User_Property_History.PROPERTY_ID",
            "Properties.PROPERTY_ADDRESS_ID",
            "Properties.PROPERTY_ID",
            "User_Property_History.DATESTAMP",
            "Features.FEATURE_DESCRIPTION",
            "User_Property_History.USER_PROPERTY_INTEREST",
            "Properties.PROPERTY_STATUS",
            "Property_Features.PROPERTY_ID"
        ]
    },
    {
        "instance_id": "q_563",
        "db_id": "property_rental",
        "question": "Identify the distinct cities where properties featuring swimming pools are available, ensuring that these properties have been listed on the market for less than 30 days and have garnered user interest within the past week. Additionally, filter the results to include only those properties whose prices fall within the interquartile range (25th to 75th percentile) of price-related search queries conducted by users in the same city over the past week. Prioritize the results by the earliest date the property was listed on the market.",
        "query": " SELECT DISTINCT p.PROPERTY_ADDRESS_ID AS city FROM Properties p JOIN Property_Features pf ON p.PROPERTY_ID = pf.PROPERTY_ID JOIN Features f ON f.FEATURE_ID = pf.FEATURE_ID AND f.FEATURE_DESCRIPTION = 'Swimming Pool' JOIN User_Property_History uph ON p.PROPERTY_ID = uph.PROPERTY_ID JOIN Users u ON uph.USER_ID = u.USER_ID WHERE p.DATE_ON_MARKET >= NOW() - INTERVAL '30 days'   AND uph.DATESTAMP >= NOW() - INTERVAL '7 days'   AND uph.USER_PROPERTY_INTEREST = TRUE   AND p.PROPERTY_PRICE BETWEEN (     SELECT percentile_cont(0.25) WITHIN GROUP (ORDER BY us.SEARCH_STRING::decimal)     FROM User_Searches us     WHERE us.SEARCH_DATE >= NOW() - INTERVAL '7 days'       AND us.SEARCH_STRING ~ '^[\\d\\.\\,]+$'       AND p.PROPERTY_ADDRESS_ID = us.PROPERTY_ADDRESS_ID   ) AND (     SELECT percentile_cont(0.75) WITHIN GROUP (ORDER BY us.SEARCH_STRING::decimal)     FROM User_Searches us     WHERE us.SEARCH_DATE >= NOW() - INTERVAL '7 days'       AND us.SEARCH_STRING ~ '^[\\d\\.\\,]+$'       AND p.PROPERTY_ADDRESS_ID = us.PROPERTY_ADDRESS_ID   ) ORDER BY p.DATE_ON_MARKET ASC; ",
        "schema_links": [
            "Users.USER_ID",
            "Properties.PROPERTY_PRICE",
            "Features.FEATURE_ID",
            "User_Property_History.PROPERTY_ID",
            "User_Property_History.USER_PROPERTY_INTEREST",
            "Property_Features.PROPERTY_ID",
            "User_Searches.SEARCH_DATE",
            "User_Searches.SEARCH_STRING",
            "Properties.PROPERTY_ADDRESS_ID",
            "Properties.DATE_ON_MARKET",
            "Properties.PROPERTY_ID",
            "User_Property_History.DATESTAMP",
            "Features.FEATURE_DESCRIPTION",
            "User_Property_History.USER_ID",
            "Property_Features.FEATURE_ID",
            "User_Searches.PROPERTY_ADDRESS_ID"
        ]
    },
    {
        "instance_id": "q_560",
        "db_id": "property_rental",
        "question": "Identify users who have expressed interest in at least two distinct properties and have conducted searches on no more than two unique dates, indicating a low level of engagement. Provide the users' last names and their unique identifiers. Prioritize users with a longer duration between their first and latest search activities, as they may represent more qualified leads.",
        "query": " SELECT DISTINCT u.USER_ID AS unique_identifier, uh.USER_LAST_NAME AS last_name FROM Users u JOIN (     SELECT USER_ID, COUNT(DISTINCT PROPERTY_ID) AS property_count     FROM User_Property_History     WHERE USER_PROPERTY_INTEREST = TRUE     GROUP BY USER_ID     HAVING COUNT(DISTINCT PROPERTY_ID) >= 2 ) ip ON u.USER_ID = ip.USER_ID JOIN (     SELECT USER_ID, COUNT(DISTINCT SEARCH_DATE) AS search_occasions     FROM User_Searches     GROUP BY USER_ID     HAVING COUNT(DISTINCT SEARCH_DATE) <= 2 ) se ON u.USER_ID = se.USER_ID JOIN (     SELECT USER_ID, MAX(SEARCH_DATE) AS latest_search_date, MIN(SEARCH_DATE) AS first_search_date     FROM User_Searches     GROUP BY USER_ID ) tenure ON u.USER_ID = tenure.USER_ID ORDER BY (tenure.latest_search_date - tenure.first_search_date) DESC; ",
        "schema_links": [
            "Users.USER_ID",
            "Users.USER_LAST_NAME",
            "tenure.USER_ID",
            "User_Property_History.PROPERTY_ID",
            "User_Searches.SEARCH_DATE",
            "User_Searches.USER_ID",
            "tenure.SEARCH_DATE",
            "User_Property_History.USER_PROPERTY_INTEREST",
            "User_Property_History.USER_ID"
        ]
    },
    {
        "instance_id": "q_558",
        "db_id": "property_rental",
        "question": "Which users, identified by their user IDs and category codes (interpreted as last names), have conducted two or fewer property searches within the past year but actively manage more than one property in the system? Additionally, include users who prioritize specific property features, indicated by their association with properties that have recorded features, and have been registered on the platform for over a year.",
        "query": " SELECT      u.USER_ID,     u.USER_CATEGORY_CODE AS last_name FROM      Users u LEFT JOIN      User_Searches us ON u.USER_ID = us.USER_SEARCH_HISTORY_ID LEFT JOIN      User_Property_History uph ON u.USER_ID = uph.USER_ID LEFT JOIN      Property_Features pf ON uph.PROPERTY_ID = pf.PROPERTY_ID WHERE      (SELECT COUNT(*) FROM User_Searches WHERE USER_SEARCH_HISTORY_ID = u.USER_ID) <= 2     AND (SELECT COUNT(DISTINCT PROPERTY_ID) FROM User_Property_History WHERE USER_ID = u.USER_ID) > 1     AND EXISTS (         SELECT 1          FROM Property_Features          WHERE PROPERTY_ID IN (SELECT PROPERTY_ID FROM User_Property_History WHERE USER_ID = u.USER_ID)     )     AND DATEDIFF(CURDATE(), MIN(us.SEARCH_DATE)) OVER (PARTITION BY u.USER_ID) > 365 GROUP BY      u.USER_ID, u.USER_CATEGORY_CODE; ",
        "schema_links": [
            "User_Searches.USER_SEARCH_HISTORY_ID",
            "Users.USER_ID",
            "User_Property_History.PROPERTY_ID",
            "User_Searches.SEARCH_DATE",
            "Users.USER_CATEGORY_CODE",
            "User_Property_History.USER_ID",
            "Property_Features.PROPERTY_ID"
        ]
    },
    {
        "instance_id": "q_564",
        "db_id": "process_hub",
        "question": "What is the process outcome, process status description, and their corresponding weighted scores for the documents that have an approval status of \"Pending\" and were last accessed within the past 30 days? Additionally, include the name of the author who created each document.",
        "query": " SELECT      dp.process_outcome_code AS process_outcome,     dp.process_status_code AS process_status_description,     dp.PROCESS_SEQUENCE_WEIGHT_ADJUSTED AS weighted_score,     d.author_name FROM      Documents_Processes dp JOIN      Documents d ON dp.process_sequence_number = d.document_id WHERE      dp.process_approval_status = 'Pending'     AND d.document_last_accessed >= (CURRENT_TIMESTAMP - INTERVAL '30 days'); ",
        "schema_links": [
            "Documents.document_last_accessed",
            "Documents.document_id",
            "Documents_Processes.process_approval_status",
            "Documents_Processes.process_sequence_number",
            "Documents_Processes.process_outcome_code",
            "Documents_Processes.process_status_code",
            "Documents_Processes.PROCESS_SEQUENCE_WEIGHT_ADJUSTED",
            "Documents.author_name"
        ]
    },
    {
        "instance_id": "q_568",
        "db_id": "client_segmentation_sales",
        "question": "Which clients have attended exactly one meeting with a positive revenue trend, are associated with an invoice, and belong to a loyalty program level indicating \"High Revenue Potential\"? Additionally, provide their unique identifier, industry classification code, and the agency they are associated with. Consider only clients whose satisfaction score exceeds the average satisfaction score for their industry segment, and ensure that these clients are enrolled in a loyalty program.",
        "query": " SELECT      c.CLIENT_ID AS unique_identifier,     c.INDUSTRY_CLASSIFICATION_CODE,     a.AGENCY_ID AS associated_agency FROM      Clients c JOIN      (SELECT CLIENT_ID FROM Meetings GROUP BY CLIENT_ID HAVING COUNT(MEETING_ID) = 1 AND SUM(MEETING_OUTCOME_METRIC) > 0) m     ON c.CLIENT_ID = m.CLIENT_ID JOIN      Invoices i     ON c.CLIENT_ID = i.CLIENT_ID JOIN      Agencies a     ON c.AGENCY_ID = a.AGENCY_ID WHERE      c.LOYALTY_PROGRAM_REWARD_LEVEL = 'High Revenue Potential'     AND c.SATISFACTION_SCORE > (SELECT AVG(SATISFACTION_SCORE) FROM Clients WHERE INDUSTRY_CLASSIFICATION_CODE = c.INDUSTRY_CLASSIFICATION_CODE)     AND c.LOYALTY_PROGRAM_ENROLLED = TRUE; ",
        "schema_links": [
            "Agencies.AGENCY_ID",
            "Meetings.CLIENT_ID",
            "Clients.CLIENT_ID",
            "Clients.SATISFACTION_SCORE",
            "Meetings.MEETING_ID",
            "Clients.INDUSTRY_CLASSIFICATION_CODE",
            "Clients.LOYALTY_PROGRAM_ENROLLED",
            "Meetings.MEETING_OUTCOME_METRIC",
            "Clients.AGENCY_ID",
            "Invoices.CLIENT_ID",
            "Clients.LOYALTY_PROGRAM_REWARD_LEVEL"
        ]
    },
    {
        "instance_id": "q_565",
        "db_id": "client_segmentation_sales",
        "question": "Find the client IDs and their corresponding agency IDs for clients who have participated in exactly one meeting categorized as billable within the past, where these clients have an outstanding unpaid invoice beyond the due date. Additionally, include only clients with a loyalty score greater than 0.75, and ensure that the most recent billable meeting generated revenue exceeding $1,000.",
        "query": " SELECT      c.CLIENT_ID,     a.AGENCY_ID FROM      Clients c JOIN      Staff_in_Meetings sm ON c.CLIENT_ID = sm.CLIENT_ID JOIN      Meetings m ON sm.MEETING_ID = m.MEETING_ID JOIN      Invoices i ON c.CLIENT_ID = i.CLIENT_ID JOIN      Agencies a ON c.AGENCY_ID = a.AGENCY_ID WHERE      c.LOYALTY_SCORE > 0.75     AND m.MEETING_PURPOSE = 'billable'     AND i.PAYMENT_STATUS = 'unpaid'     AND i.INVOICE_PAYMENT_CONFIRMATION_DATE > i.PAYMENT_DUE_DATE     AND sm.MEETING_OUTCOME_METRIC > 1000     AND (SELECT COUNT(DISTINCT sm2.MEETING_ID)           FROM Staff_in_Meetings sm2           JOIN Meetings m2 ON sm2.MEETING_ID = m2.MEETING_ID          WHERE sm2.CLIENT_ID = c.CLIENT_ID             AND m2.MEETING_PURPOSE = 'billable') = 1 GROUP BY      c.CLIENT_ID, a.AGENCY_ID; ",
        "schema_links": [
            "Agencies.AGENCY_ID",
            "Clients.CLIENT_ID",
            "Staff_in_Meetings.CLIENT_ID",
            "Meetings.MEETING_ID",
            "Invoices.PAYMENT_DUE_DATE",
            "Staff_in_Meetings.MEETING_ID",
            "Invoices.PAYMENT_STATUS",
            "Invoices.INVOICE_PAYMENT_CONFIRMATION_DATE",
            "Clients.AGENCY_ID",
            "Meetings.MEETING_PURPOSE",
            "Staff_in_Meetings.MEETING_OUTCOME_METRIC",
            "Invoices.CLIENT_ID",
            "Clients.LOYALTY_SCORE"
        ]
    },
    {
        "instance_id": "q_559",
        "db_id": "client_segmentation_sales",
        "question": "Determine the start and end times of each session, identified by its session ID, along with details about the associated client profile, including their loyalty tier and score. Additionally, provide information about the team members involved in each session, specifically their staff ID and commission rate. Categorize each session's potential revenue impact as \"High Revenue Impact\" if the client is enrolled in a loyalty program and the meeting review status is positive, \"Moderate Revenue Impact\" if the review status is neutral, and \"Low Revenue Impact\" otherwise. Further, classify each session based on its contribution to client loyalty progression: label it as \"Significant Loyalty Progression\" if the client's loyalty score exceeds 0.8, \"Moderate Loyalty Progression\" if the score is between 0.5 and 0.8, and \"Minimal Loyalty Progression\" if the score is below 0.5. Present the results ordered by session start time in ascending order.",
        "query": " SELECT      m.MEETING_ID AS Session_ID,     MIN(m.MEETING_OUTCOME_DATE) AS Session_Start_Time,     MAX(m.MEETING_OUTCOME_DATE) AS Session_End_Time,     c.CLIENT_ID AS Client_ID,     c.LOYALTY_TIER AS Client_Loyalty_Tier,     c.LOYALTY_SCORE AS Client_Loyalty_Score,     s.STAFF_ID AS Staff_ID,     s.COMMISSION_RATE AS Staff_Commission_Rate,     CASE          WHEN c.LOYALTY_PROGRAM_ENROLLED = TRUE AND m.MEETING_REVIEW_STATUS = 'Positive' THEN 'High Revenue Impact'         WHEN c.LOYALTY_PROGRAM_ENROLLED = TRUE AND m.MEETING_REVIEW_STATUS = 'Neutral' THEN 'Moderate Revenue Impact'         ELSE 'Low Revenue Impact'     END AS Revenue_Impact_Category,     CASE          WHEN c.LOYALTY_SCORE > 0.8 THEN 'Significant Loyalty Progression'         WHEN c.LOYALTY_SCORE BETWEEN 0.5 AND 0.8 THEN 'Moderate Loyalty Progression'         ELSE 'Minimal Loyalty Progression'     END AS Loyalty_Progression_Category FROM      Meetings m JOIN      Staff_in_Meetings sm ON m.MEETING_ID = sm.MEETING_ID JOIN      Clients c ON sm.MEETING_ID = c.CLIENT_ID -- Assuming a link exists between meetings and clients JOIN      Staff s ON sm.STAFF_ID = s.STAFF_ID GROUP BY      m.MEETING_ID, c.CLIENT_ID, c.LOYALTY_TIER, c.LOYALTY_SCORE, s.STAFF_ID, s.COMMISSION_RATE, c.LOYALTY_PROGRAM_ENROLLED, m.MEETING_REVIEW_STATUS ORDER BY      Session_Start_Time ASC; ",
        "schema_links": [
            "Staff_in_Meetings.STAFF_ID",
            "Meetings.MEETING_REVIEW_STATUS",
            "Clients.CLIENT_ID",
            "Staff.COMMISSION_RATE",
            "Meetings.MEETING_ID",
            "Staff_in_Meetings.MEETING_ID",
            "Clients.LOYALTY_PROGRAM_ENROLLED",
            "Staff.STAFF_ID",
            "Meetings.MEETING_OUTCOME_DATE",
            "Clients.LOYALTY_TIER",
            "Clients.LOYALTY_SCORE"
        ]
    },
    {
        "instance_id": "q_569",
        "db_id": "client_segmentation_sales",
        "question": "Which meetings exhibited the highest revenue variance, specifically identifying their start and end times, the associated client loyalty program reward level, and the roles of staff involved in those meetings? Additionally, provide the meeting outcome metrics and statuses to assess alignment with the revenue forecast. Were there any notable patterns in staff attendance or contribution scores for these meetings, as indicated by the available data?",
        "query": " WITH MeetingRevenueVariance AS (     SELECT          sm.MEETING_ID,         m.MEETING_START_TIME,         m.MEETING_END_TIME,         c.LOYALTY_PROGRAM_REWARD_LEVEL,         sm.STAFF_ROLE_IN_MEETING,         sm.MEETING_OUTCOME_METRIC,         sm.MEETING_OUTCOME_STATUS,         (REVENUE_FORECAST - ACTUAL_REVENUE) AS REVENUE_VARIANCE     FROM Staff_in_Meetings sm     JOIN Meetings m ON sm.MEETING_ID = m.MEETING_ID     JOIN Clients c ON m.CLIENT_ID = c.CLIENT_ID     WHERE sm.MEETING_OUTCOME_METRIC IS NOT NULL ), RankedMeetings AS (     SELECT          MRV.MEETING_ID,         MRV.MEETING_START_TIME,         MRV.MEETING_END_TIME,         MRV.LOYALTY_PROGRAM_REWARD_LEVEL,         MRV.STAFF_ROLE_IN_MEETING,         MRV.MEETING_OUTCOME_METRIC,         MRV.MEETING_OUTCOME_STATUS,         MRV.REVENUE_VARIANCE,         RANK() OVER (ORDER BY ABS(MRV.REVENUE_VARIANCE) DESC) AS VARIANCE_RANK     FROM MeetingRevenueVariance MRV ) SELECT      RM.MEETING_ID,     RM.MEETING_START_TIME,     RM.MEETING_END_TIME,     RM.LOYALTY_PROGRAM_REWARD_LEVEL,     RM.STAFF_ROLE_IN_MEETING,     RM.MEETING_OUTCOME_METRIC,     RM.MEETING_OUTCOME_STATUS,     RM.REVENUE_VARIANCE FROM RankedMeetings RM WHERE RM.VARIANCE_RANK = 1; ",
        "schema_links": [
            "Staff_in_Meetings.ACTUAL_REVENUE",
            "Meetings.CLIENT_ID",
            "Meetings.MEETING_START_TIME",
            "Clients.CLIENT_ID",
            "Staff_in_Meetings.MEETING_ID",
            "Meetings.MEETING_END_TIME",
            "Staff_in_Meetings.STAFF_ROLE_IN_MEETING",
            "Staff_in_Meetings.MEETING_OUTCOME_STATUS",
            "Staff_in_Meetings.REVENUE_FORECAST",
            "Staff_in_Meetings.MEETING_OUTCOME_METRIC",
            "Clients.LOYALTY_PROGRAM_REWARD_LEVEL"
        ]
    },
    {
        "instance_id": "q_571",
        "db_id": "catalog_sales",
        "question": "Which catalog entries have the highest frequency of attributes across all entries, and what is their associated environmental impact score (represented by the loyalty score)? Additionally, determine the current status of these entries by identifying whether they are in a promotion phase (if they have a non-null promotion rule ID), marked as retired (if their order status is \"Retired\"), or neither, based on the latest status updates?",
        "query": " WITH AttributeFrequency AS (     SELECT          ca.catalog_entry_id,         COUNT(ad.attribute_id) AS attribute_count     FROM          Catalog_Contents ca     LEFT JOIN          Attribute_Definitions ad     ON          ca.catalog_entry_id = ad.attribute_id     GROUP BY          ca.catalog_entry_id ), MostCommonAttributes AS (     SELECT          catalog_entry_id     FROM          AttributeFrequency     WHERE          attribute_count = (SELECT MAX(attribute_count) FROM AttributeFrequency) ), LatestStatus AS (     SELECT          catalog_entry_id,         order_status,         promotion_rule_id,         ROW_NUMBER() OVER (PARTITION BY catalog_entry_id ORDER BY segmentation_update_date DESC) AS rn     FROM          Catalog_Contents cc     INNER JOIN          Customers c     ON          cc.catalog_entry_id = c.customer_segmentation_id ) SELECT      mca.catalog_entry_id,     cc.loyalty_score AS environmental_impact_score,     CASE          WHEN ls.promotion_rule_id IS NOT NULL THEN 'Promotion Phase'         WHEN cc.order_status = 'Retired' THEN 'Retired'         ELSE 'Not in Promotion or Retired'      END AS current_status FROM      MostCommonAttributes mca INNER JOIN      Catalog_Contents cc ON      mca.catalog_entry_id = cc.catalog_entry_id LEFT JOIN      LatestStatus ls ON      mca.catalog_entry_id = ls.catalog_entry_id AND ls.rn = 1; ",
        "schema_links": [
            "Customers.promotion_rule_id",
            "Customers.customer_segmentation_id",
            "Catalog_Contents.catalog_entry_id",
            "LatestStatus.segmentation_update_date",
            "Catalog_Contents.order_status",
            "Catalog_Contents.loyalty_score",
            "LatestStatus.promotion_rule_id",
            "Attribute_Definitions.attribute_id"
        ]
    },
    {
        "instance_id": "q_561",
        "db_id": "catalog_sales",
        "question": "Which catalog entries are currently active, belong to the product category with the most detailed subcategories, and have the highest number of associated attributes? Please provide the IDs and names of these catalog entries.",
        "query": " SELECT      cc.catalog_entry_id,      cc.catalog_entry_name,      COUNT(ad.attribute_id) AS attribute_count FROM      Catalog_Contents AS cc LEFT JOIN      Attribute_Definitions AS ad ON      cc.catalog_entry_id = ad.attribute_id WHERE      cc.order_status = 'active'     AND cc.catalog_entry_category IN (         SELECT              catalog_entry_category         FROM              Catalog_Contents         GROUP BY              catalog_entry_category         ORDER BY              COUNT(DISTINCT catalog_entry_subcategory) DESC         LIMIT 1     ) GROUP BY      cc.catalog_entry_id, cc.catalog_entry_name ORDER BY      attribute_count DESC LIMIT 1; ",
        "schema_links": [
            "Catalog_Contents.catalog_entry_name",
            "Catalog_Contents.catalog_entry_id",
            "Catalog_Contents.catalog_entry_category",
            "Catalog_Contents.order_status",
            "Catalog_Contents.catalog_entry_subcategory",
            "Attribute_Definitions.attribute_id"
        ]
    },
    {
        "instance_id": "q_566",
        "db_id": "music_catalogue",
        "question": "Find the names of tracks that belong to playlists categorized as \"Movies\", excluding any tracks associated with genres containing \"Music\". Consider only tracks linked to promotional rules and analyze whether these tracks have been part of any order cancellations or were approved under the order status \"Approved\" within the last quarter (starting from October 1, 2022). Results should be distinct and ordered alphabetically by track name.",
        "query": " SELECT DISTINCT t.name AS track_name FROM store_1_new.tracks t JOIN store_1_new.albums a ON t.album_id = a.id JOIN store_1_new.invoices i ON i.customer_id = ANY (ARRAY(     SELECT customer_id      FROM store_1_new.orders      WHERE order_cancellation_reason IS NOT NULL         OR (order_status IN ('Approved') AND order_approval_date >= '2022-10-01'::timestamptz) )) LEFT JOIN store_1_new.promotions p ON i.promotion_rule_id = p.id LEFT JOIN store_1_new.genres g ON t.genre_id = g.id WHERE g.name = 'Movies'   AND NOT EXISTS (     SELECT 1      FROM store_1_new.genres g2      WHERE g2.name LIKE '%Music%' AND t.genre_id = g2.id   ) ORDER BY t.name; ",
        "schema_links": [
            "orders.customer_id",
            "albums.id",
            "tracks.genre_id",
            "genres.name",
            "tracks.album_id",
            "tracks.name",
            "invoices.customer_id",
            "orders.order_cancellation_reason",
            "invoices.promotion_rule_id",
            "genres.genre_id",
            "promotions.id",
            "genres.id",
            "orders.order_status",
            "orders.order_approval_date"
        ]
    },
    {
        "instance_id": "q_567",
        "db_id": "music_catalogue",
        "question": "Which tracks are included in the \"Movies\" playlist but excluded from the \"Music\" playlist, and what are their associated promotion discounts, if any? Consider only those tracks that have been part of a sales forecast within the last 6 months, and list the results in alphabetical order by track name.",
        "query": " SELECT      t.name AS track_name,      p.promotion_rule_description AS promotion_discount FROM      tracks AS t LEFT JOIN      albums AS a ON t.album_id = a.id LEFT JOIN      artists AS ar ON a.artist_id = ar.id LEFT JOIN      invoices AS i ON t.id = i.track_id LEFT JOIN      promotions AS p ON i.promotion_rule_id = p.id LEFT JOIN      sales_forecast AS sf ON t.id = sf.track_id WHERE      t.id IN (         SELECT track_id          FROM playlists          WHERE playlist_name = 'Movies'     )     AND t.id NOT IN (         SELECT track_id          FROM playlists          WHERE playlist_name = 'Music'     )     AND sf.forecast_date >= NOW() - INTERVAL '6 months'     AND sf.forecast_date <= NOW() ORDER BY      t.name; ",
        "schema_links": [
            "sales_forecast.forecast_date",
            "albums.id",
            "tracks.album_id",
            "tracks.name",
            "playlists.track_id",
            "invoices.track_id",
            "sales_forecast.track_id",
            "invoices.promotion_rule_id",
            "promotions.id",
            "artists.id",
            "albums.artist_id",
            "promotions.promotion_rule_description",
            "playlists.playlist_name",
            "tracks.id"
        ]
    },
    {
        "instance_id": "q_570",
        "db_id": "music_catalogue",
        "question": "Identify the distinct names of tracks that belong to entertainment-related genres, have been purchased by customers with above-average loyalty scores, are associated with approved orders, and are linked to promotional rules. Ensure that only tracks appearing in both entertainment categories are included, and list the results in alphabetical order by track name.",
        "query": " SELECT DISTINCT t.name AS item_name FROM store_1_new.tracks t JOIN store_1_new.albums a ON t.album_id = a.id JOIN store_1_new.invoices i ON a.id = i.customer_id JOIN store_1_new.promotions p ON i.promotion_rule_id = p.promotion_rule_type JOIN store_1_new.customers c ON i.customer_id = c.id WHERE c.customer_loyalty_score > (SELECT AVG(customer_loyalty_score) FROM store_1_new.customers)   AND t.genre_id IN (SELECT g.id FROM store_1_new.genres g WHERE g.name LIKE '%entertainment%')   AND i.order_status = 'approved' ORDER BY t.name; ",
        "schema_links": [
            "invoices.order_status",
            "promotions.promotion_rule_type",
            "albums.id",
            "tracks.genre_id",
            "genres.name",
            "tracks.album_id",
            "tracks.name",
            "invoices.customer_id",
            "invoices.promotion_rule_id",
            "customers.id",
            "customers.customer_loyalty_score",
            "genres.id"
        ]
    },
    {
        "instance_id": "q_572",
        "db_id": "music_catalogue",
        "question": "Which tracks are featured in both music and video playlists, and what are their associated promotion statuses? Additionally, identify the loyalty tiers of customers who most frequently purchase these tracks, to determine potential high-value items, ordered by the number of customer purchases in descending order.",
        "query": " SELECT      t.name AS track_name,      p.promotion_rule_description AS promotion_status,      c.customer_segment AS customer_loyalty_tier FROM      tracks t JOIN      albums a ON t.album_id = a.id JOIN      artists ar ON a.artist_id = ar.id LEFT JOIN      invoices i ON t.id = i.track_id LEFT JOIN      promotions p ON i.promotion_rule_id = p.id JOIN      customers c ON i.customer_id = c.id WHERE      t.id IN (         SELECT track_id          FROM playlists          WHERE playlist_type = 'music'     )     AND t.id IN (         SELECT track_id          FROM playlists          WHERE playlist_type = 'video'     ) GROUP BY      t.name, p.promotion_rule_description, c.customer_segment ORDER BY      COUNT(i.customer_id) DESC; ",
        "schema_links": [
            "albums.id",
            "tracks.album_id",
            "tracks.name",
            "playlists.track_id",
            "invoices.track_id",
            "invoices.customer_id",
            "invoices.promotion_rule_id",
            "customers.customer_segment",
            "customers.id",
            "promotions.promotion_rule_description",
            "albums.artist_id",
            "artists.id",
            "promotions.id",
            "playlists.playlist_type",
            "tracks.id"
        ]
    },
    {
        "instance_id": "q_573",
        "db_id": "music_sales_analysis",
        "question": "Which albums, from artists who have been active for more than 10 years, include tracks that belong to both the 'Reggae' and 'Rock' genres, and what is the average popularity score of these tracks based on customer preferences?",
        "query": " SELECT DISTINCT a.AlbumId, AVG(pt.PlaylistTrackUserRating) AS AveragePopularityScore FROM Album a JOIN Track t ON a.AlbumId = t.TrackId JOIN PlaylistTrack pt ON t.TrackId = pt.PlaylistTrackId JOIN Artist ar ON a.ArtistId = ar.ArtistId WHERE ar.ArtistActiveYears > 10 AND EXISTS (     SELECT 1     FROM Track t1     JOIN Genre g1 ON t1.GenreId = g1.GenreId     WHERE t1.TrackId = t.TrackId AND g1.GenreName = 'Reggae' ) AND EXISTS (     SELECT 1     FROM Track t2     JOIN Genre g2 ON t2.GenreId = g2.GenreId     WHERE t2.TrackId = t.TrackId AND g2.GenreName = 'Rock' ) GROUP BY a.AlbumId; ",
        "schema_links": [
            "Album.ArtistId",
            "Genre.GenreId",
            "Artist.ArtistActiveYears",
            "PlaylistTrack.PlaylistTrackUserRating",
            "Album.AlbumId",
            "PlaylistTrack.PlaylistTrackId",
            "Track.GenreId",
            "Track.TrackId",
            "Genre.GenreName",
            "Artist.ArtistId"
        ]
    },
    {
        "instance_id": "q_574",
        "db_id": "music_sales_analysis",
        "question": "Identify the unique identifiers and types of playlists that include both Reggae and Rock genre tracks, while ensuring that these playlists are associated with artists who have been active for more than 10 years. Additionally, consider the popularity scores of the tracks within these playlists as part of the analysis. Results should be ordered by playlist identifier.",
        "query": " SELECT DISTINCT p.PlaylistId, p.PlaylistType  FROM Playlist p JOIN PlaylistTrack pt ON p.PlaylistId = pt.PlaylistId JOIN Track t ON pt.PlaylistTrackId = t.TrackId JOIN Album a ON t.TrackId = a.AlbumId JOIN Artist ar ON a.AlbumId = ar.ArtistId WHERE EXISTS (     SELECT 1      FROM Track t1      JOIN PlaylistTrack pt1 ON t1.TrackId = pt1.PlaylistTrackId     WHERE t1.TrackCategory = 'Reggae' AND pt1.PlaylistId = p.PlaylistId ) AND EXISTS (     SELECT 1      FROM Track t2      JOIN PlaylistTrack pt2 ON t2.TrackId = pt2.PlaylistTrackId     WHERE t2.TrackCategory = 'Rock' AND pt2.PlaylistId = p.PlaylistId ) AND ar.ArtistActiveYears > 10 ORDER BY p.PlaylistId; ",
        "schema_links": [
            "Playlist.PlaylistType",
            "Playlist.PlaylistId",
            "Artist.ArtistActiveYears",
            "Track.TrackCategory",
            "Album.AlbumId",
            "PlaylistTrack.PlaylistTrackId",
            "PlaylistTrack.PlaylistId",
            "Track.TrackId",
            "Artist.ArtistId"
        ]
    },
    {
        "instance_id": "q_578",
        "db_id": "apt_reservation",
        "question": "Which apartments, offering facilities marked as \"Highly Available\" and having received an above-average rating from previous guests, have been booked with both provisional and confirmed statuses within overlapping booking windows? Additionally, provide the average guest loyalty score, the ratio of premium membership guests, and the likelihood of these bookings being canceled based on historical guest behavior. Ensure that only apartments meeting all specified criteria are included in the results.",
        "query": " SELECT      a.APT_ID,     a.APT_TYPE_CODE,     a.APT_NUMBER,     a.APARTMENT_RATING,     a.APARTMENT_AMENITIES,     COUNT(DISTINCT CASE WHEN ab.APT_BOOKING_APPROVAL_STATUS = 'Provisional' THEN ab.APT_BOOKING_ID END) AS Provisional_Bookings_Count,     COUNT(DISTINCT CASE WHEN ab.APT_BOOKING_APPROVAL_STATUS = 'Confirmed' THEN ab.APT_BOOKING_ID END) AS Confirmed_Bookings_Count,     AVG(g.GUEST_LOYALTY_SCORE) AS Avg_Loyalty_Score,     SUM(CASE WHEN g.GUEST_PREMIUM_MEMBERSHIP = TRUE THEN 1 ELSE 0 END) / COUNT(DISTINCT g.GUEST_ID) AS Premium_Membership_Ratio,     (SUM(CASE WHEN ab.BOOKING_CANCEL_REASON IS NOT NULL THEN 1 ELSE 0 END) * 1.0 / COUNT(DISTINCT ab.APT_BOOKING_ID)) AS Cancellation_Likelihood FROM      Apartments a JOIN      Apartment_Bookings ab ON a.APT_ID = ab.APT_ID JOIN      Guests g ON ab.GUEST_ID = g.GUEST_ID WHERE      a.APARTMENT_RATING > (SELECT AVG(APARTMENT_RATING) FROM Apartments)     AND 'Highly Available' = ANY(a.APARTMENT_AMENITIES)     AND EXISTS (         SELECT 1          FROM Apartment_Bookings ab2          WHERE ab2.APT_ID = a.APT_ID          AND ab2.APT_BOOKING_APPROVAL_STATUS IN ('Provisional', 'Confirmed')         AND ab2.CHECK_IN_TIME <= ab.CHECK_OUT_TIME          AND ab2.CHECK_OUT_TIME >= ab.CHECK_IN_TIME     ) GROUP BY      a.APT_ID, a.APT_TYPE_CODE, a.APT_NUMBER, a.APARTMENT_RATING, a.APARTMENT_AMENITIES HAVING      COUNT(DISTINCT CASE WHEN ab.APT_BOOKING_APPROVAL_STATUS = 'Provisional' THEN ab.APT_BOOKING_ID END) > 0     AND COUNT(DISTINCT CASE WHEN ab.APT_BOOKING_APPROVAL_STATUS = 'Confirmed' THEN ab.APT_BOOKING_ID END) > 0; ",
        "schema_links": [
            "Apartments.APARTMENT_AMENITIES",
            "Apartment_Bookings.APT_BOOKING_APPROVAL_STATUS",
            "Apartments.APT_NUMBER",
            "Guests.GUEST_PREMIUM_MEMBERSHIP",
            "Apartment_Bookings.GUEST_ID",
            "Apartment_Bookings.BOOKING_CANCEL_REASON",
            "Apartments.APARTMENT_RATING",
            "Guests.GUEST_LOYALTY_SCORE",
            "Apartments.APT_TYPE_CODE",
            "Apartment_Bookings.CHECK_IN_TIME",
            "Apartment_Bookings.CHECK_OUT_TIME",
            "Guests.GUEST_ID",
            "Apartment_Bookings.APT_BOOKING_ID",
            "Apartments.APT_ID"
        ]
    },
    {
        "instance_id": "q_575",
        "db_id": "apt_reservation",
        "question": "Which apartments, identified by their apartment numbers and associated building IDs, have both provisional and confirmed bookings within the past 30 days? Additionally, include any apartments where the booking approval process was initiated but not yet completed, indicating potential delays in the approval workflow. The results should be ordered by apartment number.",
        "query": " SELECT DISTINCT      a.APT_NUMBER,      b.BUILDING_ID AS BUILDING_NAME FROM      Apartments a JOIN      Apartment_Bookings ab1 ON a.APT_ID = ab1.APT_ID LEFT JOIN      Booking_Approval_Log bal ON ab1.APT_BOOKING_ID = bal.APT_BOOKING_ID WHERE      ab1.CHECK_IN_TIME >= CURRENT_TIMESTAMP - INTERVAL '30 days'     AND EXISTS (         SELECT 1          FROM Apartment_Bookings ab2          WHERE ab2.APT_ID = a.APT_ID              AND ab2.APT_BOOKING_APPROVAL_STATUS = 'Provisional'     )     AND EXISTS (         SELECT 1          FROM Apartment_Bookings ab3          WHERE ab3.APT_ID = a.APT_ID              AND ab3.APT_BOOKING_APPROVAL_STATUS = 'Confirmed'     )     OR (bal.APPROVAL_FLOW_STAGE IS NOT NULL AND bal.APPROVAL_DECISION IS NULL) ORDER BY      a.APT_NUMBER; ",
        "schema_links": [
            "Apartment_Bookings.CHECK_IN_TIME",
            "Apartment_Bookings.APT_BOOKING_ID",
            "Apartment_Bookings.APT_BOOKING_APPROVAL_STATUS",
            "Booking_Approval_Log.APT_BOOKING_ID",
            "Booking_Approval_Log.APPROVAL_DECISION",
            "Apartments.APT_NUMBER",
            "Apartment_Bookings.APT_ID",
            "Booking_Approval_Log.APPROVAL_FLOW_STAGE",
            "Apartments.APT_ID"
        ]
    },
    {
        "instance_id": "q_582",
        "db_id": "apt_reservation",
        "question": "Which apartment numbers have alternated between available and unavailable statuses at least once within the past 30 days, along with the exact dates of these status changes? Additionally, provide any promotions or discounts applied to bookings associated with these status changes. Classify these apartments as \"Premium\" if they include amenities such as a Gym or Pool, otherwise classify them as \"Standard.\" Ensure the results are ordered by apartment number and status date in ascending order.",
        "query": " SELECT      a.APT_NUMBER,     vus.APT_STATUS,     vus.STATUS_DATE,     ab.PROMOTION_CODE,     ab.PROMOTION_DISCOUNT,     CASE          WHEN 'Gym' = ANY(a.APARTMENT_AMENITIES) OR 'Pool' = ANY(a.APARTMENT_AMENITIES) THEN 'Premium'         ELSE 'Standard'     END AS BUILDING_CLASSIFICATION FROM      Apartments a JOIN      View_Unit_Status vus ON a.APT_ID = vus.APT_ID LEFT JOIN      Apartment_Bookings ab ON vus.APT_BOOKING_ID = ab.APT_BOOKING_ID WHERE      vus.STATUS_DATE >= CURRENT_TIMESTAMP - INTERVAL '30 days'     AND vus.APT_STATUS IN ('Available', 'Unavailable') GROUP BY      a.APT_NUMBER, vus.APT_STATUS, vus.STATUS_DATE, ab.PROMOTION_CODE, ab.PROMOTION_DISCOUNT, a.APARTMENT_AMENITIES HAVING      COUNT(DISTINCT vus.APT_STATUS) > 1 ORDER BY      a.APT_NUMBER, vus.STATUS_DATE; ",
        "schema_links": [
            "Apartment_Bookings.PROMOTION_CODE",
            "Apartments.APARTMENT_AMENITIES",
            "Apartments.APT_NUMBER",
            "View_Unit_Status.APT_STATUS",
            "View_Unit_Status.APT_BOOKING_ID",
            "Apartment_Bookings.APT_BOOKING_ID",
            "Apartment_Bookings.PROMOTION_DISCOUNT",
            "View_Unit_Status.STATUS_DATE",
            "Apartments.APT_ID",
            "View_Unit_Status.APT_ID"
        ]
    },
    {
        "instance_id": "q_580",
        "db_id": "apt_reservation",
        "question": "Which apartments, identified by their apartment numbers, have had both 'Available' and 'Booked' statuses on the same day at least once in the past month? Provide the specific dates when this occurred, along with any distinct maintenance activities scheduled for these apartments during the same period. Maintenance activities should be listed as a comma-separated string for each occurrence.",
        "query": " SELECT      a.APT_NUMBER,     v.STATUS_DATE AS date_of_occurrence,     STRING_AGG(DISTINCT v.UNIT_STATUS_CHANGE_REASON, ', ') AS maintenance_activities FROM      Apartments a JOIN      View_Unit_Status v ON a.APT_ID = v.APT_ID JOIN      Apartment_Bookings b ON a.APT_ID = b.APT_ID WHERE      v.STATUS_DATE >= CURRENT_DATE - INTERVAL '1 MONTH'     AND v.STATUS_DATE < CURRENT_DATE     AND v.APT_STATUS IN ('Available', 'Booked')     AND EXISTS (         SELECT 1         FROM View_Unit_Status v2         WHERE v2.APT_ID = v.APT_ID             AND v2.STATUS_DATE = v.STATUS_DATE             AND v2.APT_STATUS <> v.APT_STATUS     ) GROUP BY      a.APT_NUMBER, v.STATUS_DATE HAVING      COUNT(DISTINCT v.APT_STATUS) > 1; ",
        "schema_links": [
            "View_Unit_Status.UNIT_STATUS_CHANGE_REASON",
            "Apartments.APT_NUMBER",
            "Apartment_Bookings.APT_ID",
            "View_Unit_Status.STATUS_DATE",
            "Apartments.APT_ID",
            "View_Unit_Status.APT_ID",
            "View_Unit_Status.APT_STATUS"
        ]
    },
    {
        "instance_id": "q_576",
        "db_id": "booking_process",
        "question": "Which customers, categorized as \"High-Value Low-Risk,\" have used discounts between January 1, 2023, and March 31, 2023, while participating in multiple bookings and maintaining an active loyalty program status? Additionally, what is the total discount amount these customers have benefited from?",
        "query": " SELECT      c.CUSTOMER_ID,     c.CUSTOMER_LOYALTY_LEVEL,     SUM(b.ORDER_DISCOUNT_AMOUNT) AS TOTAL_DISCOUNT_BENEFITED FROM      Customers c JOIN      Bookings b ON c.CUSTOMER_ID = b.CUSTOMER_ID WHERE      c.CUSTOMER_LOYALTY_LEVEL = 'High-Value Low-Risk'     AND b.BOOKING_START_DATE >= '2023-01-01'::date -- Assuming last quarter starts from Jan 1, 2023     AND b.BOOKING_START_DATE < '2023-04-01'::date -- Assuming last quarter ends before Apr 1, 2023     AND b.DISCOUNT_COUPON_USED = TRUE     AND c.LOYALTY_PROGRAM_ENROLLMENT_DATE IS NOT NULL GROUP BY      c.CUSTOMER_ID, c.CUSTOMER_LOYALTY_LEVEL HAVING      COUNT(DISTINCT b.BOOKING_ID) > 1; ",
        "schema_links": [
            "Bookings.ORDER_DISCOUNT_AMOUNT",
            "Customers.CUSTOMER_LOYALTY_LEVEL",
            "Customers.LOYALTY_PROGRAM_ENROLLMENT_DATE",
            "Customers.CUSTOMER_ID",
            "Bookings.BOOKING_START_DATE",
            "Bookings.BOOKING_ID",
            "Bookings.CUSTOMER_ID",
            "Bookings.DISCOUNT_COUPON_USED"
        ]
    },
    {
        "instance_id": "q_577",
        "db_id": "document_flow",
        "question": "Which shipping agent has been most frequently used for mailing documents over the past 30 days, considering only documents that reached their final approval status before being mailed? Please provide the name of the shipping agent and the total number of documents mailed.",
        "query": " SELECT      rsa.shipping_agent_contact AS shipping_agent_name,      COUNT(dm.document_mailing_history_id) AS total_documents_mailed FROM      Documents_Mailed dm JOIN      Documents d ON dm.mailing_employee_id = d.sender_employee_id JOIN      Ref_Shipping_Agents rsa ON d.shipping_agent_code = rsa.shipping_agent_code WHERE      dm.mailing_date >= NOW() - INTERVAL '1 month'     AND d.document_approval_status = 'Final Approved' GROUP BY      rsa.shipping_agent_contact ORDER BY      total_documents_mailed DESC LIMIT 1; ",
        "schema_links": [
            "Documents.document_approval_status",
            "Ref_Shipping_Agents.shipping_agent_contact",
            "Documents_Mailed.mailing_employee_id",
            "Ref_Shipping_Agents.shipping_agent_code",
            "Documents_Mailed.document_mailing_history_id",
            "Documents.shipping_agent_code",
            "Documents.sender_employee_id",
            "Documents_Mailed.mailing_date"
        ]
    },
    {
        "instance_id": "q_579",
        "db_id": "document_flow",
        "question": "Find the unique IDs of all documents that are categorized as formal reports, have a status of finalized, and are awaiting distribution. Ensure these documents have not been rejected or expired within the system, have not been dispatched via any courier service, and specifically exclude those handled by the express courier service. Additionally, confirm that none of these documents were sent by employees who have previously used the express courier service for mailing.",
        "query": " SELECT DISTINCT d.document_id FROM Documents AS d JOIN Ref_Document_Types AS rdt ON d.document_type_code = rdt.document_type_code LEFT JOIN Documents_Mailed AS dm ON d.document_id = dm.mailing_employee_id WHERE d.document_status_code = 'Finalized' AND d.document_approval_status = 'Awaiting Distribution' AND d.document_rejection_reason IS NULL AND d.document_status_code NOT IN ('Rejected', 'Expired') AND rdt.document_category = 'Formal Reports' AND (dm.mailing_method IS NULL OR dm.mailing_method != 'Express Courier') AND d.sender_employee_id NOT IN (     SELECT mailing_employee_id      FROM Documents_Mailed      WHERE mailing_method = 'Express Courier' ); ",
        "schema_links": [
            "Documents_Mailed.mailing_method",
            "Documents.document_rejection_reason",
            "Documents_Mailed.mailing_employee_id",
            "Documents.mailing_employee_id",
            "Documents.sender_employee_id",
            "Documents.document_status_code",
            "Documents.document_approval_status",
            "Documents.document_id",
            "Ref_Document_Types.document_type_code",
            "Documents.document_type_code",
            "Ref_Document_Types.document_category"
        ]
    },
    {
        "instance_id": "q_581",
        "db_id": "document_flow",
        "question": "Find the unique IDs of all documents that have been successfully delivered with a \"Delivered\" status, where the document type is categorized as \"Paper,\" and the shipping agent responsible for delivery offers a premium service level. Additionally, ensure these documents were approved within the past 30 days and underwent at least one revision during their drafting process, as indicated by a revision number greater than zero.",
        "query": " SELECT DISTINCT d.document_id FROM Documents d JOIN Documents_Mailed dm ON d.document_id = dm.mailing_employee_id JOIN Ref_Document_Types rdt ON d.document_type_code = rdt.document_type_code JOIN Ref_Shipping_Agents rsa ON d.shipping_agent_code = rsa.shipping_agent_code WHERE d.document_approval_status = 'Approved' AND d.document_creation_date >= NOW() - INTERVAL '30 days' AND rdt.document_category = 'Paper' AND rsa.shipping_agent_contact_type = 'Premium' AND EXISTS (     SELECT 1     FROM Document_Drafts dd     WHERE dd.document_draft_author = d.sender_employee_id     AND dd.document_draft_revision_number > 0 ) AND dm.mailing_status = 'Delivered'; ",
        "schema_links": [
            "Document_Drafts.document_draft_revision_number",
            "Documents_Mailed.mailing_employee_id",
            "Documents.shipping_agent_code",
            "Documents.mailing_employee_id",
            "Documents.sender_employee_id",
            "Documents_Mailed.mailing_status",
            "Document_Drafts.document_draft_author",
            "Ref_Shipping_Agents.shipping_agent_contact_type",
            "Documents.document_approval_status",
            "Documents.document_id",
            "Ref_Document_Types.document_type_code",
            "Documents.document_type_code",
            "Ref_Shipping_Agents.shipping_agent_code",
            "Documents.document_creation_date",
            "Ref_Document_Types.document_category"
        ]
    },
    {
        "instance_id": "q_585",
        "db_id": "document_flow",
        "question": "Which employee has been most actively involved in the circulation and revision of documents, measured by the total count of distinct drafts they created and distinct document copies circulated under their supervision? Please provide the employee's name along with the combined count of distinct drafts and circulated copies associated with them.",
        "query": " SELECT      e.employee_name,      COUNT(DISTINCT dd.draft_number) + COUNT(DISTINCT ch.document_mailing_history_id) AS combined_count FROM      Employees e LEFT JOIN      Document_Drafts dd ON e.employee_role_hierarchy = dd.document_draft_author LEFT JOIN      Circulation_History ch ON e.employee_role_hierarchy = ch.sender_employee_id GROUP BY      e.employee_name ORDER BY      combined_count DESC LIMIT 1; ",
        "schema_links": [
            "Circulation_History.document_mailing_history_id",
            "Document_Drafts.draft_number",
            "Employees.employee_name",
            "Circulation_History.sender_employee_id",
            "Document_Drafts.document_draft_author",
            "Employees.employee_role_hierarchy"
        ]
    },
    {
        "instance_id": "q_586",
        "db_id": "race_data",
        "question": "Identify the drivers who have participated in both the Australian Grand Prix and Chinese Grand Prix races, providing their IDs and forenames. Analyze the performance trends of these drivers during these specific races by calculating their average lap time improvements across seasons and evaluating their pit stop strategies. Include only drivers whose technical skill level (measured by driver_performance_score) is above the overall average and who have competed in at least one race characterized by challenging technical difficulty. Ensure that each selected driver has valid records for both races mentioned, and present the results grouped by individual driver with their respective pit stop strategies.",
        "query": " SELECT      d.driverId,     d.driver_forename,     AVG(lt.lap_duration_seconds) - LAG(AVG(lt.lap_duration_seconds)) OVER (PARTITION BY d.driverId ORDER BY r.race_season) AS lap_time_improvement,     ps.pit_stop_strategy FROM      drivers d JOIN      results res ON d.driverId = res.driverId JOIN      races r ON res.raceId = r.raceId LEFT JOIN      lapTimes lt ON r.raceId = lt.raceId AND res.resultId = lt.resultId LEFT JOIN      pitStops ps ON res.resultId = ps.resultId WHERE      r.race_analysis_table IN ('Australian Grand Prix', 'Chinese Grand Prix')     AND d.driver_performance_score > (SELECT AVG(driver_performance_score) FROM drivers)     AND EXISTS (         SELECT 1          FROM races r2          JOIN results res2 ON r2.raceId = res2.raceId          WHERE res2.driverId = d.driverId          AND r2.race_analysis_metrics LIKE '%challenging technical difficulty%'     ) GROUP BY      d.driverId, d.driver_forename, ps.pit_stop_strategy HAVING      COUNT(DISTINCT CASE WHEN r.race_analysis_table = 'Australian Grand Prix' THEN r.raceId END) > 0     AND COUNT(DISTINCT CASE WHEN r.race_analysis_table = 'Chinese Grand Prix' THEN r.raceId END) > 0; ",
        "schema_links": [
            "results.resultId",
            "pitStops.resultId",
            "results.raceId",
            "drivers.driver_forename",
            "races.race_analysis_table",
            "lapTimes.raceId",
            "races.raceId",
            "lapTimes.resultId",
            "lapTimes.lap_duration_seconds",
            "races.race_season",
            "races.race_analysis_metrics",
            "drivers.driver_performance_score",
            "drivers.driverId",
            "pitStops.pit_stop_strategy",
            "results.driverId"
        ]
    },
    {
        "instance_id": "q_583",
        "db_id": "race_data",
        "question": "Which drivers, identified by their ID and first name, have competed in both the Australian Grand Prix and the Chinese Grand Prix, with a technical skill level above the average of all drivers, and have participated in at least one pit stop during these races? Additionally, what were their respective performance scores in the Australian Grand Prix and the Chinese Grand Prix?",
        "query": "SELECT DISTINCT d.driverId, d.driver_first_name, r1.performance_score AS australian_gp_performance_score, r2.performance_score AS chinese_gp_performance_score FROM drivers d JOIN results r1 ON d.driverId = r1.driverId JOIN races ra1 ON r1.raceId = ra1.raceId AND ra1.circuit_country = 'Australia' JOIN results r2 ON d.driverId = r2.driverId JOIN races ra2 ON r2.raceId = ra2.raceId AND ra2.circuit_country = 'China' JOIN pitStops ps ON d.driverId = ps.driverId AND (ps.raceId = ra1.raceId OR ps.raceId = ra2.raceId) WHERE d.driver_technical_skill_level > (SELECT AVG(driver_technical_skill_level) FROM drivers) AND EXISTS (     SELECT 1     FROM results r     JOIN races ra ON r.raceId = ra.raceId     WHERE r.driverId = d.driverId     AND ra.circuit_country IN ('Australia', 'China') );",
        "schema_links": [
            "results.driverId",
            "pitStops.raceId",
            "results.raceId",
            "drivers.driver_first_name",
            "races.circuit_country",
            "drivers.driver_technical_skill_level",
            "pitStops.driverId",
            "drivers.driverId",
            "races.raceId",
            "results.performance_score"
        ]
    },
    {
        "instance_id": "q_584",
        "db_id": "race_data",
        "question": "Which drivers, identified by their driver ID and nationality, have competed in races held in Australia but have never participated in races held in China, based on their most recent race statistics? Additionally, consider only those drivers who have been active in the sport for at least five years and are part of teams that have won a championship in the past ten years. What is the average performance score for these drivers?",
        "query": " SELECT      d.driverId AS driver_id,     d.driver_nationality AS driver_nationality,     AVG(d.driver_performance_score) AS average_performance_score FROM      drivers d JOIN      results r ON d.driverId = r.driverId JOIN      races ra ON r.raceId = ra.raceId JOIN      constructors c ON d.DRIVER_CURRENT_TEAM = c.CONSTRUCTOR_TEAM_LEADER WHERE      ra.circuit_country = 'Australia'     AND NOT EXISTS (         SELECT 1          FROM results r2          JOIN races ra2 ON r2.raceId = ra2.raceId          WHERE ra2.circuit_country = 'China' AND r2.driverId = d.driverId     )     AND d.driver_experience_years >= 5     AND c.constructor_last_championship_win_year >= YEAR(NOW()) - 10 GROUP BY      d.driverId, d.driver_nationality; ",
        "schema_links": [
            "results.raceId",
            "constructors.CONSTRUCTOR_TEAM_LEADER",
            "drivers.driver_nationality",
            "races.raceId",
            "constructors.constructor_last_championship_win_year",
            "drivers.DRIVER_CURRENT_TEAM",
            "races.circuit_country",
            "drivers.driver_experience_years",
            "drivers.driver_performance_score",
            "drivers.driverId",
            "results.driverId"
        ]
    },
    {
        "instance_id": "q_589",
        "db_id": "race_data",
        "question": "Which drivers participated in the Australian Grand Prix but did not participate in the Chinese Grand Prix, and what were their performance trends during those races? Additionally, identify any drivers who showed at least a 10% improvement in either their average lap times or their average pit stop durations in the Australian Grand Prix compared to their average performance across all other races in the same season.",
        "query": " WITH AustralianGP AS (     SELECT DISTINCT r.driverId     FROM results r     JOIN races ra ON r.raceId = ra.raceId     WHERE ra.circuit_country = 'Australia' ), ChineseGP AS (     SELECT DISTINCT r.driverId     FROM results r     JOIN races ra ON r.raceId = ra.raceId     WHERE ra.circuit_country = 'China' ), DriversInAustralianNotInChinese AS (     SELECT a.driverId     FROM AustralianGP a     LEFT JOIN ChineseGP c ON a.driverId = c.driverId     WHERE c.driverId IS NULL ), PerformanceTrends AS (     SELECT d.driverId, d.driver_performance_trend     FROM drivers d     WHERE d.driverId IN (SELECT driverId FROM DriversInAustralianNotInChinese) ), SignificantImprovement AS (     SELECT r.driverId     FROM results r     JOIN races ra ON r.raceId = ra.raceId     JOIN (         SELECT driverId, AVG(pit_stop_duration_seconds) AS avg_pit_stop_duration, AVG(RESULT_LAP_TIMES[1]) AS avg_lap_time         FROM results res         JOIN pitStops ps ON res.resultId = ps.stop         GROUP BY driverId     ) avg_perf ON r.driverId = avg_perf.driverId     WHERE ra.circuit_country = 'Australia'       AND ((SELECT AVG(ps.pit_stop_duration_seconds)             FROM pitStops ps             WHERE ps.stop = r.resultId) < avg_perf.avg_pit_stop_duration * 0.9          OR (SELECT AVG(lt.lap_duration_seconds)               FROM lapTimes lt               WHERE lt.lap = r.resultId) < avg_perf.avg_lap_time * 0.9) ) SELECT d.driverId, pt.driver_performance_trend FROM PerformanceTrends pt JOIN drivers d ON pt.driverId = d.driverId WHERE d.driverId IN (SELECT driverId FROM SignificantImprovement); ",
        "schema_links": [
            "drivers.driver_performance_trend",
            "results.resultId",
            "results.raceId",
            "results.RESULT_LAP_TIMES",
            "races.raceId",
            "lapTimes.lap",
            "lapTimes.lap_duration_seconds",
            "pitStops.pit_stop_duration_seconds",
            "races.circuit_country",
            "drivers.driverId",
            "pitStops.stop",
            "results.driverId"
        ]
    },
    {
        "instance_id": "q_596",
        "db_id": "race_data",
        "question": "Which drivers, identified by their unique ID and nationality (as a proxy for name), have either performed more than 8 strategic pit stops or finished in the top 10 positions in over 5 races? Additionally, analyze how these drivers' performance trends correlate with their current team's technical skill level (represented by constructor ranking) and past race records (indicated by the last championship win year). Include only drivers who meet at least one of the specified conditions.",
        "query": " SELECT      d.driverId,     d.driver_nationality AS driver_name, -- Assuming driver_nationality is used as a proxy for name; adjust if actual name fields exist     COUNT(DISTINCT ps.stop) AS total_pit_stops,     SUM(CASE WHEN ps.pit_stop_strategy ->> 'reason' = 'strategic' THEN 1 ELSE 0 END) AS strategic_pit_stops,     COUNT(DISTINCT CASE WHEN r.result_status = 'Finished' AND r.result_grid_position <= 10 THEN res.raceId END) AS top_10_finishes,     c.constructor_ranking AS team_technical_skill_level,     c.constructor_last_championship_win_year AS team_past_race_records FROM      drivers d LEFT JOIN      pitStops ps ON d.driverId = ps.driverId LEFT JOIN      results res ON d.driverId = res.driverId LEFT JOIN      races r ON res.raceId = r.raceId LEFT JOIN      constructors c ON d.DRIVER_CURRENT_TEAM = c.CONSTRUCTOR_TEAM_LEADER WHERE      (SUM(CASE WHEN ps.pit_stop_strategy ->> 'reason' = 'strategic' THEN 1 ELSE 0 END) > 8       OR COUNT(DISTINCT CASE WHEN r.result_status = 'Finished' AND r.result_grid_position <= 10 THEN res.raceId END) > 5) GROUP BY      d.driverId, d.driver_nationality, c.constructor_ranking, c.constructor_last_championship_win_year HAVING      COUNT(DISTINCT ps.stop) > 8      OR COUNT(DISTINCT CASE WHEN r.result_status = 'Finished' AND r.result_grid_position <= 10 THEN res.raceId END) > 5; ",
        "schema_links": [
            "pitStops.pit_stop_strategy",
            "results.raceId",
            "races.result_status",
            "constructors.CONSTRUCTOR_TEAM_LEADER",
            "drivers.driver_nationality",
            "races.result_grid_position",
            "constructors.constructor_ranking",
            "constructors.constructor_last_championship_win_year",
            "drivers.DRIVER_CURRENT_TEAM",
            "drivers.driverId",
            "pitStops.stop",
            "results.driverId"
        ]
    },
    {
        "instance_id": "q_593",
        "db_id": "race_data",
        "question": "Which drivers, identified by their IDs and current teams, have either completed more than 8 laps with lap times shorter than the average lap time under optimal weather conditions or achieved a qualifying position within the top 5 in any race? Additionally, consider only those drivers who are currently contracted with a team (i.e., their contract end year is after the current year) that has a technical team leader, a team size greater than 50 members, and a ranking of 10 or higher.",
        "query": " SELECT DISTINCT d.driverId, d.DRIVER_CURRENT_TEAM FROM drivers d JOIN results r ON d.driverId = r.resultId JOIN qualifying q ON d.driverId = q.qualifyId WHERE d.DRIVER_CONTRACT_END_YEAR > YEAR(CURDATE())    AND d.DRIVER_CURRENT_TEAM IN (     SELECT CONSTRUCTOR_TEAM_LEADER      FROM constructors      WHERE CONSTRUCTOR_TEAM_SIZE > 50 AND constructor_ranking <= 10   )   AND (     (       SELECT COUNT(*)        FROM lapTimes lt        WHERE lt.lap_performance_metrics ->> 'driverId' = CAST(d.driverId AS VARCHAR)          AND lt.lap_weather_condition = 'Optimal'          AND lt.lap_duration_seconds < (           SELECT AVG(lt2.lap_duration_seconds)            FROM lapTimes lt2            WHERE lt2.lap_weather_condition = 'Optimal'         )     ) > 8      OR q.qualifying_position <= 5   ); ",
        "schema_links": [
            "qualifying.qualifyId",
            "results.resultId",
            "constructors.CONSTRUCTOR_TEAM_SIZE",
            "constructors.CONSTRUCTOR_TEAM_LEADER",
            "lapTimes.lap_performance_metrics",
            "constructors.constructor_ranking",
            "lapTimes.lap_duration_seconds",
            "qualifying.qualifying_position",
            "drivers.DRIVER_CURRENT_TEAM",
            "drivers.driverId",
            "drivers.DRIVER_CONTRACT_END_YEAR",
            "lapTimes.driverId",
            "lapTimes.lap_weather_condition"
        ]
    },
    {
        "instance_id": "q_587",
        "db_id": "race_data",
        "question": "Which drivers, identified by their last names and unique IDs, have experienced exactly 11 pit stops across all races and have finished in the top 10 positions in more than 5 race outcomes, while also possessing a technical skill level rated above the average performance score of all drivers?",
        "query": " SELECT      d.driverId AS driver_unique_id,     SUBSTRING(d.DRIVER_CURRENT_TEAM, POSITION(' ' IN d.DRIVER_CURRENT_TEAM) + 1) AS driver_last_name FROM      drivers d JOIN      results r ON d.driverId = r.result_driverId JOIN      pitStops p ON d.driverId = p.pitstop_driverId WHERE      d.driver_performance_score > (SELECT AVG(driver_performance_score) FROM drivers) GROUP BY      d.driverId, driver_last_name HAVING      COUNT(DISTINCT CASE WHEN p.stop IS NOT NULL THEN p.stop END) = 11     AND SUM(CASE WHEN r.result_positionOrder <= 10 THEN 1 ELSE 0 END) > 5; ",
        "schema_links": [
            "drivers.DRIVER_CURRENT_TEAM",
            "results.result_driverId",
            "drivers.driver_performance_score",
            "drivers.driverId",
            "results.result_positionOrder",
            "pitStops.stop",
            "pitStops.pitstop_driverId"
        ]
    },
    {
        "instance_id": "q_594",
        "db_id": "race_data",
        "question": "Which drivers, identified by their surnames and IDs, had exactly 11 pit stops in races where they finished in the top 10 positions, participated in more than half of the total races in any season, and have been with their current team for at least two years? Only consider seasons where at least one race was held.",
        "query": " SELECT      d.driverId,      SUBSTRING(d.DRIVER_CURRENT_TEAM FROM '(?<=\\s)\\w+$') AS driver_surname FROM      drivers d JOIN      results r ON d.driverId = r.driverId JOIN      races ra ON r.raceId = ra.raceId JOIN      pitStops ps ON d.driverId = ps.driverId AND r.raceId = ps.raceId WHERE      r.result_grid_position <= 10     AND d.DRIVER_CONTRACT_END_YEAR - EXTRACT(YEAR FROM CURRENT_DATE) >= 2     AND ra.race_season IN (         SELECT race_season          FROM races          GROUP BY race_season          HAVING COUNT(DISTINCT raceId) > 0     ) GROUP BY      d.driverId, driver_surname HAVING      COUNT(DISTINCT ps.stop) = 11     AND COUNT(DISTINCT r.raceId) > (SELECT COUNT(DISTINCT raceId) / 2 FROM races); ",
        "schema_links": [
            "results.raceId",
            "pitStops.driverId",
            "races.raceId",
            "pitStops.raceId",
            "races.race_season",
            "drivers.DRIVER_CURRENT_TEAM",
            "drivers.driverId",
            "results.result_grid_position",
            "drivers.DRIVER_CONTRACT_END_YEAR",
            "pitStops.stop",
            "results.driverId"
        ]
    },
    {
        "instance_id": "q_595",
        "db_id": "order_delivery",
        "question": "Identify customers who have not placed any orders in the past 90 days and whose delivery addresses are not located in provinces typically associated with high delivery volumes, such as California. Provide their loyalty scores and segmentation categories to evaluate potential customer retention strategies. Ensure that customers without any order history are included by considering those whose most recent order timestamp is earlier than 90 days from the current date or who have no orders at all.",
        "query": " SELECT      c.CUSTOMER_ID,     c.LOYALTY_SCORE,     c.SEGMENTATION_CATEGORY FROM      Customers c LEFT JOIN      Actual_Orders ao ON c.CUSTOMER_ID = ao.ACTUAL_ORDER_ID WHERE      ao.ACTUAL_ORDER_ID IS NULL     AND c.DELIVERY_ADDRESS_PROVINCE NOT IN ('California')     AND (CURRENT_TIMESTAMP - INTERVAL '90 DAYS') > COALESCE((SELECT MAX(ao1.ORDER_PAYMENT_TIMESTAMP) FROM Actual_Orders ao1 WHERE ao1.ACTUAL_ORDER_ID = c.CUSTOMER_ID), '1970-01-01'::timestamp); ",
        "schema_links": [
            "Actual_Orders.ORDER_PAYMENT_TIMESTAMP",
            "Customers.CUSTOMER_ID",
            "Actual_Orders.ACTUAL_ORDER_ID",
            "Customers.LOYALTY_SCORE",
            "Customers.DELIVERY_ADDRESS_PROVINCE",
            "Customers.SEGMENTATION_CATEGORY"
        ]
    },
    {
        "instance_id": "q_592",
        "db_id": "maintenance_asset",
        "question": "Identify assets that are currently under active maintenance contracts and have experienced faults with a resolution time of less than 2 hours. Provide the asset ID, a detailed description of the fault, and the average response time from engineers for these faults. Additionally, include the probability of part failure for any parts associated with these assets, where the probability is defined as 1.0 if the part is unavailable and 0.0 if the part is available. Ensure results are grouped by asset ID, fault description, and part availability status.",
        "query": " SELECT      a.ASSET_ID,     fl.FAULT_DESCRIPTION AS detailed_description,     AVG(fl.FAULT_RESOLUTION_TIME) AS average_response_time,     CASE          WHEN p.PART_AVAILABILITY = FALSE THEN 1.0          ELSE 0.0      END AS probability_of_part_failure FROM      Assets a JOIN      Maintenance_Contracts mc ON a.ASSET_MAINTENANCE_HISTORY_ID = mc.MAINTENANCE_CONTRACT_ID JOIN      Fault_Log fl ON a.ASSET_ID = fl.FAULT_LOG_ENTRY_ID LEFT JOIN      Parts p ON a.ASSET_ID = p.PART_ID WHERE      mc.CONTRACT_RENEWAL_STATUS = 'Active'     AND fl.FAULT_RESOLUTION_TIME < 120 GROUP BY      a.ASSET_ID, fl.FAULT_DESCRIPTION, p.PART_AVAILABILITY; ",
        "schema_links": [
            "Maintenance_Contracts.CONTRACT_RENEWAL_STATUS",
            "Assets.ASSET_MAINTENANCE_HISTORY_ID",
            "Fault_Log.FAULT_DESCRIPTION",
            "Maintenance_Contracts.MAINTENANCE_CONTRACT_ID",
            "Assets.ASSET_ID",
            "Fault_Log.FAULT_RESOLUTION_TIME",
            "Parts.PART_ID",
            "Parts.PART_AVAILABILITY",
            "Fault_Log.FAULT_LOG_ENTRY_ID"
        ]
    },
    {
        "instance_id": "q_588",
        "db_id": "maintenance_asset",
        "question": "Identify third-party companies that maintain a service level agreement with a status of \"active\" or \"pending renewal,\" where the companies either have at least two engineers specialized in critical asset maintenance or manage assets with a status indicating \"high failure probability.\" Provide the unique company ID and contact person name for these companies.",
        "query": " SELECT DISTINCT      tc.COMPANY_ID,      tc.COMPANY_CONTACT_PERSON AS COMPANY_NAME FROM      Third_Party_Companies tc JOIN      Maintenance_Contracts mc ON tc.COMPANY_ID = mc.MAINTENANCE_CONTRACT_ID JOIN      Maintenance_Engineers me ON tc.COMPANY_ID = me.FAULT_LOG_ENGINEER_ID JOIN      Skills s ON me.ENGINEER_ID = s.SKILL_ID JOIN      Assets a ON mc.MAINTENANCE_CONTRACT_ID = a.ASSET_MAINTENANCE_HISTORY_ID WHERE      mc.CONTRACT_RENEWAL_STATUS IN ('active', 'pending renewal')     AND (         -- Condition 1: At least two engineers specialized in critical asset maintenance         tc.COMPANY_ID IN (             SELECT COMPANY_ID             FROM Maintenance_Engineers me             JOIN Skills s ON me.ENGINEER_ID = s.SKILL_ID             WHERE s.SKILL_AREA = 'critical asset maintenance'             GROUP BY COMPANY_ID             HAVING COUNT(DISTINCT me.ENGINEER_ID) >= 2         )         OR          -- Condition 2: Manage assets with a high failure probability         a.ASSET_STATUS = 'high failure probability'     ); ",
        "schema_links": [
            "Assets.ASSET_MAINTENANCE_HISTORY_ID",
            "Skills.SKILL_ID",
            "Assets.ASSET_STATUS",
            "Skills.SKILL_AREA",
            "Maintenance_Engineers.FAULT_LOG_ENGINEER_ID",
            "Maintenance_Contracts.CONTRACT_RENEWAL_STATUS",
            "Third_Party_Companies.COMPANY_CONTACT_PERSON",
            "Maintenance_Contracts.MAINTENANCE_CONTRACT_ID",
            "Maintenance_Engineers.COMPANY_ID",
            "Third_Party_Companies.COMPANY_ID",
            "Maintenance_Engineers.ENGINEER_ID"
        ]
    },
    {
        "instance_id": "q_590",
        "db_id": "maintenance_asset",
        "question": "What is the type of third-party company (based on service level) that has the highest average fault resolution time for assets covered by active maintenance contracts, where the percentage of assets under the contract exceeds 80%?",
        "query": " SELECT tc.COMPANY_SERVICE_LEVEL AS company_type, AVG(fl.FAULT_RESOLUTION_TIME) AS avg_response_time FROM Fault_Log fl JOIN Maintenance_Contracts mc ON fl.FAULT_LOG_ENGINEER_ID = mc.MAINTENANCE_CONTRACT_ID JOIN Third_Party_Companies tc ON mc.MAINTENANCE_CONTRACT_ID = tc.COMPANY_REFERENCE_ID WHERE mc.CONTRACT_RENEWAL_STATUS = 'Active'   AND (mc.CONTRACT_END_DATE - mc.CONTRACT_START_DATE) * (SELECT COUNT(*) FROM Assets WHERE ASSET_MAINTENANCE_HISTORY_ID = mc.MAINTENANCE_CONTRACT_ID) / (SELECT COUNT(*) FROM Assets) > 0.8 GROUP BY tc.COMPANY_SERVICE_LEVEL ORDER BY avg_response_time DESC LIMIT 1; ",
        "schema_links": [
            "Fault_Log.FAULT_LOG_ENGINEER_ID",
            "Assets.ASSET_MAINTENANCE_HISTORY_ID",
            "Third_Party_Companies.COMPANY_SERVICE_LEVEL",
            "Maintenance_Contracts.CONTRACT_RENEWAL_STATUS",
            "Maintenance_Contracts.MAINTENANCE_CONTRACT_ID",
            "Fault_Log.FAULT_RESOLUTION_TIME",
            "Third_Party_Companies.COMPANY_REFERENCE_ID",
            "Maintenance_Contracts.CONTRACT_START_DATE",
            "Maintenance_Contracts.CONTRACT_END_DATE"
        ]
    },
    {
        "instance_id": "q_591",
        "db_id": "course_department",
        "question": "Which professors in the history department have not been assigned as instructors for any classes and have a research publication count lower than the average publication count of all professors in the history department?",
        "query": " SELECT e.EMP_NUM, d.DEPT_CODE FROM EMPLOYEE e JOIN DEPARTMENT d ON e.EMPLOYEE_DEPARTMENT = d.DEPT_CODE LEFT JOIN CLASS c ON e.EMP_NUM = c.CLASS_INSTRUCTOR WHERE d.DEPARTMENT_RESEARCH_FOCUS_AREA = 'History'   AND c.CLASS_INSTRUCTOR IS NULL   AND (     SELECT COUNT(*)     FROM RESEARCH_PUBLICATION rp     WHERE rp.PUBLICATION_AUTHOR_EMP_NUM = e.EMP_NUM   ) < (     SELECT AVG(publication_count)     FROM (       SELECT COUNT(*) AS publication_count       FROM RESEARCH_PUBLICATION rp       INNER JOIN EMPLOYEE emp ON rp.PUBLICATION_AUTHOR_EMP_NUM = emp.EMP_NUM       INNER JOIN DEPARTMENT dept ON emp.EMPLOYEE_DEPARTMENT = dept.DEPT_CODE       WHERE dept.DEPARTMENT_RESEARCH_FOCUS_AREA = 'History'       GROUP BY emp.EMP_NUM     ) subquery   ) GROUP BY e.EMP_NUM, d.DEPT_CODE;    ### 注意： 上述SQL假设存在一个名为RESEARCH_PUBLICATION的表来记录研究发表情况。如果该表不存在或名称不同，请根据实际数据库结构调整。",
        "schema_links": [
            "DEPARTMENT.DEPT_CODE",
            "DEPARTMENT.DEPARTMENT_RESEARCH_FOCUS_AREA",
            "EMPLOYEE.EMPLOYEE_DEPARTMENT",
            "CLASS.CLASS_INSTRUCTOR",
            "EMPLOYEE.EMP_NUM",
            "RESEARCH_PUBLICATION.PUBLICATION_AUTHOR_EMP_NUM"
        ]
    },
    {
        "instance_id": "q_599",
        "db_id": "course_department",
        "question": "Which history professors, who are not currently teaching any classes and belong to the department with the highest research funding in the past five years, have received the maximum departmental research ranking? Additionally, provide their first names, considering only those whose research focus aligns with the department's strategic priorities in history.",
        "query": " SELECT DISTINCT e.EMP_NUM, INITCAP(SPLIT_PART(e.EMP_NUM::text, ' ', 1)) AS first_name FROM EMPLOYEE e JOIN DEPARTMENT d ON e.EMPLOYEE_DEPARTMENT = d.DEPT_CODE LEFT JOIN CLASS c ON e.EMP_NUM::text = c.CLASS_INSTRUCTOR WHERE d.DEPARTMENT_RESEARCH_FOCUS_AREA ILIKE '%history%'   AND c.CLASS_CODE IS NULL   AND e.EMP_NUM IN (     SELECT emp_num     FROM EMPLOYEE     WHERE EMPLOYEE_HIRE_DATE >= CURRENT_DATE - INTERVAL '5 years'       AND EMPLOYEE_DEPARTMENT_RANK = (         SELECT MAX(EMPLOYEE_DEPARTMENT_RANK)         FROM EMPLOYEE         WHERE EMPLOYEE_DEPARTMENT = d.DEPT_CODE       )   )   AND d.DEPARTMENT_RESEARCH_GRANTS = (     SELECT MAX(DEPARTMENT_RESEARCH_GRANTS)     FROM DEPARTMENT     WHERE DEPARTMENT_RESEARCH_FOCUS_AREA ILIKE '%history%'   ); ",
        "schema_links": [
            "DEPARTMENT.DEPARTMENT_RESEARCH_GRANTS",
            "EMPLOYEE.EMPLOYEE_DEPARTMENT_RANK",
            "CLASS.CLASS_CODE",
            "DEPARTMENT.DEPT_CODE",
            "DEPARTMENT.DEPARTMENT_RESEARCH_FOCUS_AREA",
            "EMPLOYEE.EMPLOYEE_DEPARTMENT",
            "CLASS.CLASS_INSTRUCTOR",
            "EMPLOYEE.EMP_NUM",
            "EMPLOYEE.EMPLOYEE_HIRE_DATE"
        ]
    },
    {
        "instance_id": "q_608",
        "db_id": "course_department",
        "question": "Which students are currently enrolled in courses offered by the Accounting and Computer Information Systems departments within the last two years, and what is their likelihood of graduating within the next two years based on their current academic progress (class year and GPA)? Provide the student ID, current GPA, class year, and current enrollment term along with the graduation likelihood categorized as High, Moderate, Low, or Unknown based on the following criteria:  \n- Senior (Class Year 4) with GPA >= 3.0: High Likelihood  \n- Senior (Class Year 4) with GPA between 2.5 and 2.9: Moderate Likelihood  \n- Senior (Class Year 4) with GPA < 2.5: Low Likelihood  \n- Junior (Class Year 3) with GPA >= 3.0: Moderate Likelihood  \n- All other cases: Unknown Likelihood  \n\nSort the results by student ID and the most recent enrollment term.",
        "query": " SELECT      s.STU_NUM AS Student_ID,     s.STUDENT_GPA AS Current_GPA,     s.STUDENT_CLASS_YEAR AS Class_Year,     e.ENROLL_TERM AS Current_Term,     d.DEPT_CODE AS Department_Code,     CASE          WHEN s.STUDENT_CLASS_YEAR = 4 AND s.STUDENT_GPA >= 3.0 THEN 'High'         WHEN s.STUDENT_CLASS_YEAR = 4 AND s.STUDENT_GPA BETWEEN 2.5 AND 2.9 THEN 'Moderate'         WHEN s.STUDENT_CLASS_YEAR = 4 AND s.STUDENT_GPA < 2.5 THEN 'Low'         WHEN s.STUDENT_CLASS_YEAR = 3 AND s.STUDENT_GPA >= 3.0 THEN 'Moderate'         ELSE 'Unknown'     END AS Graduation_Likelihood FROM      STUDENT s JOIN      ENROLL e ON s.STU_NUM = e.STU_NUM JOIN      CLASS c ON e.CLASS_CODE = c.CLASS_CODE JOIN      DEPARTMENT d ON c.CLASS_INSTRUCTOR = d.DEPARTMENT_HEAD WHERE      d.DEPT_CODE IN ('Accounting', 'Computer Information Systems')     AND e.ENROLL_STATUS = 'Enrolled'     AND e.ENROLL_DATE >= CURRENT_DATE - INTERVAL '2 YEARS' ORDER BY      s.STU_NUM, e.ENROLL_TERM DESC; ",
        "schema_links": [
            "STUDENT.STU_NUM",
            "STUDENT.STUDENT_CLASS_YEAR",
            "ENROLL.ENROLL_STATUS",
            "STUDENT.STUDENT_GPA",
            "ENROLL.STU_NUM",
            "DEPARTMENT.DEPARTMENT_HEAD",
            "CLASS.CLASS_CODE",
            "ENROLL.ENROLL_TERM",
            "DEPARTMENT.DEPT_CODE",
            "ENROLL.ENROLL_DATE",
            "ENROLL.CLASS_CODE",
            "CLASS.CLASS_INSTRUCTOR"
        ]
    },
    {
        "instance_id": "q_602",
        "db_id": "course_department",
        "question": "Which students are enrolled in courses categorized under Accounting or Computer Information Systems since January 1, 2023, and what is their academic progress indicated by their GPA and class year? Additionally, provide details on their current enrollment status and progress. Identify the course credit and category for each enrolled course. If available, include the name of the department head and their research focus area as potential advisor feedback. Are there any patterns in the enrollment trends or advisor characteristics that might suggest a higher likelihood of these students changing their major? List the results in descending order of student GPA and ascending order of student ID.",
        "query": " SELECT      s.STU_NUM AS Student_ID,     s.STUDENT_GPA AS GPA,     s.STUDENT_CLASS_YEAR AS Class_Year,     e.ENROLL_STATUS AS Enrollment_Status,     e.ENROLLMENT_STATUS AS Enrollment_Progress,     c.COURSE_CREDIT AS Course_Credit,     c.COURSE_CATEGORY AS Course_Category,     d.DEPARTMENT_HEAD AS Advisor_Name,     d.DEPARTMENT_RESEARCH_FOCUS_AREA AS Advisor_Research_Focus FROM      STUDENT s JOIN      ENROLL e ON s.STU_NUM = e.STU_NUM JOIN      COURSE c ON e.CRS_CODE = c.CRS_CODE LEFT JOIN      DEPARTMENT d ON s.EMPLOYEE_DEPARTMENT = d.DEPT_CODE WHERE      c.COURSE_CATEGORY IN ('Accounting', 'Computer Information Systems')     AND e.ENROLL_DATE >= '2023-01-01'::date -- Assuming current year for trends     AND s.STUDENT_ADMISSION_DATE IS NOT NULL ORDER BY      s.STUDENT_GPA DESC,      s.STU_NUM ASC; ",
        "schema_links": [
            "STUDENT.STU_NUM",
            "ENROLL.CRS_CODE",
            "COURSE.COURSE_CATEGORY",
            "STUDENT.STUDENT_CLASS_YEAR",
            "ENROLL.ENROLL_STATUS",
            "DEPARTMENT.DEPARTMENT_RESEARCH_FOCUS_AREA",
            "STUDENT.STUDENT_GPA",
            "COURSE.COURSE_CREDIT",
            "ENROLL.STU_NUM",
            "DEPARTMENT.DEPARTMENT_HEAD",
            "STUDENT.EMPLOYEE_DEPARTMENT",
            "ENROLL.ENROLL_DATE",
            "DEPARTMENT.DEPT_CODE",
            "ENROLL.ENROLLMENT_STATUS",
            "COURSE.CRS_CODE",
            "STUDENT.STUDENT_ADMISSION_DATE"
        ]
    },
    {
        "instance_id": "q_597",
        "db_id": "course_department",
        "question": "Which instructors, along with their department office locations, are associated with teaching courses that have a positive course description or have defined prerequisites, while also having a non-zero class capacity? Additionally, provide the course credit, category, and description, as well as the department's research focus area. Only include courses that are linked to active classes based on the class code association.",
        "query": " SELECT      c.CLASS_INSTRUCTOR AS instructor,     d.DEPT_OFFICE_LOCATION AS office_location,     co.COURSE_CREDIT AS course_credit,     co.COURSE_CATEGORY AS course_category,     co.COURSE_DESCRIPTION AS course_description,     d.DEPARTMENT_RESEARCH_FOCUS_AREA AS department_research_focus_area FROM      CLASS c JOIN      COURSE co ON c.CLASS_CODE = co.CRS_CODE JOIN      DEPARTMENT d ON co.COURSE_CREDIT > 0 AND d.DEPT_CODE = c.CLASS_INSTRUCTOR WHERE      c.CLASS_CAPACITY > 0      AND (co.COURSE_PREREQUISITE IS NOT NULL OR co.COURSE_DESCRIPTION LIKE '%positive%') GROUP BY      c.CLASS_INSTRUCTOR, d.DEPT_OFFICE_LOCATION, co.COURSE_CREDIT, co.COURSE_CATEGORY, co.COURSE_DESCRIPTION, d.DEPARTMENT_RESEARCH_FOCUS_AREA; ",
        "schema_links": [
            "COURSE.COURSE_CATEGORY",
            "DEPARTMENT.DEPARTMENT_RESEARCH_FOCUS_AREA",
            "COURSE.COURSE_CREDIT",
            "COURSE.COURSE_PREREQUISITE",
            "CLASS.CLASS_CODE",
            "DEPARTMENT.DEPT_OFFICE_LOCATION",
            "DEPARTMENT.DEPT_CODE",
            "COURSE.COURSE_DESCRIPTION",
            "CLASS.CLASS_INSTRUCTOR",
            "COURSE.CRS_CODE",
            "CLASS.CLASS_CAPACITY"
        ]
    },
    {
        "instance_id": "q_604",
        "db_id": "course_department",
        "question": "Which instructors, along with their department office locations and the departments they belong to, are associated with courses that have experienced a change in enrollment status within the past semester? Additionally, provide the descriptions of these courses and indicate whether the courses are currently active (\"Yes\" if the enrollment status is \"Active\", otherwise \"No\"). The results should be ordered by the instructors' names in ascending order.",
        "query": " SELECT DISTINCT      c.CLASS_INSTRUCTOR AS instructor,     d.DEPT_OFFICE_LOCATION AS office_location,     e.EMPLOYEE_DEPARTMENT AS department,     cr.COURSE_DESCRIPTION AS course_description,     CASE WHEN en.ENROLLMENT_STATUS = 'Active' THEN 'Yes' ELSE 'No' END AS is_course_active FROM      CLASS c JOIN      COURSE cr ON c.CLASS_CODE = cr.CRS_CODE JOIN      DEPARTMENT d ON cr.COURSE_CATEGORY = d.DEPT_CODE JOIN      EMPLOYEE e ON c.CLASS_INSTRUCTOR = e.EMP_NUM JOIN      ENROLL en ON c.CLASS_CODE = en.ENROLL_TERM WHERE      en.ENROLL_DATE >= CURRENT_DATE - INTERVAL '1 semester'     AND en.ENROLL_STATUS <> LAG(en.ENROLL_STATUS) OVER (PARTITION BY en.ENROLL_TERM ORDER BY en.ENROLL_DATE) ORDER BY      instructor ASC; ",
        "schema_links": [
            "COURSE.COURSE_CATEGORY",
            "ENROLL.ENROLL_DATE",
            "DEPARTMENT.DEPT_OFFICE_LOCATION",
            "ENROLL.ENROLL_TERM",
            "CLASS.CLASS_CODE",
            "DEPARTMENT.DEPT_CODE",
            "COURSE.COURSE_DESCRIPTION",
            "ENROLL.ENROLLMENT_STATUS",
            "EMPLOYEE.EMPLOYEE_DEPARTMENT",
            "CLASS.CLASS_INSTRUCTOR",
            "EMPLOYEE.EMP_NUM",
            "COURSE.CRS_CODE"
        ]
    },
    {
        "instance_id": "q_600",
        "db_id": "course_department",
        "question": "Which professors, identified by their unique professor ID and department, within the Computer Information Systems (CIS) department, have a teaching load consisting of distinct courses they are currently assigned to teach, and what is their highest course credit which can be considered as their highest degree? Additionally, compare each professor's teaching load to the average teaching load of all professors in the same department. Furthermore, analyze the enrollment trends for the courses taught by these professors by providing the enrollment count per term, specifying the term and the corresponding professor ID. Only include active professors with a department rank greater than 0.",
        "query": " WITH Professor_Teaching_Load AS (     SELECT          E.EMP_NUM AS PROFESSOR_ID,         MAX(C.COURSE_CREDIT) AS HIGHEST_COURSE_CREDIT,         COUNT(DISTINCT C.CRS_CODE) AS TEACHING_LOAD,         AVG(COUNT(DISTINCT C.CRS_CODE)) OVER () AS AVERAGE_TEACHING_LOAD     FROM          EMPLOYEE E     JOIN          CLASS CL ON E.EMP_NUM = CL.CLASS_INSTRUCTOR     JOIN          COURSE C ON CL.CLASS_CODE = C.CRS_CODE     JOIN          DEPARTMENT D ON E.EMPLOYEE_DEPARTMENT = D.DEPT_CODE     WHERE          D.DEPT_CODE = 'CIS' -- Computer Information Systems department         AND E.EMPLOYEE_DEPARTMENT_RANK > 0 -- Assuming active professors have a rank > 0     GROUP BY          E.EMP_NUM ), Class_Enrollment_Trends AS (     SELECT          CL.CLASS_INSTRUCTOR AS PROFESSOR_ID,         EN.ENROLL_TERM,         COUNT(*) AS ENROLLMENT_COUNT     FROM          CLASS CL     JOIN          ENROLL EN ON CL.CLASS_CODE = EN.ENROLL_TERM     JOIN          COURSE C ON CL.CLASS_CODE = C.CRS_CODE     JOIN          DEPARTMENT D ON C.COURSE_CATEGORY = D.DEPT_CODE     WHERE          D.DEPT_CODE = 'CIS'     GROUP BY          CL.CLASS_INSTRUCTOR, EN.ENROLL_TERM ) SELECT      PT.PROFESSOR_ID,     E.EMPLOYEE_DEPARTMENT AS DEPARTMENT,     PT.HIGHEST_COURSE_CREDIT AS HIGHEST_DEGREE,     PT.TEACHING_LOAD,     PT.AVERAGE_TEACHING_LOAD,     CET.ENROLLMENT_COUNT,     CET.ENROLL_TERM FROM      Professor_Teaching_Load PT JOIN      EMPLOYEE E ON PT.PROFESSOR_ID = E.EMP_NUM LEFT JOIN      Class_Enrollment_Trends CET ON PT.PROFESSOR_ID = CET.PROFESSOR_ID WHERE      E.EMPLOYEE_DEPARTMENT = 'CIS'; ",
        "schema_links": [
            "COURSE.COURSE_CATEGORY",
            "COURSE.COURSE_CREDIT",
            "CLASS.CLASS_CODE",
            "ENROLL.ENROLL_TERM",
            "DEPARTMENT.DEPT_CODE",
            "EMPLOYEE.EMPLOYEE_DEPARTMENT_RANK",
            "EMPLOYEE.EMPLOYEE_DEPARTMENT",
            "CLASS.CLASS_INSTRUCTOR",
            "EMPLOYEE.EMP_NUM",
            "COURSE.CRS_CODE"
        ]
    },
    {
        "instance_id": "q_598",
        "db_id": "course_department",
        "question": "What are the unique professor IDs and their highest degrees, for professors who teach research courses in departments where the department's graduation rate is above the college-wide average graduation rate and the department offers research opportunities?",
        "query": " SELECT DISTINCT e.EMP_NUM AS PROFESSOR_ID, s.STUDENT_ACADEMIC_CONCENTRATION AS HIGHEST_DEGREE FROM EMPLOYEE e JOIN DEPARTMENT d ON e.EMPLOYEE_DEPARTMENT = d.DEPT_CODE JOIN CLASS c ON e.EMP_NUM = c.CLASS_INSTRUCTOR JOIN COURSE cr ON c.CLASS_CODE = cr.CRS_CODE JOIN (     SELECT DEPT_CODE, AVG(DEPARTMENT_GRADUATION_RATE) AS AVERAGE_GRADUATION_RATE     FROM DEPARTMENT     GROUP BY DEPT_CODE ) avg_grad_rate ON d.DEPT_CODE = avg_grad_rate.DEPT_CODE WHERE d.DEPARTMENT_RESEARCH_FOCUS_AREA IS NOT NULL AND d.DEPARTMENT_GRADUATION_RATE > (SELECT AVG(DEPARTMENT_GRADUATION_RATE) FROM DEPARTMENT) AND cr.COURSE_CATEGORY = 'Research'; ",
        "schema_links": [
            "COURSE.COURSE_CATEGORY",
            "DEPARTMENT.DEPARTMENT_RESEARCH_FOCUS_AREA",
            "DEPARTMENT.DEPARTMENT_GRADUATION_RATE",
            "CLASS.CLASS_CODE",
            "DEPARTMENT.DEPT_CODE",
            "EMPLOYEE.EMPLOYEE_DEPARTMENT",
            "CLASS.CLASS_INSTRUCTOR",
            "EMPLOYEE.EMP_NUM",
            "COURSE.CRS_CODE",
            "STUDENT.STUDENT_ACADEMIC_CONCENTRATION"
        ]
    },
    {
        "instance_id": "q_606",
        "db_id": "employee_data",
        "question": "Which employees, along with their full names and the countries they are currently working in, have a loyalty score higher than the average loyalty score of all employees and belong to a department that has undergone restructuring within the last year? Additionally, provide the reason for their hiring and the tier of their loyalty program, ordered by their loyalty score in descending order.",
        "query": " SELECT      e.EMPLOYEE_ID,      e.FIRST_NAME || ' ' || e.LAST_NAME AS FULL_NAME,      c.COUNTRY_NAME,      e.LOYALTY_SCORE,      e.EMPLOYEE_RECRUITMENT_SOURCE AS REASON_FOR_HIRING,      e.LOYALTY_PROGRAM_TIER FROM      employees e JOIN      departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID JOIN      locations l ON d.LOCATION_ID = l.LOCATION_ID JOIN      countries c ON l.COUNTRY_ID = c.COUNTRY_ID WHERE      e.LOYALTY_SCORE > (SELECT AVG(LOYALTY_SCORE) FROM employees)     AND d.DEPARTMENT_ID IN (         SELECT DISTINCT jh.DEPARTMENT_ID          FROM job_history jh          WHERE jh.END_DATE >= CURRENT_TIMESTAMP - INTERVAL '1 YEAR'           AND jh.JOB_HISTORY_REASON LIKE '%restructuring%'     ) ORDER BY      e.LOYALTY_SCORE DESC; ",
        "schema_links": [
            "departments.LOCATION_ID",
            "employees.LAST_NAME",
            "countries.COUNTRY_ID",
            "departments.DEPARTMENT_ID",
            "employees.EMPLOYEE_ID",
            "employees.LOYALTY_SCORE",
            "job_history.DEPARTMENT_ID",
            "job_history.JOB_HISTORY_REASON",
            "employees.FIRST_NAME",
            "locations.LOCATION_ID",
            "employees.DEPARTMENT_ID",
            "employees.LOYALTY_PROGRAM_TIER",
            "job_history.END_DATE",
            "employees.EMPLOYEE_RECRUITMENT_SOURCE",
            "locations.COUNTRY_ID",
            "countries.COUNTRY_NAME"
        ]
    },
    {
        "instance_id": "q_605",
        "db_id": "employee_data",
        "question": "Which employees have a loyalty score higher than the average loyalty score of all employees, and what are their full names and employee IDs? Additionally, include only those employees whose recruitment source mentions \"department restructuring\" and provide the names of the countries where they are located. Results should be ordered by employee ID.",
        "query": " SELECT      e.EMPLOYEE_ID,     e.FIRST_NAME || ' ' || e.LAST_NAME AS FULL_NAME,     c.COUNTRY_NAME FROM      employees e JOIN      departments d ON e.DEPARTMENT_ID = d.DPARTMENT_ID JOIN      locations l ON d.LOCATION_ID = l.LOCATION_ID JOIN      countries c ON l.COUNTRY_ID = c.COUNTRY_ID WHERE      e.LOYALTY_SCORE > (SELECT AVG(LOYALTY_SCORE) FROM employees)     AND e.EMPLOYEE_RECRUITMENT_SOURCE LIKE '%department restructuring%' ORDER BY      e.EMPLOYEE_ID; ",
        "schema_links": [
            "departments.LOCATION_ID",
            "employees.LAST_NAME",
            "countries.COUNTRY_ID",
            "departments.DEPARTMENT_ID",
            "employees.EMPLOYEE_ID",
            "employees.LOYALTY_SCORE",
            "employees.FIRST_NAME",
            "locations.LOCATION_ID",
            "employees.DEPARTMENT_ID",
            "departments.DPARTMENT_ID",
            "employees.EMPLOYEE_RECRUITMENT_SOURCE",
            "locations.COUNTRY_ID",
            "countries.COUNTRY_NAME"
        ]
    },
    {
        "instance_id": "q_601",
        "db_id": "claim_policy_hub",
        "question": "Which claims resulted in more than two settlements, had the highest total claimed amount, or had a settlement amount exceeding the claimed amount? For each claim, include the unique claim identifier and the date the claim was filed. Additionally, for claims where the settlement amount exceeded the claimed amount, provide the reason for the adjustment if available. Ensure that all claims are evaluated based on their associated payments and settlements, using the payment reference ID to link claims with their respective payments and settlements.",
        "query": " WITH Claim_Settlement_Count AS (     SELECT          c.Claim_ID,          COUNT(s.Settlement_ID) AS Settlement_Count,         MAX(s.Settlement_Amount) AS Max_Settlement_Amount,         c.Incident_Date     FROM          Claims c     LEFT JOIN          Settlements s ON c.Claim_ID = s.Payment_Reference_ID     GROUP BY          c.Claim_ID, c.Incident_Date ), Claim_Payment_Details AS (     SELECT          c.Claim_ID,          c.Incident_Date,         SUM(p.Payment_Amount) AS Total_Claimed_Amount     FROM          Claims c     INNER JOIN          Payments p ON c.Claim_ID = p.Payment_Reference_ID     GROUP BY          c.Claim_ID, c.Incident_Date ) SELECT      DISTINCT csc.Claim_ID,      csc.Incident_Date,     CASE          WHEN csc.Settlement_Count > 2 THEN 'More than two settlements'         WHEN cpd.Total_Claimed_Amount = (SELECT MAX(Total_Claimed_Amount) FROM Claim_Payment_Details) THEN 'Highest claim amount'         WHEN s.Settlement_Amount > cpd.Total_Claimed_Amount THEN 'Settlement exceeds claim amount'         ELSE NULL      END AS Claim_Note,     s.Settlement_Reason AS Adjustment_Reason FROM      Claim_Settlement_Count csc LEFT JOIN      Claim_Payment_Details cpd ON csc.Claim_ID = cpd.Claim_ID LEFT JOIN      Settlements s ON csc.Claim_ID = s.Payment_Reference_ID WHERE      csc.Settlement_Count > 2      OR cpd.Total_Claimed_Amount = (SELECT MAX(Total_Claimed_Amount) FROM Claim_Payment_Details)     OR s.Settlement_Amount > cpd.Total_Claimed_Amount; ",
        "schema_links": [
            "Payments.Payment_Amount",
            "Settlements.Settlement_Reason",
            "Payments.Payment_Reference_ID",
            "Settlements.Settlement_Amount",
            "Claims.Incident_Date",
            "Settlements.Settlement_ID",
            "Settlements.Payment_Reference_ID",
            "Claims.Claim_ID"
        ]
    },
    {
        "instance_id": "q_603",
        "db_id": "claim_policy_hub",
        "question": "Identify all claims that either resulted in more than one settlement or had the highest claim amount within their respective incident categories. For each of these claims, provide the unique claim identifier and the date the claim was submitted. Additionally, indicate whether each claim was associated with a dispute (mark as \"Yes\" if the claim type is \"Disputed\", otherwise \"No\"), and specify the channel through which the claim was submitted (as indicated by the claim type).",
        "query": " WITH Claim_Settlement_Count AS (     SELECT          c.Claim_ID,          COUNT(s.Settlement_ID) AS Settlement_Count     FROM          Claims c     LEFT JOIN Settlements s ON c.Claim_ID = s.Payment_Reference_ID     GROUP BY c.Claim_ID ), Category_Max_Claim AS (     SELECT          Incident_Category,          MAX(p.Payment_Amount) AS Max_Claim_Amount     FROM          Claims c     INNER JOIN Payments p ON c.Claim_ID = p.Payment_Reference_ID     GROUP BY Incident_Category ), Filtered_Claims AS (     SELECT          c.Claim_ID,          c.Incident_Date AS Submission_Date,          sc.Settlement_Count,         cmc.Max_Claim_Amount,         CASE WHEN c.Claim_Type = 'Disputed' THEN 'Yes' ELSE 'No' END AS Is_Disputed,         c.Claim_Type AS Submission_Channel     FROM          Claims c     INNER JOIN Claim_Settlement_Count sc ON c.Claim_ID = sc.Claim_ID     LEFT JOIN Category_Max_Claim cmc ON c.Incident_Category = cmc.Incident_Category     INNER JOIN Payments p ON c.Claim_ID = p.Payment_Reference_ID     WHERE          sc.Settlement_Count > 1          OR p.Payment_Amount = cmc.Max_Claim_Amount ) SELECT      Claim_ID,      Submission_Date,      Is_Disputed,      Submission_Channel FROM      Filtered_Claims; ",
        "schema_links": [
            "Claims.Claim_Type",
            "Payments.Payment_Amount",
            "Claims.Incident_Category",
            "Payments.Payment_Reference_ID",
            "Claims.Incident_Date",
            "Settlements.Settlement_ID",
            "Settlements.Payment_Reference_ID",
            "Claims.Claim_ID"
        ]
    },
    {
        "instance_id": "q_609",
        "db_id": "claim_policy_hub",
        "question": "Find customers who have had at least two active policies renewed in the past year and have not been involved in any claim-related activities during this period. Provide their detailed information, including customer segment, loyalty scores, age, gender, and full contact details (address lines, postal code, city, state, country), to evaluate potential retention strategies. Ensure that \"active policies\" are defined as policies with a positive term length and a renewal date within the last year. Confirm that \"no claim-related activities\" means the customer has no associated claims recorded in the Claims table.",
        "query": " SELECT      cp.Customer_ID,     cp.Customer_Segment,     cp.Customer_Loyalty_Score,     cp.Customer_Age,     cp.Customer_Gender,     cp.Customer_Address_Line1,     cp.Customer_Address_Line2,     cp.Customer_Postal_Code,     cp.Customer_City,     cp.Customer_State,     cp.Customer_Country FROM      Customer_Policies AS cp LEFT JOIN Claims AS c ON cp.Customer_ID = c.Customer_ID WHERE      cp.Policy_Renewal_Date >= CURRENT_DATE - INTERVAL '1 YEAR'     AND cp.Policy_Term > 0 GROUP BY      cp.Customer_ID,     cp.Customer_Segment,     cp.Customer_Loyalty_Score,     cp.Customer_Age,     cp.Customer_Gender,     cp.Customer_Address_Line1,     cp.Customer_Address_Line2,     cp.Customer_Postal_Code,     cp.Customer_City,     cp.Customer_State,     cp.Customer_Country HAVING      COUNT(DISTINCT cp.Policy_ID) >= 2     AND SUM(CASE WHEN c.Claim_ID IS NOT NULL THEN 1 ELSE 0 END) = 0; ",
        "schema_links": [
            "Customer_Policies.Policy_Renewal_Date",
            "Customer_Policies.Customer_Postal_Code",
            "Claims.Customer_ID",
            "Customer_Policies.Policy_ID",
            "Customer_Policies.Customer_Country",
            "Customer_Policies.Customer_Address_Line2",
            "Customer_Policies.Customer_State",
            "Customer_Policies.Customer_Segment",
            "Customer_Policies.Customer_Address_Line1",
            "Customer_Policies.Customer_City",
            "Customer_Policies.Customer_ID",
            "Customer_Policies.Customer_Loyalty_Score",
            "Customer_Policies.Customer_Age",
            "Customer_Policies.Customer_Gender",
            "Customer_Policies.Policy_Term",
            "Claims.Claim_ID"
        ]
    },
    {
        "instance_id": "q_607",
        "db_id": "claim_policy_hub",
        "question": "Find customers who have held more than one active policy in the past year and have not been involved in any claim-related activities during the same period. Provide their detailed profiles, including customer segment, loyalty score, policy renewal date, incident history, age, gender, and full address information. Assess their loyalty scores in descending order to identify potential retention opportunities. Ensure that only customers with no associated claims in the past year are included, based on the incident date.",
        "query": " SELECT      cp.Customer_ID,      cp.Customer_Segment,      cp.Customer_Loyalty_Score,      cp.Policy_Renewal_Date,      cp.Customer_Incident_History,      cp.Customer_Age,      cp.Customer_Gender,      cp.Customer_Address_Line1,      cp.Customer_Address_Line2,      cp.Customer_Postal_Code,      cp.Customer_City,      cp.Customer_State,      cp.Customer_Country FROM      Customer_Policies AS cp LEFT JOIN      Claims AS c ON      cp.Customer_ID = c.Claim_Adjuster AND c.Incident_Date >= CURRENT_DATE - INTERVAL '1 year' WHERE      c.Claim_ID IS NULL AND      cp.Customer_ID IN (         SELECT              Customer_ID         FROM              Customer_Policies         WHERE              Policy_Expiry_Date >= CURRENT_DATE - INTERVAL '1 year'         GROUP BY              Customer_ID         HAVING              COUNT(DISTINCT Policy_ID) > 1     ) ORDER BY      cp.Customer_Loyalty_Score DESC; ",
        "schema_links": [
            "Customer_Policies.Policy_Renewal_Date",
            "Customer_Policies.Customer_Postal_Code",
            "Customer_Policies.Customer_Incident_History",
            "Claims.Claim_Adjuster",
            "Customer_Policies.Policy_ID",
            "Claims.Incident_Date",
            "Customer_Policies.Customer_Country",
            "Customer_Policies.Customer_Address_Line2",
            "Customer_Policies.Customer_State",
            "Customer_Policies.Customer_Segment",
            "Customer_Policies.Customer_Address_Line1",
            "Customer_Policies.Customer_City",
            "Customer_Policies.Customer_ID",
            "Customer_Policies.Policy_Expiry_Date",
            "Customer_Policies.Customer_Loyalty_Score",
            "Customer_Policies.Customer_Age",
            "Customer_Policies.Customer_Gender",
            "Claims.Claim_ID"
        ]
    },
    {
        "instance_id": "q_611",
        "db_id": "hospital_operations",
        "question": "Identify physicians who are actively involved in both surgical and psychiatric care, considering their primary affiliation status and patient interaction records within the past six months. Additionally, determine whether these physicians have demonstrated an increasing trend in patient satisfaction during this period, based on appointment feedback containing the keyword \"satisfied\". Ensure that only physicians with both specialties are included in the final result.",
        "query": " WITH ActivePhysicians AS (     SELECT DISTINCT p.EmployeeID, p.Name, p.Position, p.SSN, p.PhysicianSpecialty, p.PhysicianAvailability     FROM Physician p     JOIN Affiliated_With aw ON p.EmployeeID = aw.Physician     JOIN Appointment a ON p.EmployeeID = a.Patient     WHERE aw.PrimaryAffiliation = TRUE       AND p.PhysicianAvailability = TRUE       AND p.PhysicianSpecialty IN ('Surgery', 'Psychiatry')       AND a.Start >= NOW() - INTERVAL '6 months' ), SatisfactionTrend AS (     SELECT ap.EmployeeID, ap.Name,            CASE WHEN COUNT(CASE WHEN a.AppointmentFeedback LIKE '%satisfied%' THEN 1 END) > COUNT(CASE WHEN a.AppointmentFeedback NOT LIKE '%satisfied%' THEN 1 END) THEN 'Increasing Satisfaction'                 ELSE 'Not Increasing Satisfaction' END AS SatisfactionTrend     FROM ActivePhysicians ap     JOIN Appointment a ON ap.EmployeeID = a.Patient     WHERE a.Start >= NOW() - INTERVAL '6 months'     GROUP BY ap.EmployeeID, ap.Name ) SELECT DISTINCT sp.EmployeeID, sp.Name, sp.Position, sp.SSN, sp.PhysicianSpecialty, st.SatisfactionTrend FROM SatisfactionTrend st JOIN Physician sp ON st.EmployeeID = sp.EmployeeID WHERE sp.PhysicianSpecialty IN ('Surgery', 'Psychiatry') GROUP BY sp.EmployeeID, sp.Name, sp.Position, sp.SSN, sp.PhysicianSpecialty, st.SatisfactionTrend HAVING COUNT(DISTINCT sp.PhysicianSpecialty) = 2; ",
        "schema_links": [
            "Physician.Position",
            "Physician.PhysicianAvailability",
            "Physician.EmployeeID",
            "Appointment.Start",
            "Affiliated_With.PrimaryAffiliation",
            "Physician.SSN",
            "Affiliated_With.Physician",
            "Appointment.Patient",
            "SatisfactionTrend.SatisfactionTrend",
            "Appointment.AppointmentFeedback",
            "Physician.PhysicianSpecialty",
            "Physician.Name"
        ]
    },
    {
        "instance_id": "q_612",
        "db_id": "hospital_operations",
        "question": "Which doctors are affiliated with both the Surgery and Psychiatry departments, and based on their primary affiliation status, what is their likelihood of being assigned to emergency cases? Please provide the names of these doctors, indicating a \"High\" likelihood for those with primary affiliation and a \"Low\" likelihood for those without.",
        "query": " SELECT DISTINCT p.Name AS DoctorName,         CASE             WHEN aw.PrimaryAffiliation = TRUE THEN 'High'            ELSE 'Low'        END AS EmergencyAssignmentLikelihood FROM Physician p JOIN Affiliated_With aw ON p.EmployeeID = aw.Physician JOIN Department d ON aw.Department = d.DepartmentID WHERE (d.Name = 'Surgery' OR d.Name = 'Psychiatry') GROUP BY p.EmployeeID, p.Name, aw.PrimaryAffiliation HAVING COUNT(DISTINCT d.Name) = 2; ",
        "schema_links": [
            "Affiliated_With.PrimaryAffiliation",
            "Affiliated_With.Department",
            "Affiliated_With.Physician",
            "Department.Name",
            "Department.DepartmentID",
            "Physician.EmployeeID",
            "Physician.Name"
        ]
    },
    {
        "instance_id": "q_614",
        "db_id": "grant_process",
        "question": "Identify projects that have achieved both intellectual property milestones and publication milestones, with a project review score of 8.0 or higher, and where detailed staff contributions are documented. Include the project's funding source, technology used, and any associated risk notes. Consider only projects where the grant renewal status is either pending or approved within the last six months.",
        "query": " SELECT      p.PROJECT_ID,     p.PROJECT_FUNDING_SOURCE AS funding_source,     p.PROJECT_TECHNOLOGY_USED AS technology_used,     p.PROJECT_RISK_NOTES AS risk_notes,     pr.STAFF_PROJECT_CONTRIBUTION AS staff_contributions FROM      Projects p JOIN      Project_Staff pr ON p.PROJECT_ID = pr.PROJECT_ID JOIN      Grants g ON p.PROJECT_ID = g.GRANT_ID WHERE      p.PROJECT_MILESTONE_IP = 'Achieved'      AND p.PROJECT_MILESTONE_PUBLICATION = 'Achieved'     AND p.PROJECT_REVIEW_SCORE >= 8.0     AND g.GRANT_STATUS IN ('Pending Renewal', 'Renewal Approved')     AND g.GRANT_REVIEW_DATE >= CURRENT_DATE - INTERVAL '6 months'     AND pr.STAFF_PROJECT_CONTRIBUTION IS NOT NULL; ",
        "schema_links": [
            "Projects.PROJECT_MILESTONE_IP",
            "Projects.PROJECT_MILESTONE_PUBLICATION",
            "Grants.GRANT_STATUS",
            "Projects.PROJECT_RISK_NOTES",
            "Projects.PROJECT_REVIEW_SCORE",
            "Project_Staff.PROJECT_ID",
            "Project_Staff.STAFF_PROJECT_CONTRIBUTION",
            "Projects.PROJECT_FUNDING_SOURCE",
            "Projects.PROJECT_ID",
            "Projects.PROJECT_TECHNOLOGY_USED",
            "Grants.GRANT_ID",
            "Grants.GRANT_REVIEW_DATE"
        ]
    },
    {
        "instance_id": "q_615",
        "db_id": "grant_process",
        "question": "Which projects have successfully completed with a non-negative budget variance and delivered both intellectual property and research publications within the last six months? For these projects, provide details including project phases (start and end dates), funding sources, review impact scores, as well as the roles and departments of associated staff members. Additionally, include the type, title, and creation date of the related documents, sorted by the project review score in descending order and document creation date in descending order.",
        "query": " SELECT      p.PROJECT_ID,     p.PROJECT_START_DATE,     p.PROJECT_END_DATE,     p.PROJECT_GRANT_STATUS,     p.PROJECT_FUNDING_SOURCE,     p.PROJECT_REVIEW_SCORE,     ps.STAFF_PROJECT_ROLE,     ps.STAFF_DEPARTMENT,     ps.STAFF_HIRE_DATE,     ps.STAFF_PROJECT_CONTRIBUTION,     d.DOCUMENT_TYPE_CODE,     d.DOCUMENT_TITLE,     d.DOCUMENT_CREATION_DATE FROM      Projects p JOIN      Documents d ON p.PROJECT_ID = d.DOCUMENT_GRANT_ID JOIN      Project_Staff ps ON p.PROJECT_ID = ps.STAFF_ID WHERE      d.DOCUMENT_TYPE_CODE IN ('Intellectual_Property', 'Research_Publication')     AND d.DOCUMENT_CREATION_DATE >= CURRENT_DATE - INTERVAL '6 months'     AND p.PROJECT_GRANT_STATUS = 'Completed'     AND p.PROJECT_BUDGET_VARIANCE >= 0 ORDER BY      p.PROJECT_REVIEW_SCORE DESC, d.DOCUMENT_CREATION_DATE DESC; ",
        "schema_links": [
            "Documents.DOCUMENT_CREATION_DATE",
            "Project_Staff.STAFF_DEPARTMENT",
            "Projects.PROJECT_REVIEW_SCORE",
            "Documents.DOCUMENT_TYPE_CODE",
            "Documents.DOCUMENT_TITLE",
            "Project_Staff.STAFF_PROJECT_CONTRIBUTION",
            "Project_Staff.STAFF_PROJECT_ROLE",
            "Projects.PROJECT_FUNDING_SOURCE",
            "Projects.PROJECT_ID",
            "Project_Staff.STAFF_HIRE_DATE",
            "Documents.DOCUMENT_GRANT_ID",
            "Projects.PROJECT_END_DATE",
            "Project_Staff.STAFF_ID",
            "Projects.PROJECT_BUDGET_VARIANCE",
            "Projects.PROJECT_START_DATE",
            "Projects.PROJECT_GRANT_STATUS"
        ]
    },
    {
        "instance_id": "q_617",
        "db_id": "grant_process",
        "question": "What are the types of organizations that have submitted documents associated with grant amounts exceeding $5,000 within the last 90 days, and what is the average review duration (in days) for these documents? Additionally, indicate whether any of these organization types have had a document titled as a \"renewal reminder\" sent in the past 30 days, specifying \"Yes\" or \"No\" for each organization type.",
        "query": " WITH RelevantDocuments AS (     SELECT          d.DOCUMENT_GRANT_ID,         o.ORGANISATION_TYPE,         g.GRANT_REVIEW_DATE,         g.GRANT_AMOUNT,         g.GRANT_REVIEW_DURATION_DAYS     FROM          Documents d     JOIN          Grants g ON d.DOCUMENT_GRANT_ID = g.GRANT_ID     JOIN          Organisations o ON d.DOCUMENT_GRANT_ID = o.ORGANISATION_ID     WHERE          g.GRANT_AMOUNT > 5000         AND d.DOCUMENT_CREATION_DATE >= CURRENT_DATE - INTERVAL '90 DAY' ),  AverageLatency AS (     SELECT          ORGANISATION_TYPE,         AVG(GRANT_REVIEW_DURATION_DAYS) AS AVERAGE_LATENCY     FROM          RelevantDocuments     GROUP BY          ORGANISATION_TYPE ),  RenewalReminders AS (     SELECT DISTINCT          ORGANISATION_TYPE     FROM          Documents d     JOIN          Organisations o ON d.DOCUMENT_GRANT_ID = o.ORGANISATION_ID     WHERE          d.DOCUMENT_TITLE ILIKE '%renewal reminder%'         AND d.DOCUMENT_CREATION_DATE >= CURRENT_DATE - INTERVAL '30 DAY' ) SELECT      al.ORGANISATION_TYPE,     al.AVERAGE_LATENCY,     CASE WHEN rr.ORGANISATION_TYPE IS NOT NULL THEN 'Yes' ELSE 'No' END AS HAS_RENEWAL_REMINDER FROM      AverageLatency al LEFT JOIN      RenewalReminders rr ON al.ORGANISATION_TYPE = rr.ORGANISATION_TYPE; ",
        "schema_links": [
            "Documents.DOCUMENT_CREATION_DATE",
            "Organisations.ORGANISATION_TYPE",
            "Documents.DOCUMENT_GRANT_ID",
            "Organisations.ORGANISATION_ID",
            "Grants.GRANT_REVIEW_DURATION_DAYS",
            "Grants.GRANT_AMOUNT",
            "Documents.DOCUMENT_TITLE",
            "Grants.GRANT_ID",
            "Grants.GRANT_REVIEW_DATE"
        ]
    },
    {
        "instance_id": "q_619",
        "db_id": "grant_process",
        "question": "Which Grant_Submission documents were created for grants with values exceeding 5000, including their titles and creation dates? Additionally, provide the likelihood of these grants being renewed based on their current status (Active or not) and the associated project review scores (categorized as High for scores ≥ 80, Medium for scores between 50 and 79, Low for scores < 50, and Not Eligible for inactive grants). Include the response latency for these grants, indicating whether an alert has been triggered (defined as a review duration exceeding 30 days). Sort the results by document creation date in descending order.",
        "query": " SELECT      d.DOCUMENT_TITLE,      d.DOCUMENT_CREATION_DATE,      g.GRANT_ID,      g.GRANT_STATUS,      g.GRANT_AMOUNT,      p.PROJECT_REVIEW_SCORE,      g.GRANT_REVIEW_DURATION_DAYS,     CASE          WHEN g.GRANT_STATUS = 'Active' AND p.PROJECT_REVIEW_SCORE >= 80 THEN 'High'         WHEN g.GRANT_STATUS = 'Active' AND p.PROJECT_REVIEW_SCORE BETWEEN 50 AND 79 THEN 'Medium'         WHEN g.GRANT_STATUS = 'Active' AND p.PROJECT_REVIEW_SCORE < 50 THEN 'Low'         ELSE 'Not Eligible'     END AS RENEWAL_LIKELIHOOD,     CASE          WHEN g.GRANT_REVIEW_DURATION_DAYS > 30 THEN 'Alert Triggered'         ELSE 'No Alert'     END AS ALERT_STATUS FROM      Documents d JOIN      Grants g ON d.DOCUMENT_GRANT_ID = g.GRANT_ID LEFT JOIN      Projects p ON g.GRANT_ID = p.PROJECT_FUNDING_SOURCE WHERE      g.GRANT_AMOUNT > 5000     AND d.DOCUMENT_TYPE_CODE = 'Grant_Submission' ORDER BY      d.DOCUMENT_CREATION_DATE DESC; ",
        "schema_links": [
            "Documents.DOCUMENT_CREATION_DATE",
            "Grants.GRANT_STATUS",
            "Projects.PROJECT_REVIEW_SCORE",
            "Documents.DOCUMENT_TITLE",
            "Documents.DOCUMENT_TYPE_CODE",
            "Projects.PROJECT_FUNDING_SOURCE",
            "Documents.DOCUMENT_GRANT_ID",
            "Grants.GRANT_REVIEW_DURATION_DAYS",
            "Grants.GRANT_AMOUNT",
            "Grants.GRANT_ID"
        ]
    },
    {
        "instance_id": "q_610",
        "db_id": "grant_process",
        "question": "What are the task details, task IDs, and project IDs for tasks associated with projects that either have a status description mentioning \"high complexity\" or involve multiple staff members with distinct roles within the same project?",
        "query": " SELECT      p.PROJECT_ID,      t.TASK_ID,      t.TASK_DETAILS FROM      Projects p JOIN      Tasks t ON p.PROJECT_ID = t.PROJECT_ID LEFT JOIN      Project_Staff ps ON p.PROJECT_ID = ps.STAFF_PROJECT_ID LEFT JOIN      Staff_Roles sr ON ps.STAFF_ROLE_CODE = sr.ROLE_CODE WHERE      (p.PROJECT_STATUS_DETAILS ILIKE '%high complexity%'       OR (ps.STAFF_ID IS NOT NULL AND sr.STAFF_ROLE_DESCRIPTION IS NOT NULL)) GROUP BY      p.PROJECT_ID, t.TASK_ID, t.TASK_DETAILS HAVING      COUNT(DISTINCT sr.STAFF_ROLE_DESCRIPTION) > 1; ",
        "schema_links": [
            "Project_Staff.STAFF_ROLE_CODE",
            "Projects.PROJECT_ID",
            "Staff_Roles.STAFF_ROLE_DESCRIPTION",
            "Project_Staff.STAFF_PROJECT_ID",
            "Tasks.TASK_ID",
            "Tasks.PROJECT_ID",
            "Tasks.TASK_DETAILS",
            "Projects.PROJECT_STATUS_DETAILS",
            "Staff_Roles.ROLE_CODE",
            "Project_Staff.STAFF_ID"
        ]
    },
    {
        "instance_id": "q_616",
        "db_id": "grant_process",
        "question": "Which projects that started within the last six months have tasks with detailed descriptions related to \"objectives\" or \"milestones\"? Provide the associated task IDs, project IDs, and completion statuses. Additionally, include projects where the number of distinct budget statuses exceeds two.",
        "query": " SELECT DISTINCT      p.PROJECT_ID,      d.DOCUMENT_GRANT_ID AS TASK_ID,      p.PROJECT_GRANT_STATUS AS COMPLETION_STATUS FROM      Projects p JOIN      Documents d ON p.PROJECT_ID = d.DOCUMENT_GRANT_ID WHERE      (d.DOCUMENT_KEYWORDS @> ARRAY['objectives'] OR d.DOCUMENT_KEYWORDS @> ARRAY['milestones'])     OR p.PROJECT_ID IN (         SELECT PROJECT_ID         FROM Projects         GROUP BY PROJECT_ID         HAVING COUNT(DISTINCT PROJECT_BUDGET_STATUS) > 2     )     AND p.PROJECT_START_DATE >= CURRENT_DATE - INTERVAL '6 months' ORDER BY      p.PROJECT_ID; ",
        "schema_links": [
            "Projects.PROJECT_ID",
            "Documents.DOCUMENT_GRANT_ID",
            "Projects.PROJECT_BUDGET_STATUS",
            "Projects.PROJECT_START_DATE",
            "Documents.DOCUMENT_KEYWORDS",
            "Projects.PROJECT_GRANT_STATUS"
        ]
    },
    {
        "instance_id": "q_613",
        "db_id": "grant_process",
        "question": "Which grants have both 'Regular' and 'Initial Application' documents submitted, and what is the earliest submission date among these documents for each grant? Additionally, provide the current renewal status of each grant and indicate whether a 'Renewal Reminder' document has been sent by checking for the existence of such a document type.",
        "query": " SELECT      g.GRANT_ID,     g.GRANT_STATUS AS grant_renewal_status,     CASE          WHEN MAX(d2.DOCUMENT_CREATION_DATE) IS NOT NULL THEN 'Yes'          ELSE 'No'      END AS renewal_reminder_sent,     MIN(d1.DOCUMENT_CREATION_DATE) AS earliest_document_date FROM      Grants g JOIN      Documents d1 ON g.GRANT_ID = d1.DOCUMENT_GRANT_ID LEFT JOIN      Documents d2 ON g.GRANT_ID = d2.DOCUMENT_GRANT_ID AND d2.DOCUMENT_TYPE_CODE = 'Renewal Reminder' WHERE      EXISTS (         SELECT 1          FROM Documents d3          WHERE d3.DOCUMENT_GRANT_ID = g.GRANT_ID AND d3.DOCUMENT_TYPE_CODE = 'Regular'     )     AND EXISTS (         SELECT 1          FROM Documents d4          WHERE d4.DOCUMENT_GRANT_ID = g.GRANT_ID AND d4.DOCUMENT_TYPE_CODE = 'Initial Application'     ) GROUP BY      g.GRANT_ID, g.GRANT_STATUS; ",
        "schema_links": [
            "Documents.DOCUMENT_CREATION_DATE",
            "Grants.GRANT_STATUS",
            "Documents.DOCUMENT_GRANT_ID",
            "Documents.DOCUMENT_TYPE_CODE",
            "Grants.GRANT_ID"
        ]
    },
    {
        "instance_id": "q_625",
        "db_id": "grant_process",
        "question": "Which grants, described in documents as Regular or Initial Applications, have project start dates that fall within the organization's fiscal year quarter from January 1, 2023, to March 31, 2023? Additionally, include only those grants where the response latency alert was triggered (indicated by a review duration exceeding 30 days) and the grant renewal reminder was sent during the same fiscal quarter. Provide the grant IDs, document titles, and corresponding project start dates.",
        "query": " SELECT      g.GRANT_ID,      d.DOCUMENT_TITLE,      p.PROJECT_START_DATE FROM      Grants g JOIN      Documents d ON g.GRANT_ID = d.DOCUMENT_GRANT_ID JOIN      Projects p ON g.GRANT_ID = p.PROJECT_ID WHERE      d.DOCUMENT_TYPE_CODE IN ('Regular', 'Initial')     AND p.PROJECT_START_DATE >= '2023-01-01'::DATE -- Assuming fiscal year starts on Jan 1     AND p.PROJECT_START_DATE <= '2023-03-31'::DATE -- Last quarter end date     AND g.GRANT_REVIEW_DURATION_DAYS > 30 -- Response latency alert triggered (assuming >30 days)     AND g.GRANT_REVIEW_DATE >= '2023-01-01'::DATE -- Grant renewal reminder sent in last quarter     AND g.GRANT_REVIEW_DATE <= '2023-03-31'::DATE; ",
        "schema_links": [
            "Projects.PROJECT_ID",
            "Documents.DOCUMENT_GRANT_ID",
            "Grants.GRANT_REVIEW_DURATION_DAYS",
            "Documents.DOCUMENT_TITLE",
            "Documents.DOCUMENT_TYPE_CODE",
            "Grants.GRANT_ID",
            "Projects.PROJECT_START_DATE",
            "Grants.GRANT_REVIEW_DATE"
        ]
    },
    {
        "instance_id": "q_618",
        "db_id": "document_insights",
        "question": "What is the average number of access times for documents in the \"Acknowledgement\" category, where the documents have been reviewed within the past 30 days and contain at least one section linked to an image?",
        "query": " SELECT AVG(Document_Access_Count) AS Average_Access_Count FROM (     SELECT d.DOCUMENT_CODE, COUNT(da.ACCESS_TIMESTAMP) AS Document_Access_Count     FROM Documents d     INNER JOIN Functional_Areas fa ON d.DOCUMENT_CODE = fa.FUNCTIONAL_AREA_CODE     INNER JOIN Document_Sections ds ON d.DOCUMENT_CODE = ds.SECTION_PARENT_ID     INNER JOIN Images i ON ds.SECTION_CONTENT_HASH = i.IMAGE_ID     INNER JOIN Document_Access da ON d.DOCUMENT_CODE = da.DOCUMENT_CODE     WHERE fa.FUNCTIONAL_AREA_CATEGORY = 'Acknowledgement'       AND d.LAST_MODIFIED_TIMESTAMP >= NOW() - INTERVAL '30 days'       AND d.DOCUMENT_STATUS = 'Reviewed'     GROUP BY d.DOCUMENT_CODE     HAVING COUNT(i.IMAGE_ID) > 0 ) AS Document_Stats; ",
        "schema_links": [
            "Document_Access.DOCUMENT_CODE",
            "Images.IMAGE_ID",
            "Functional_Areas.FUNCTIONAL_AREA_CODE",
            "Document_Sections.SECTION_CONTENT_HASH",
            "Document_Sections.SECTION_PARENT_ID",
            "Documents.DOCUMENT_STATUS",
            "Documents.LAST_MODIFIED_TIMESTAMP",
            "Document_Access.ACCESS_TIMESTAMP",
            "Documents.DOCUMENT_CODE"
        ]
    },
    {
        "instance_id": "q_621",
        "db_id": "document_insights",
        "question": "Which documents, categorized under the functional area \"Acknowledgement,\" have had the highest access frequency over the past 30 days, and what is the average access count for these documents? Consider only those documents that were modified or reviewed at least once during this period, as indicated by a non-null LAST_MODIFIED_TIMESTAMP.",
        "query": " WITH Document_Access AS (     SELECT          d.DOCUMENT_CODE,         COUNT(*) AS Access_Count     FROM          Documents d     JOIN          Functional_Areas fa ON d.DOCUMENT_CODE = fa.FUNCTIONAL_AREA_CODE     WHERE          fa.FUNCTIONAL_AREA_DESCRIPTION = 'Acknowledgement'         AND d.LAST_MODIFIED_TIMESTAMP >= NOW() - INTERVAL '1 month'         AND d.LAST_MODIFIED_TIMESTAMP IS NOT NULL     GROUP BY          d.DOCUMENT_CODE ), Max_Access_Documents AS (     SELECT          da.DOCUMENT_CODE,         da.Access_Count     FROM          Document_Access da     WHERE          da.Access_Count = (SELECT MAX(Access_Count) FROM Document_Access) ) SELECT      mad.DOCUMENT_CODE,     AVG(mad.Access_Count) AS Average_Access_Count FROM      Max_Access_Documents mad GROUP BY      mad.DOCUMENT_CODE; ",
        "schema_links": [
            "Functional_Areas.FUNCTIONAL_AREA_CODE",
            "Documents.LAST_MODIFIED_TIMESTAMP",
            "Documents.DOCUMENT_CODE",
            "Functional_Areas.FUNCTIONAL_AREA_DESCRIPTION"
        ]
    },
    {
        "instance_id": "q_620",
        "db_id": "order_approval",
        "question": "Which customers, identified by their payment method and loyalty tier, have both placed successful orders and been targeted by mailshot campaigns without responding within the last quarter? Additionally, provide the names of their customer segments at the time of segment assignment, the date of segment assignment, the count of their successful orders, and the count of non-responsive mailshot campaigns during this period.",
        "query": " WITH LastQuarter AS (     SELECT          CUSTOMER_ID,         PAYMENT_METHOD,         LOYALTY_TIER,         CUSTOMER_SEGMENT_ID,         SEGMENT_ASSIGNED_DATE     FROM Customers c     WHERE SEGMENT_ASSIGNED_DATE >= DATEADD(QUARTER, -1, GETDATE()) ), SuccessfulOrders AS (     SELECT DISTINCT          o.ORDER_ID,         o.PAYMENT_METHOD,         c.CUSTOMER_ID     FROM Customer_Orders o     JOIN Customers c ON o.ORDER_APPROVAL_USER_ID = c.CUSTOMER_ID     WHERE o.ORDER_STATUS = 'successful'       AND o.ORDER_APPROVAL_TIMESTAMP >= DATEADD(QUARTER, -1, GETDATE()) ), NonResponsiveOutcomes AS (     SELECT DISTINCT          mc.MAILSHOT_ID,         c.CUSTOMER_ID     FROM Mailshot_Campaigns mc     JOIN Customers c ON mc.CAMPAIGN_TARGETING_CRITERIA LIKE '%' + CAST(c.CUSTOMER_ID AS VARCHAR) + '%'     LEFT JOIN SuccessfulOrders so ON c.CUSTOMER_ID = so.CUSTOMER_ID     WHERE so.CUSTOMER_ID IS NULL       AND mc.CAMPAIGN_END_DATE >= DATEADD(QUARTER, -1, GETDATE()) ), CustomerPatterns AS (     SELECT          lq.CUSTOMER_ID,         lq.PAYMENT_METHOD,         lq.LOYALTY_TIER,         lq.CUSTOMER_SEGMENT_ID,         lq.SEGMENT_ASSIGNED_DATE,         COUNT(DISTINCT so.ORDER_ID) AS SuccessfulOrderCount,         COUNT(DISTINCT nro.MAILSHOT_ID) AS NonResponsiveCount     FROM LastQuarter lq     LEFT JOIN SuccessfulOrders so ON lq.CUSTOMER_ID = so.CUSTOMER_ID     LEFT JOIN NonResponsiveOutcomes nro ON lq.CUSTOMER_ID = nro.CUSTOMER_ID     GROUP BY          lq.CUSTOMER_ID,         lq.PAYMENT_METHOD,         lq.LOYALTY_TIER,         lq.CUSTOMER_SEGMENT_ID,         lq.SEGMENT_ASSIGNED_DATE ) SELECT      cp.CUSTOMER_ID,     cp.PAYMENT_METHOD,     cp.LOYALTY_TIER,     cs.CUSTOMER_SEGMENT_NAME,     cp.SEGMENT_ASSIGNED_DATE,     cp.SuccessfulOrderCount,     cp.NonResponsiveCount FROM CustomerPatterns cp JOIN Customer_Segments cs ON cp.CUSTOMER_SEGMENT_ID = cs.CUSTOMER_SEGMENT_ID WHERE cp.SuccessfulOrderCount > 0   AND cp.NonResponsiveCount > 0; ",
        "schema_links": [
            "Customer_Orders.ORDER_APPROVAL_USER_ID",
            "Customers.CUSTOMER_ID",
            "Customer_Orders.ORDER_APPROVAL_TIMESTAMP",
            "Mailshot_Campaigns.CAMPAIGN_TARGETING_CRITERIA",
            "Mailshot_Campaigns.CAMPAIGN_END_DATE",
            "Customers.SEGMENT_ASSIGNED_DATE",
            "Customer_Segments.CUSTOMER_SEGMENT_ID",
            "Customers.PAYMENT_METHOD",
            "Customer_Orders.PAYMENT_METHOD",
            "Mailshot_Campaigns.MAILSHOT_ID",
            "Customers.LOYALTY_TIER",
            "Customers.CUSTOMER_SEGMENT_ID",
            "Customer_Orders.ORDER_ID",
            "Customer_Orders.ORDER_STATUS",
            "Customer_Segments.CUSTOMER_SEGMENT_NAME"
        ]
    },
    {
        "instance_id": "q_629",
        "db_id": "customer_sales",
        "question": "Which customers, belonging to a loyalty tier of \"Gold\" or higher, have placed orders with both \"New\" and \"Pending\" statuses within the past 30 days? Provide their customer IDs, full addresses (formatted as province, city, district), ensuring that each customer has at least one order with \"New\" status and one order with \"Pending\" status during this time period.",
        "query": " SELECT      c.CUSTOMER_ID,     c.PROVINCE || ', ' || c.CITY || ', ' || c.DISTRICT AS FULL_ADDRESS FROM      Customers c JOIN      Customer_Orders co1 ON c.CUSTOMER_ID = co1.CUSTOMER_ID JOIN      Customer_Orders co2 ON c.CUSTOMER_ID = co2.CUSTOMER_ID WHERE      co1.ORDER_STATUS = 'New'     AND co2.ORDER_STATUS = 'Pending'     AND co1.PAYMENT_DATE >= CURRENT_DATE - INTERVAL '30' DAY     AND co2.PAYMENT_DATE >= CURRENT_DATE - INTERVAL '30' DAY     AND c.LOYALTY_PROGRAM_LEVEL IN ('Gold', 'Platinum', 'Diamond') GROUP BY      c.CUSTOMER_ID, c.PROVINCE, c.CITY, c.DISTRICT; ",
        "schema_links": [
            "Customers.PROVINCE",
            "Customers.CUSTOMER_ID",
            "Customers.LOYALTY_PROGRAM_LEVEL",
            "Customer_Orders.PAYMENT_DATE",
            "Customer_Orders.CUSTOMER_ID",
            "Customers.DISTRICT",
            "Customer_Orders.ORDER_STATUS",
            "Customers.CITY"
        ]
    },
    {
        "instance_id": "q_624",
        "db_id": "customer_sales",
        "question": "Which customers have both new and pending orders within the last 30 days, and what are their names, addresses (including province, city, and district), loyalty program tiers? Additionally, identify the type and region of the most recently visited department store for these customers, based on the payment date of their new orders. Ensure that both the new and pending orders were placed within the past 30 days. Present the results sorted by the payment date of the new orders in descending order.",
        "query": " SELECT      c.CUSTOMER_ID AS Customer_ID,     c.PROVINCE AS Province,     c.CITY AS City,     c.DISTRICT AS District,     c.LOYALTY_PROGRAM_LEVEL AS Loyalty_Tier,     ds.STORE_TYPE AS Most_Recent_Store_Type,     ds.STORE_REGION AS Most_Recent_Store_Region FROM      Customers c JOIN      Customer_Orders co_new ON c.CUSTOMER_ID = co_new.CUSTOMER_ID JOIN      Customer_Orders co_pending ON c.CUSTOMER_ID = co_pending.CUSTOMER_ID LEFT JOIN      Department_Stores ds ON co_new.DEPT_STORE_ID = ds.DEPT_STORE_ID WHERE      co_new.ORDER_STATUS = 'new'      AND co_pending.ORDER_STATUS = 'pending'      AND co_new.PAYMENT_DATE >= CURRENT_DATE - INTERVAL '30 days'     AND co_pending.PAYMENT_DATE >= CURRENT_DATE - INTERVAL '30 days' GROUP BY      c.CUSTOMER_ID, c.PROVINCE, c.CITY, c.DISTRICT, c.LOYALTY_PROGRAM_LEVEL, ds.STORE_TYPE, ds.STORE_REGION ORDER BY      co_new.PAYMENT_DATE DESC; ",
        "schema_links": [
            "Customers.PROVINCE",
            "Customers.CUSTOMER_ID",
            "Customers.LOYALTY_PROGRAM_LEVEL",
            "Customer_Orders.PAYMENT_DATE",
            "Department_Stores.STORE_REGION",
            "Department_Stores.DEPT_STORE_ID",
            "Customer_Orders.CUSTOMER_ID",
            "Customers.DISTRICT",
            "Customer_Orders.DEPT_STORE_ID",
            "Customers.CITY",
            "Department_Stores.STORE_TYPE",
            "Customer_Orders.ORDER_STATUS"
        ]
    },
    {
        "instance_id": "q_622",
        "db_id": "customer_sales",
        "question": "Which department stores have both marketing and management teams, identified by their store ID and store type? Additionally, provide the sales forecast accuracy for these stores in the first quarter of 2023 (from January 1, 2023, to March 31, 2023), but only include stores with a forecast confidence level greater than 80%. Ensure that each store has distinct marketing and management departments associated with it.",
        "query": " SELECT      ds.DEPT_STORE_ID AS Store_ID,      ds.STORE_TYPE AS Store_Name,     sf.FORECASTED_SALES_AMOUNT AS Sales_Forecast_Accuracy FROM      Department_Stores ds JOIN      Departments d ON ds.DEPT_STORE_ID = d.DEPARTMENT_ID JOIN      Staff s ON d.DEPARTMENT_ID = s.STAFF_DEPARTMENT_ID JOIN      Sales_Forecast sf ON ds.DEPT_STORE_ID = sf.SALES_FORECAST WHERE      d.DEPARTMENT_TYPE IN ('marketing', 'management')     AND sf.FORECAST_MODEL_PARAMETERS->>'confidence_level' > 80     AND sf.FORECAST_UPDATED_AT >= '2023-01-01'::timestamp AT TIME ZONE 'UTC'     AND sf.FORECAST_UPDATED_AT < '2023-04-01'::timestamp AT TIME ZONE 'UTC' GROUP BY      ds.DEPT_STORE_ID, ds.STORE_TYPE, sf.FORECASTED_SALES_AMOUNT HAVING      COUNT(DISTINCT d.DEPARTMENT_TYPE) = 2; ",
        "schema_links": [
            "Sales_Forecast.FORECAST_UPDATED_AT",
            "Sales_Forecast.FORECAST_MODEL_PARAMETERS",
            "Departments.DEPARTMENT_ID",
            "Sales_Forecast.SALES_FORECAST",
            "Department_Stores.DEPT_STORE_ID",
            "Departments.DEPARTMENT_TYPE",
            "Department_Stores.STORE_TYPE",
            "Sales_Forecast.FORECASTED_SALES_AMOUNT",
            "Staff.STAFF_DEPARTMENT_ID"
        ]
    },
    {
        "instance_id": "q_623",
        "db_id": "customer_sales",
        "question": "What are the store IDs and types of department stores that have both marketing and management departments? Additionally, provide the most recently forecasted sales amount for these stores within the latest forecast window.",
        "query": " SELECT      ds.DEPT_STORE_ID AS Store_ID,     ds.STORE_TYPE AS Store_Name,     sf.FORECASTED_SALES_AMOUNT AS Forecasted_Sales_Accuracy FROM      Department_Stores ds JOIN      Departments marketing ON ds.DEPT_STORE_ID = marketing.DEPARTMENT_ID JOIN      Departments management ON ds.DEPT_STORE_ID = management.DEPARTMENT_ID JOIN      Sales_Forecast sf ON ds.DEPT_STORE_ID = sf.SALES_FORECAST_DETAIL WHERE      marketing.DEPARTMENT_TYPE = 'Marketing'     AND management.DEPARTMENT_TYPE = 'Management'     AND sf.FORECAST_UPDATED_AT = (         SELECT MAX(FORECAST_UPDATED_AT)          FROM Sales_Forecast          WHERE SALES_FORECAST_DETAIL = ds.DEPT_STORE_ID     ); ",
        "schema_links": [
            "Sales_Forecast.FORECAST_UPDATED_AT",
            "Departments.DEPARTMENT_ID",
            "Departments.DEPARTMENT_TYPE",
            "Department_Stores.DEPT_STORE_ID",
            "Department_Stores.STORE_TYPE",
            "Sales_Forecast.SALES_FORECAST_DETAIL",
            "Sales_Forecast.FORECASTED_SALES_AMOUNT"
        ]
    },
    {
        "instance_id": "q_626",
        "db_id": "customer_sales",
        "question": "Which customers, identified by their unique customer IDs, have made completed purchases that included a product categorized as a keyboard under a promotional offer, and what were their associated loyalty tiers at the time of purchase? Consider only customers who engaged with promotional offers during their transactions, where the payment date falls within the promotion's validity period defined by the promotion start and end dates.",
        "query": " SELECT DISTINCT      c.CUSTOMER_ID AS Customer_ID,     cs.SEGMENT_NAME AS Loyalty_Tier FROM      Customers c JOIN      Customer_Segments cs ON c.CUSTOMER_SEGMENT_ID = cs.SEGMENT_NAME JOIN      Customer_Orders co ON c.CUSTOMER_ID = co.ORDER_ID JOIN      Order_Approval_Logs oal ON co.ORDER_ID = oal.APPROVER_STAFF_ID JOIN      Products p ON co.PROMOTION_RULE_ID = p.PRODUCT_ID WHERE      p.PROMOTION_RULE_TYPE = 'keyboard'     AND co.PROMOTION_RULE_ID IS NOT NULL     AND co.ORDER_STATUS = 'completed'     AND co.PAYMENT_DATE >= p.PROMOTION_START_DATE     AND co.PAYMENT_DATE <= p.PROMOTION_END_DATE; ",
        "schema_links": [
            "Customers.CUSTOMER_ID",
            "Customer_Orders.PAYMENT_DATE",
            "Products.PRODUCT_ID",
            "Products.PROMOTION_RULE_TYPE",
            "Products.PROMOTION_END_DATE",
            "Products.PROMOTION_START_DATE",
            "Order_Approval_Logs.APPROVER_STAFF_ID",
            "Customer_Orders.PROMOTION_RULE_ID",
            "Customers.CUSTOMER_SEGMENT_ID",
            "Customer_Orders.ORDER_ID",
            "Customer_Orders.ORDER_STATUS",
            "Customer_Segments.SEGMENT_NAME"
        ]
    },
    {
        "instance_id": "q_630",
        "db_id": "customer_sales",
        "question": "Which customers, identified by their unique customer IDs and loyalty scores, belong to customer segments that include descriptions related to computer accessories, have participated in transactions involving products with promotions or discounts, are eligible for the loyalty program, and have made purchases within the last quarter (from January 1, 2023, to March 31, 2023)? Please list these customers in descending order of their loyalty scores.",
        "query": " SELECT DISTINCT c.CUSTOMER_ID, c.LOYALTY_SCORE, cs.SEGMENT_NAME FROM Customers c JOIN Customer_Segments cs ON c.CUSTOMER_SEGMENT_ID = cs.SEGMENT_NAME JOIN Customer_Orders co ON c.CUSTOMER_ID = co.ORDER_ID JOIN Products p ON co.PROMOTION_RULE_ID = p.PRODUCT_ID WHERE c.LOYALTY_PROGRAM_ELIGIBILITY = TRUE   AND co.PAYMENT_DATE >= '2023-01-01'::DATE   AND co.PAYMENT_DATE < '2023-04-01'::DATE   AND p.PROMOTION_RULE_TYPE IN ('Discount', 'Promotion')   AND cs.SEGMENT_DESCRIPTION LIKE '%computer accessories%' ORDER BY c.LOYALTY_SCORE DESC; ",
        "schema_links": [
            "Customers.LOYALTY_PROGRAM_ELIGIBILITY",
            "Customers.CUSTOMER_ID",
            "Customer_Orders.PAYMENT_DATE",
            "Customer_Segments.SEGMENT_DESCRIPTION",
            "Products.PRODUCT_ID",
            "Products.PROMOTION_RULE_TYPE",
            "Customer_Orders.PROMOTION_RULE_ID",
            "Customers.LOYALTY_SCORE",
            "Customers.CUSTOMER_SEGMENT_ID",
            "Customer_Orders.ORDER_ID",
            "Customer_Segments.SEGMENT_NAME"
        ]
    },
    {
        "instance_id": "q_628",
        "db_id": "customer_sales",
        "question": "Which staff members currently hold the role of \"Sales Person,\" have never held the role of \"Clerical Staff,\" and belong to departments that have processed at least one order in the past 30 days? Please provide their unique staff IDs, names, and genders.",
        "query": " SELECT DISTINCT s.STAFF_ID, s.STAFF_NAME, s.STAFF_GENDER FROM Staff s JOIN Departments d ON s.STAFF_DEPARTMENT_ID = d.DEPARTMENT_ID LEFT JOIN Order_Approval_Logs oal ON s.STAFF_ID = oal.APPROVER_STAFF_ID WHERE s.STAFF_ROLE = 'Sales Person'   AND s.STAFF_ID NOT IN (     SELECT STAFF_ID      FROM Staff      WHERE STAFF_ROLE = 'Clerical Staff'   )   AND d.DEPARTMENT_ID IN (     SELECT DISTINCT oal.STAFF_DEPARTMENT_ID     FROM Order_Approval_Logs oal     WHERE oal.APPROVAL_TIMESTAMP >= CURRENT_DATE - INTERVAL '1 MONTH'       AND oal.ORDER_APPROVAL_STATUS = 'Processed'   ); ",
        "schema_links": [
            "Departments.DEPARTMENT_ID",
            "Order_Approval_Logs.STAFF_DEPARTMENT_ID",
            "Staff.STAFF_ROLE",
            "Staff.STAFF_DEPARTMENT_ID",
            "Staff.STAFF_ID",
            "Order_Approval_Logs.APPROVER_STAFF_ID",
            "Staff.STAFF_GENDER",
            "Order_Approval_Logs.ORDER_APPROVAL_STATUS",
            "Order_Approval_Logs.APPROVAL_TIMESTAMP",
            "Staff.STAFF_NAME"
        ]
    },
    {
        "instance_id": "q_631",
        "db_id": "customer_sales",
        "question": "Which staff members have held a sales-related role within the last year, have never been assigned to a clerical position, and what are their IDs, names, and genders? Ensure that only staff who transitioned out of a sales role within the last year are considered.",
        "query": " SELECT      s1.STAFF_ID,      s1.STAFF_NAME,      s1.STAFF_GENDER FROM      Staff s1 JOIN      Staff_Roles sr1 ON s1.STAFF_ID = sr1.STAFF_ID JOIN      Departments d1 ON sr1.DEPARTMENT_ID = d1.DEPARTMENT_ID LEFT JOIN      Staff_Roles sr2 ON s1.STAFF_ID = sr2.STAFF_ID AND sr2.STAFF_ROLE = 'Clerical' WHERE      sr1.STAFF_ROLE LIKE '%Sales%'      AND sr1.ROLE_END_DATE >= CURRENT_DATE - INTERVAL '1 YEAR'      AND sr2.STAFF_ROLE IS NULL; ",
        "schema_links": [
            "Staff_Roles.ROLE_END_DATE",
            "Staff.STAFF_ID",
            "Departments.DEPARTMENT_ID",
            "Staff_Roles.STAFF_ROLE",
            "Staff_Roles.DEPARTMENT_ID",
            "Staff.STAFF_GENDER",
            "Staff_Roles.STAFF_ID",
            "Staff.STAFF_NAME"
        ]
    },
    {
        "instance_id": "q_632",
        "db_id": "customer_segmentation",
        "question": "What are the distinct service type descriptions associated with products in both the \"photo\" and \"film\" categories, considering only active workshop groups that are linked to these products?",
        "query": " SELECT DISTINCT rst.Service_Type_Description FROM Ref_Service_Types rst JOIN Products p ON rst.Service_Type_Subcategory = p.Product_Category JOIN Drama_Workshop_Groups dwg ON p.Product_Category_ID = dwg.Workshop_Group_ID WHERE p.Product_Category IN ('photo', 'film')   AND dwg.Workshop_Group_Type = 'active'   AND rst.Service_Type_Category IS NOT NULL GROUP BY rst.Service_Type_Description HAVING COUNT(DISTINCT p.Product_Category) = 2; ",
        "schema_links": [
            "Ref_Service_Types.Service_Type_Subcategory",
            "Ref_Service_Types.Service_Type_Category",
            "Products.Product_Category_ID",
            "Drama_Workshop_Groups.Workshop_Group_ID",
            "Products.Product_Category",
            "Ref_Service_Types.Service_Type_Description",
            "Drama_Workshop_Groups.Workshop_Group_Type"
        ]
    },
    {
        "instance_id": "q_638",
        "db_id": "customer_segmentation",
        "question": "Which service categories include both photo-related items and film-based products, where these items belong to the same service category but different subcategories, and can be bundled together in a single booking? Additionally, provide the descriptions of these service categories and subcategories within the system.",
        "query": "SELECT DISTINCT st.Service_Type_Category FROM Ref_Service_Types st JOIN Products p ON st.Service_Type_Subcategory = p.Product_Category WHERE p.Product_Category LIKE '%photo%'    AND p.Product_Category LIKE '%film%'   AND st.Service_Type_Category IN (     SELECT st_inner.Service_Type_Category     FROM Ref_Service_Types st_inner     GROUP BY st_inner.Service_Type_Category     HAVING COUNT(DISTINCT st_inner.Service_Type_Subcategory) > 1 )",
        "schema_links": [
            "Ref_Service_Types.Service_Type_Subcategory",
            "Products.Product_Category",
            "Ref_Service_Types.Service_Type_Category"
        ]
    },
    {
        "instance_id": "q_633",
        "db_id": "problem_log_system\n\n根据反馈，我注意到需要避免使用任何固定的后缀如'system'。因此，重新审视并调整我的选择以确保符合所有要求。\n\n1. 核心业务域识别：问题记录、处理与解决。\n2. 关键词提炼：“问题”、“日志”。\n3. 生成候选名称：problem_logs, issue_tracker, problem_history, log_issues, case_logs。\n4. 剔除重复项：从已有数据库名称中移除可能相似或相同的名称。\"problem_tracking\"已经存在，因此排除\"issue_tracker\"和\"problem_history\"。\"log_issues\"和\"case_logs\"虽然不直接冲突，但为了更简洁且避免潜在的混淆，我们进一步聚焦于最直接反映核心功能的名字。\n5. 筛选最优选项：在剩余选项里，\"problem_logs\"最为简洁明了，同时准确反映了该数据库的主要用途——记录问题及其相关活动。\n6. 最终输出：\n\nproblem_logs",
        "question": "What are the IDs, severity levels, and preventive measures of the problems reported by staff members whose roles include \"Quality Assurance\"? Additionally, provide the details of each problem.",
        "query": " SELECT      p.problem_id,     p.PROBLEM_SEVERITY_CODE AS severity_level,     p.PROBLEM_PREVENTION_MEASURES AS preventive_measures,     pl.PROBLEM_LOG_DETAILS AS problem_details FROM      Problems p JOIN      Problem_Log pl ON p.problem_id = pl.problem_id JOIN      Staff s ON pl.STAFF_ASSIGNED_ID = s.staff_id WHERE      s.STAFF_ROLE LIKE '%Quality Assurance%'     AND p.PROBLEM_REPORTED_BY = 'Staff'; ",
        "schema_links": [
            "Problem_Log.problem_id",
            "Problem_Log.PROBLEM_LOG_DETAILS",
            "Problems.PROBLEM_PREVENTION_MEASURES",
            "Staff.STAFF_ROLE",
            "Problems.PROBLEM_REPORTED_BY",
            "Problem_Log.STAFF_ASSIGNED_ID",
            "Problems.PROBLEM_SEVERITY_CODE",
            "Staff.staff_id",
            "Problems.problem_id"
        ]
    },
    {
        "instance_id": "q_650",
        "db_id": "problem_log_system\n\n根据反馈，我注意到需要避免使用任何固定的后缀如'system'。因此，重新审视并调整我的选择以确保符合所有要求。\n\n1. 核心业务域识别：问题记录、处理与解决。\n2. 关键词提炼：“问题”、“日志”。\n3. 生成候选名称：problem_logs, issue_tracker, problem_history, log_issues, case_logs。\n4. 剔除重复项：从已有数据库名称中移除可能相似或相同的名称。\"problem_tracking\"已经存在，因此排除\"issue_tracker\"和\"problem_history\"。\"log_issues\"和\"case_logs\"虽然不直接冲突，但为了更简洁且避免潜在的混淆，我们进一步聚焦于最直接反映核心功能的名字。\n5. 筛选最优选项：在剩余选项里，\"problem_logs\"最为简洁明了，同时准确反映了该数据库的主要用途——记录问题及其相关活动。\n6. 最终输出：\n\nproblem_logs",
        "question": "What are the unique issue IDs for problems that were either reported or assigned to staff members whose roles start with \"Dameon\" or \"Jolie\"? Additionally, include any unresolved problems that have been reopened at least once.",
        "query": " SELECT DISTINCT p.problem_id FROM Problems p JOIN Problem_Log pl ON p.problem_id = pl.problem_id JOIN Staff s ON s.staff_id = pl.STAFF_ASSIGNED_ID OR s.staff_id = pl.STAFF_APPROVED_ID WHERE (s.STAFF_ROLE LIKE 'Dameon%' OR s.STAFF_ROLE LIKE 'Jolie%')    OR (p.problem_id IN (        SELECT pr.problem_id        FROM Problem_Log pr        WHERE pr.PROBLEM_LOG_ACTION_TYPE = 'Reopen'        GROUP BY pr.problem_id        HAVING COUNT(*) >= 1    ) AND p.problem_id NOT IN (        SELECT pr_resolved.problem_id        FROM Problem_Log pr_resolved        WHERE pr_resolved.APPROVAL_STATUS = 'Resolved'    )); ",
        "schema_links": [
            "Problem_Log.problem_id",
            "Problem_Log.PROBLEM_LOG_ACTION_TYPE",
            "Problem_Log.APPROVAL_STATUS",
            "Problem_Log.STAFF_APPROVED_ID",
            "Staff.STAFF_ROLE",
            "Problem_Log.STAFF_ASSIGNED_ID",
            "Staff.staff_id",
            "Problems.problem_id"
        ]
    },
    {
        "instance_id": "q_636",
        "db_id": "problem_log_system\n\n根据反馈，我注意到需要避免使用任何固定的后缀如'system'。因此，重新审视并调整我的选择以确保符合所有要求。\n\n1. 核心业务域识别：问题记录、处理与解决。\n2. 关键词提炼：“问题”、“日志”。\n3. 生成候选名称：problem_logs, issue_tracker, problem_history, log_issues, case_logs。\n4. 剔除重复项：从已有数据库名称中移除可能相似或相同的名称。\"problem_tracking\"已经存在，因此排除\"issue_tracker\"和\"problem_history\"。\"log_issues\"和\"case_logs\"虽然不直接冲突，但为了更简洁且避免潜在的混淆，我们进一步聚焦于最直接反映核心功能的名字。\n5. 筛选最优选项：在剩余选项里，\"problem_logs\"最为简洁明了，同时准确反映了该数据库的主要用途——记录问题及其相关活动。\n6. 最终输出：\n\nproblem_logs",
        "question": "Which product IDs are associated with problems that were initially reported by a staff member with the role \"Christop Berge,\" later reviewed by a staff member with the role \"Ashley Medhurst,\" have a severity level classified as \"High\" or \"Critical,\" impact products with an issue impact score higher than the average score across all products, and were resolved within the last completed quarter?",
        "query": " SELECT DISTINCT p.product_id FROM Problems pr JOIN Product p ON pr.product_id = p.product_id JOIN Problem_Log pl ON pr.problem_id = pl.problem_id JOIN Staff reporter ON pr.PROBLEM_REPORTED_BY = reporter.staff_id JOIN Staff reviewer ON pl.STAFF_REVIEW_COMMENTS = reviewer.staff_id WHERE reporter.STAFF_ROLE = 'Christop Berge'   AND reviewer.STAFF_ROLE = 'Ashley Medhurst'   AND pr.PROBLEM_SEVERITY_CODE IN ('High', 'Critical')   AND p.PRODUCT_ISSUE_IMPACT_SCORE > (SELECT AVG(PRODUCT_ISSUE_IMPACT_SCORE) FROM Product)   AND pl.PROBLEM_LOG_ACTION_RESOLUTION_DATE >= DATEADD(QUARTER, -1, GETDATE())   AND pl.PROBLEM_LOG_ACTION_RESOLUTION_DATE < GETDATE(); ",
        "schema_links": [
            "Problem_Log.problem_id",
            "Problems.product_id",
            "Staff.STAFF_ROLE",
            "Problems.PROBLEM_REPORTED_BY",
            "Problem_Log.STAFF_REVIEW_COMMENTS",
            "Staff.staff_id",
            "Product.product_id",
            "Problem_Log.PROBLEM_LOG_ACTION_RESOLUTION_DATE",
            "Problems.PROBLEM_SEVERITY_CODE",
            "Product.PRODUCT_ISSUE_IMPACT_SCORE",
            "Problems.problem_id"
        ]
    },
    {
        "instance_id": "q_635",
        "db_id": "problem_log_system\n\n根据反馈，我注意到需要避免使用任何固定的后缀如'system'。因此，重新审视并调整我的选择以确保符合所有要求。\n\n1. 核心业务域识别：问题记录、处理与解决。\n2. 关键词提炼：“问题”、“日志”。\n3. 生成候选名称：problem_logs, issue_tracker, problem_history, log_issues, case_logs。\n4. 剔除重复项：从已有数据库名称中移除可能相似或相同的名称。\"problem_tracking\"已经存在，因此排除\"issue_tracker\"和\"problem_history\"。\"log_issues\"和\"case_logs\"虽然不直接冲突，但为了更简洁且避免潜在的混淆，我们进一步聚焦于最直接反映核心功能的名字。\n5. 筛选最优选项：在剩余选项里，\"problem_logs\"最为简洁明了，同时准确反映了该数据库的主要用途——记录问题及其相关活动。\n6. 最终输出：\n\nproblem_logs",
        "question": "Which products, identified by their product IDs, have experienced issues reported by Christop Berge and resolved under the authorization of a staff member with the role of Ashley Medhurst, where the problem severity was categorized as high, and the resolution time exceeded the average resolution time for similar issues reported by Christop Berge within the past 90 days? Only consider issues that were resolved within this time frame.",
        "query": " WITH AverageResolutionTime AS (     SELECT          p.product_id,         AVG(pl.PROBLEM_LOG_ACTION_DURATION_HOURS) AS avg_resolution_time     FROM          Problems pr     JOIN          Problem_Log pl ON pr.problem_id = pl.problem_id     JOIN          Product p ON pr.product_id = p.product_id     WHERE          pr.PROBLEM_REPORTED_BY = 'Christop Berge'         AND pl.APPROVAL_STATUS = 'Resolved'         AND pr.PROBLEM_SEVERITY_CODE = 'High'         AND pl.PROBLEM_LOG_ACTION_DATE >= CURRENT_DATE - INTERVAL '90 days'     GROUP BY          p.product_id ) SELECT DISTINCT      p.product_id FROM      Problems pr JOIN      Problem_Log pl ON pr.problem_id = pl.problem_id JOIN      Product p ON pr.product_id = p.product_id JOIN      Staff s ON pl.STAFF_APPROVED_ID = s.staff_id JOIN      AverageResolutionTime art ON p.product_id = art.product_id WHERE      pr.PROBLEM_REPORTED_BY = 'Christop Berge'     AND s.STAFF_ROLE = 'Ashley Medhurst'     AND pr.PROBLEM_SEVERITY_CODE = 'High'     AND pl.PROBLEM_LOG_ACTION_DURATION_HOURS > art.avg_resolution_time     AND pl.PROBLEM_LOG_ACTION_DATE >= CURRENT_DATE - INTERVAL '90 days'; ",
        "schema_links": [
            "Problem_Log.problem_id",
            "Problems.product_id",
            "Problem_Log.APPROVAL_STATUS",
            "Problem_Log.STAFF_APPROVED_ID",
            "Staff.STAFF_ROLE",
            "Problems.PROBLEM_REPORTED_BY",
            "Problem_Log.PROBLEM_LOG_ACTION_DURATION_HOURS",
            "Staff.staff_id",
            "Product.product_id",
            "Problems.PROBLEM_SEVERITY_CODE",
            "Problem_Log.PROBLEM_LOG_ACTION_DATE",
            "Problems.problem_id"
        ]
    },
    {
        "instance_id": "q_637",
        "db_id": "problem_log_system\n\n根据反馈，我注意到需要避免使用任何固定的后缀如'system'。因此，重新审视并调整我的选择以确保符合所有要求。\n\n1. 核心业务域识别：问题记录、处理与解决。\n2. 关键词提炼：“问题”、“日志”。\n3. 生成候选名称：problem_logs, issue_tracker, problem_history, log_issues, case_logs。\n4. 剔除重复项：从已有数据库名称中移除可能相似或相同的名称。\"problem_tracking\"已经存在，因此排除\"issue_tracker\"和\"problem_history\"。\"log_issues\"和\"case_logs\"虽然不直接冲突，但为了更简洁且避免潜在的混淆，我们进一步聚焦于最直接反映核心功能的名字。\n5. 筛选最优选项：在剩余选项里，\"problem_logs\"最为简洁明了，同时准确反映了该数据库的主要用途——记录问题及其相关活动。\n6. 最终输出：\n\nproblem_logs",
        "question": "Which problem IDs were logged before the earliest issue reported by Lysanne Turcotte, specifically for problems associated with the product category \"Specific_Product_Category\" and having a resolution time exceeding the average resolution time of similar issues within the same product category? Additionally, include problems where the department of the assigned staff member was involved in more than five issues during the same period prior to Lysanne Turcotte's first report.",
        "query": " WITH ReportedByLysanne AS (     SELECT DISTINCT problem_id     FROM Problem_Log PL     JOIN Problems P ON PL.problem_id = P.problem_id     WHERE P.PROBLEM_REPORTED_BY = 'Lysanne Turcotte' ), AverageResolutionTime AS (     SELECT          P.PRODUCT_CATEGORY AS product_category,         AVG(PL.PROBLEM_LOG_ACTION_DURATION_HOURS) AS avg_resolution_time     FROM Problem_Log PL     JOIN Problems P ON PL.problem_id = P.problem_id     GROUP BY P.PRODUCT_CATEGORY ), RelatedIssuesByDepartment AS (     SELECT          S.STAFF_ROLE AS department,         COUNT(DISTINCT PL.problem_id) AS issue_count     FROM Problem_Log PL     JOIN Staff S ON PL.STAFF_ASSIGNED_ID = S.staff_id     WHERE PL.PROBLEM_LOG_ACTION_DATE <= (SELECT MIN(PROBLEM_LOG_ACTION_DATE) FROM ReportedByLysanne)     GROUP BY S.STAFF_ROLE     HAVING COUNT(DISTINCT PL.problem_id) > 5 ) SELECT DISTINCT PL.problem_id FROM Problem_Log PL JOIN Problems P ON PL.problem_id = P.problem_id JOIN Product Pr ON P.product_id = Pr.product_id JOIN AverageResolutionTime ART ON Pr.PRODUCT_CATEGORY = ART.product_category LEFT JOIN RelatedIssuesByDepartment RID ON RID.department = (SELECT STAFF_ROLE FROM Staff WHERE staff_id = PL.STAFF_ASSIGNED_ID) WHERE PL.PROBLEM_LOG_ACTION_DATE < (SELECT MIN(PROBLEM_LOG_ACTION_DATE) FROM ReportedByLysanne) AND PL.PROBLEM_LOG_ACTION_DURATION_HOURS > ART.avg_resolution_time AND Pr.PRODUCT_CATEGORY = 'Specific_Product_Category' AND (RID.issue_count IS NOT NULL OR RID.issue_count > 5); ",
        "schema_links": [
            "Problem_Log.problem_id",
            "Problems.product_id",
            "Staff.STAFF_ROLE",
            "Problems.PROBLEM_REPORTED_BY",
            "Problem_Log.PROBLEM_LOG_ACTION_DURATION_HOURS",
            "Staff.staff_id",
            "Product.product_id",
            "Problems.PRODUCT_CATEGORY",
            "Product.PRODUCT_CATEGORY",
            "Problem_Log.STAFF_ASSIGNED_ID",
            "Problem_Log.PROBLEM_LOG_ACTION_DATE",
            "Problems.problem_id"
        ]
    },
    {
        "instance_id": "q_648",
        "db_id": "problem_log_system\n\n根据反馈，我注意到需要避免使用任何固定的后缀如'system'。因此，重新审视并调整我的选择以确保符合所有要求。\n\n1. 核心业务域识别：问题记录、处理与解决。\n2. 关键词提炼：“问题”、“日志”。\n3. 生成候选名称：problem_logs, issue_tracker, problem_history, log_issues, case_logs。\n4. 剔除重复项：从已有数据库名称中移除可能相似或相同的名称。\"problem_tracking\"已经存在，因此排除\"issue_tracker\"和\"problem_history\"。\"log_issues\"和\"case_logs\"虽然不直接冲突，但为了更简洁且避免潜在的混淆，我们进一步聚焦于最直接反映核心功能的名字。\n5. 筛选最优选项：在剩余选项里，\"problem_logs\"最为简洁明了，同时准确反映了该数据库的主要用途——记录问题及其相关活动。\n6. 最终输出：\n\nproblem_logs",
        "question": "What are the unique problem IDs that were reported before any problem assigned to Lysanne Turcotte, where the problems have a severity level of either 'High' or 'Critical', and were logged within the same calendar quarter as her earliest assignment?",
        "query": " SELECT DISTINCT p.problem_id FROM Problems p JOIN Problem_Log pl ON p.problem_id = pl.problem_id JOIN Staff s ON pl.STAFF_ASSIGNED_ID = s.staff_id WHERE p.PROBLEM_SEVERITY_CODE IN ('High', 'Critical')   AND DATE_TRUNC('quarter', pl.PROBLEM_LOG_ACTION_DATE) = (     SELECT DATE_TRUNC('quarter', pl2.PROBLEM_LOG_ACTION_DATE)     FROM Problem_Log pl2     JOIN Staff s2 ON pl2.STAFF_ASSIGNED_ID = s2.staff_id     WHERE s2.STAFF_ROLE = 'Lysanne Turcotte'     ORDER BY pl2.PROBLEM_LOG_ACTION_DATE ASC     LIMIT 1   )   AND pl.PROBLEM_LOG_ACTION_DATE < (     SELECT MIN(pl3.PROBLEM_LOG_ACTION_DATE)     FROM Problem_Log pl3     JOIN Staff s3 ON pl3.STAFF_ASSIGNED_ID = s3.staff_id     WHERE s3.STAFF_ROLE = 'Lysanne Turcotte'   ); ",
        "schema_links": [
            "Problem_Log.problem_id",
            "Staff.STAFF_ROLE",
            "Problem_Log.STAFF_ASSIGNED_ID",
            "Problems.PROBLEM_SEVERITY_CODE",
            "Problem_Log.PROBLEM_LOG_ACTION_DATE",
            "Staff.staff_id",
            "Problems.problem_id"
        ]
    },
    {
        "instance_id": "q_640",
        "db_id": "problem_log_system\n\n根据反馈，我注意到需要避免使用任何固定的后缀如'system'。因此，重新审视并调整我的选择以确保符合所有要求。\n\n1. 核心业务域识别：问题记录、处理与解决。\n2. 关键词提炼：“问题”、“日志”。\n3. 生成候选名称：problem_logs, issue_tracker, problem_history, log_issues, case_logs。\n4. 剔除重复项：从已有数据库名称中移除可能相似或相同的名称。\"problem_tracking\"已经存在，因此排除\"issue_tracker\"和\"problem_history\"。\"log_issues\"和\"case_logs\"虽然不直接冲突，但为了更简洁且避免潜在的混淆，我们进一步聚焦于最直接反映核心功能的名字。\n5. 筛选最优选项：在剩余选项里，\"problem_logs\"最为简洁明了，同时准确反映了该数据库的主要用途——记录问题及其相关活动。\n6. 最终输出：\n\nproblem_logs",
        "question": "Which distinct problem IDs have been logged by staff members, considering only those problems reported by Rylan Homenick, assigned a priority level greater than 3, and resolved within the same business week as they were logged? Additionally, include problems where the root cause was identified as \"software defect\" or the resolution involved multiple team reviews, indicated by a review status of \"Reviewed\" or \"Multiple Reviews\".",
        "query": " SELECT DISTINCT pl.problem_id FROM Problem_Log pl JOIN Problems p ON pl.problem_id = p.problem_id JOIN Problem_Log pl_action ON pl.problem_log_id = pl_action.problem_log_id JOIN Staff s ON pl.STAFF_ASSIGNED_ID = s.staff_id WHERE pl.PROBLEM_LOG_ACTION_PRIORITY > 3   AND pl.PROBLEM_LOG_ACTION_STATUS = 'Resolved'   AND YEAR(pl.PROBLEM_LOG_ACTION_RESOLUTION_DATE) = YEAR(pl.PROBLEM_LOG_ACTION_DATE)   AND WEEK(pl.PROBLEM_LOG_ACTION_RESOLUTION_DATE, 1) = WEEK(pl.PROBLEM_LOG_ACTION_DATE, 1)   AND p.PROBLEM_REPORTED_BY = 'Rylan Homenick'   AND (     p.PROBLEM_ROOT_CAUSE = 'software defect'      OR pl.PROBLEM_LOG_ACTION_REVIEW_STATUS IN ('Reviewed', 'Multiple Reviews')   ); ",
        "schema_links": [
            "Problem_Log.problem_id",
            "Problem_Log.PROBLEM_LOG_ACTION_REVIEW_STATUS",
            "Problems.PROBLEM_ROOT_CAUSE",
            "Problems.PROBLEM_REPORTED_BY",
            "Problem_Log.PROBLEM_LOG_ACTION_STATUS",
            "Staff.staff_id",
            "Problem_Log.problem_log_id",
            "Problem_Log.PROBLEM_LOG_ACTION_RESOLUTION_DATE",
            "Problem_Log.STAFF_ASSIGNED_ID",
            "Problem_Log.PROBLEM_LOG_ACTION_DATE",
            "Problem_Log.PROBLEM_LOG_ACTION_PRIORITY",
            "Problems.problem_id"
        ]
    },
    {
        "instance_id": "q_644",
        "db_id": "problem_log_system\n\n根据反馈，我注意到需要避免使用任何固定的后缀如'system'。因此，重新审视并调整我的选择以确保符合所有要求。\n\n1. 核心业务域识别：问题记录、处理与解决。\n2. 关键词提炼：“问题”、“日志”。\n3. 生成候选名称：problem_logs, issue_tracker, problem_history, log_issues, case_logs。\n4. 剔除重复项：从已有数据库名称中移除可能相似或相同的名称。\"problem_tracking\"已经存在，因此排除\"issue_tracker\"和\"problem_history\"。\"log_issues\"和\"case_logs\"虽然不直接冲突，但为了更简洁且避免潜在的混淆，我们进一步聚焦于最直接反映核心功能的名字。\n5. 筛选最优选项：在剩余选项里，\"problem_logs\"最为简洁明了，同时准确反映了该数据库的主要用途——记录问题及其相关活动。\n6. 最终输出：\n\nproblem_logs",
        "question": "Find the unique identifiers of issues that were resolved after being raised by a team member named Rylan Homenick, along with the priority level assigned during the resolution process. Additionally, determine whether each issue was reopened after its initial closure and calculate the time taken from the first resolution action to the final resolution for each issue. Include only issues reported by Rylan Homenick where the staff assigned to the issue has the role of 'team member'. Ensure results are grouped by issue and priority level.",
        "query": " SELECT      pl.problem_id AS unique_identifier,     plc.PROBLEM_LOG_ACTION_PRIORITY AS priority_level,     CASE          WHEN MAX(CASE WHEN pl.APPROVAL_STATUS = 'REOPENED' THEN 1 ELSE 0 END) > 0 THEN TRUE          ELSE FALSE      END AS was_reopened,     MAX(pl.PROBLEM_LOG_ACTION_RESOLUTION_DATE) - MIN(pl.PROBLEM_LOG_ACTION_DATE) AS time_to_final_resolution FROM      Problem_Log pl JOIN      Problems p ON pl.problem_id = p.problem_id JOIN      Staff s ON pl.STAFF_ASSIGNED_ID = s.staff_id LEFT JOIN      Problem_Category_Codes plc ON pl.PROBLEM_LOG_ACTION_PRIORITY = plc.problem_category_code WHERE      s.STAFF_ROLE = 'team member'     AND p.PROBLEM_REPORTED_BY = 'Rylan Homenick' GROUP BY      pl.problem_id, plc.PROBLEM_LOG_ACTION_PRIORITY; ",
        "schema_links": [
            "Problem_Category_Codes.PROBLEM_LOG_ACTION_PRIORITY",
            "Problem_Log.problem_id",
            "Problem_Log.APPROVAL_STATUS",
            "Staff.STAFF_ROLE",
            "Problems.PROBLEM_REPORTED_BY",
            "Problem_Category_Codes.problem_category_code",
            "Staff.staff_id",
            "Problem_Log.PROBLEM_LOG_ACTION_RESOLUTION_DATE",
            "Problem_Log.STAFF_ASSIGNED_ID",
            "Problem_Log.PROBLEM_LOG_ACTION_DATE",
            "Problem_Log.PROBLEM_LOG_ACTION_PRIORITY",
            "Problems.problem_id"
        ]
    },
    {
        "instance_id": "q_639",
        "db_id": "problem_log_system\n\n根据反馈，我注意到需要避免使用任何固定的后缀如'system'。因此，重新审视并调整我的选择以确保符合所有要求。\n\n1. 核心业务域识别：问题记录、处理与解决。\n2. 关键词提炼：“问题”、“日志”。\n3. 生成候选名称：problem_logs, issue_tracker, problem_history, log_issues, case_logs。\n4. 剔除重复项：从已有数据库名称中移除可能相似或相同的名称。\"problem_tracking\"已经存在，因此排除\"issue_tracker\"和\"problem_history\"。\"log_issues\"和\"case_logs\"虽然不直接冲突，但为了更简洁且避免潜在的混淆，我们进一步聚焦于最直接反映核心功能的名字。\n5. 筛选最优选项：在剩余选项里，\"problem_logs\"最为简洁明了，同时准确反映了该数据库的主要用途——记录问题及其相关活动。\n6. 最终输出：\n\nproblem_logs",
        "question": "Which staff members were assigned to resolve issues for the product \"rem\" with a severity level classified as \"High Impact,\" but were not assigned to handle any issues for the product \"aut\"? Please provide their unique staff IDs and roles.",
        "query": " SELECT DISTINCT s.staff_id, s.STAFF_ROLE AS staff_role FROM Staff s JOIN Problem_Log pl ON s.staff_id = pl.STAFF_ASSIGNED_ID JOIN Problems p ON pl.problem_id = p.problem_id WHERE p.PRODUCT_ISSUE_ROOT_CAUSE_DETAIL = 'rem'   AND p.PROBLEM_SEVERITY_CODE IN (     SELECT problem_severity_code     FROM Problem_Category_Codes     WHERE PROBLEM_CATEGORY_LEVEL_2 = 'High Impact'   )   AND s.staff_id NOT IN (     SELECT DISTINCT s2.staff_id     FROM Staff s2     JOIN Problem_Log pl2 ON s2.staff_id = pl2.STAFF_ASSIGNED_ID     JOIN Problems p2 ON pl2.problem_id = p2.problem_id     WHERE p2.PRODUCT_ISSUE_ROOT_CAUSE_DETAIL = 'aut'   ); ",
        "schema_links": [
            "Problem_Log.problem_id",
            "Problem_Category_Codes.problem_severity_code",
            "Staff.STAFF_ROLE",
            "Problem_Category_Codes.PROBLEM_CATEGORY_LEVEL_2",
            "Problem_Log.STAFF_ASSIGNED_ID",
            "Problems.PROBLEM_SEVERITY_CODE",
            "Problems.PRODUCT_ISSUE_ROOT_CAUSE_DETAIL",
            "Staff.staff_id",
            "Problems.problem_id"
        ]
    },
    {
        "instance_id": "q_641",
        "db_id": "problem_log_system\n\n根据反馈，我注意到需要避免使用任何固定的后缀如'system'。因此，重新审视并调整我的选择以确保符合所有要求。\n\n1. 核心业务域识别：问题记录、处理与解决。\n2. 关键词提炼：“问题”、“日志”。\n3. 生成候选名称：problem_logs, issue_tracker, problem_history, log_issues, case_logs。\n4. 剔除重复项：从已有数据库名称中移除可能相似或相同的名称。\"problem_tracking\"已经存在，因此排除\"issue_tracker\"和\"problem_history\"。\"log_issues\"和\"case_logs\"虽然不直接冲突，但为了更简洁且避免潜在的混淆，我们进一步聚焦于最直接反映核心功能的名字。\n5. 筛选最优选项：在剩余选项里，\"problem_logs\"最为简洁明了，同时准确反映了该数据库的主要用途——记录问题及其相关活动。\n6. 最终输出：\n\nproblem_logs",
        "question": "Which team members were involved in resolving issues related to the product model \"rem\" but did not handle any incidents for the product model \"aut\"? Please provide their unique staff IDs, roles, the specific actions they took in resolving the issues, and the severity levels of the problems they addressed. Prioritize the results by problem severity level in descending order, followed by staff ID. Include only those staff members who have explicitly resolved problems with higher severity levels for the product model \"rem\".",
        "query": " SELECT DISTINCT      s.staff_id,      s.STAFF_ROLE AS staff_role,     pl.PROBLEM_LOG_ACTION_TYPE AS action_taken,     pc.PROBLEM_SEVERITY_CODE AS problem_severity FROM      Staff s JOIN      Problem_Log pl ON s.staff_id = pl.STAFF_ASSIGNED_ID JOIN      Problems p ON pl.problem_id = p.problem_id JOIN      Product pr ON p.product_id = pr.product_id LEFT JOIN      Problem_Category_Codes pc ON p.PROBLEM_SEVERITY_CODE = pc.problem_category_code WHERE      pr.PRODUCT_MODEL = 'rem'     AND s.staff_id NOT IN (         SELECT DISTINCT s2.staff_id         FROM Staff s2         JOIN Problem_Log pl2 ON s2.staff_id = pl2.STAFF_ASSIGNED_ID         JOIN Problems p2 ON pl2.problem_id = p2.problem_id         JOIN Product pr2 ON p2.product_id = pr2.product_id         WHERE pr2.PRODUCT_MODEL = 'aut'     ) ORDER BY      pc.PROBLEM_SEVERITY_CODE DESC,      s.staff_id; ",
        "schema_links": [
            "Problem_Log.problem_id",
            "Problems.product_id",
            "Problem_Log.PROBLEM_LOG_ACTION_TYPE",
            "Staff.STAFF_ROLE",
            "Problem_Category_Codes.problem_category_code",
            "Staff.staff_id",
            "Product.product_id",
            "Problem_Category_Codes.PROBLEM_SEVERITY_CODE",
            "Product.PRODUCT_MODEL",
            "Problem_Log.STAFF_ASSIGNED_ID",
            "Problems.PROBLEM_SEVERITY_CODE",
            "Problems.problem_id"
        ]
    },
    {
        "instance_id": "q_643",
        "db_id": "problem_log_system\n\n根据反馈，我注意到需要避免使用任何固定的后缀如'system'。因此，重新审视并调整我的选择以确保符合所有要求。\n\n1. 核心业务域识别：问题记录、处理与解决。\n2. 关键词提炼：“问题”、“日志”。\n3. 生成候选名称：problem_logs, issue_tracker, problem_history, log_issues, case_logs。\n4. 剔除重复项：从已有数据库名称中移除可能相似或相同的名称。\"problem_tracking\"已经存在，因此排除\"issue_tracker\"和\"problem_history\"。\"log_issues\"和\"case_logs\"虽然不直接冲突，但为了更简洁且避免潜在的混淆，我们进一步聚焦于最直接反映核心功能的名字。\n5. 筛选最优选项：在剩余选项里，\"problem_logs\"最为简洁明了，同时准确反映了该数据库的主要用途——记录问题及其相关活动。\n6. 最终输出：\n\nproblem_logs",
        "question": "Identify distinct products, specifically their brand, model, and serial number, that meet the following criteria:  \n1. The products belong to the brand \"SpecificBrand\".  \n2. Issues related to these products were reported and resolved by staff members with roles including \"RoleA\" and \"RoleB\".  \n3. The resolution time for these issues exceeded the average resolution time for similar issues affecting the same product.  \n4. The issues were reopened at least once during their resolution process.  \n\nPresent the results sorted by product brand and model.",
        "query": " WITH AverageResolutionTime AS (     SELECT          p.product_id,         AVG(pl.PROBLEM_LOG_ACTION_DURATION_HOURS) AS avg_resolution_time     FROM          Problems p     JOIN          Problem_Log pl ON p.problem_id = pl.problem_id     WHERE          pl.PROBLEM_LOG_ACTION_TYPE = 'Resolution'     GROUP BY          p.product_id ), ReopenedProblems AS (     SELECT          pl.problem_id     FROM          Problem_Log pl     WHERE          pl.PROBLEM_LOG_ACTION_TYPE = 'Reopen'     GROUP BY          pl.problem_id     HAVING          COUNT(*) >= 1 ) SELECT DISTINCT      prd.PRODUCT_BRAND, prd.PRODUCT_MODEL, prd.PRODUCT_SERIAL_NUMBER FROM      Problems prob JOIN      Product prd ON prob.product_id = prd.product_id JOIN      Problem_Log pl ON prob.problem_id = pl.problem_id JOIN      Staff stf ON pl.STAFF_ASSIGNED_ID = stf.staff_id JOIN      ReopenedProblems rp ON prob.problem_id = rp.problem_id JOIN      AverageResolutionTime art ON prob.product_id = art.product_id WHERE      prd.PRODUCT_BRAND = 'SpecificBrand' -- Replace 'SpecificBrand' with the actual brand name     AND pl.PROBLEM_LOG_ACTION_DURATION_HOURS > art.avg_resolution_time     AND pl.PROBLEM_LOG_ACTION_TYPE = 'Resolution'     AND stf.STAFF_ROLE IN ('RoleA', 'RoleB') -- Specify the different roles here ORDER BY      prd.PRODUCT_BRAND, prd.PRODUCT_MODEL; ",
        "schema_links": [
            "Problem_Log.problem_id",
            "Problems.product_id",
            "Product.PRODUCT_BRAND",
            "Problem_Log.PROBLEM_LOG_ACTION_TYPE",
            "Staff.STAFF_ROLE",
            "Problem_Log.PROBLEM_LOG_ACTION_DURATION_HOURS",
            "Staff.staff_id",
            "Product.PRODUCT_SERIAL_NUMBER",
            "Product.product_id",
            "Staff.STAFF_ASSIGNED_ID",
            "Product.PRODUCT_MODEL",
            "Problem_Log.STAFF_ASSIGNED_ID",
            "Problems.problem_id"
        ]
    },
    {
        "instance_id": "q_649",
        "db_id": "problem_log_system\n\n根据反馈，我注意到需要避免使用任何固定的后缀如'system'。因此，重新审视并调整我的选择以确保符合所有要求。\n\n1. 核心业务域识别：问题记录、处理与解决。\n2. 关键词提炼：“问题”、“日志”。\n3. 生成候选名称：problem_logs, issue_tracker, problem_history, log_issues, case_logs。\n4. 剔除重复项：从已有数据库名称中移除可能相似或相同的名称。\"problem_tracking\"已经存在，因此排除\"issue_tracker\"和\"problem_history\"。\"log_issues\"和\"case_logs\"虽然不直接冲突，但为了更简洁且避免潜在的混淆，我们进一步聚焦于最直接反映核心功能的名字。\n5. 筛选最优选项：在剩余选项里，\"problem_logs\"最为简洁明了，同时准确反映了该数据库的主要用途——记录问题及其相关活动。\n6. 最终输出：\n\nproblem_logs",
        "question": "Which products, identified by their model and serial number, experienced critical severity issues that were both reported by staff member Lacey Bosco and resolved by staff member Kenton Champlin within the last quarter (from October 1, 2022, to December 31, 2022)? Additionally, include only those issues where the resolution time exceeded the average resolution time for similar issues affecting the same product.",
        "query": " WITH AverageResolutionTime AS (     SELECT          p.product_id,         AVG(pla.PROBLEM_LOG_ACTION_DURATION_HOURS) AS avg_resolution_time     FROM          Problem_Log pl     JOIN          Problems pr ON pl.problem_id = pr.problem_id     JOIN          Product p ON pr.product_id = p.product_id     JOIN          Problem_Log_Action pla ON pl.problem_log_id = pla.problem_log_id     WHERE          pr.PROBLEM_SEVERITY_CODE = 'Critical'         AND pla.PROBLEM_LOG_ACTION_DATE >= '2022-10-01'          AND pla.PROBLEM_LOG_ACTION_DATE < '2023-01-01'     GROUP BY          p.product_id ) SELECT DISTINCT      p.PRODUCT_MODEL,      p.PRODUCT_SERIAL_NUMBER FROM      Problem_Log pl JOIN      Problems pr ON pl.problem_id = pr.problem_id JOIN      Product p ON pr.product_id = p.product_id JOIN      Problem_Log_Action pla ON pl.problem_log_id = pla.problem_log_id JOIN      Staff s_report ON pla.PROBLEM_LOG_ACTION_ASSIGNEE = s_report.staff_id JOIN      Staff s_resolve ON pla.PROBLEM_LOG_ACTION_RESOLUTION_STAFF_ID = s_resolve.staff_id JOIN      AverageResolutionTime art ON p.product_id = art.product_id WHERE      pr.PROBLEM_SEVERITY_CODE = 'Critical'     AND pla.PROBLEM_LOG_ACTION_DATE >= '2022-10-01'      AND pla.PROBLEM_LOG_ACTION_DATE < '2023-01-01'     AND s_report.STAFF_ROLE = 'Lacey Bosco'     AND s_resolve.STAFF_ROLE = 'Kenton Champlin'     AND pla.PROBLEM_LOG_ACTION_DURATION_HOURS > art.avg_resolution_time; ",
        "schema_links": [
            "Problem_Log.problem_id",
            "Problem_Log_Action.PROBLEM_LOG_ACTION_ASSIGNEE",
            "Problems.product_id",
            "Problem_Log_Action.PROBLEM_LOG_ACTION_DATE",
            "Staff.STAFF_ROLE",
            "Staff.staff_id",
            "Product.product_id",
            "Product.PRODUCT_SERIAL_NUMBER",
            "Product.PRODUCT_MODEL",
            "Problem_Log_Action.PROBLEM_LOG_ACTION_DURATION_HOURS",
            "Problem_Log_Action.problem_log_id",
            "Problem_Log_Action.PROBLEM_LOG_ACTION_RESOLUTION_STAFF_ID",
            "Problems.PROBLEM_SEVERITY_CODE",
            "Problem_Log.problem_log_id",
            "Problems.problem_id"
        ]
    },
    {
        "instance_id": "q_646",
        "db_id": "address_details",
        "question": "Find customers who have placed at least one completed order and one partially processed order within the past 30 days. For these customers, provide their most recent contact information, including province, city, and district, as well as their loyalty program tier details. Additionally, calculate the total number of orders placed by each of these customers in the past year to evaluate their engagement level. Ensure that all orders considered are approved within the specified timeframes.",
        "query": " SELECT      c.CUSTOMER_ID,     c.LOYALTY_PROGRAM_TIER,     a.PROVINCE,     a.CITY,     a.DISTRICT,     COUNT(co.ORDER_ID) AS TOTAL_ORDERS_PAST_YEAR FROM      Customers c JOIN      Customer_Orders co ON c.CUSTOMER_ID = co.CUSTOMER_ID LEFT JOIN      Addresses a ON co.ORDER_SHIPPING_ADDRESS_ID = a.ADDRESS_ID WHERE      co.APPROVAL_TIMESTAMP >= CURRENT_TIMESTAMP - INTERVAL '30 days'     AND EXISTS (         SELECT 1          FROM Customer_Orders co_completed          WHERE co_completed.CUSTOMER_ID = c.CUSTOMER_ID              AND co_completed.ORDER_STATUS_DETAILS = 'Completed'             AND co_completed.APPROVAL_TIMESTAMP >= CURRENT_TIMESTAMP - INTERVAL '30 days'     )     AND EXISTS (         SELECT 1          FROM Customer_Orders co_partial          WHERE co_partial.CUSTOMER_ID = c.CUSTOMER_ID              AND co_partial.ORDER_STATUS_DETAILS = 'Partially Processed'             AND co_partial.APPROVAL_TIMESTAMP >= CURRENT_TIMESTAMP - INTERVAL '30 days'     )     AND co.APPROVAL_TIMESTAMP >= CURRENT_TIMESTAMP - INTERVAL '1 year' GROUP BY      c.CUSTOMER_ID, c.LOYALTY_PROGRAM_TIER, a.PROVINCE, a.CITY, a.DISTRICT; ",
        "schema_links": [
            "Addresses.CITY",
            "Customers.CUSTOMER_ID",
            "Customer_Orders.CUSTOMER_ID",
            "Addresses.PROVINCE",
            "Addresses.ADDRESS_ID",
            "Customer_Orders.ORDER_SHIPPING_ADDRESS_ID",
            "Customers.LOYALTY_PROGRAM_TIER",
            "Customer_Orders.ORDER_STATUS_DETAILS",
            "Customer_Orders.ORDER_ID",
            "Customer_Orders.APPROVAL_TIMESTAMP",
            "Addresses.DISTRICT"
        ]
    },
    {
        "instance_id": "q_654",
        "db_id": "address_details",
        "question": "Identify the top 10 customers with the highest likelihood of churn based on their order behavior in the past 90 days. Factors to consider include the frequency of orders, the average value of orders, and the proportion of canceled orders. Provide the full name and primary phone number of these customers for follow-up actions. Ensure that only customers with explicit order activity within the last 90 days are included, and rank them by the highest cancellation rate, lowest order frequency, and lowest average order value.",
        "query": " WITH RecentOrders AS (     SELECT          co.CUSTOMER_ID,         COUNT(co.ORDER_ID) AS order_count,         AVG(oi.ORDER_ITEM_TOTAL_PRICE) AS avg_order_value,         SUM(CASE WHEN co.ORDER_STATUS_DETAILS = 'Canceled' THEN 1 ELSE 0 END) * 1.0 / NULLIF(COUNT(co.ORDER_ID), 0) AS cancel_rate     FROM Customer_Orders co     JOIN Order_Items oi ON co.ORDER_ID = oi.ORDER_ID     WHERE co.APPROVAL_TIMESTAMP >= CURRENT_TIMESTAMP - INTERVAL '90' DAY     GROUP BY co.CUSTOMER_ID ), ChurnLikelihood AS (     SELECT          ro.CUSTOMER_ID,         ro.order_count,         ro.avg_order_value,         ro.cancel_rate,         RANK() OVER (ORDER BY ro.cancel_rate DESC, ro.order_count ASC, ro.avg_order_value ASC) AS churn_rank     FROM RecentOrders ro ) SELECT      c.CUSTOMER_ID,     cu.FULL_NAME,     cu.PRIMARY_PHONE_NUMBER,     cl.order_count,     cl.avg_order_value,     cl.cancel_rate FROM ChurnLikelihood cl JOIN Customers c ON cl.CUSTOMER_ID = c.CUSTOMER_ID JOIN Customer_Contacts cu ON c.CUSTOMER_ID = cu.CUSTOMER_ID WHERE cl.churn_rank <= 10 ORDER BY cl.churn_rank; ",
        "schema_links": [
            "Customers.CUSTOMER_ID",
            "Customer_Orders.CUSTOMER_ID",
            "Customer_Contacts.PRIMARY_PHONE_NUMBER",
            "Customer_Contacts.FULL_NAME",
            "ChurnLikelihood.order_count",
            "ChurnLikelihood.churn_rank",
            "Customer_Orders.APPROVAL_TIMESTAMP",
            "ChurnLikelihood.cancel_rate",
            "ChurnLikelihood.avg_order_value",
            "Customer_Contacts.CUSTOMER_ID",
            "Customer_Orders.ORDER_STATUS_DETAILS",
            "Customer_Orders.ORDER_ID",
            "Order_Items.ORDER_ITEM_TOTAL_PRICE"
        ]
    },
    {
        "instance_id": "q_645",
        "db_id": "attraction_status",
        "question": "Which tourist attractions, along with their visit dates (based on ATTRACTION_AVAILABILITY_STATUS_CHANGE_DATE), are associated with visitors named Vincent or Vivian, where the attractions were available at the time of the visit (as indicated by ATTRACTION_AVAILABILITY_STATUS = 'Available' and VISIT_ENTRY_TIME >= ATTRACTION_AVAILABILITY_STATUS_CHANGE_DATE)? Additionally, categorize the likelihood of these visitors returning based on their VISITOR_LOYALTY_SCORE: 'High' for scores greater than 4.5, 'Medium' for scores between 3.0 and 4.5, and 'Low' for scores below 3.0. The results should be ordered by the attraction ID and the visit entry time.",
        "query": " SELECT      ta.Tourist_Attraction_ID,     ta.ATTRACTION_AVAILABILITY_STATUS_CHANGE_DATE AS Visit_Date,     v.VISITOR_LOYALTY_SCORE,     CASE          WHEN v.VISITOR_LOYALTY_SCORE > 4.5 THEN 'High'         WHEN v.VISITOR_LOYALTY_SCORE BETWEEN 3.0 AND 4.5 THEN 'Medium'         ELSE 'Low'     END AS Return_Likelihood FROM      Tourist_Attractions ta JOIN      Visits vi ON ta.Tourist_Attraction_ID = vi.Tourist_Attraction_ID JOIN      Visitors v ON vi.Tourist_ID = v.Tourist_ID WHERE      (v.VISITOR_TYPE = 'Vincent' OR v.VISITOR_TYPE = 'Vivian')     AND ta.ATTRACTION_AVAILABILITY_STATUS = 'Available'     AND vi.VISIT_ENTRY_TIME >= ta.ATTRACTION_AVAILABILITY_STATUS_CHANGE_DATE ORDER BY      ta.Tourist_Attraction_ID, vi.VISIT_ENTRY_TIME; ",
        "schema_links": [
            "Tourist_Attractions.Tourist_Attraction_ID",
            "Visitors.Tourist_ID",
            "Visitors.VISITOR_LOYALTY_SCORE",
            "Tourist_Attractions.ATTRACTION_AVAILABILITY_STATUS",
            "Visits.Tourist_Attraction_ID",
            "Tourist_Attractions.ATTRACTION_AVAILABILITY_STATUS_CHANGE_DATE",
            "Visitors.VISITOR_TYPE",
            "Visits.Tourist_ID",
            "Visits.VISIT_ENTRY_TIME"
        ]
    },
    {
        "instance_id": "q_653",
        "db_id": "attraction_status",
        "question": "Which tourist attractions have been visited by tourists named Vincent or Vivian without any visit cancellations, and what is the likelihood of these tourists returning to the same attraction based on their loyalty scores? Additionally, provide the name of the attraction (using the attraction type code as a proxy for the name) and the date of the visit, ordered by the most recent visit first.",
        "query": " SELECT      TA.ATTRACTION_TYPE_CODE AS Tourist_Attraction_Name,     V.VISITOR_TYPE AS Tourist_Name,     V.VISITOR_LOYALTY_SCORE AS Likelihood_of_Returning,     VIS.VISIT_ENTRY_TIME AS Visit_Date FROM      Visitors V JOIN      Visits VIS ON V.Tourist_ID = VIS.Tourist_ID JOIN      Tourist_Attractions TA ON VIS.Visit_ID = TA.Tourist_Attraction_ID WHERE      V.VISITOR_TYPE IN ('Vincent', 'Vivian')     AND VIS.VISIT_CANCEL_REASON IS NULL ORDER BY      VIS.VISIT_ENTRY_TIME DESC; ",
        "schema_links": [
            "Tourist_Attractions.Tourist_Attraction_ID",
            "Visitors.Tourist_ID",
            "Visitors.VISITOR_LOYALTY_SCORE",
            "Visits.Visit_ID",
            "Visitors.VISITOR_TYPE",
            "Visits.VISIT_CANCEL_REASON",
            "Visits.Tourist_ID",
            "Visits.VISIT_ENTRY_TIME",
            "Tourist_Attractions.ATTRACTION_TYPE_CODE"
        ]
    },
    {
        "instance_id": "q_642",
        "db_id": "attraction_status",
        "question": "Which tourist attractions, based on the latest updates, offer features that are currently available, have an attraction type of convenience or shopping, and appeal to visitors looking for convenience or shopping experiences? The results should include the attraction's ID, capacity, type code, operational status, availability status, and the latest status change date, along with the feature description. Additionally, the attractions should be ordered by the most recent availability status change date.",
        "query": " SELECT      ta.Tourist_Attraction_ID,      ta.ATTRACTION_CAPACITY,      ta.ATTRACTION_TYPE_CODE,      ta.ATTRACTION_OPERATIONAL_STATUS,      ta.ATTRACTION_AVAILABILITY_STATUS,      ta.ATTRACTION_AVAILABILITY_STATUS_CHANGE_DATE,     f.FEATURE_DESCRIPTION FROM      Tourist_Attractions ta JOIN      Features f ON ta.Tourist_Attraction_ID = f.Feature_ID WHERE      f.FEATURE_AVAILABILITY = TRUE     AND f.FEATURE_AVAILABILITY_START_DATE <= CURRENT_DATE     AND (f.FEATURE_AVAILABILITY_END_DATE >= CURRENT_DATE OR f.FEATURE_AVAILABILITY_END_DATE IS NULL)     AND f.FEATURE_AVAILABILITY_STATUS = 'Available'     AND f.FEATURE_AVAILABILITY_STATUS_CHANGE_DATE = (         SELECT MAX(FEATURE_AVAILABILITY_STATUS_CHANGE_DATE)          FROM Features          WHERE Feature_ID = ta.Tourist_Attraction_ID     )     AND (ta.ATTRACTION_TYPE_CODE IN ('Convenience', 'Shopping')) ORDER BY      ta.ATTRACTION_AVAILABILITY_STATUS_CHANGE_DATE DESC; ",
        "schema_links": [
            "Tourist_Attractions.Tourist_Attraction_ID",
            "Features.FEATURE_AVAILABILITY_STATUS",
            "Features.FEATURE_AVAILABILITY_START_DATE",
            "Features.Feature_ID",
            "Features.FEATURE_AVAILABILITY_STATUS_CHANGE_DATE",
            "Tourist_Attractions.ATTRACTION_TYPE_CODE",
            "Tourist_Attractions.ATTRACTION_OPERATIONAL_STATUS",
            "Tourist_Attractions.ATTRACTION_AVAILABILITY_STATUS",
            "Features.FEATURE_AVAILABILITY",
            "Tourist_Attractions.ATTRACTION_AVAILABILITY_STATUS_CHANGE_DATE",
            "Features.FEATURE_DESCRIPTION",
            "Tourist_Attractions.ATTRACTION_CAPACITY",
            "Features.FEATURE_AVAILABILITY_END_DATE"
        ]
    },
    {
        "instance_id": "q_651",
        "db_id": "attraction_status",
        "question": "Which tourist attractions are currently operational and offer available features that enhance visitor experience, such as convenient parking or integrated shopping options? Please provide the attraction IDs, their type codes, operational statuses, availability statuses, and the dates when these statuses were last updated, along with detailed descriptions of the features. Only include attractions that have been updated within the last 30 days and whose features are currently available. Sort the results by attraction ID in ascending order and status update date in descending order for each attraction.",
        "query": " SELECT      ta.Tourist_Attraction_ID,      ta.ATTRACTION_TYPE_CODE,      ta.ATTRACTION_OPERATIONAL_STATUS,      ta.ATTRACTION_AVAILABILITY_STATUS,      ta.ATTRACTION_AVAILABILITY_STATUS_CHANGE_DATE,      f.FEATURE_DESCRIPTION FROM      Tourist_Attractions ta JOIN      Features f ON ta.Tourist_Attraction_ID = f.Feature_ID WHERE      ta.ATTRACTION_OPERATIONAL_STATUS = 'Operational'     AND ta.ATTRACTION_AVAILABILITY_STATUS = 'Available'     AND ta.ATTRACTION_AVAILABILITY_STATUS_CHANGE_DATE >= CURRENT_DATE - INTERVAL '30 days'     AND f.FEATURE_AVAILABILITY = TRUE     AND f.FEATURE_AVAILABILITY_END_DATE > CURRENT_DATE ORDER BY      ta.Tourist_Attraction_ID,      ta.ATTRACTION_AVAILABILITY_STATUS_CHANGE_DATE DESC; ",
        "schema_links": [
            "Tourist_Attractions.Tourist_Attraction_ID",
            "Tourist_Attractions.ATTRACTION_AVAILABILITY_STATUS_CHANGE_DATE",
            "Tourist_Attractions.ATTRACTION_OPERATIONAL_STATUS",
            "Features.Feature_ID",
            "Features.FEATURE_AVAILABILITY",
            "Tourist_Attractions.ATTRACTION_AVAILABILITY_STATUS",
            "Features.FEATURE_DESCRIPTION",
            "Features.FEATURE_AVAILABILITY_END_DATE",
            "Tourist_Attractions.ATTRACTION_TYPE_CODE"
        ]
    },
    {
        "instance_id": "q_647",
        "db_id": "attraction_status",
        "question": "Which tourist attractions, during the month following their availability status change date, are most frequently visited by returning tourists named Vincent and Marcelle, who have a non-null referral source? Additionally, what features do these attractions offer?",
        "query": " SELECT      ta.Tourist_Attraction_ID,     ta.ATTRACTION_AVAILABILITY_STATUS,     f.FEATURE_DESCRIPTION,     COUNT(v.Tourist_ID) AS Visit_Count FROM      Tourist_Attractions ta JOIN      Visits vi ON ta.Tourist_Attraction_ID = vi.Tourist_Attraction_ID JOIN      Visitors v ON vi.Tourist_ID = v.Tourist_ID LEFT JOIN      Features f ON ta.Tourist_Attraction_ID = f.Feature_ID WHERE      v.VISITOR_REFERRAL_SOURCE IS NOT NULL     AND v.VISITOR_TYPE = 'Return'     AND (v.VISITOR_SEGMENT = 'Vincent' OR v.VISITOR_SEGMENT = 'Marcelle')     AND vi.VISIT_ENTRY_TIME BETWEEN ta.ATTRACTION_AVAILABILITY_STATUS_CHANGE_DATE AND ta.ATTRACTION_AVAILABILITY_STATUS_CHANGE_DATE + INTERVAL '1 MONTH' GROUP BY      ta.Tourist_Attraction_ID, ta.ATTRACTION_AVAILABILITY_STATUS, f.FEATURE_DESCRIPTION ORDER BY      Visit_Count DESC; ",
        "schema_links": [
            "Tourist_Attractions.Tourist_Attraction_ID",
            "Visitors.VISITOR_REFERRAL_SOURCE",
            "Features.Feature_ID",
            "Visitors.VISITOR_TYPE",
            "Visitors.Tourist_ID",
            "Tourist_Attractions.ATTRACTION_AVAILABILITY_STATUS",
            "Visitors.VISITOR_SEGMENT",
            "Visits.Tourist_Attraction_ID",
            "Tourist_Attractions.ATTRACTION_AVAILABILITY_STATUS_CHANGE_DATE",
            "Features.FEATURE_DESCRIPTION",
            "Visits.Tourist_ID",
            "Visits.VISIT_ENTRY_TIME"
        ]
    },
    {
        "instance_id": "q_657",
        "db_id": "attraction_status",
        "question": "What are the names of the tourist attractions visited by tourists Vincent and Marcelle, including the visit durations in minutes and the visitor satisfaction scores? Additionally, indicate whether the probability of returning is high (probability of return greater than or equal to 0.8) for each attraction, and exclude any records where the probability of return is not specified. Present the results ordered by visitor name and attraction name.",
        "query": " SELECT      ta.ATTRACTION_NAME AS Tourist_Attraction_Name,     v.VISITOR_NAME AS Visitor_Name,     vi.VISIT_DURATION_MINUTES AS Visit_Duration_Minutes,     vi.VISITOR_SATISFACTION_SCORE AS Visitor_Satisfaction_Score,     CASE WHEN vi.VISITOR_PROBABILITY_OF_RETURN >= 0.8 THEN 'High Probability of Return' ELSE 'Low Probability of Return' END AS Return_Probability FROM      Tourist_Attractions ta JOIN      Visits vi ON ta.Tourist_Attraction_ID = vi.Tourist_Attraction_ID JOIN      Visitors v ON vi.Tourist_ID = v.Tourist_ID WHERE      v.VISITOR_NAME IN ('Vincent', 'Marcelle')     AND vi.VISITOR_PROBABILITY_OF_RETURN IS NOT NULL ORDER BY      v.VISITOR_NAME, ta.ATTRACTION_NAME; ",
        "schema_links": [
            "Visitors.VISITOR_NAME",
            "Tourist_Attractions.Tourist_Attraction_ID",
            "Visitors.Tourist_ID",
            "Tourist_Attractions.ATTRACTION_NAME",
            "Visits.VISITOR_SATISFACTION_SCORE",
            "Visits.VISITOR_PROBABILITY_OF_RETURN",
            "Visits.Tourist_Attraction_ID",
            "Visits.VISIT_DURATION_MINUTES",
            "Visits.Tourist_ID"
        ]
    },
    {
        "instance_id": "q_652",
        "db_id": "attraction_status",
        "question": "Which tourist attractions, known for having a higher visitor return probability due to a loyalty score greater than 4 and being categorized under the \"High Return Probability\" segment, did Alison explore? Additionally, which of these popular attractions did Rosalind avoid, despite their popularity? Consider only attractions that offer unique features available within specific time windows defined by the current date falling between the feature's availability start and end dates.",
        "query": " WITH HighReturnAttractions AS (     SELECT ta.Tourist_Attraction_ID, ta.ATTRACTION_TYPE_CODE, ta.ATTRACTION_OPERATIONAL_STATUS, ta.ATTRACTION_AVAILABILITY_STATUS     FROM Tourist_Attractions ta     JOIN Visitors v ON ta.ATTRACTION_AVAILABILITY_STATUS = 'Available'     WHERE v.VISITOR_LOYALTY_SCORE > 4 AND v.VISITOR_SEGMENT = 'High Return Probability'       AND EXISTS (           SELECT 1           FROM Features f           WHERE f.Feature_ID = ta.Tourist_Attraction_ID             AND CURRENT_DATE BETWEEN f.FEATURE_AVAILABILITY_START_DATE AND f.FEATURE_AVAILABILITY_END_DATE       ) ), AlisonVisits AS (     SELECT DISTINCT va.Tourist_Attraction_ID     FROM Visits vi     JOIN Visitors vis ON vi.Tourist_ID = vis.Tourist_ID     JOIN Tourist_Attractions va ON vi.Visit_ID = va.Tourist_Attraction_ID     WHERE vis.VISITOR_TYPE = 'Alison' ), RosalindAvoided AS (     SELECT DISTINCT ta.Tourist_Attraction_ID     FROM Tourist_Attractions ta     LEFT JOIN Visits vi ON ta.Tourist_Attraction_ID = vi.Visit_ID     JOIN Visitors vis ON vi.Tourist_ID = vis.Tourist_ID     WHERE vis.VISITOR_TYPE = 'Rosalind' AND vi.Visit_ID IS NULL ) SELECT hra.Tourist_Attraction_ID AS Alison_Explored, r.Rosalind_Avoided FROM HighReturnAttractions hra LEFT JOIN AlisonVisits ali ON hra.Tourist_Attraction_ID = ali.Tourist_Attraction_ID LEFT JOIN RosalindAvoided r ON hra.Tourist_Attraction_ID = r.Tourist_Attraction_ID WHERE ali.Tourist_Attraction_ID IS NOT NULL OR r.Rosalind_Avoided IS NOT NULL; ",
        "schema_links": [
            "Tourist_Attractions.Tourist_Attraction_ID",
            "Visitors.VISITOR_LOYALTY_SCORE",
            "Features.FEATURE_AVAILABILITY_START_DATE",
            "Features.Feature_ID",
            "Visits.Visit_ID",
            "Visitors.VISITOR_TYPE",
            "Tourist_Attractions.ATTRACTION_TYPE_CODE",
            "Visitors.Tourist_ID",
            "Tourist_Attractions.ATTRACTION_OPERATIONAL_STATUS",
            "Visitors.VISITOR_SEGMENT",
            "Tourist_Attractions.ATTRACTION_AVAILABILITY_STATUS",
            "Visits.Tourist_ID",
            "Features.FEATURE_AVAILABILITY_END_DATE"
        ]
    },
    {
        "instance_id": "q_655",
        "db_id": "attraction_status",
        "question": "Which tourist attractions, that are currently unavailable or marked as unavailable due to maintenance, did Alison visit, where the average visit duration across all visits exceeds 30 minutes, and which Rosalind has not visited at all?",
        "query": " SELECT DISTINCT ta.Tourist_Attraction_ID, ta.ATTRACTION_AVAILABILITY_STATUS FROM Tourist_Attractions ta JOIN Visits v ON ta.Tourist_Attraction_ID = v.Tourist_Attraction_ID JOIN Visitors vis ON v.Tourist_ID = vis.Tourist_ID WHERE (     ta.ATTRACTION_AVAILABILITY_STATUS = 'Unavailability'      OR ta.ATTRACTION_AVAILABILITY_STATUS = 'Maintenance' ) AND vis.VISITOR_TYPE = 'Alison' AND ta.Tourist_Attraction_ID NOT IN (     SELECT DISTINCT ta2.Tourist_Attraction_ID     FROM Tourist_Attractions ta2     JOIN Visits v2 ON ta2.Tourist_Attraction_ID = v2.Tourist_Attraction_ID     JOIN Visitors vis2 ON v2.Tourist_ID = vis2.Tourist_ID     WHERE vis2.VISITOR_TYPE = 'Rosalind' ) AND ta.Tourist_Attraction_ID IN (     SELECT Tourist_Attraction_ID     FROM Visits     GROUP BY Tourist_Attraction_ID     HAVING AVG(VISIT_DURATION_MINUTES) > 30 ); ",
        "schema_links": [
            "Tourist_Attractions.Tourist_Attraction_ID",
            "Visitors.Tourist_ID",
            "Tourist_Attractions.ATTRACTION_AVAILABILITY_STATUS",
            "Visits.Tourist_Attraction_ID",
            "Visits.VISIT_DURATION_MINUTES",
            "Visitors.VISITOR_TYPE",
            "Visits.Tourist_ID"
        ]
    },
    {
        "instance_id": "q_658",
        "db_id": "customer_order_details",
        "question": "Identify customers who have not participated in any promotions related to the \"Latte\" product category within the past 6 months, based on their order history and considering their loyalty tier. Additionally, determine whether these customers belong to a high-churn-risk segment by evaluating their customer segment, where \"High-Risk\" or \"Medium-Risk\" segments are classified as high churn risk. Ensure the analysis includes only customers with no engagement in \"Latte\"-related promotions during the specified time frame.",
        "query": " SELECT      c.CUSTOMER_ID,     c.LOYALTY_SCORE,     c.CUSTOMER_SEGMENT,     CASE          WHEN c.CUSTOMER_SEGMENT IN ('High-Risk', 'Medium-Risk') THEN 'Yes'         ELSE 'No'     END AS HIGH_CHURN_RISK FROM      Customers c LEFT JOIN      Customer_Orders co ON c.CUSTOMER_ID = co.CUSTOMER_ID LEFT JOIN      Products p ON co.ORDER_DETAILS LIKE CONCAT('%', p.PRODUCT_ID, '%') LEFT JOIN      Promotion_Rules pr ON co.ORDER_ID = pr.PROMOTION_RULE_ID WHERE      c.CUSTOMER_ID NOT IN (         SELECT DISTINCT c2.CUSTOMER_ID         FROM Customers c2         JOIN Customer_Orders co2 ON c2.CUSTOMER_ID = co2.CUSTOMER_ID         JOIN Products p2 ON co2.ORDER_DETAILS LIKE CONCAT('%', p2.PRODUCT_ID, '%')         JOIN Promotion_Rules pr2 ON co2.ORDER_ID = pr2.PROMOTION_RULE_ID         WHERE p2.PRODUCT_CATEGORY = 'Latte'           AND pr2.START_DATE >= CURRENT_DATE - INTERVAL '6 MONTH'     ) AND p.PRODUCT_CATEGORY IS NULL GROUP BY      c.CUSTOMER_ID, c.LOYALTY_SCORE, c.CUSTOMER_SEGMENT; ",
        "schema_links": [
            "Customers.CUSTOMER_ID",
            "Promotion_Rules.PROMOTION_RULE_ID",
            "Products.PRODUCT_CATEGORY",
            "Products.PRODUCT_ID",
            "Customers.LOYALTY_SCORE",
            "Customer_Orders.CUSTOMER_ID",
            "Customer_Orders.ORDER_DETAILS",
            "Promotion_Rules.START_DATE",
            "Customer_Orders.ORDER_ID",
            "Customers.CUSTOMER_SEGMENT"
        ]
    },
    {
        "instance_id": "q_661",
        "db_id": "customer_order_details",
        "question": "Which customers have not engaged with any product in the category that includes \"Latte,\" and what are their loyalty scores and segmentation statuses? Include customers who may have shown interest by initiating an order but did not complete it within the past 30 days. Specifically, consider only those customers whose orders were neither marked as \"Completed\" nor \"Shipped,\" or who have no associated orders at all.",
        "query": " SELECT      c.CUSTOMER_ID,      c.LOYALTY_SCORE,      c.CUSTOMER_SEGMENT,      c.SEGMENTATION_DATE FROM      Customers c LEFT JOIN      Customer_Orders co ON c.CUSTOMER_ID = co.CUSTOMER_ID LEFT JOIN      Products p ON co.ORDER_DETAILS LIKE '%' || p.PRODUCT_ID || '%' WHERE      p.PRODUCT_CATEGORY IS NULL      OR p.PRODUCT_CATEGORY NOT LIKE '%Latte%'     AND co.ORDER_STATUS NOT IN ('Completed', 'Shipped')     AND (co.ORDER_ID IS NULL           OR co.ORDER_TIMESTAMP < CURRENT_TIMESTAMP - INTERVAL '30' DAY) GROUP BY      c.CUSTOMER_ID,      c.LOYALTY_SCORE,      c.CUSTOMER_SEGMENT,      c.SEGMENTATION_DATE; ",
        "schema_links": [
            "Customer_Orders.ORDER_TIMESTAMP",
            "Customers.CUSTOMER_ID",
            "Customers.SEGMENTATION_DATE",
            "Products.PRODUCT_CATEGORY",
            "Products.PRODUCT_ID",
            "Customer_Orders.CUSTOMER_ID",
            "Customer_Orders.ORDER_DETAILS",
            "Customers.LOYALTY_SCORE",
            "Customer_Orders.ORDER_ID",
            "Customer_Orders.ORDER_STATUS",
            "Customers.CUSTOMER_SEGMENT"
        ]
    },
    {
        "instance_id": "q_656",
        "db_id": "customer_order_details",
        "question": "Which customers have purchased both Latte and Americano products in the Beverages category through digital channels in the past 6 months, and what are their latest loyalty scores, customer segments, segmentation dates, and segmentation reasons? Only include customers who have completed orders for both product subcategories.",
        "query": " SELECT DISTINCT      c.CUSTOMER_ID,      c.LOYALTY_SCORE,      c.CUSTOMER_SEGMENT,      c.SEGMENTATION_DATE,      c.SEGMENTATION_REASON FROM      Customers c JOIN      Customer_Orders co ON c.CUSTOMER_ID = co.CUSTOMER_ID JOIN      Products p ON co.PRODUCT_ID = p.PRODUCT_ID WHERE      p.PRODUCT_CATEGORY = 'Beverages'     AND p.PRODUCT_SUBCATEGORY IN ('Latte', 'Americano')     AND co.ORDER_STATUS = 'Completed'     AND co.ORDER_DETAILS LIKE '%digital%'     AND co.ORDER_TIMESTAMP >= NOW() - INTERVAL '6 months' GROUP BY      c.CUSTOMER_ID, c.LOYALTY_SCORE, c.CUSTOMER_SEGMENT, c.SEGMENTATION_DATE, c.SEGMENTATION_REASON HAVING      COUNT(DISTINCT CASE WHEN p.PRODUCT_SUBCATEGORY = 'Latte' THEN p.PRODUCT_ID END) > 0     AND COUNT(DISTINCT CASE WHEN p.PRODUCT_SUBCATEGORY = 'Americano' THEN p.PRODUCT_ID END) > 0; ",
        "schema_links": [
            "Customer_Orders.ORDER_TIMESTAMP",
            "Customers.CUSTOMER_ID",
            "Customers.SEGMENTATION_REASON",
            "Customers.SEGMENTATION_DATE",
            "Products.PRODUCT_CATEGORY",
            "Products.PRODUCT_ID",
            "Customer_Orders.CUSTOMER_ID",
            "Customer_Orders.ORDER_DETAILS",
            "Products.PRODUCT_SUBCATEGORY",
            "Customers.LOYALTY_SCORE",
            "Customer_Orders.PRODUCT_ID",
            "Customer_Orders.ORDER_STATUS",
            "Customers.CUSTOMER_SEGMENT"
        ]
    },
    {
        "instance_id": "q_660",
        "db_id": "customer_order_details",
        "question": "Which customers have made separate completed purchases that include both Latte and Americano products, as indicated in their order details? For these customers, based on their most recent segmentation date, what are their preferred contact channels (using their email addresses as the primary contact method), and which loyalty tiers or customer segments do they belong to that may influence their purchasing behavior?",
        "query": " SELECT      c.CUSTOMER_ID,     c.FIRST_NAME,     c.LAST_NAME,     c.EMAIL_ADDRESS AS Preferred_Contact_Channel,     c.CUSTOMER_SEGMENT,     lp.PROGRAM_NAME AS Loyalty_Tier FROM      Customers c JOIN      Customer_Orders co1 ON c.CUSTOMER_ID = co1.CUSTOMER_ID JOIN      Products p1 ON POSITION(p1.PRODUCT_CATEGORY IN co1.ORDER_DETAILS) > 0 AND p1.PRODUCT_SUBCATEGORY = 'Latte' JOIN      Customer_Orders co2 ON c.CUSTOMER_ID = co2.CUSTOMER_ID JOIN      Products p2 ON POSITION(p2.PRODUCT_CATEGORY IN co2.ORDER_DETAILS) > 0 AND p2.PRODUCT_SUBCATEGORY = 'Americano' LEFT JOIN      Loyalty_Programs lp ON c.LOYALTY_PROGRAM_ID = lp.LOYALTY_PROGRAM_ID WHERE      co1.ORDER_STATUS = 'Completed'      AND co2.ORDER_STATUS = 'Completed'     AND c.SEGMENTATION_DATE = (SELECT MAX(c2.SEGMENTATION_DATE) FROM Customers c2 WHERE c2.CUSTOMER_ID = c.CUSTOMER_ID) GROUP BY      c.CUSTOMER_ID, c.FIRST_NAME, c.LAST_NAME, c.EMAIL_ADDRESS, c.CUSTOMER_SEGMENT, lp.PROGRAM_NAME; ",
        "schema_links": [
            "Loyalty_Programs.LOYALTY_PROGRAM_ID",
            "Customers.CUSTOMER_ID",
            "Customers.SEGMENTATION_DATE",
            "Loyalty_Programs.PROGRAM_NAME",
            "Customers.LAST_NAME",
            "Products.PRODUCT_CATEGORY",
            "Customers.EMAIL_ADDRESS",
            "Customer_Orders.CUSTOMER_ID",
            "Customer_Orders.ORDER_DETAILS",
            "Products.PRODUCT_SUBCATEGORY",
            "Customers.FIRST_NAME",
            "Customer_Orders.ORDER_STATUS",
            "Customers.LOYALTY_PROGRAM_ID",
            "Customers.CUSTOMER_SEGMENT"
        ]
    },
    {
        "instance_id": "q_659",
        "db_id": "party_service",
        "question": "From the organization named \"Labour Party,\" which individual has had the most recent contact activity, considering contact activity as the latest timestamp available in any related record such as form submissions or service interactions, and what is their last name? Specifically, evaluate the most recent activity by comparing the latest form submission date and service start date, ensuring that if either is null, the other is considered for determining recency.",
        "query": " SELECT i.LAST_NAME FROM Individuals i JOIN Organization_Contact_Individuals oci ON i.INDIVIDUAL_ID = oci.ORGANIZATION_CONTACT_INDIVIDUALS_INDIVIDUAL_ID JOIN Organizations o ON oci.ORGANIZATION_CONTACT_ROLE = o.ORGANIZATION_TYPE LEFT JOIN Forms f ON i.INDIVIDUAL_ID = f.FORM_SUBMITTER_ID LEFT JOIN Party_Services ps ON i.INDIVIDUAL_ID = ps.PARTY_SERVICES_BOOKING_ID WHERE o.ORGANIZATION_TYPE = 'Labour Party'   AND (f.FORM_SUBMISSION_DATE IS NULL OR ps.SERVICE_START_DATE IS NULL OR f.FORM_SUBMISSION_DATE >= ps.SERVICE_START_DATE) ORDER BY GREATEST(f.FORM_SUBMISSION_DATE, ps.SERVICE_START_DATE) DESC LIMIT 1; ",
        "schema_links": [
            "Party_Services.SERVICE_START_DATE",
            "Party_Services.PARTY_SERVICES_BOOKING_ID",
            "Organization_Contact_Individuals.ORGANIZATION_CONTACT_ROLE",
            "Organization_Contact_Individuals.ORGANIZATION_CONTACT_INDIVIDUALS_INDIVIDUAL_ID",
            "Individuals.INDIVIDUAL_ID",
            "Forms.FORM_SUBMITTER_ID",
            "Organizations.ORGANIZATION_TYPE",
            "Individuals.LAST_NAME",
            "Forms.FORM_SUBMISSION_DATE"
        ]
    },
    {
        "instance_id": "q_662",
        "db_id": "party_service",
        "question": "Among individuals associated with organizations classified as political entities, who had the most recent form submission within the past year, and what is their last name? The determination should consider both the latest form submission date and the individual's loyalty score as a measure of contact frequency, giving precedence to higher loyalty scores in case of ties.",
        "query": " SELECT i.LAST_NAME FROM Individuals i JOIN Organization_Contact_Individuals oci ON i.INDIVIDUAL_ID = oci.ORGANIZATION_CONTACT_INDIVIDUALS_INDIVIDUAL_ID JOIN Organizations o ON oci.ORGANIZATION_CONTACT_ROLE = o.ORGANIZATION_TYPE JOIN Forms f ON i.INDIVIDUAL_ID = f.FORM_SUBMITTER_ID WHERE o.ORGANIZATION_TYPE = 'Political Entity'   AND f.FORM_SUBMISSION_DATE >= CURRENT_DATE - INTERVAL '1 YEAR'   AND f.FORM_SUBMISSION_DATE = (     SELECT MAX(f2.FORM_SUBMISSION_DATE)     FROM Forms f2     JOIN Individuals i2 ON f2.FORM_SUBMITTER_ID = i2.INDIVIDUAL_ID     JOIN Organization_Contact_Individuals oci2 ON i2.INDIVIDUAL_ID = oci2.ORGANIZATION_CONTACT_INDIVIDUALS_INDIVIDUAL_ID     JOIN Organizations o2 ON oci2.ORGANIZATION_CONTACT_ROLE = o2.ORGANIZATION_TYPE     WHERE o2.ORGANIZATION_TYPE = 'Political Entity'       AND f2.FORM_SUBMISSION_DATE >= CURRENT_DATE - INTERVAL '1 YEAR'   ) ORDER BY i.LOYALTY_SCORE DESC, f.FORM_SUBMISSION_DATE DESC LIMIT 1; ",
        "schema_links": [
            "Organization_Contact_Individuals.ORGANIZATION_CONTACT_ROLE",
            "Individuals.INDIVIDUAL_ID",
            "Forms.FORM_SUBMITTER_ID",
            "Individuals.LOYALTY_SCORE",
            "Organization_Contact_Individuals.ORGANIZATION_CONTACT_INDIVIDUALS_INDIVIDUAL_ID",
            "Individuals.LAST_NAME",
            "Forms.FORM_SUBMISSION_DATE",
            "Organizations.ORGANIZATION_TYPE"
        ]
    },
    {
        "instance_id": "q_665",
        "db_id": "party_service",
        "question": "What is the last name of the individual who was the earliest contact person for the organization with the highest UK VAT number, considering the contact frequency and total duration of services provided as indicators of the most significant initial interaction?",
        "query": " SELECT i.LAST_NAME FROM Individuals i JOIN Organization_Contact_Individuals oci ON i.INDIVIDUAL_ID = oci.ORGANIZATION_CONTACT_INDIVIDUALS_INDIVIDUAL_ID JOIN Organizations o ON oci.ORGANIZATION_CONTACT_ROLE = o.ORGANIZATION_TYPE JOIN Party_Services ps ON i.INDIVIDUAL_ID = ps.PARTY_SERVICES_BOOKING_ID WHERE o.ORGANIZATION_LEGAL_ENTITY_ID = (     SELECT MAX(o2.ORGANIZATION_LEGAL_ENTITY_ID)     FROM Organizations o2     WHERE o2.ORGANIZATION_TYPE = 'UK VAT' ) AND oci.ORGANIZATION_CONTACT_ROLE_START_DATE = (     SELECT MIN(oci2.ORGANIZATION_CONTACT_ROLE_START_DATE)     FROM Organization_Contact_Individuals oci2     JOIN Organizations o2 ON oci2.ORGANIZATION_CONTACT_ROLE = o2.ORGANIZATION_TYPE     WHERE o2.ORGANIZATION_TYPE = 'UK VAT' ) ORDER BY COUNT(ps.SERVICE_STATUS) DESC, SUM(DATEDIFF(ps.SERVICE_END_DATE, ps.SERVICE_START_DATE)) DESC LIMIT 1; ",
        "schema_links": [
            "Organizations.ORGANIZATION_LEGAL_ENTITY_ID",
            "Individuals.INDIVIDUAL_ID",
            "Party_Services.PARTY_SERVICES_BOOKING_ID",
            "Individuals.LAST_NAME",
            "Party_Services.SERVICE_STATUS",
            "Organizations.ORGANIZATION_TYPE",
            "Party_Services.SERVICE_START_DATE",
            "Organization_Contact_Individuals.ORGANIZATION_CONTACT_ROLE",
            "Organization_Contact_Individuals.ORGANIZATION_CONTACT_ROLE_START_DATE",
            "Party_Services.SERVICE_END_DATE",
            "Organization_Contact_Individuals.ORGANIZATION_CONTACT_INDIVIDUALS_INDIVIDUAL_ID"
        ]
    },
    {
        "instance_id": "q_663",
        "db_id": "party_service",
        "question": "Which individual, associated with the organization having the largest size (acting as a proxy for highest annual revenue), was most recently assigned an active contact role? Provide the last name of this individual, considering only those who have submitted at least one form and have a loyalty score above the average loyalty score of all individuals. Ensure that the contact role is currently active, meaning it has no end date or an end date in the future, and the start date is on or before the current date.",
        "query": " WITH OrganizationRevenueRank AS (     SELECT          ORGANIZATION_ID,          ROW_NUMBER() OVER (ORDER BY ORGANIZATION_SIZE DESC) AS RevenueRank     FROM Organizations ), IndividualFormSubmission AS (     SELECT DISTINCT          FORM_SUBMITTER_ID     FROM Forms     WHERE FORM_SUBMITTER_ID IS NOT NULL ), AverageLoyaltyScore AS (     SELECT          AVG(LOYALTY_SCORE) AS AvgLoyaltyScore     FROM Individuals ), EligibleIndividuals AS (     SELECT          I.INDIVIDUAL_ID,          I.LAST_NAME,          I.LOYALTY_SCORE,          OCI.ORGANIZATION_CONTACT_ROLE_END_DATE     FROM Individuals I     JOIN Organization_Contact_Individuals OCI          ON I.INDIVIDUAL_ID = OCI.ORGANIZATION_CONTACT_INDIVIDUALS_INDIVIDUAL_ID     JOIN OrganizationRevenueRank ORR          ON OCI.ORGANIZATION_CONTACT_ROLE_STATUS = 'Active'          AND OCI.ORGANIZATION_CONTACT_ROLE_END_DATE IS NULL          AND OCI.ORGANIZATION_CONTACT_ROLE_START_DATE <= CURRENT_DATE         AND ORR.ORGANIZATION_ID = OCI.ORGANIZATION_ID     JOIN IndividualFormSubmission IFS          ON I.INDIVIDUAL_ID = IFS.FORM_SUBMITTER_ID     CROSS JOIN AverageLoyaltyScore ALS     WHERE I.LOYALTY_SCORE > ALS.AvgLoyaltyScore ) SELECT      EI.LAST_NAME FROM EligibleIndividuals EI WHERE EI.ORGANIZATION_CONTACT_ROLE_END_DATE = (     SELECT MAX(EI2.ORGANIZATION_CONTACT_ROLE_END_DATE)      FROM EligibleIndividuals EI2 ) LIMIT 1; ",
        "schema_links": [
            "Organization_Contact_Individuals.ORGANIZATION_CONTACT_ROLE_END_DATE",
            "Organization_Contact_Individuals.ORGANIZATION_CONTACT_ROLE_STATUS",
            "Individuals.INDIVIDUAL_ID",
            "Forms.FORM_SUBMITTER_ID",
            "Individuals.LAST_NAME",
            "Organizations.ORGANIZATION_ID",
            "Organizations.ORGANIZATION_SIZE",
            "Organization_Contact_Individuals.ORGANIZATION_CONTACT_ROLE_START_DATE",
            "Individuals.LOYALTY_SCORE",
            "Organization_Contact_Individuals.ORGANIZATION_CONTACT_INDIVIDUALS_INDIVIDUAL_ID",
            "Organization_Contact_Individuals.ORGANIZATION_ID"
        ]
    },
    {
        "instance_id": "q_671",
        "db_id": "customer_data_hub",
        "question": "Find the distinct customers who have experienced both \"On Road\" and \"Shipped\" shipment statuses for their orders, ensuring their loyalty score exceeds the average loyalty score of all customers within their respective province. Include the customer IDs in the result.",
        "query": " WITH Customer_Order_Status AS (     SELECT          c.customer_id,         c.province,         c.loyalty_score,         AVG(c.loyalty_score) OVER (PARTITION BY c.province) AS avg_loyalty_score_province,         STRING_AGG(DISTINCT o.order_shipment_status, ',') AS order_statuses     FROM          Customers c     JOIN          Orders o ON c.customer_id = o.customer_id     WHERE          o.order_shipment_status IN ('On Road', 'Shipped')     GROUP BY          c.customer_id, c.province, c.loyalty_score ), Eligible_Customers AS (     SELECT          customer_id     FROM          Customer_Order_Status     WHERE          order_statuses LIKE '%On Road%'          AND order_statuses LIKE '%Shipped%'          AND loyalty_score > avg_loyalty_score_province ) SELECT      DISTINCT c.customer_id FROM      Eligible_Customers e JOIN      Customers c ON e.customer_id = c.customer_id; ",
        "schema_links": [
            "Customers.loyalty_score",
            "Customers.province",
            "Customers.customer_id",
            "Orders.order_shipment_status"
        ]
    },
    {
        "instance_id": "q_664",
        "db_id": "customer_data_hub",
        "question": "Which customers, belonging to the loyalty tiers of 'Gold' or 'Platinum' which qualify for advanced shipping options, have had orders with both \"On Road\" and \"Shipped\" shipment statuses within their order lifecycle? Provide the customer IDs and their full addresses (province, city, and district).",
        "query": " SELECT DISTINCT c.customer_id, c.province || ', ' || c.city || ', ' || c.district AS customer_name FROM Customers c JOIN Orders o ON c.customer_id = o.shipping_address_id JOIN Shipments s ON o.order_id = s.shipment_id WHERE c.loyalty_tier IN ('Gold', 'Platinum') -- Assuming these tiers qualify for advanced shipping options   AND EXISTS (     SELECT 1     FROM Shipments s1     JOIN Orders o1 ON s1.shipment_id = o1.order_id     WHERE o1.shipping_address_id = c.customer_id       AND s1.shipment_status = 'On Road'   )   AND EXISTS (     SELECT 1     FROM Shipments s2     JOIN Orders o2 ON s2.shipment_id = o2.order_id     WHERE o2.shipping_address_id = c.customer_id       AND s2.shipment_status = 'Shipped'   ); ",
        "schema_links": [
            "Customers.district",
            "Customers.province",
            "Orders.shipping_address_id",
            "Customers.city",
            "Orders.order_id",
            "Shipments.shipment_id",
            "Shipments.shipment_status",
            "Customers.customer_id",
            "Customers.loyalty_tier"
        ]
    },
    {
        "instance_id": "q_667",
        "db_id": "customer_data_hub",
        "question": "Identify the customers who have had orders with both \"On Road\" and \"Shipped\" statuses within the past 30 days, where the payment dates of these orders fall between 30 days ago and today. Additionally, ensure that these customers' loyalty scores are above the average loyalty score for their respective cities. For each qualifying customer, provide the total number of orders placed during this 30-day period.",
        "query": " WITH Relevant_Orders AS (     SELECT DISTINCT o.order_id, o.customer_id     FROM Orders o     WHERE o.order_shipment_status IN ('On Road', 'Shipped')       AND o.payment_date >= CURRENT_DATE - INTERVAL '30 days'       AND o.payment_date < CURRENT_DATE ), Customer_Cities AS (     SELECT c.customer_id, c.city, AVG(c.loyalty_score) OVER (PARTITION BY c.city) AS city_avg_loyalty_score     FROM Customers c ), Eligible_Customers AS (     SELECT ro.customer_id     FROM Relevant_Orders ro     JOIN Orders o1 ON ro.customer_id = o1.customer_id     JOIN Orders o2 ON ro.customer_id = o2.customer_id     WHERE o1.order_shipment_status = 'On Road'       AND o2.order_shipment_status = 'Shipped'       AND o1.payment_date >= CURRENT_DATE - INTERVAL '30 days'       AND o1.payment_date < CURRENT_DATE       AND o2.payment_date >= CURRENT_DATE - INTERVAL '30 days'       AND o2.payment_date < CURRENT_DATE     GROUP BY ro.customer_id ), Filtered_Customers AS (     SELECT ec.customer_id     FROM Eligible_Customers ec     JOIN Customers c ON ec.customer_id = c.customer_id     JOIN Customer_Cities cc ON c.city = cc.city     WHERE c.loyalty_score > cc.city_avg_loyalty_score ) SELECT fc.customer_id, COUNT(ro.order_id) AS total_orders FROM Filtered_Customers fc JOIN Relevant_Orders ro ON fc.customer_id = ro.customer_id GROUP BY fc.customer_id; ",
        "schema_links": [
            "Filtered_Customers.customer_id",
            "Customers.loyalty_score",
            "Orders.order_id",
            "Customers.city",
            "Relevant_Orders.customer_id",
            "Orders.customer_id",
            "Orders.payment_date",
            "Customers.customer_id",
            "Orders.order_shipment_status"
        ]
    },
    {
        "instance_id": "q_668",
        "db_id": "customer_data_hub",
        "question": "List the distinct customer IDs and their loyalty tiers for customers who have had both \"On Road\" and \"Shipped\" shipment statuses within their order lifecycle, and whose loyalty score is above the average loyalty score of all customers.",
        "query": " SELECT DISTINCT c.customer_id, c.loyalty_tier FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Shipments s ON o.order_id = s.order_id WHERE c.loyalty_score > (SELECT AVG(loyalty_score) FROM Customers)   AND EXISTS (     SELECT 1     FROM Shipments s1     WHERE s1.order_id = o.order_id       AND s1.shipment_status = 'On Road'   )   AND EXISTS (     SELECT 1     FROM Shipments s2     WHERE s2.order_id = o.order_id       AND s2.shipment_status = 'Shipped'   ); ",
        "schema_links": [
            "Customers.loyalty_score",
            "Orders.order_id",
            "Orders.customer_id",
            "Shipments.order_id",
            "Shipments.shipment_status",
            "Customers.customer_id",
            "Customers.loyalty_tier"
        ]
    },
    {
        "instance_id": "q_666",
        "db_id": "customer_data_hub",
        "question": "Find the customers who are part of a loyalty program and have purchased \"food\" category products, ensuring that their most recent order was approved within the past 30 days. Additionally, indicate whether these customers belong to a high-value segment based on their current segmentation criteria. Include the customer ID, loyalty score, loyalty tier, and segment name in the results. For the high-value segment indication, classify customers as \"Yes\" if they belong to the 'High-Value' segment and \"No\" otherwise. Ensure that only active segmentation records (where the segment end date is null) are considered.",
        "query": " SELECT      c.customer_id,     c.loyalty_score,     c.loyalty_tier,     cs.customer_segment AS segment_name,     CASE WHEN cs.customer_segment = 'High-Value' THEN 'Yes' ELSE 'No' END AS is_high_value_segment FROM      Customers c JOIN      Customer_Segments cs      ON c.customer_group_id = cs.customer_segment AND cs.segment_end_date IS NULL JOIN      Orders o      ON c.customer_id = o.order_id JOIN      Order_Approval_Logs oal      ON o.order_id = oal.order_approval_user_id JOIN      Order_Items oi      ON o.order_id = oi.order_item_id JOIN      Products p      ON oi.product_id = p.product_id WHERE      c.loyalty_tier IS NOT NULL     AND p.product_category = 'food'     AND oal.approval_timestamp >= CURRENT_TIMESTAMP - INTERVAL '30 days'     AND o.order_payment_status = 'approved' GROUP BY      c.customer_id, c.loyalty_score, c.loyalty_tier, cs.customer_segment; ",
        "schema_links": [
            "Orders.order_payment_status",
            "Customers.customer_group_id",
            "Orders.order_id",
            "Customers.loyalty_tier",
            "Customers.loyalty_score",
            "Order_Items.product_id",
            "Order_Items.order_item_id",
            "Customer_Segments.customer_segment",
            "Products.product_category",
            "Customer_Segments.segment_end_date",
            "Customers.customer_id",
            "Order_Approval_Logs.approval_timestamp",
            "Order_Approval_Logs.order_approval_user_id",
            "Products.product_id"
        ]
    },
    {
        "instance_id": "q_669",
        "db_id": "customer_data_hub",
        "question": "Which customers, categorized by their loyalty tier, have made at least one purchase of a product classified as \"food\" during the last completed quarter? Additionally, provide the likelihood of these customers repeating a similar purchase, based on their historical behavior and sales forecasts from the most recent quarter.",
        "query": " SELECT      c.customer_id,     c.loyalty_tier,     COUNT(DISTINCT o.order_id) AS purchase_count,     MAX(CASE WHEN pf.forecast_period_end >= CURRENT_DATE - INTERVAL '1 QUARTER' THEN pf.sales_forecast ELSE NULL END) AS recent_purchase_likelihood FROM      Customers c JOIN      Orders o ON c.customer_id = o.customer_id JOIN      Order_Items oi ON o.order_id = oi.order_id JOIN      Products p ON oi.product_id = p.product_id LEFT JOIN      Sales_Forecast pf ON c.customer_id = pf.customer_id WHERE      p.product_category = 'food'     AND o.payment_date >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '1 QUARTER'     AND o.payment_date < DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY      c.customer_id, c.loyalty_tier HAVING      COUNT(DISTINCT o.order_id) > 0; ",
        "schema_links": [
            "Sales_Forecast.customer_id",
            "Orders.order_id",
            "Order_Items.order_id",
            "Sales_Forecast.forecast_period_end",
            "Order_Items.product_id",
            "Sales_Forecast.sales_forecast",
            "Orders.customer_id",
            "Orders.payment_date",
            "Products.product_category",
            "Customers.customer_id",
            "Customers.loyalty_tier",
            "Products.product_id"
        ]
    },
    {
        "instance_id": "q_672",
        "db_id": "customer_data_hub",
        "question": "Find customers who have canceled orders involving food items, specifically focusing on those with higher engagement loyalty tiers ('Gold' or 'Platinum'). Include details about their customer segmentation and the specific reasons for cancellation if available. Ensure that only orders with a valid cancellation reason are considered, and confirm that the associated order items include products categorized as 'Food'.",
        "query": " SELECT      c.customer_id,     c.loyalty_tier,     c.customer_group_id,     cs.customer_segment,     cs.segment_reason,     o.cancellation_reason FROM      Customers c JOIN      Orders o ON c.customer_id = o.order_id LEFT JOIN      Customer_Segments cs ON c.customer_group_id = cs.customer_segment WHERE      c.loyalty_tier IN ('Gold', 'Platinum') -- Higher engagement tiers     AND o.cancellation_reason IS NOT NULL     AND EXISTS (         SELECT 1         FROM Order_Items oi         JOIN Products p ON oi.order_item_id = p.product_id         WHERE oi.order_id = o.order_id           AND p.product_category = 'Food' -- Assuming a column for product category exists in Products table     ); ",
        "schema_links": [
            "Customers.customer_group_id",
            "Orders.order_id",
            "Order_Items.order_id",
            "Customer_Segments.segment_reason",
            "Order_Items.order_item_id",
            "Customer_Segments.customer_segment",
            "Products.product_category",
            "Customers.customer_id",
            "Customers.loyalty_tier",
            "Products.product_id",
            "Orders.cancellation_reason"
        ]
    },
    {
        "instance_id": "q_670",
        "db_id": "customer_data_hub",
        "question": "Which customers, grouped by their loyalty tier, have had their food-related purchases canceled within the last quarter, including the associated cancellation reasons? Additionally, analyze the timing patterns of these cancellations relative to the order placement dates, ordered by loyalty tier and payment date.",
        "query": " SELECT      c.customer_id,     c.loyalty_tier,     o.order_id,     o.cancellation_reason,     oi.order_item_id,     pr.promotion_type AS product_category,     o.payment_date AS order_placement_date,     o.payment_date - INTERVAL '1 QUARTER' AS quarter_start_date,     o.payment_date AS quarter_end_date FROM      Customers c JOIN      Orders o ON c.customer_id = o.customer_id JOIN      Order_Items oi ON o.order_id = oi.order_item_id LEFT JOIN      Promotion_Rules pr ON oi.promotion_rule_id = pr.promotion_rule_id WHERE      o.cancellation_reason IS NOT NULL     AND pr.promotion_type = 'Food'     AND o.payment_date >= CURRENT_DATE - INTERVAL '1 QUARTER'     AND o.payment_date < CURRENT_DATE ORDER BY      c.loyalty_tier,      o.payment_date; ",
        "schema_links": [
            "Orders.order_id",
            "Promotion_Rules.promotion_type",
            "Promotion_Rules.promotion_rule_id",
            "Order_Items.promotion_rule_id",
            "Order_Items.order_item_id",
            "Orders.payment_date",
            "Orders.customer_id",
            "Customers.customer_id",
            "Customers.loyalty_tier",
            "Orders.cancellation_reason"
        ]
    },
    {
        "instance_id": "q_673",
        "db_id": "geography_weather",
        "question": "Which city in the state with the highest elevation range has the lowest population density, and how does its urbanization status compare to the average urbanization status of the state? Specifically, determine whether the city is less urbanized, more urbanized, or average compared to the state's average population density.",
        "query": " WITH StateElevationRange AS (     SELECT          s.state_name,         MAX(m.mountain_altitude) - MIN(m.mountain_altitude) AS elevation_range     FROM state s     JOIN mountain m ON s.state_name = m.state_code     GROUP BY s.state_name     ORDER BY elevation_range DESC     LIMIT 1 ), CityPopulationDensity AS (     SELECT          c.city_name,         c.city_population_density,         c.city_classification,         s.state_name     FROM city c     JOIN state s ON c.city_state_code = s.state_name     WHERE s.state_name = (SELECT state_name FROM StateElevationRange)     ORDER BY c.city_population_density ASC     LIMIT 1 ), StateAverageUrbanization AS (     SELECT          AVG(city_population_density) AS avg_population_density     FROM city     WHERE city_state_code = (SELECT state_name FROM StateElevationRange) ) SELECT      cpd.city_name,     cpd.city_population_density,     cpd.city_classification,     se.state_name,     sa.avg_population_density,     CASE          WHEN cpd.city_population_density < sa.avg_population_density THEN 'Less urbanized than average'         WHEN cpd.city_population_density > sa.avg_population_density THEN 'More urbanized than average'         ELSE 'Average urbanization'     END AS urbanization_status_comparison FROM CityPopulationDensity cpd JOIN StateElevationRange se ON cpd.state_name = se.state_name JOIN StateAverageUrbanization sa; ",
        "schema_links": [
            "mountain.mountain_altitude",
            "mountain.state_code",
            "city.city_state_code",
            "city.city_name",
            "city.city_population_density",
            "city.city_classification",
            "state.state_name"
        ]
    },
    {
        "instance_id": "q_676",
        "db_id": "geography_weather",
        "question": "Which states have a higher elevation (in feet) than the highest population density among capital cities in the USA, while also having an average annual rainfall greater than the maximum average annual precipitation of their respective states? Additionally, list these states in ascending order of their average annual temperature to assess potential environmental impacts based on climate conditions.",
        "query": "SELECT DISTINCT s.state_name, s.state_average_annual_temperature  FROM state s  JOIN city c ON s.state_name = c.city_state_code  JOIN highlow hl ON s.state_name = hl.highlow_region  WHERE s.average_annual_rainfall > (SELECT MAX(state_average_annual_precipitation) FROM state WHERE state_name = c.city_state_code)  AND hl.elevation_ft > (SELECT MAX(city_population_density) FROM city WHERE city_classification = 'Capital' AND country_name = 'USA')  ORDER BY s.state_average_annual_temperature ASC;",
        "schema_links": [
            "highlow.highlow_region",
            "state.state_average_annual_temperature",
            "city.city_state_code",
            "city.city_population_density",
            "state.state_name",
            "state.state_average_annual_precipitation",
            "city.country_name",
            "state.average_annual_rainfall",
            "city.city_classification",
            "highlow.elevation_ft"
        ]
    },
    {
        "instance_id": "q_675",
        "db_id": "geography_weather",
        "question": "Which city has the highest population density among cities located in the state with the smallest area that the Mississippi River passes through, and what is the projected population growth rate of that city over the next decade?",
        "query": " SELECT      c.city_name,      c.city_population_density,      s.state_population_growth_rate AS projected_population_growth_rate FROM      city c JOIN      state s ON c.city_state_code = s.state_name JOIN      river r ON s.state_name = r.river_state_code WHERE      r.river_name = 'Mississippi'     AND s.area = (         SELECT MIN(s2.area)         FROM state s2         JOIN river r2 ON s2.state_name = r2.river_state_code         WHERE r2.river_name = 'Mississippi'     ) ORDER BY      c.city_population_density DESC LIMIT 1; ",
        "schema_links": [
            "state.state_population_growth_rate",
            "river.river_state_code",
            "river.river_name",
            "city.city_name",
            "city.city_state_code",
            "city.city_population_density",
            "state.area",
            "state.state_name"
        ]
    },
    {
        "instance_id": "q_679",
        "db_id": "geography_weather",
        "question": "Which city in the state with the smallest land area has experienced the highest population growth rate over the past decade, and how does its urbanization status (as indicated by city classification and population density) compare to the average urbanization status of other cities within the same state?",
        "query": " WITH state_min_area AS (     SELECT state_state_code, state_name     FROM state     ORDER BY area ASC     LIMIT 1 ), city_growth_rate AS (     SELECT          city.city_name,          city.city_state_code,          (city.population - LAG(city.population) OVER (PARTITION BY city.city_state_code ORDER BY city.city_name)) / LAG(city.population) OVER (PARTITION BY city.city_state_code ORDER BY city.city_name) * 100 AS population_growth_rate,         city.city_classification     FROM city     WHERE city.city_state_code = (SELECT state_state_code FROM state_min_area) ) SELECT      cgr.city_name,      cgr.city_state_code,      cgr.population_growth_rate,      cgr.city_classification,     AVG(c.city_population_density) OVER (PARTITION BY c.city_state_code) AS avg_city_population_density_state FROM city_growth_rate cgr JOIN city c ON cgr.city_name = c.city_name AND cgr.city_state_code = c.city_state_code WHERE cgr.population_growth_rate = (     SELECT MAX(population_growth_rate)     FROM city_growth_rate ) ORDER BY cgr.population_growth_rate DESC LIMIT 1; ",
        "schema_links": [
            "city.population",
            "city.city_state_code",
            "city.city_name",
            "state.state_state_code",
            "city.city_population_density",
            "city.city_classification",
            "state.state_name"
        ]
    },
    {
        "instance_id": "q_682",
        "db_id": "geography_weather",
        "question": "Which city in the state with the smallest land area has experienced the highest population growth rate over the past decade, and how does its urbanization status and population density compare to the average population density of other cities within the same state?",
        "query": " WITH state_smallest_area AS (     SELECT state_state_code     FROM state     ORDER BY area ASC     LIMIT 1 ), city_growth_rate AS (     SELECT          city.city_name,          city.city_state_code,          (city.population - LAG(city.population) OVER (PARTITION BY city.city_name ORDER BY city.city_code)) / CAST(LAG(city.population) OVER (PARTITION BY city.city_name ORDER BY city.city_code) AS FLOAT) AS population_growth_rate,         city.city_classification     FROM city     WHERE city.city_state_code = (SELECT state_state_code FROM state_smallest_area) ) SELECT      cgr.city_name,      cgr.city_state_code,      cgr.population_growth_rate,      cgr.city_classification,     AVG(c.city_population_density) OVER (PARTITION BY c.city_state_code) AS avg_state_population_density FROM city_growth_rate cgr JOIN city c ON cgr.city_name = c.city_name AND cgr.city_state_code = c.city_state_code WHERE cgr.population_growth_rate = (     SELECT MAX(population_growth_rate)     FROM city_growth_rate ) ORDER BY cgr.population_growth_rate DESC LIMIT 1; ",
        "schema_links": [
            "city.city_code",
            "city.population",
            "city.city_state_code",
            "city.city_name",
            "state.state_state_code",
            "city.city_population_density",
            "city.city_classification"
        ]
    },
    {
        "instance_id": "q_674",
        "db_id": "geography_weather",
        "question": "Which state, sharing a border with California through common river systems, exhibits the greatest difference between its highest and lowest elevations? Additionally, compare the average population density of this state to that of California, providing both values explicitly.",
        "query": " WITH state_elevation_variations AS (     SELECT          h.region_name AS state_name,         MAX(mountain_elevation) - MIN(mountain_elevation) AS elevation_variation     FROM highlow h     JOIN mountain m ON h.mountain_name = m.mountain_name     WHERE h.highlow_region = 'California'     GROUP BY h.region_name     ORDER BY elevation_variation DESC     LIMIT 1 ), california_density AS (     SELECT          state_population_density     FROM state     WHERE state_name = 'California' ), neighboring_state_density AS (     SELECT          s.state_name,         s.state_population_density     FROM state s     WHERE s.state_name IN (         SELECT DISTINCT state_name          FROM river          WHERE river_state_code IN (             SELECT DISTINCT river_state_code              FROM river              WHERE state_name = 'California'         )     ) ) SELECT      sev.state_name,     sev.elevation_variation,     nsd.state_population_density AS neighboring_state_density,     cd.state_population_density AS california_density FROM state_elevation_variations sev JOIN neighboring_state_density nsd ON sev.state_name = nsd.state_name CROSS JOIN california_density cd; ",
        "schema_links": [
            "highlow.highlow_region",
            "mountain.mountain_elevation",
            "highlow.region_name",
            "river.river_state_code",
            "state.state_population_density",
            "river.state_name",
            "highlow.mountain_name",
            "state.state_name",
            "mountain.mountain_name"
        ]
    },
    {
        "instance_id": "q_678",
        "db_id": "geography_weather",
        "question": "Which state that shares a border with California has the highest population density and also experiences the greatest difference between its average annual temperature and the temperature of its highest income quarter?",
        "query": "SELECT s.state_name, s.state_population_density, ABS(s.state_average_annual_temperature - s.state_highest_income_quarter) AS annual_temperature_variance FROM state s JOIN state ca ON ST_Intersects(PolygonFromText('POLYGON((ca.capital_longitude ca.capital_latitude, ...))', s.Polygon) WHERE ca.state_name = 'California' ORDER BY s.state_population_density DESC, annual_temperature_variance DESC LIMIT 1;",
        "schema_links": [
            "state.state_highest_income_quarter",
            "state.state_population_density",
            "ca.capital_latitude",
            "state.state_average_annual_temperature",
            "state.Polygon",
            "ca.state_name",
            "ca.capital_longitude",
            "state.state_name"
        ]
    },
    {
        "instance_id": "q_683",
        "db_id": "geography_weather",
        "question": "Which state, sharing a border with California, has the highest population density, contains the largest lake by surface area, and has a capital city with above-average annual sunshine hours compared to other capital cities in the United States?",
        "query": " SELECT s.state_name, s.state_population_density, l.lake_name, l.lake_surface_area_change FROM state s JOIN lake l ON s.state_name = l.lake_state_code JOIN city c ON s.state_name = c.city_state_code WHERE s.state_name IN (     SELECT DISTINCT st.state_name     FROM state st     JOIN state ca ON ST_GeometryType(ca.capital_latitude, ca.capital_longitude) = 'POINT'     WHERE ST_Touches(ST_GeometryType(st.capital_latitude, st.capital_longitude), ST_GeometryType(ca.capital_latitude, ca.capital_longitude))       AND ca.state_name = 'California' ) AND c.city_name = s.capital AND c.average_annual_solar_radiation > (     SELECT AVG(c2.average_annual_solar_radiation)     FROM city c2     WHERE c2.city_state_code IN (         SELECT state_name         FROM state         WHERE country_name = 'United States'     ) ) AND l.lake_surface_area_change = (     SELECT MAX(l2.lake_surface_area_change)     FROM lake l2 ) ORDER BY s.state_population_density DESC LIMIT 1; ",
        "schema_links": [
            "state.state_population_density",
            "city.city_name",
            "city.city_state_code",
            "city.average_annual_solar_radiation",
            "state.capital",
            "lake.lake_name",
            "lake.lake_surface_area_change",
            "state.state_name",
            "state.capital_longitude",
            "state.capital_latitude",
            "lake.lake_state_code"
        ]
    },
    {
        "instance_id": "q_677",
        "db_id": "geography_weather",
        "question": "In the state with the highest population density, which river has the greatest impact on local navigation traffic, considering both its length in miles and average discharge volume in cubic feet per second?",
        "query": "SELECT r.river_name FROM river r JOIN state s ON r.river_state_code = s.state_name WHERE s.state_population_density = (SELECT MAX(state_population_density) FROM state) ORDER BY r.river_length_miles DESC, r.river_discharge_cubicft_sec DESC LIMIT 1;",
        "schema_links": [
            "river.river_state_code",
            "river.river_discharge_cubicft_sec",
            "river.river_name",
            "state.state_population_density",
            "river.river_length_miles",
            "state.state_name"
        ]
    },
    {
        "instance_id": "q_680",
        "db_id": "geography_weather",
        "question": "Which river passing through Tennessee and its neighboring states has the greatest length? Provide its navigation capacity compared to other major rivers in the region. Additionally, assess the flood risk level based on pollution sources along the river. Determine the number of nearby lakes with a high biodiversity index (greater than 70) within the same states. Consider only states whose capitals are within 500 units of distance from the coordinates (-86.667, 35.517) when defining neighboring states. Ensure the results are sorted by river length in descending order.",
        "query": " WITH region_rivers AS (     SELECT          r.river_name,          r.river_length_miles,          r.river_navigation_capacity,          r.river_pollution_sources,          r.river_state_code,          s.state_name     FROM          river r     JOIN          state s ON r.river_state_code = s.state_code     WHERE          s.state_name = 'Tennessee' OR s.state_name IN (             SELECT DISTINCT s2.state_name             FROM state s2             WHERE ST_Distance(ST_Point(s2.capital_longitude, s2.capital_latitude), ST_Point(-86.667, 35.517)) < 500         ) ), flood_risk AS (     SELECT          rr.river_name,          rr.river_length_miles,          rr.river_navigation_capacity,         CASE              WHEN rr.river_pollution_sources LIKE '%flood%' THEN 'High'             ELSE 'Low'         END AS flood_risk_level     FROM          region_rivers rr ), wildlife_diversity AS (     SELECT          l.lake_name,          l.lake_ecosystem_biodiversity_index,          l.lake_state_code     FROM          lake l     WHERE          l.lake_ecosystem_biodiversity_index > 70 ) SELECT      fr.river_name,      fr.river_length_miles,      fr.river_navigation_capacity,      fr.flood_risk_level,     COUNT(wd.lake_name) AS nearby_lakes_with_high_biodiversity FROM      flood_risk fr LEFT JOIN      wildlife_diversity wd ON fr.river_state_code = wd.lake_state_code WHERE      fr.river_length_miles = (         SELECT MAX(rr2.river_length_miles)         FROM region_rivers rr2     ) GROUP BY      fr.river_name, fr.river_length_miles, fr.river_navigation_capacity, fr.flood_risk_level ORDER BY      fr.river_length_miles DESC; ",
        "schema_links": [
            "river.river_pollution_sources",
            "lake.lake_name",
            "river.river_navigation_capacity",
            "river.river_length_miles",
            "state.state_name",
            "state.capital_longitude",
            "state.capital_latitude",
            "lake.lake_state_code",
            "river.river_state_code",
            "river.river_name",
            "state.state_code",
            "lake.lake_ecosystem_biodiversity_index"
        ]
    },
    {
        "instance_id": "q_684",
        "db_id": "geography_weather",
        "question": "Which river, passing through a state in the USA that shares a border with Tennessee (excluding Tennessee itself), has the greatest impact on the growth rates of cities within that state, as determined by the river's length and navigation capacity, while considering the total population of cities and the average state population growth rate?",
        "query": "SELECT r.river_name, s.state_name, SUM(c.population) AS total_city_population, AVG(s.state_population_growth_rate) AS avg_state_population_growth_rate FROM river r JOIN state s ON r.river_state_code = s.state_code JOIN city c ON c.city_state_code = s.state_code WHERE s.state_name IN (     SELECT DISTINCT s1.state_name     FROM state s1     WHERE s1.country_name = 'USA' AND s1.state_name != 'Tennessee'     AND EXISTS (         SELECT 1         FROM state s2         WHERE s2.state_name = 'Tennessee' AND ST_Intersects(s1.geometry, s2.geometry)     ) ) GROUP BY r.river_name, s.state_name ORDER BY r.river_length_miles DESC, r.river_navigation_capacity DESC LIMIT 1;",
        "schema_links": [
            "state.geometry",
            "city.population",
            "city.city_state_code",
            "state.country_name",
            "river.river_navigation_capacity",
            "state.state_name",
            "state.state_population_growth_rate",
            "river.river_state_code",
            "river.river_name",
            "state.state_code",
            "state.state_length_miles"
        ]
    },
    {
        "instance_id": "q_681",
        "db_id": "geography_weather",
        "question": "Which river, flowing through a state that either exports to or has industries related to Tennessee, has the greatest impact on urban development as measured by its length, the total population of cities it passes through, and the average population density of those cities?",
        "query": "SELECT r.river_name, SUM(c.population) AS total_population, AVG(c.city_population_density) AS avg_population_density, r.length AS river_length FROM river r JOIN city c ON r.river_state_code = c.city_state_code JOIN state s ON r.river_state_code = s.state_name WHERE s.state_name IN (     SELECT DISTINCT s1.state_name     FROM state s1     WHERE 'Tennessee' = ANY(STRING_TO_ARRAY(s1.state_major_export_products, ','))        OR 'Tennessee' = ANY(STRING_TO_ARRAY(s1.state_major_industries, ',')) ) GROUP BY r.river_name, r.length ORDER BY river_length DESC, total_population DESC, avg_population_density DESC LIMIT 1;",
        "schema_links": [
            "river.river_state_code",
            "state.state_major_export_products",
            "river.river_name",
            "city.population",
            "city.city_state_code",
            "river.length",
            "state.state_major_industries",
            "city.city_population_density",
            "state.state_name"
        ]
    },
    {
        "instance_id": "q_685",
        "db_id": "geography_weather",
        "question": "Which state along the Mississippi River has experienced the highest population growth rate over the past decade, and what is the urbanization status of its cities?",
        "query": "SELECT s.state_name, s.state_population_growth_rate, c.city_classification  FROM state s  LEFT JOIN city c ON s.state_name = c.city_state_code  WHERE s.state_name IN (     SELECT DISTINCT r.river_state_code      FROM river r      WHERE r.river_name = 'Mississippi' )  ORDER BY s.state_population_growth_rate DESC  LIMIT 1;",
        "schema_links": [
            "state.state_population_growth_rate",
            "river.river_state_code",
            "river.river_name",
            "city.city_state_code",
            "city.city_classification",
            "state.state_name"
        ]
    },
    {
        "instance_id": "q_687",
        "db_id": "geography_weather",
        "question": "Among the states along the Mississippi River, which state has experienced the highest population growth rate over the past decade, and what is its current population density as an indicator of urbanization status?",
        "query": "SELECT s.state_name, s.state_population_growth_rate, s.state_population_density FROM state s JOIN river r ON s.state_name = r.river_state_code WHERE r.river_name = 'Mississippi' ORDER BY s.state_population_growth_rate DESC LIMIT 1;",
        "schema_links": [
            "state.state_population_growth_rate",
            "river.river_state_code",
            "river.river_name",
            "state.state_population_density",
            "state.state_name"
        ]
    },
    {
        "instance_id": "q_688",
        "db_id": "geography_weather",
        "question": "Which city in the state with the highest diversity of lake ecosystems has the greatest population density? Additionally, compare the population growth rate of this city to the average population growth rate of all cities located within the same climate zone, as defined by their average annual temperature.",
        "query": " WITH StateEcosystemDiversity AS (     SELECT          s.state_name,         COUNT(DISTINCT l.lake_ecosystem) AS ecosystem_diversity     FROM state s     LEFT JOIN lake l ON s.state_name = l.lake_state_code     GROUP BY s.state_name     ORDER BY ecosystem_diversity DESC     LIMIT 1 ), CityPopulationDensity AS (     SELECT          c.city_name,         c.city_population_density,         c.city_state_code,         s.state_name,         s.state_average_annual_temperature     FROM city c     JOIN state s ON c.city_state_code = s.state_name     WHERE s.state_name = (SELECT state_name FROM StateEcosystemDiversity)     ORDER BY c.city_population_density DESC     LIMIT 1 ), AverageGrowthRate AS (     SELECT          AVG(s.state_population_growth_rate) AS avg_growth_rate     FROM state s     JOIN CityPopulationDensity cpd ON s.state_average_annual_temperature = cpd.state_average_annual_temperature ) SELECT      cpd.city_name,     cpd.city_population_density,     cpd.state_name,     s.state_population_growth_rate AS city_growth_rate,     ag.avg_growth_rate AS average_zone_growth_rate FROM CityPopulationDensity cpd JOIN state s ON cpd.city_state_code = s.state_name CROSS JOIN AverageGrowthRate ag; ",
        "schema_links": [
            "CityPopulationDensity.city_population_density",
            "city.city_name",
            "city.city_state_code",
            "state.state_average_annual_temperature",
            "AverageGrowthRate.avg_growth_rate",
            "city.city_population_density",
            "lake.lake_ecosystem",
            "state.state_name",
            "state.state_population_growth_rate",
            "CityPopulationDensity.state_name",
            "lake.lake_state_code",
            "CityPopulationDensity.city_name"
        ]
    },
    {
        "instance_id": "q_692",
        "db_id": "geography_weather",
        "question": "Which state, excluding Idaho, that geographically borders Idaho based on proximity of capital coordinates within a 0.5-degree latitude and longitude range of Idaho's capital, has the lowest natural elevation point considering both geographical features and urban development impacts on terrain?",
        "query": "SELECT s.state_name, MIN(h.lowest_point) AS lowest_elevation_point FROM state s JOIN highlow h ON s.state_name = h.region_name WHERE s.state_name IN (     SELECT state_name     FROM state     WHERE state_name != 'Idaho'     AND state_name IN (         SELECT state_name         FROM state         WHERE capital_latitude BETWEEN (             SELECT MIN(capital_latitude) - 0.5             FROM state             WHERE state_name = 'Idaho'         ) AND (             SELECT MAX(capital_latitude) + 0.5             FROM state             WHERE state_name = 'Idaho'         )         AND capital_longitude BETWEEN (             SELECT MIN(capital_longitude) - 0.5             FROM state             WHERE state_name = 'Idaho'         ) AND (             SELECT MAX(capital_longitude) + 0.5             FROM state             WHERE state_name = 'Idaho'         )     ) ) GROUP BY s.state_name ORDER BY lowest_elevation_point ASC LIMIT 1;",
        "schema_links": [
            "state.capital_latitude",
            "highlow.region_name",
            "highlow.lowest_point",
            "state.state_name",
            "state.capital_longitude"
        ]
    },
    {
        "instance_id": "q_689",
        "db_id": "geography_weather",
        "question": "Which city has the highest population density among cities located in states that share a border with California, and how does its population density compare to the average population density of its corresponding state?",
        "query": " WITH BorderingStates AS (     SELECT DISTINCT s.state_name, s.state_population_density     FROM state s     WHERE s.state_name IN (         SELECT st1.state_name         FROM state st1         JOIN state st2         ON ST_Intersects(POLYGON(st1.geometry), POLYGON(st2.geometry)) = 1         WHERE st2.state_name = 'California'     ) ), CityDensity AS (     SELECT c.city_name, c.city_population_density, c.city_state_code     FROM city c     WHERE c.city_state_code IN (SELECT SUBSTRING(state_name, 1, 2) FROM BorderingStates) ) SELECT cd.city_name, cd.city_population_density, bs.state_population_density AS state_avg_density FROM CityDensity cd JOIN BorderingStates bs ON cd.city_state_code = SUBSTRING(bs.state_name, 1, 2) WHERE cd.city_population_density = (     SELECT MAX(city_population_density)     FROM CityDensity ); ",
        "schema_links": [
            "state.geometry",
            "CityDensity.city_state_code",
            "state.state_population_density",
            "BorderingStates.state_population_density",
            "CityDensity.city_name",
            "city.city_name",
            "city.city_state_code",
            "BorderingStates.state_name",
            "city.city_population_density",
            "CityDensity.city_population_density",
            "state.state_name"
        ]
    },
    {
        "instance_id": "q_693",
        "db_id": "geography_weather",
        "question": "Among the states that share a border with California in the United States, which city has the highest population density? Additionally, compare the urbanization status of this city to the major cities of the other bordering states, indicating whether it has higher, lower, or similar urbanization.",
        "query": " WITH BorderingStates AS (     SELECT DISTINCT s.state_name, s.state_code     FROM state s     WHERE s.state_name IN (         SELECT st.state_name         FROM state st         WHERE st.country_name = 'United States'           AND ST_Intersects(               ST_GeomFromText(CONCAT('LINESTRING(', st.capital_longitude, ' ', st.capital_latitude, ')')),               ST_GeomFromText(CONCAT('POLYGON((',                    (SELECT GROUP_CONCAT(c.longitude, ' ', c.latitude SEPARATOR ',')                     FROM city c                     WHERE c.city_state_code = 'CA'),                    '))'))           )     ) ), CityDensity AS (     SELECT          c.city_name,          c.city_population_density,          c.city_classification,         c.city_state_code     FROM city c     JOIN BorderingStates b ON c.city_state_code = b.state_code ), MaxDensityCity AS (     SELECT          cd.city_name,          cd.city_population_density,          cd.city_classification     FROM CityDensity cd     WHERE cd.city_population_density = (         SELECT MAX(city_population_density)          FROM CityDensity     ) ) SELECT      mc.city_name,      mc.city_population_density,      mc.city_classification,     CASE          WHEN mc.city_classification = 'Urban' THEN 'Higher urbanization compared to other bordering states'' major cities'         WHEN mc.city_classification = 'Rural' THEN 'Lower urbanization compared to other bordering states'' major cities'         ELSE 'Similar urbanization compared to other bordering states'' major cities'     END AS UrbanizationComparison FROM MaxDensityCity mc; ",
        "schema_links": [
            "MaxDensityCity.city_name",
            "MaxDensityCity.city_population_density",
            "city.city_name",
            "city.city_state_code",
            "city.latitude",
            "city.city_population_density",
            "state.state_name",
            "city.longitude",
            "state.capital_longitude",
            "state.capital_latitude",
            "state.state_code",
            "city.city_classification",
            "MaxDensityCity.city_classification"
        ]
    },
    {
        "instance_id": "q_690",
        "db_id": "geography_weather",
        "question": "Which urbanized city, located in the state with the lowest population density, has the smallest urban area and is experiencing the highest rate of population decline in 2022?",
        "query": "SELECT c.city_name, c.area_km2, s.state_population_density, s.state_population_change_2022 FROM city AS c JOIN state AS s ON c.city_state_code = s.state_name WHERE s.state_population_density = (SELECT MIN(state_population_density) FROM state) AND c.city_classification = 'Urban' AND c.area_km2 = (SELECT MIN(area_km2) FROM city WHERE city_state_code = s.state_name AND city_classification = 'Urban') AND s.state_population_change_2022 = (SELECT MIN(state_population_change_2022) FROM state WHERE state_population_density = s.state_population_density) LIMIT 1;",
        "schema_links": [
            "city.area_km2",
            "state.state_population_density",
            "city.city_state_code",
            "city.city_name",
            "state.state_population_change_2022",
            "city.city_classification",
            "state.state_name"
        ]
    },
    {
        "instance_id": "q_686",
        "db_id": "geography_weather",
        "question": "Which state, having the longest border length, surrounds the region with the highest population density, calculated as the total population divided by the total area in square kilometers?",
        "query": "SELECT s.state_name  FROM state s JOIN city c ON s.state_name = c.city_state_code GROUP BY s.state_name ORDER BY SUM(c.population) / SUM(c.area_km2) DESC, PERIMETER(s.geometry) DESC LIMIT 1;",
        "schema_links": [
            "state.geometry",
            "city.area_km2",
            "city.population",
            "city.city_state_code",
            "state.state_name"
        ]
    },
    {
        "instance_id": "q_691",
        "db_id": "geography_weather",
        "question": "Which is the longest river in the state with the lowest population density, and how does its navigation capacity compare to other rivers located in states with the same average annual temperature and precipitation levels?",
        "query": " WITH StateLowestDensity AS (     SELECT state_code, state_name     FROM state     WHERE state_population_density = (SELECT MIN(state_population_density) FROM state) ), LongestRiverInState AS (     SELECT r.river_name, r.river_length_miles, r.river_navigation_capacity, s.state_name     FROM river r     JOIN StateLowestDensity s ON r.river_state_code = s.state_code     ORDER BY r.river_length_miles DESC     LIMIT 1 ), ClimateZoneRivers AS (     SELECT r.river_name, r.river_navigation_capacity, s.state_average_annual_temperature, s.state_average_annual_precipitation     FROM river r     JOIN state s ON r.river_state_code = s.state_code     WHERE s.state_average_annual_temperature = (         SELECT state_average_annual_temperature         FROM state         WHERE state_name = (SELECT state_name FROM StateLowestDensity)     )     AND s.state_average_annual_precipitation = (         SELECT state_average_annual_precipitation         FROM state         WHERE state_name = (SELECT state_name FROM StateLowestDensity)     ) ) SELECT      lr.river_name AS Longest_River_Name,     lr.river_length_miles AS Longest_River_Length_Miles,     lr.river_navigation_capacity AS Longest_River_Navigation_Capacity,     czr.river_name AS Other_River_Name,     czr.river_navigation_capacity AS Other_River_Navigation_Capacity FROM LongestRiverInState lr JOIN ClimateZoneRivers czr ON lr.state_name = czr.state_name; ",
        "schema_links": [
            "state.state_average_annual_precipitation",
            "river.river_state_code",
            "state.state_code",
            "river.river_name",
            "state.state_population_density",
            "state.state_average_annual_temperature",
            "river.river_length_miles",
            "river.river_navigation_capacity",
            "state.state_name"
        ]
    },
    {
        "instance_id": "q_694",
        "db_id": "geography_weather",
        "question": "Which state has the smallest area and contains the longest cumulative river length within its borders, considering the total river length contributed by all rivers in the state and ensuring this total length is the maximum among all states?",
        "query": "SELECT s.state_name   FROM state s   JOIN river r ON s.state_code = r.river_state_code   GROUP BY s.state_name   HAVING SUM(r.river_length_miles) = (       SELECT MAX(total_length)       FROM (           SELECT s2.state_name, SUM(r2.river_length_miles) AS total_length           FROM state s2           JOIN river r2 ON s2.state_code = r2.river_state_code           GROUP BY s2.state_name       ) sub   )   ORDER BY s.area ASC   LIMIT 1;",
        "schema_links": [
            "river.river_state_code",
            "state.state_code",
            "river.river_length_miles",
            "state.area",
            "state.state_name"
        ]
    },
    {
        "instance_id": "q_697",
        "db_id": "geography_weather",
        "question": "Which state that borders Wyoming has the lowest population density, and what is the population of its largest city? Additionally, what is the average annual temperature of this state, and does it contain any lakes larger than 100 square kilometers in area?",
        "query": " WITH wyoming_neighbors AS (     SELECT DISTINCT s.state_name, s.state_population_density, s.population, s.capital     FROM state s     JOIN city c ON s.state_name = c.city_state_code     WHERE s.state_name IN (         SELECT DISTINCT c2.city_state_code         FROM city c1         JOIN city c2              ON ST_Distance_Sphere(                 point(c1.longitude, c1.latitude),                  point(c2.longitude, c2.latitude)             ) < 50000         WHERE c1.city_state_code = 'WY' AND c2.city_state_code != 'WY'     )     ORDER BY s.state_population_density ASC     LIMIT 1 ), largest_city AS (     SELECT city_name, population     FROM city     WHERE city_state_code = (SELECT state_name FROM wyoming_neighbors)     ORDER BY population DESC     LIMIT 1 ), state_avg_temp AS (     SELECT state_average_annual_temperature     FROM state     WHERE state_name = (SELECT state_name FROM wyoming_neighbors) ), large_lakes AS (     SELECT COUNT(*) AS lake_count     FROM lake     WHERE lake_state_code = (SELECT state_name FROM wyoming_neighbors)       AND lake_area_acres / 247.105 > 100 ) SELECT      wn.state_name AS state_with_lowest_density,     lc.population AS largest_city_population,     sat.state_average_annual_temperature AS average_temperature,     ll.lake_count > 0 AS has_large_lakes FROM wyoming_neighbors wn CROSS JOIN largest_city lc CROSS JOIN state_avg_temp sat CROSS JOIN large_lakes ll; ",
        "schema_links": [
            "state.state_population_density",
            "city.population",
            "city.city_state_code",
            "state.population",
            "city.city_name",
            "state.state_average_annual_temperature",
            "city.latitude",
            "state.capital",
            "lake.lake_area_acres",
            "state.state_name",
            "city.longitude",
            "lake.lake_state_code"
        ]
    },
    {
        "instance_id": "q_695",
        "db_id": "geography_weather",
        "question": "Which state, sharing a border with the state that contains the lowest elevation point in the USA, has exhibited the highest population growth from 2012 to 2022?",
        "query": " WITH lowest_elevation_state AS (     SELECT          state.state_name      FROM          highlow      JOIN          state ON highlow.region_name = state.state_name      WHERE          highlow.lowest_point IS NOT NULL      ORDER BY          mountain_elevation ASC      LIMIT 1 ), bordering_states AS (     SELECT          s2.state_name,          s2.state_population_change_2022      FROM          state s1      JOIN          state s2 ON s1.state_name != s2.state_name      WHERE          s1.state_name = (SELECT state_name FROM lowest_elevation_state)          AND ST_Intersects(ST_Boundary(ST_GeomFromText(CONCAT('POLYGON((', REPLACE(s1.capital_longitude, ',', ' '), ' ', REPLACE(s1.capital_latitude, ',', ' '), ')'))), ST_Boundary(ST_GeomFromText(CONCAT('POLYGON((', REPLACE(s2.capital_longitude, ',', ' '), ' ', REPLACE(s2.capital_latitude, ',', ' '), ')')))) = 1 ) SELECT      state_name  FROM      bordering_states  ORDER BY      state_population_change_2022 DESC  LIMIT 1;    **Note**: The SQL assumes the existence of spatial functions like ST_Intersects and ST_GeomFromText for determining if two states share a border based on their capital coordinates. If such functions are not available in the database, an alternative method for determining borders would be required.",
        "schema_links": [
            "state.capital_latitude",
            "highlow.region_name",
            "highlow.mountain_elevation",
            "state.state_population_change_2022",
            "highlow.lowest_point",
            "state.state_name",
            "state.capital_longitude"
        ]
    },
    {
        "instance_id": "q_707",
        "db_id": "academic_research_data",
        "question": "Which papers co-authored by Peter Mertens and Dina Barbian have the highest normalized paper quality scores, listed in descending order of these scores? For each of these papers, provide the title, publication year, venue name, and citation trend across different venues and years, including the source of these citations. Additionally, identify the datasets most frequently used in these papers, showing the total usage count for each dataset and the last update time of the dataset, sorted first by the paper's quality score in descending order, then by dataset usage count in descending order, and finally by publication year in ascending order.",
        "query": " WITH co_authored_papers AS (     SELECT DISTINCT p.paperId, p.title, p.year, p.venueId, p.paper_quality_score_normalized, p.paper_keywords_similarity_score     FROM paper p     JOIN writes w1 ON p.paperId = w1.paperId     JOIN writes w2 ON p.paperId = w2.paperId     JOIN author a1 ON w1.authorId = a1.authorId AND a1.authorName = 'Peter Mertens'     JOIN author a2 ON w2.authorId = a2.authorId AND a2.authorName = 'Dina Barbian' ), citation_trends AS (     SELECT cp.citedPaperId, c.paper_citation_trend, c.paper_citation_source, v.venueName, cp.citedPaperId AS paperId     FROM cite c     JOIN co_authored_papers cap ON c.citedPaperId = cap.paperId     JOIN paper p ON cap.paperId = p.paperId     JOIN venue v ON p.venueId = v.venueId ), dataset_usage AS (     SELECT pd.paperId, d.datasetName, SUM(pd.dataset_paper_count) AS total_usage, d.dataset_last_updated     FROM paperDataset pd     JOIN dataset d ON pd.datasetId = d.datasetId     JOIN co_authored_papers cap ON pd.paperId = cap.paperId     GROUP BY pd.paperId, d.datasetName, d.dataset_last_updated ) SELECT      cap.title,      cap.year,      v.venueName,      cap.paper_quality_score_normalized,      ct.paper_citation_trend,      ct.paper_citation_source,      du.datasetName,      du.total_usage,      du.dataset_last_updated FROM co_authored_papers cap JOIN venue v ON cap.venueId = v.venueId LEFT JOIN citation_trends ct ON cap.paperId = ct.paperId LEFT JOIN dataset_usage du ON cap.paperId = du.paperId ORDER BY cap.paper_quality_score_normalized DESC, du.total_usage DESC, cap.year ASC; ",
        "schema_links": [
            "citation_trends.paper_citation_source",
            "dataset_usage.datasetName",
            "cite.citedPaperId",
            "paper.paper_keywords_similarity_score",
            "citation_trends.citedPaperId",
            "paper.paperId",
            "writes.paperId",
            "dataset.datasetId",
            "citation_trends.venueName",
            "citation_trends.paper_citation_trend",
            "cite.paper_citation_trend",
            "dataset_usage.paperId",
            "paperDataset.paperId",
            "dataset_usage.dataset_last_updated",
            "author.authorId",
            "dataset.datasetName",
            "paperDataset.dataset_paper_count",
            "venue.venueId",
            "paperDataset.datasetId",
            "writes.authorId",
            "dataset.dataset_last_updated",
            "paper.venueId",
            "paper.year",
            "citation_trends.paperId",
            "author.authorName",
            "co_authored_papers.paperId",
            "paper.paper_quality_score_normalized",
            "cite.paper_citation_source",
            "dataset_usage.total_usage",
            "paper.title",
            "venue.venueName"
        ]
    },
    {
        "instance_id": "q_698",
        "db_id": "academic_research_data",
        "question": "Identify the top 10 research papers authored by Peter Mertens or Dina Barbian, ranked by their normalized citation quality scores. For each of these papers, provide the following details: title, publication year, venue name (if available), paper quality score, and normalized cited paper quality score. Additionally, compare the citation trends of these papers across different venues and years by listing the distinct venues and years in which they were cited. Identify any datasets or keyphrases frequently associated with these papers and evaluate their potential impact on the overall paper quality by including the names of associated datasets and keyphrases for each paper.",
        "query": "WITH target_authors AS (     SELECT authorId      FROM author      WHERE authorName = 'Peter Mertens' OR authorName = 'Dina Barbian' ), target_papers AS (     SELECT DISTINCT p.paperId, p.title, p.year, v.venueName, p.paper_quality_score, c.cited_paper_quality_score_normalized     FROM writes w     JOIN target_authors ta ON w.authorId = ta.authorId     JOIN paper p ON w.paperId = p.paperId     JOIN cite c ON p.paperId = c.citedPaperId     LEFT JOIN venue v ON p.venueId = v.venueId     ORDER BY c.cited_paper_quality_score_normalized DESC     LIMIT 10 ), citation_trends AS (     SELECT tp.paperId, STRING_AGG(DISTINCT v.venueName, ', ') AS venues, STRING_AGG(DISTINCT CAST(tp.year AS TEXT), ', ') AS years     FROM target_papers tp     LEFT JOIN cite c ON tp.paperId = c.citedPaperId     LEFT JOIN paper p ON c.citingPaperId = p.paperId     LEFT JOIN venue v ON p.venueId = v.venueId     GROUP BY tp.paperId ), associated_datasets AS (     SELECT pd.paperId, STRING_AGG(DISTINCT d.datasetName, ', ') AS datasets     FROM target_papers tp     JOIN paperDataset pd ON tp.paperId = pd.paperId     JOIN dataset d ON pd.datasetId = d.datasetId     GROUP BY pd.paperId ), associated_keyphrases AS (     SELECT pk.paperId, STRING_AGG(DISTINCT k.keyphraseName, ', ') AS keyphrases     FROM target_papers tp     JOIN paperKeyphrase pk ON tp.paperId = pk.paperId     JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId     GROUP BY pk.paperId ) SELECT tp.paperId, tp.title, tp.year, tp.venueName, tp.paper_quality_score, tp.cited_paper_quality_score_normalized,        ct.venues, ct.years, ad.datasets, ak.keyphrases FROM target_papers tp LEFT JOIN citation_trends ct ON tp.paperId = ct.paperId LEFT JOIN associated_datasets ad ON tp.paperId = ad.paperId LEFT JOIN associated_keyphrases ak ON tp.paperId = ak.paperId;",
        "schema_links": [
            "paperKeyphrase.paperId",
            "venue.venueId",
            "keyphrase.keyphraseId",
            "cite.cited_paper_quality_score_normalized",
            "cite.citedPaperId",
            "writes.authorId",
            "paper.paperId",
            "paperDataset.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "paper.paper_quality_score",
            "dataset.datasetId",
            "author.authorName",
            "keyphrase.keyphraseName",
            "dataset.datasetName",
            "paper.title",
            "venue.venueName",
            "author.authorId",
            "cite.citingPaperId"
        ]
    },
    {
        "instance_id": "q_700",
        "db_id": "academic_research_data",
        "question": "Which research papers, published in venues with a citation density threshold exceeding 50 or closely aligned with the primary research interests of Peter Mertens and Dina Barbian, feature collaborations between these two authors, have received high-quality citations (normalized paper quality score greater than 0.8), or exhibit notable dataset usage trends (dataset download count exceeding 1,000)? Please include the paper ID, title, publication year, number of citations, paper quality score, associated dataset name, and dataset download count, ordered by the number of citations in descending order and then by paper quality score in descending order.",
        "query": " SELECT DISTINCT p.paperId, p.title, p.year, p.numCiting, p.paper_quality_score, d.datasetName, d.dataset_download_count FROM writes w1 JOIN writes w2 ON w1.paperId = w2.paperId JOIN author a1 ON w1.authorId = a1.authorId AND LOWER(a1.authorName) = 'peter mertens' JOIN author a2 ON w2.authorId = a2.authorId AND LOWER(a2.authorName) = 'dina barbian' JOIN paper p ON w1.paperId = p.paperId LEFT JOIN paperDataset pd ON p.paperId = pd.paperId LEFT JOIN dataset d ON pd.datasetId = d.datasetId JOIN venue v ON p.venueId = v.venueId WHERE (p.paper_quality_score_normalized > 0.8 OR (d.dataset_download_count IS NOT NULL AND d.dataset_download_count > 1000))   AND (v.citation_threshold > 50 OR p.paper_keywords_normalized && ARRAY(SELECT unnest(author_research_interests_normalized) FROM author WHERE authorId IN (a1.authorId, a2.authorId))) ORDER BY p.numCiting DESC, p.paper_quality_score DESC; ",
        "schema_links": [
            "paper.paper_keywords_normalized",
            "venue.citation_threshold",
            "venue.venueId",
            "paperDataset.datasetId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "author.author_research_interests_normalized",
            "paper.paper_quality_score",
            "dataset.datasetId",
            "paper.numCiting",
            "dataset.dataset_download_count",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "paperDataset.paperId",
            "paper.title",
            "author.authorId",
            "dataset.datasetName"
        ]
    },
    {
        "instance_id": "q_699",
        "db_id": "academic_research_data",
        "question": "Which research papers authored by Peter Mertens and Dina Barbian have received the highest normalized quality citations, categorized by citation source type, over the years? Additionally, for these papers, which datasets are most frequently associated, and what is the trend in their usage over time, measured by total dataset usage and the number of distinct years they have been updated?",
        "query": " WITH cited_papers AS (     SELECT          p.paperId,         p.title,         p.year,         c.cited_paper_quality_score_normalized,         c.paper_citation_source,         c.paper_citation_trend_normalized,         d.datasetId,         d.datasetName,         pd.dataset_paper_count     FROM          paper p     JOIN          writes w ON p.paperId = w.paperId     JOIN          author a ON w.authorId = a.authorId     JOIN          cite c ON p.paperId = c.citedPaperId     LEFT JOIN          paperDataset pd ON p.paperId = pd.paperId     LEFT JOIN          dataset d ON pd.datasetId = d.datasetId     WHERE          a.authorName IN ('Peter Mertens', 'Dina Barbian') ), ranked_citations AS (     SELECT          cp.paperId,         cp.title,         cp.year,         cp.cited_paper_quality_score_normalized,         cp.paper_citation_source,         cp.paper_citation_trend_normalized,         RANK() OVER (PARTITION BY cp.paperId ORDER BY cp.cited_paper_quality_score_normalized DESC) AS citation_rank     FROM          cited_papers cp ), dataset_usage_trend AS (     SELECT          cp.paperId,         cp.title,         cp.year,         d.datasetName,         SUM(cp.dataset_paper_count) AS total_dataset_usage,         COUNT(DISTINCT EXTRACT(YEAR FROM d.dataset_last_updated)) AS years_of_usage     FROM          cited_papers cp     JOIN          dataset d ON cp.datasetId = d.datasetId     GROUP BY          cp.paperId, cp.title, cp.year, d.datasetName ) SELECT      rc.paperId,     rc.title,     rc.year,     rc.cited_paper_quality_score_normalized,     rc.paper_citation_source,     rc.paper_citation_trend_normalized,     dt.datasetName,     dt.total_dataset_usage,     dt.years_of_usage FROM      ranked_citations rc LEFT JOIN      dataset_usage_trend dt ON rc.paperId = dt.paperId WHERE      rc.citation_rank = 1 ORDER BY      rc.cited_paper_quality_score_normalized DESC, rc.year; ",
        "schema_links": [
            "paper.title",
            "cite.cited_paper_quality_score_normalized",
            "cite.citedPaperId",
            "ranked_citations.paperId",
            "paper.paperId",
            "writes.paperId",
            "ranked_citations.paper_citation_source",
            "ranked_citations.cited_paper_quality_score_normalized",
            "dataset.datasetId",
            "paperDataset.paperId",
            "dataset_usage_trend.paperId",
            "author.authorId",
            "dataset.datasetName",
            "paperDataset.dataset_paper_count",
            "dataset_usage_trend.years_of_usage",
            "dataset_usage_trend.year",
            "cite.paper_citation_trend_normalized",
            "paperDataset.datasetId",
            "writes.authorId",
            "dataset_usage_trend.datasetName",
            "dataset_usage_trend.total_dataset_usage",
            "dataset.dataset_last_updated",
            "paper.year",
            "ranked_citations.paper_citation_trend_normalized",
            "dataset_usage_trend.title",
            "ranked_citations.year",
            "author.authorName",
            "cite.paper_citation_source",
            "ranked_citations.title"
        ]
    },
    {
        "instance_id": "q_696",
        "db_id": "academic_research_data",
        "question": "Which research papers co-authored by Peter Mertens and Dina Barbian have received the highest normalized quality citations, and how do these citations vary by source type and year? Specifically, list the paper IDs, titles, normalized quality citation scores, citation sources, and citation years, ordered first by descending normalized quality citation score and then by ascending citation year. Ensure that each author contributes distinctly to the co-authorship.",
        "query": " SELECT      p.paperId,     p.title,     c.cited_paper_quality_score_normalized AS quality_citation_score,     c.paper_citation_source AS citation_source,     c.year AS citation_year FROM      paper p JOIN      writes w1 ON p.paperId = w1.paperId JOIN      writes w2 ON p.paperId = w2.paperId JOIN      author a1 ON w1.authorId = a1.authorId JOIN      author a2 ON w2.authorId = a2.authorId JOIN      cite c ON p.paperId = c.citedPaperId WHERE      a1.authorName = 'Peter Mertens'      AND a2.authorName = 'Dina Barbian'      AND w1.authorId != w2.authorId ORDER BY      c.cited_paper_quality_score_normalized DESC,     c.year ASC; ",
        "schema_links": [
            "cite.cited_paper_quality_score_normalized",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "writes.paperId",
            "author.authorName",
            "cite.paper_citation_source",
            "paper.title",
            "cite.year",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_703",
        "db_id": "academic_research_data",
        "question": "What is the average citation quality trend of papers co-authored by Peter Mertens and Dina Barbian over the past five years, and how does it compare to the average citation quality trends of their individually authored papers during the same period?",
        "query": " WITH co_authored_papers AS (     SELECT DISTINCT p.paperId     FROM writes w1     JOIN writes w2 ON w1.paperId = w2.paperId     JOIN author a1 ON w1.authorId = a1.authorId AND a1.authorName = 'Peter Mertens'     JOIN author a2 ON w2.authorId = a2.authorId AND a2.authorName = 'Dina Barbian'     JOIN paper p ON w1.paperId = p.paperId     WHERE p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5 ), individual_papers_peter AS (     SELECT DISTINCT p.paperId     FROM writes w     JOIN author a ON w.authorId = a.authorId AND a.authorName = 'Peter Mertens'     JOIN paper p ON w.paperId = p.paperId     WHERE p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5 ), individual_papers_dina AS (     SELECT DISTINCT p.paperId     FROM writes w     JOIN author a ON w.authorId = a.authorId AND a.authorName = 'Dina Barbian'     JOIN paper p ON w.paperId = p.paperId     WHERE p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5 ), citation_trends AS (     SELECT          c.citedPaperId,         AVG(c.citing_paper_quality_score_normalized) AS avg_citation_quality     FROM cite c     JOIN co_authored_papers cap ON c.citedPaperId = cap.paperId     GROUP BY c.citedPaperId ), individual_citation_trends_peter AS (     SELECT          c.citedPaperId,         AVG(c.citing_paper_quality_score_normalized) AS avg_citation_quality_peter     FROM cite c     JOIN individual_papers_peter ipp ON c.citedPaperId = ipp.paperId     GROUP BY c.citedPaperId ), individual_citation_trends_dina AS (     SELECT          c.citedPaperId,         AVG(c.citing_paper_quality_score_normalized) AS avg_citation_quality_dina     FROM cite c     JOIN individual_papers_dina ipd ON c.citedPaperId = ipd.paperId     GROUP BY c.citedPaperId ) SELECT      ct.citedPaperId,     ct.avg_citation_quality AS co_author_citation_quality,     pct.avg_citation_quality_peter AS peter_citation_quality,     dct.avg_citation_quality_dina AS dina_citation_quality FROM citation_trends ct LEFT JOIN individual_citation_trends_peter pct ON ct.citedPaperId = pct.citedPaperId LEFT JOIN individual_citation_trends_dina dct ON ct.citedPaperId = dct.citedPaperId; ",
        "schema_links": [
            "writes.paperId",
            "paper.year",
            "cite.citing_paper_quality_score_normalized",
            "author.authorName",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_701",
        "db_id": "academic_research_data",
        "question": "Which papers authored by Peter Mertens and Dina Barbian have the highest normalized paper quality scores, and how do these scores vary across different venues and datasets? Additionally, identify the research keywords associated with these papers, their frequency of occurrence, and analyze the relevance trends of these keywords over time, ordered by year. Ensure that the analysis includes the paper titles, their normalized quality scores, venue names, dataset names, average quality scores across venues and datasets, keyword frequencies, and the years associated with these papers.",
        "query": " WITH authored_papers AS (     SELECT          w.paperId,         p.title,         p.paper_quality_score,         p.paper_quality_score_normalized,         v.venueName,         d.datasetName,         pk.keyphraseName,         p.year     FROM          writes w     JOIN          author a ON w.authorId = a.authorId     JOIN          paper p ON w.paperId = p.paperId     LEFT JOIN          venue v ON p.venueId = v.venueId     LEFT JOIN          paperDataset pd ON p.paperId = pd.paperId     LEFT JOIN          dataset d ON pd.datasetId = d.datasetId     LEFT JOIN          paperKeyphrase pk ON p.paperId = pk.paperId     WHERE          a.authorName IN ('Peter Mertens', 'Dina Barbian') ), highest_quality_scores AS (     SELECT          paperId,         title,         paper_quality_score_normalized,         venueName,         datasetName,         keyphraseName,         year     FROM          authored_papers     WHERE          paper_quality_score_normalized IS NOT NULL     ORDER BY          paper_quality_score_normalized DESC     LIMIT 10 ), score_variations AS (     SELECT          hqs.venueName,         hqs.datasetName,         AVG(hqs.paper_quality_score_normalized) AS avg_quality_score     FROM          highest_quality_scores hqs     GROUP BY          hqs.venueName, hqs.datasetName ), relevance_trends AS (     SELECT          hqs.keyphraseName,         hqs.year,         COUNT(*) AS keyword_frequency     FROM          highest_quality_scores hqs     GROUP BY          hqs.keyphraseName, hqs.year     ORDER BY          hqs.year ) SELECT      hqs.title,     hqs.paper_quality_score_normalized,     hqs.venueName,     hqs.datasetName,     sv.avg_quality_score,     rt.keyphraseName,     rt.keyword_frequency,     rt.year FROM      highest_quality_scores hqs LEFT JOIN      score_variations sv ON hqs.venueName = sv.venueName AND hqs.datasetName = sv.datasetName LEFT JOIN      relevance_trends rt ON hqs.keyphraseName = rt.keyphraseName; ",
        "schema_links": [
            "highest_quality_scores.paperId",
            "paper.paperId",
            "relevance_trends.keyphraseName",
            "writes.paperId",
            "paper.paper_quality_score",
            "dataset.datasetId",
            "paperDataset.paperId",
            "highest_quality_scores.year",
            "author.authorId",
            "dataset.datasetName",
            "relevance_trends.keyword_frequency",
            "paperKeyphrase.paperId",
            "highest_quality_scores.venueName",
            "venue.venueId",
            "paperDataset.datasetId",
            "paperKeyphrase.keyphraseName",
            "highest_quality_scores.title",
            "writes.authorId",
            "paper.venueId",
            "highest_quality_scores.keyphraseName",
            "paper.year",
            "relevance_trends.year",
            "score_variations.avg_quality_score",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "highest_quality_scores.paper_quality_score_normalized",
            "score_variations.datasetName",
            "paper.title",
            "venue.venueName",
            "highest_quality_scores.datasetName",
            "score_variations.venueName"
        ]
    },
    {
        "instance_id": "q_702",
        "db_id": "academic_research_data",
        "question": "Which papers authored by Peter Mertens and Dina Barbian have the highest paper quality scores, and what are their citation trends across different venues and years? Additionally, identify any datasets or keyphrases associated with these papers, and evaluate the normalized quality scores of these datasets and the weighted frequency of these keyphrases. Include the paper ID, title, publication year, venue name, venue type, and paper quality score in the results. Ensure that citation trends include the paper citation trend, citation source, citation category, normalized citing paper quality score, and normalized cited paper quality score. Provide dataset details such as dataset name, dataset paper count, and normalized paper dataset quality score. For keyphrases, include the keyphrase name and its normalized paper keyphrase weighted frequency.",
        "query": " WITH authored_papers AS (     SELECT          p.paperId,          p.title,          p.year,          p.venueId,          p.paper_quality_score,          p.paper_keywords_normalized_vector,         v.venueName,         v.venue_type     FROM          paper p     JOIN          writes w ON p.paperId = w.paperId     JOIN          author a ON w.authorId = a.authorId     JOIN          venue v ON p.venueId = v.venueId     WHERE          a.authorName IN ('Peter Mertens', 'Dina Barbian') ), highest_quality_papers AS (     SELECT          ap.paperId,          ap.title,          ap.year,          ap.venueName,          ap.venue_type,          ap.paper_quality_score     FROM          authored_papers ap     WHERE          ap.paper_quality_score = (             SELECT MAX(paper_quality_score)              FROM authored_papers         ) ), citation_trends AS (     SELECT          hqp.paperId,          c.paper_citation_trend,          c.paper_citation_source,          c.paper_citation_category,          c.citing_paper_quality_score_normalized,          c.cited_paper_quality_score_normalized     FROM          highest_quality_papers hqp     JOIN          cite c ON hqp.paperId = c.citedPaperId ), dataset_associations AS (     SELECT          hqp.paperId,          d.datasetName,          pd.dataset_paper_count,          pd.paper_dataset_quality_score_normalized     FROM          highest_quality_papers hqp     JOIN          paperDataset pd ON hqp.paperId = pd.paperId     JOIN          dataset d ON pd.datasetId = d.datasetId ), keyphrase_associations AS (     SELECT          hqp.paperId,          k.keyphraseName,          pk.paper_keyphrase_weighted_frequency_normalized     FROM          highest_quality_papers hqp     JOIN          paperKeyphrase pk ON hqp.paperId = pk.paperId     JOIN          keyphrase k ON pk.keyphraseId = k.keyphraseId ) SELECT      hqp.paperId,      hqp.title,      hqp.year,      hqp.venueName,      hqp.venue_type,      hqp.paper_quality_score,     ct.paper_citation_trend,      ct.paper_citation_source,      ct.paper_citation_category,      ct.citing_paper_quality_score_normalized,      ct.cited_paper_quality_score_normalized,     da.datasetName,      da.dataset_paper_count,      da.paper_dataset_quality_score_normalized,     ka.keyphraseName,      ka.paper_keyphrase_weighted_frequency_normalized FROM      highest_quality_papers hqp LEFT JOIN      citation_trends ct ON hqp.paperId = ct.paperId LEFT JOIN      dataset_associations da ON hqp.paperId = da.paperId LEFT JOIN      keyphrase_associations ka ON hqp.paperId = ka.paperId; ",
        "schema_links": [
            "paper.title",
            "cite.cited_paper_quality_score_normalized",
            "cite.citedPaperId",
            "paper.paperId",
            "writes.paperId",
            "paperKeyphrase.keyphraseId",
            "paperKeyphrase.paper_keyphrase_weighted_frequency_normalized",
            "paper.paper_quality_score",
            "dataset.datasetId",
            "cite.paper_citation_trend",
            "paperDataset.paper_dataset_quality_score_normalized",
            "paper.paper_keywords_normalized_vector",
            "keyphrase.keyphraseName",
            "paperDataset.paperId",
            "author.authorId",
            "dataset.datasetName",
            "paperDataset.dataset_paper_count",
            "cite.citing_paper_quality_score_normalized",
            "paperKeyphrase.paperId",
            "venue.venueId",
            "keyphrase.keyphraseId",
            "paperDataset.datasetId",
            "writes.authorId",
            "paper.venueId",
            "paper.year",
            "venue.venue_type",
            "author.authorName",
            "cite.paper_citation_source",
            "cite.paper_citation_category",
            "venue.venueName"
        ]
    },
    {
        "instance_id": "q_705",
        "db_id": "academic_research_data",
        "question": "Which research papers authored by Peter Mertens and Dina Barbian within the last five years have been cited by papers published in high-impact journals (with an impact factor greater than 5) or influential conferences? What is the average normalized quality score of these citations over time for each paper? Additionally, identify any datasets referenced by these papers, providing the dataset names and the number of times these datasets have been referenced. Evaluate the significance of these datasets based on their usage trends in subsequent research by counting the number of references they receive from other papers.",
        "query": " WITH RelevantPapers AS (     SELECT DISTINCT p.paperId, p.title, p.year, p.paper_quality_score_normalized     FROM paper p     JOIN writes w ON p.paperId = w.paperId     JOIN author a ON w.authorId = a.authorId     WHERE a.authorName IN ('Peter Mertens', 'Dina Barbian')       AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5 ), CitingPapers AS (     SELECT DISTINCT c.citedPaperId     FROM cite c     JOIN paper p ON c.citingPaperId = p.paperId     JOIN venue v ON p.venueId = v.venueId     LEFT JOIN journal j ON v.venueId = j.journalId     WHERE (j.impact_factor > 5 OR v.venue_type IN ('influential conference'))       AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5 ), PaperCitationTrend AS (     SELECT rp.paperId, rp.title, AVG(c.cited_paper_quality_score_normalized) AS avg_citation_quality     FROM RelevantPapers rp     JOIN cite c ON rp.paperId = c.citedPaperId     GROUP BY rp.paperId, rp.title ), ReferencedDatasets AS (     SELECT pd.datasetId, d.datasetName, COUNT(pd.paperId) AS reference_count     FROM RelevantPapers rp     JOIN paperDataset pd ON rp.paperId = pd.paperId     JOIN dataset d ON pd.datasetId = d.datasetId     GROUP BY pd.datasetId, d.datasetName ) SELECT      pct.paperId,      pct.title,      pct.avg_citation_quality,      rd.datasetName,      rd.reference_count FROM PaperCitationTrend pct LEFT JOIN ReferencedDatasets rd ON pct.paperId = rd.paperId; ",
        "schema_links": [
            "journal.journalId",
            "cite.cited_paper_quality_score_normalized",
            "cite.citedPaperId",
            "paper.paperId",
            "writes.paperId",
            "dataset.datasetId",
            "paperDataset.paperId",
            "author.authorId",
            "dataset.datasetName",
            "cite.citingPaperId",
            "venue.venueId",
            "paperDataset.datasetId",
            "writes.authorId",
            "paper.venueId",
            "paper.year",
            "venue.venue_type",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "journal.impact_factor",
            "paper.title"
        ]
    },
    {
        "instance_id": "q_711",
        "db_id": "academic_research_data",
        "question": "Which papers authored by Peter Mertens and Dina Barbian have the highest paper quality scores for each venue and year? Additionally, list any associated datasets with these papers and their usage counts. Provide the results ordered by year and venue, including the last updated year of the papers in UTC time zone.",
        "query": " WITH authored_papers AS (     SELECT          p.paperId,         p.title,         p.year,         p.paper_quality_score,         v.venueName,         d.datasetName,         pd.dataset_paper_count,         p.paper_last_updated AT TIME ZONE 'UTC' AS paper_last_updated_utc     FROM          writes w     JOIN          author a ON w.authorId = a.authorId     JOIN          paper p ON w.paperId = p.paperId     LEFT JOIN          venue v ON p.venueId = v.venueId     LEFT JOIN          paperDataset pd ON p.paperId = pd.paperId     LEFT JOIN          dataset d ON pd.datasetId = d.datasetId     WHERE          a.authorName IN ('Peter Mertens', 'Dina Barbian') ), ranked_papers AS (     SELECT          ap.paperId,         ap.title,         ap.year,         ap.paper_quality_score,         ap.venueName,         ap.datasetName,         ap.dataset_paper_count,         ROW_NUMBER() OVER (PARTITION BY ap.year, ap.venueName ORDER BY ap.paper_quality_score DESC) AS rank     FROM          authored_papers ap ) SELECT      rp.paperId,     rp.title,     rp.year,     rp.paper_quality_score,     rp.venueName,     rp.datasetName,     rp.dataset_paper_count,     EXTRACT(YEAR FROM rp.paper_last_updated_utc) AS last_updated_year FROM      ranked_papers rp WHERE      rp.rank = 1 ORDER BY      rp.year, rp.venueName; ",
        "schema_links": [
            "venue.venueId",
            "paperDataset.datasetId",
            "paper.paper_last_updated",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "paper.paper_quality_score",
            "dataset.datasetId",
            "author.authorName",
            "paperDataset.paperId",
            "dataset.datasetName",
            "paper.title",
            "venue.venueName",
            "author.authorId",
            "paperDataset.dataset_paper_count"
        ]
    },
    {
        "instance_id": "q_706",
        "db_id": "academic_research_data",
        "question": "Which papers authored by Peter Mertens and Dina Barbian have received citations from journals with above-average impact factors over the past five years, and what is the total normalized citation quality score contributed by these citations for each paper? List the results in descending order of the total citation quality score.",
        "query": " SELECT      p.paperId,      p.title,      SUM(c.cited_paper_quality_score_normalized) AS total_citation_quality_score FROM      paper p JOIN      writes w ON p.paperId = w.paperId JOIN      author a ON w.authorId = a.authorId JOIN      cite c ON p.paperId = c.citedPaperId JOIN      journal j ON c.citingPaperId = j.journalId WHERE      a.authorName IN ('Peter Mertens', 'Dina Barbian')     AND j.impact_factor > (SELECT AVG(impact_factor) FROM journal)     AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5 GROUP BY      p.paperId, p.title ORDER BY      total_citation_quality_score DESC; ",
        "schema_links": [
            "journal.journalId",
            "cite.cited_paper_quality_score_normalized",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "writes.paperId",
            "paper.year",
            "author.authorName",
            "journal.impact_factor",
            "paper.title",
            "author.authorId",
            "cite.citingPaperId"
        ]
    },
    {
        "instance_id": "q_708",
        "db_id": "academic_research_data",
        "question": "In which year did Peter Mertens and Dina Barbian co-author at least one paper, and how many distinct citations did these papers receive from high-impact journals (defined as journals with an impact factor greater than the average impact factor across all journals)? Additionally, list the names of the distinct high-impact journals that cited these papers, and present the results in chronological order based on the publication year.",
        "query": " SELECT      p.year AS publication_year,     COUNT(DISTINCT c.citedPaperId) AS citation_count,     STRING_AGG(DISTINCT j.journalName, ', ') AS citing_journals FROM      paper p JOIN      writes w1 ON p.paperId = w1.paperId JOIN      writes w2 ON p.paperId = w2.paperId JOIN      cite c ON p.paperId = c.citedPaperId JOIN      paper cp ON c.citingPaperId = cp.paperId JOIN      journal j ON cp.venueId = j.journalId JOIN      author a1 ON w1.authorId = a1.authorId JOIN      author a2 ON w2.authorId = a2.authorId WHERE      a1.authorName = 'Peter Mertens'     AND a2.authorName = 'Dina Barbian'     AND w1.authorId != w2.authorId     AND j.impact_factor > (SELECT AVG(impact_factor) FROM journal) GROUP BY      p.year ORDER BY      p.year; ",
        "schema_links": [
            "journal.journalName",
            "journal.journalId",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "author.authorName",
            "journal.impact_factor",
            "author.authorId",
            "cite.citingPaperId"
        ]
    },
    {
        "instance_id": "q_704",
        "db_id": "academic_research_data",
        "question": "What are the commonly explored research topics by Peter Mertens and Dina Barbian in their joint publications, ranked by topic frequency? Additionally, how have the citation trends and research impact of these topics evolved over time, presented chronologically by year?",
        "query": " WITH joint_publications AS (     SELECT w1.paperId     FROM writes w1     JOIN writes w2 ON w1.paperId = w2.paperId     JOIN author a1 ON w1.authorId = a1.authorId     JOIN author a2 ON w2.authorId = a2.authorId     WHERE a1.authorName = 'Peter Mertens' AND a2.authorName = 'Dina Barbian' ), research_topics AS (     SELECT pk.keyphraseId, k.keyphraseName, COUNT(*) AS topic_frequency     FROM joint_publications jp     JOIN paperKeyphrase pk ON jp.paperId = pk.paperId     JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId     GROUP BY pk.keyphraseId, k.keyphraseName     ORDER BY topic_frequency DESC ), citation_trends AS (     SELECT p.year, pk.keyphraseId, AVG(c.citing_paper_quality_score_normalized) AS avg_citation_impact     FROM joint_publications jp     JOIN paper p ON jp.paperId = p.paperId     JOIN paperKeyphrase pk ON jp.paperId = pk.paperId     JOIN cite c ON jp.paperId = c.citedPaperId     GROUP BY p.year, pk.keyphraseId     ORDER BY p.year ) SELECT rt.keyphraseName, rt.topic_frequency, ct.year, ct.avg_citation_impact FROM research_topics rt LEFT JOIN citation_trends ct ON rt.keyphraseId = ct.keyphraseId ORDER BY rt.topic_frequency DESC, ct.year; ",
        "schema_links": [
            "cite.citing_paper_quality_score_normalized",
            "citation_trends.year",
            "paperKeyphrase.paperId",
            "keyphrase.keyphraseId",
            "citation_trends.avg_citation_impact",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "writes.paperId",
            "paperKeyphrase.keyphraseId",
            "paper.year",
            "research_topics.keyphraseName",
            "research_topics.topic_frequency",
            "author.authorName",
            "keyphrase.keyphraseName",
            "joint_publications.paperId",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_713",
        "db_id": "academic_research_data",
        "question": "Which papers co-authored by Peter Mertens and Dina Barbian have the highest normalized citation quality scores, ranked separately by venue and year? For these papers, identify any associated datasets and evaluate their impact based on download counts and user ratings. Additionally, analyze the citation trends of these papers by calculating the average normalized quality score and total citation count of citing papers. Present the results ordered by descending normalized citation quality score, including the venue names for context.",
        "query": " WITH co_authored_papers AS (     SELECT          p.paperId,         p.title,         p.year,         p.venueId,         p.paper_quality_score_normalized AS citation_quality_score,         d.datasetId,         d.datasetName,         d.dataset_download_count,         d.dataset_user_rating     FROM          writes w1     JOIN          writes w2 ON w1.paperId = w2.paperId     JOIN          author a1 ON w1.authorId = a1.authorId AND a1.authorName = 'Peter Mertens'     JOIN          author a2 ON w2.authorId = a2.authorId AND a2.authorName = 'Dina Barbian'     JOIN          paper p ON w1.paperId = p.paperId     LEFT JOIN          paperDataset pd ON p.paperId = pd.paperId     LEFT JOIN          dataset d ON pd.datasetId = d.datasetId ), ranked_papers AS (     SELECT          paperId,         title,         year,         venueId,         citation_quality_score,         datasetId,         datasetName,         dataset_download_count,         dataset_user_rating,         RANK() OVER (PARTITION BY venueId ORDER BY citation_quality_score DESC) AS venue_rank,         RANK() OVER (PARTITION BY year ORDER BY citation_quality_score DESC) AS year_rank     FROM          co_authored_papers ), citation_trends AS (     SELECT          c.citedPaperId,         AVG(c.citing_paper_quality_score_normalized) AS avg_citation_quality,         COUNT(c.citingPaperId) AS citation_count     FROM          cite c     JOIN          ranked_papers rp ON c.citedPaperId = rp.paperId     GROUP BY          c.citedPaperId ) SELECT      rp.paperId,     rp.title,     rp.year,     v.venueName AS venue,     rp.citation_quality_score,     rp.datasetName,     rp.dataset_download_count,     rp.dataset_user_rating,     ct.avg_citation_quality,     ct.citation_count FROM      ranked_papers rp JOIN      venue v ON rp.venueId = v.venueId LEFT JOIN      citation_trends ct ON rp.paperId = ct.citedPaperId WHERE      rp.venue_rank = 1 OR rp.year_rank = 1 ORDER BY      rp.citation_quality_score DESC; ",
        "schema_links": [
            "dataset.dataset_user_rating",
            "cite.citedPaperId",
            "paper.paperId",
            "writes.paperId",
            "dataset.datasetId",
            "paperDataset.paperId",
            "author.authorId",
            "dataset.datasetName",
            "cite.citingPaperId",
            "cite.citing_paper_quality_score_normalized",
            "venue.venueId",
            "paperDataset.datasetId",
            "writes.authorId",
            "paper.venueId",
            "paper.year",
            "dataset.dataset_download_count",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "paper.title",
            "venue.venueName"
        ]
    },
    {
        "instance_id": "q_716",
        "db_id": "academic_research_data",
        "question": "Have Peter Mertens and Dina Barbian collaborated on any papers over the past five years that have significantly influenced the usage trends of specific datasets? If so, what are the average paper quality scores and normalized paper quality scores of these collaborations, as well as their average citation impact based on normalized cited paper quality scores, grouped by the influenced datasets?",
        "query": " WITH relevant_papers AS (     SELECT          w1.paperId     FROM          writes w1     JOIN          author a1 ON w1.authorId = a1.authorId     JOIN          writes w2 ON w1.paperId = w2.paperId     JOIN          author a2 ON w2.authorId = a2.authorId     WHERE          a1.authorName = 'Peter Mertens'          AND a2.authorName = 'Dina Barbian' ), dataset_influenced_papers AS (     SELECT          pd.paperId, pd.datasetId     FROM          paperDataset pd     JOIN          dataset d ON pd.datasetId = d.datasetId     WHERE          d.dataset_last_updated >= NOW() - INTERVAL '5 years' ), influential_collaborations AS (     SELECT          rp.paperId, dic.datasetId, p.paper_quality_score, p.paper_quality_score_normalized, c.cited_paper_quality_score_normalized     FROM          relevant_papers rp     JOIN          dataset_influenced_papers dic ON rp.paperId = dic.paperId     JOIN          paper p ON rp.paperId = p.paperId     LEFT JOIN          cite c ON p.paperId = c.citedPaperId ) SELECT      ic.datasetId,      AVG(ic.paper_quality_score) AS avg_paper_quality_score,      AVG(ic.paper_quality_score_normalized) AS avg_paper_quality_score_normalized,      AVG(ic.cited_paper_quality_score_normalized) AS avg_citation_impact FROM      influential_collaborations ic GROUP BY      ic.datasetId; ",
        "schema_links": [
            "paperDataset.datasetId",
            "cite.cited_paper_quality_score_normalized",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "dataset.dataset_last_updated",
            "writes.paperId",
            "paper.paper_quality_score",
            "dataset.datasetId",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "paperDataset.paperId",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_709",
        "db_id": "academic_research_data",
        "question": "Which research papers involve collaborations between Peter Mertens and Dina Barbian, where the papers have a normalized paper quality score greater than 0.8 and are published in venues with an impact factor greater than 5.0?",
        "query": " SELECT DISTINCT p.paperId, p.title, p.year, p.venueId, p.numCiting, p.paper_quality_score  FROM writes w1  JOIN writes w2 ON w1.paperId = w2.paperId AND w1.authorId != w2.authorId  JOIN author a1 ON w1.authorId = a1.authorId AND a1.authorName = 'Peter Mertens'  JOIN author a2 ON w2.authorId = a2.authorId AND a2.authorName = 'Dina Barbian'  JOIN paper p ON w1.paperId = p.paperId  JOIN venue v ON p.venueId = v.venueId  WHERE p.paper_quality_score_normalized > 0.8    AND v.impact_factor > 5.0; ",
        "schema_links": [
            "venue.impact_factor",
            "venue.venueId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "paper.paper_quality_score",
            "paper.numCiting",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "paper.title",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_712",
        "db_id": "academic_research_data",
        "question": "What are the research papers co-authored by Peter Mertens and Dina Barbian, including their citation trends over the past five years specifically from high-impact journals and conferences? Additionally, provide the quality ranking of these papers based on their average normalized quality score, the count of citations in venues with an impact factor greater than 5, and the count of citations in conference or journal venues, sorted primarily by descending average paper quality, then by descending high-impact citation count, and finally by descending conference/journal citation count.",
        "query": " WITH co_authored_papers AS (     SELECT DISTINCT w1.paperId     FROM writes w1     JOIN author a1 ON w1.authorId = a1.authorId AND LOWER(a1.authorName) = 'peter mertens'     JOIN writes w2 ON w1.paperId = w2.paperId     JOIN author a2 ON w2.authorId = a2.authorId AND LOWER(a2.authorName) = 'dina barbian' ), citation_trends AS (     SELECT          cp.paperId,         c.citedPaperId,         c.paper_citation_trend,         j.impact_factor,         v.venue_type     FROM co_authored_papers cp     JOIN cite c ON cp.paperId = c.citedPaperId     JOIN paper p ON c.citingPaperId = p.paperId     JOIN venue v ON p.venueId = v.venueId     LEFT JOIN journal j ON v.venueId = j.journalId     WHERE p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5 ), quality_ranking AS (     SELECT          ct.paperId,         AVG(p.paper_quality_score_normalized) AS avg_paper_quality,         COUNT(CASE WHEN ct.impact_factor > 5 THEN 1 END) AS high_impact_count,         COUNT(CASE WHEN ct.venue_type IN ('conference', 'journal') THEN 1 END) AS conference_journal_count     FROM citation_trends ct     JOIN paper p ON ct.paperId = p.paperId     GROUP BY ct.paperId ) SELECT      p.paperId,     p.title,     STRING_AGG(DISTINCT ct.paper_citation_trend, ', ') AS citation_trends,     qr.avg_paper_quality,     qr.high_impact_count,     qr.conference_journal_count FROM co_authored_papers cap JOIN paper p ON cap.paperId = p.paperId LEFT JOIN citation_trends ct ON p.paperId = ct.paperId LEFT JOIN quality_ranking qr ON p.paperId = qr.paperId GROUP BY p.paperId, p.title, qr.avg_paper_quality, qr.high_impact_count, qr.conference_journal_count ORDER BY qr.avg_paper_quality DESC, qr.high_impact_count DESC, qr.conference_journal_count DESC; ",
        "schema_links": [
            "journal.journalId",
            "venue.venueId",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "cite.paper_citation_trend",
            "author.authorName",
            "venue.venue_type",
            "paper.paper_quality_score_normalized",
            "journal.impact_factor",
            "paper.title",
            "author.authorId",
            "cite.citingPaperId"
        ]
    },
    {
        "instance_id": "q_720",
        "db_id": "academic_research_data",
        "question": "Which research papers have both Peter Mertens and Dina Barbian co-authored within the past five years, considering only those papers that have received citations with a normalized quality score greater than 0.8? Additionally, identify papers published in journals or conferences with an impact factor greater than 5 or specifically in 'High-Impact Journal A', 'High-Impact Journal B', or 'Top Conference C'. Rank the results by paper quality score in descending order, and then by keyword similarity score in descending order.",
        "query": " SELECT DISTINCT p.paperId, p.title, p.year, p.paper_quality_score, p.paper_keywords_similarity_score FROM writes w1 JOIN writes w2 ON w1.paperId = w2.paperId JOIN paper p ON w1.paperId = p.paperId LEFT JOIN cite c ON p.paperId = c.citedPaperId LEFT JOIN journal j ON p.venueId = j.journalId WHERE w1.authorId = (     SELECT authorId FROM author WHERE authorName = 'Peter Mertens' ) AND w2.authorId = (     SELECT authorId FROM author WHERE authorName = 'Dina Barbian' ) AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5 AND c.cited_paper_quality_score_normalized > 0.8 AND (j.impact_factor > 5 OR j.journalName IN ('High-Impact Journal A', 'High-Impact Journal B', 'Top Conference C')) ORDER BY p.paper_quality_score DESC, p.paper_keywords_similarity_score DESC; ",
        "schema_links": [
            "journal.journalName",
            "journal.journalId",
            "cite.cited_paper_quality_score_normalized",
            "cite.citedPaperId",
            "writes.authorId",
            "paper.paper_keywords_similarity_score",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "paper.paper_quality_score",
            "author.authorName",
            "journal.impact_factor",
            "paper.title",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_724",
        "db_id": "academic_research_data",
        "question": "Which research papers authored by Peter Mertens and Dina Barbian have been cited by papers published in high-impact journals, where high-impact is defined as having an impact factor greater than the average impact factor of all journals? For these cited papers, provide their titles and quality scores (both raw and normalized). Additionally, identify any trends in the usage of datasets associated with these papers over the past five years, including the names of the datasets and the count of their usage. If a paper has not been cited by any high-impact journal, include it with a corresponding indicator.",
        "query": " WITH cited_papers AS (     SELECT DISTINCT p.paperId, p.title, p.paper_quality_score, p.paper_quality_score_normalized     FROM paper p     JOIN writes w ON p.paperId = w.paperId     JOIN author a ON w.authorId = a.authorId     WHERE a.authorName IN ('Peter Mertens', 'Dina Barbian') ), citing_journals AS (     SELECT c.citedPaperId     FROM cite c     JOIN paper p ON c.citingPaperId = p.paperId     JOIN venue v ON p.venueId = v.venueId     WHERE v.impact_factor > (SELECT AVG(impact_factor) FROM journal) ), dataset_trends AS (     SELECT pd.paperId, d.datasetName, COUNT(*) AS usage_count     FROM paperDataset pd     JOIN dataset d ON pd.datasetId = d.datasetId     WHERE pd.paperId IN (SELECT paperId FROM cited_papers)       AND pd.dataset_paper_count > 0       AND d.dataset_last_updated >= NOW() - INTERVAL '5 years'     GROUP BY pd.paperId, d.datasetName ) SELECT cp.paperId, cp.title, cj.citedPaperId IS NOT NULL AS cited_by_high_impact_journal,        cp.paper_quality_score, cp.paper_quality_score_normalized,        dt.datasetName, dt.usage_count FROM cited_papers cp LEFT JOIN citing_journals cj ON cp.paperId = cj.citedPaperId LEFT JOIN dataset_trends dt ON cp.paperId = dt.paperId; ",
        "schema_links": [
            "cite.citedPaperId",
            "paper.paperId",
            "writes.paperId",
            "paper.paper_quality_score",
            "dataset.datasetId",
            "paperDataset.paperId",
            "author.authorId",
            "dataset.datasetName",
            "paperDataset.dataset_paper_count",
            "cite.citingPaperId",
            "venue.impact_factor",
            "venue.venueId",
            "dataset_trends.datasetName",
            "paperDataset.datasetId",
            "writes.authorId",
            "citing_journals.citedPaperId",
            "dataset.dataset_last_updated",
            "paper.venueId",
            "dataset_trends.usage_count",
            "dataset_trends.paperId",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "journal.impact_factor",
            "paper.title",
            "cited_papers.paperId"
        ]
    },
    {
        "instance_id": "q_715",
        "db_id": "academic_research_data",
        "question": "Which authors have the highest influence in the field of syntactic parsing, considering both the total number of citations received and the count of papers published in the last five years? Please list the top 10 authors based on these criteria, prioritizing total citations in descending order and using paper count as a tiebreaker.",
        "query": " SELECT      a.authorId,     a.authorName,     SUM(p.numCiting) AS total_citations,     COUNT(p.paperId) AS paper_count FROM      author a JOIN      writes w ON a.authorId = w.authorId JOIN      paper p ON w.paperId = p.paperId JOIN      cite c ON p.paperId = c.citedPaperId WHERE      p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5     AND 'syntactic parsing' = ANY(a.author_research_interests_normalized) GROUP BY      a.authorId, a.authorName ORDER BY      total_citations DESC, paper_count DESC LIMIT 10; ",
        "schema_links": [
            "writes.paperId",
            "paper.year",
            "author.author_research_interests_normalized",
            "paper.numCiting",
            "author.authorName",
            "cite.citedPaperId",
            "writes.authorId",
            "paper.paperId",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_718",
        "db_id": "academic_research_data",
        "question": "Which authors have the highest influence in the field of syntactic parsing, considering both their publication count and the normalized quality of citations received over the past five years, excluding any papers without open access status? Additionally, how does their research impact vary when measured through normalized citation quality specifically from venues classified as top-tier conferences or top-tier journals within the same time frame? Provide results for the top 10 authors ranked by total citations and average citation quality.",
        "query": " WITH influential_authors AS (     SELECT          w.authorId,         a.authorName,         SUM(p.numCitedBy) AS total_citations,         COUNT(w.paperId) AS publication_count,         AVG(c.cited_paper_quality_score_normalized) AS avg_citation_quality     FROM          writes w     JOIN          author a ON w.authorId = a.authorId     JOIN          paper p ON w.paperId = p.paperId     LEFT JOIN          cite c ON p.paperId = c.citedPaperId     WHERE          a.author_research_interests @> ARRAY['syntactic parsing']         AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5         AND p.is_open_access IS NOT NULL     GROUP BY          w.authorId, a.authorName     ORDER BY          total_citations DESC, avg_citation_quality DESC     LIMIT 10 ), top_tier_impact AS (     SELECT          ia.authorId,         ia.authorName,         SUM(CASE WHEN v.venue_type IN ('top-tier conference', 'top-tier journal') THEN c.cited_paper_quality_score_normalized ELSE 0 END) AS top_tier_citations     FROM          influential_authors ia     JOIN          writes w ON ia.authorId = w.authorId     JOIN          paper p ON w.paperId = p.paperId     LEFT JOIN          cite c ON p.paperId = c.citedPaperId     LEFT JOIN          venue v ON p.venueId = v.venueId     WHERE          p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5     GROUP BY          ia.authorId, ia.authorName ) SELECT      tti.authorId,     tti.authorName,     ia.total_citations,     ia.publication_count,     ia.avg_citation_quality,     tti.top_tier_citations FROM      top_tier_impact tti JOIN      influential_authors ia ON tti.authorId = ia.authorId ORDER BY      ia.total_citations DESC, ia.avg_citation_quality DESC; ",
        "schema_links": [
            "top_tier_impact.authorId",
            "venue.venueId",
            "cite.cited_paper_quality_score_normalized",
            "author.author_research_interests",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.is_open_access",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "influential_authors.authorId",
            "paper.numCitedBy",
            "venue.venue_type",
            "author.authorName"
        ]
    },
    {
        "instance_id": "q_717",
        "db_id": "academic_research_data",
        "question": "Which authors have the highest influence in their respective research areas, based on both the total quality of their publications and the total impact of citations received over the past five years, considering only papers published from 2018 to the present? Please rank the authors by descending order of their total publication quality and total citation impact, and return the top 10 results.",
        "query": " SELECT      a.authorId,     a.authorName,     a.author_research_interests,     SUM(p.paper_quality_score_normalized) AS total_paper_quality,     SUM(c.cited_paper_quality_score_normalized) AS total_citation_impact FROM      author a JOIN      writes w ON a.authorId = w.authorId JOIN      paper p ON w.paperId = p.paperId LEFT JOIN      cite c ON p.paperId = c.citedPaperId WHERE      p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5 GROUP BY      a.authorId, a.authorName, a.author_research_interests ORDER BY      total_paper_quality DESC, total_citation_impact DESC LIMIT 10; ",
        "schema_links": [
            "cite.cited_paper_quality_score_normalized",
            "author.author_research_interests",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "writes.paperId",
            "paper.year",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_723",
        "db_id": "academic_research_data",
        "question": "Which authors have the highest influence in the field of syntactic parsing, considering both the quality and quantity of their publications in the past 10 years, as well as the impact of their cited works in venues with above-average impact factors? Please rank the authors by total citations in descending order, followed by average paper quality in descending order, and then by publication count in descending order, and return the top 10 authors.",
        "query": " SELECT      a.authorId,     a.authorName,     SUM(p.numCiting) AS total_citations,     COUNT(w.paperId) AS publication_count,     AVG(p.paper_quality_score_normalized) AS avg_paper_quality FROM      author a JOIN      writes w ON a.authorId = w.authorId JOIN      paper p ON w.paperId = p.paperId JOIN      venue v ON p.venueId = v.venueId JOIN      cite c ON p.paperId = c.citedPaperId WHERE      a.author_research_interests_normalized @> ARRAY['syntactic parsing']     AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 10     AND v.impact_factor > (SELECT AVG(impact_factor) FROM journal) GROUP BY      a.authorId, a.authorName ORDER BY      total_citations DESC, avg_paper_quality DESC, publication_count DESC LIMIT 10; ",
        "schema_links": [
            "venue.impact_factor",
            "venue.venueId",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "author.author_research_interests_normalized",
            "paper.numCiting",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "journal.impact_factor",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_719",
        "db_id": "academic_research_data",
        "question": "Identify leading researchers in the field of syntactic parsing by evaluating their contributions over the past five years, considering the following criteria:  \n1. The number of papers published in top-tier journals, assessed by the normalized quality score of the papers and the average impact factor of the journals.  \n2. The total citations received for these papers.  \n3. The venues where these papers were published.  \n4. The extent of dataset usage in their research, measured by the count and quality of datasets associated with their papers.  \n5. The relevance of keyphrases related to \"syntactic parsing\" in their recent publications, evaluated by the weighted frequency of such keyphrases.  \n\nRank the researchers based on the total citations in descending order, followed by the average paper quality, total dataset quality, and total keyphrase weight, respectively. Include researchers who may not have dataset usage or keyphrase relevance by assigning zero values for those metrics.",
        "query": " WITH recent_papers AS (     SELECT          p.paperId,         p.title,         p.year,         p.paper_quality_score_normalized,         p.numCiting,         p.paper_keywords_normalized,         v.venueName,         j.impact_factor     FROM          paper p     JOIN          venue v ON p.venueId = v.venueId     LEFT JOIN          journal j ON v.venueId = j.journalId     WHERE          p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5         AND 'syntactic parsing' = ANY(p.paper_keywords_normalized)         AND j.impact_factor IS NOT NULL ), researcher_contribution AS (     SELECT          w.authorId,         a.authorName,         COUNT(DISTINCT rp.paperId) AS paper_count,         AVG(rp.paper_quality_score_normalized) AS avg_paper_quality,         SUM(rp.numCiting) AS total_citations,         STRING_AGG(DISTINCT rp.venueName, ', ') AS venues,         AVG(j.impact_factor) AS avg_journal_impact     FROM          writes w     JOIN          author a ON w.authorId = a.authorId     JOIN          recent_papers rp ON w.paperId = rp.paperId     LEFT JOIN          journal j ON rp.venueId = j.journalId     GROUP BY          w.authorId, a.authorName ), dataset_usage AS (     SELECT          w.authorId,         COUNT(DISTINCT pd.datasetId) AS dataset_count,         SUM(pd.paper_dataset_quality_score_normalized) AS total_dataset_quality     FROM          writes w     JOIN          paperDataset pd ON w.paperId = pd.paperId     JOIN          recent_papers rp ON w.paperId = rp.paperId     GROUP BY          w.authorId ), keyphrase_relevance AS (     SELECT          w.authorId,         COUNT(DISTINCT pk.keyphraseId) AS keyphrase_count,         SUM(pk.paper_keyphrase_weighted_frequency_normalized) AS total_keyphrase_weight     FROM          writes w     JOIN          paperKeyphrase pk ON w.paperId = pk.paperId     JOIN          recent_papers rp ON w.paperId = rp.paperId     WHERE          pk.keyphraseId IN (SELECT keyphraseId FROM keyphrase WHERE keyphraseName ILIKE '%syntactic parsing%')     GROUP BY          w.authorId ) SELECT      rc.authorId,     rc.authorName,     rc.paper_count,     rc.avg_paper_quality,     rc.total_citations,     rc.venues,     rc.avg_journal_impact,     COALESCE(du.dataset_count, 0) AS dataset_count,     COALESCE(du.total_dataset_quality, 0) AS total_dataset_quality,     COALESCE(kr.keyphrase_count, 0) AS keyphrase_count,     COALESCE(kr.total_keyphrase_weight, 0) AS total_keyphrase_weight FROM      researcher_contribution rc LEFT JOIN      dataset_usage du ON rc.authorId = du.authorId LEFT JOIN      keyphrase_relevance kr ON rc.authorId = kr.authorId ORDER BY      rc.total_citations DESC, rc.avg_paper_quality DESC, du.total_dataset_quality DESC, kr.total_keyphrase_weight DESC; ",
        "schema_links": [
            "journal.journalId",
            "paper.paper_keywords_normalized",
            "paper.paperId",
            "writes.paperId",
            "paperKeyphrase.keyphraseId",
            "paperKeyphrase.paper_keyphrase_weighted_frequency_normalized",
            "paperDataset.paper_dataset_quality_score_normalized",
            "paperDataset.paperId",
            "keyphrase.keyphraseName",
            "author.authorId",
            "dataset_usage.authorId",
            "paperKeyphrase.paperId",
            "recent_papers.venueId",
            "keyphrase_relevance.authorId",
            "venue.venueId",
            "keyphrase.keyphraseId",
            "paperDataset.datasetId",
            "writes.authorId",
            "recent_papers.paperId",
            "paper.venueId",
            "paper.year",
            "paper.numCiting",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "journal.impact_factor",
            "paper.title",
            "venue.venueName"
        ]
    },
    {
        "instance_id": "q_727",
        "db_id": "academic_research_data",
        "question": "Which researchers, whose research interests include syntactic parsing, have the highest influence in this field over the past decade (2013 to present)? Influence should be measured by the total number of citations received across their publications, the count of their published papers, the average quality score of their papers (normalized), the number of distinct datasets they have engaged with, and their participation in conferences related to syntactic parsing. Please rank the results first by total citations in descending order, then by average paper quality, dataset engagement, and conference engagement, respectively, and limit the output to the top 10 researchers.",
        "query": " SELECT      a.authorId,     a.authorName,     SUM(p.numCiting) AS total_citations,     COUNT(p.paperId) AS paper_count,     AVG(p.paper_quality_score_normalized) AS avg_paper_quality,     COUNT(DISTINCT pd.datasetId) AS dataset_engagement,     COUNT(DISTINCT w.paperId) FILTER (WHERE v.venueName ILIKE '%syntactic parsing%' AND p.year >= 2013) AS conference_engagement FROM      author a JOIN      writes w ON a.authorId = w.authorId JOIN      paper p ON w.paperId = p.paperId LEFT JOIN      paperDataset pd ON p.paperId = pd.paperId LEFT JOIN      venue v ON p.venueId = v.venueId WHERE      p.year >= 2013     AND 'syntactic parsing' = ANY(a.author_research_interests_normalized) GROUP BY      a.authorId, a.authorName ORDER BY      total_citations DESC, avg_paper_quality DESC, dataset_engagement DESC, conference_engagement DESC LIMIT 10; ",
        "schema_links": [
            "venue.venueId",
            "paperDataset.datasetId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "author.author_research_interests_normalized",
            "paper.numCiting",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "paperDataset.paperId",
            "venue.venueName",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_725",
        "db_id": "academic_research_data",
        "question": "Which authors have the highest influence in the field of syntactic parsing, considering both the quantity and quality of their publications over the past five years, as well as the normalized trend of citations received by their papers? Please rank the authors based on the total number of citations, average normalized paper quality score, and the sum of normalized citation trend scores, and return the top 10 results.",
        "query": " SELECT      a.authorId,     a.authorName,     SUM(p.numCiting) AS total_citations,     AVG(p.paper_quality_score_normalized) AS avg_paper_quality,     SUM(c.paper_citation_trend_normalized) AS citation_trend_score FROM      author a JOIN      writes w ON a.authorId = w.authorId JOIN      paper p ON w.paperId = p.paperId JOIN      cite c ON p.paperId = c.citedPaperId WHERE      a.author_research_interests_normalized @> ARRAY['syntactic parsing']     AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5 GROUP BY      a.authorId, a.authorName ORDER BY      total_citations DESC, avg_paper_quality DESC, citation_trend_score DESC LIMIT 10; ",
        "schema_links": [
            "cite.paper_citation_trend_normalized",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "writes.paperId",
            "paper.year",
            "author.author_research_interests_normalized",
            "paper.numCiting",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_736",
        "db_id": "academic_research_data",
        "question": "Which researchers in the field of syntactic parsing have the highest overall research impact, considering their total publication count, the quality of citations received over the past five years, and their average contribution to collaborations with other authors? Please provide the top 10 researchers ranked by their overall research impact, calculated as the product of their publication count, citation quality score, and average co-author contribution.",
        "query": " WITH recent_citations AS (     SELECT          c.citedPaperId,         SUM(c.citing_paper_quality_score_normalized) AS total_citation_quality     FROM          cite c     JOIN          paper p ON c.citedPaperId = p.paperId     WHERE          p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5     GROUP BY          c.citedPaperId ), author_influence AS (     SELECT          w.authorId,         a.authorName,         a.publication_count,         COALESCE(SUM(rc.total_citation_quality), 0) AS citation_quality_score,         COUNT(DISTINCT w.paperId) AS recent_paper_count,         AVG(w.writes_co_author_contribution_normalized) AS avg_co_author_contribution     FROM          writes w     JOIN          author a ON w.authorId = a.authorId     LEFT JOIN          recent_citations rc ON w.paperId = rc.citedPaperId     JOIN          paper p ON w.paperId = p.paperId     WHERE          'syntactic parsing' = ANY(p.paper_keywords_normalized)     GROUP BY          w.authorId, a.authorName, a.publication_count ) SELECT      ai.authorId,     ai.authorName,     ai.publication_count,     ai.citation_quality_score,     ai.recent_paper_count,     ai.avg_co_author_contribution,     (ai.publication_count * ai.citation_quality_score * ai.avg_co_author_contribution) AS overall_research_impact FROM      author_influence ai ORDER BY      overall_research_impact DESC LIMIT 10; ",
        "schema_links": [
            "cite.citing_paper_quality_score_normalized",
            "paper.paper_keywords_normalized",
            "recent_citations.total_citation_quality",
            "recent_citations.citedPaperId",
            "cite.citedPaperId",
            "writes.authorId",
            "paper.paperId",
            "writes.writes_co_author_contribution_normalized",
            "writes.paperId",
            "paper.year",
            "author.publication_count",
            "author.authorName",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_730",
        "db_id": "academic_research_data",
        "question": "Which researchers have the highest influence in the field of syntactic parsing, considering both the quantity and quality of their publications over the past five years, as well as the average impact factor of the venues where their papers were published? Influence is measured by the sum of normalized quality-weighted citations across all papers, the total number of co-authors, and the count of distinct publications. Results are limited to the top 10 researchers, ranked first by weighted citation score, then by average impact factor, and finally by publication count.",
        "query": " SELECT      a.authorId,     a.authorName,     SUM(p.numCiting * p.paper_quality_score_normalized) AS weighted_citation_score,     SUM(w.co_author_count) AS total_co_authors,     COUNT(DISTINCT p.paperId) AS paper_count,     AVG(j.impact_factor) AS avg_impact_factor FROM      author a JOIN      writes w ON a.authorId = w.authorId JOIN      paper p ON w.paperId = p.paperId JOIN      venue v ON p.venueId = v.venueId LEFT JOIN      journal j ON v.venueId = j.journalId WHERE      a.author_research_interests_normalized @> ARRAY['syntactic parsing']     AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5 GROUP BY      a.authorId, a.authorName ORDER BY      weighted_citation_score DESC, avg_impact_factor DESC, paper_count DESC LIMIT 10; ",
        "schema_links": [
            "journal.journalId",
            "venue.venueId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "author.author_research_interests_normalized",
            "paper.numCiting",
            "writes.co_author_count",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "journal.impact_factor",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_726",
        "db_id": "academic_research_data",
        "question": "How many distinct research articles has David M. Blei contributed to in conferences over the past 5 years, where he was among the top 3 cited authors for each article?",
        "query": " SELECT COUNT(DISTINCT p.paperId) AS article_count FROM paper p JOIN writes w ON p.paperId = w.paperId JOIN author a ON w.authorId = a.authorId JOIN venue v ON p.venueId = v.venueId WHERE a.authorName = 'David M. Blei' AND v.venue_type = 'conference' AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5 AND w.paperId IN (     SELECT wc.paperId     FROM writes wc     JOIN (         SELECT w2.paperId, w2.authorId, RANK() OVER (PARTITION BY w2.paperId ORDER BY SUM(w2.co_author_network) DESC) as citation_rank         FROM writes w2         JOIN paper p2 ON w2.paperId = p2.paperId         WHERE p2.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5         GROUP BY w2.paperId, w2.authorId     ) ranked_authors ON wc.paperId = ranked_authors.paperId AND wc.authorId = ranked_authors.authorId     WHERE ranked_authors.citation_rank <= 3 ); ",
        "schema_links": [
            "venue.venueId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "venue.venue_type",
            "author.authorName",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_728",
        "db_id": "academic_research_data",
        "question": "How many research articles has David M. Blei contributed to in conferences, specifically within the AISTATS venue, where the papers have a citation quality score above the average paper quality score of all papers published in AISTATS?",
        "query": " WITH avg_citation_quality_score AS (     SELECT AVG(paper_quality_score) AS avg_score     FROM paper     WHERE venueId IN (SELECT venueId FROM venue WHERE venueName = 'AISTATS') ) SELECT COUNT(*) AS article_count FROM paper p JOIN writes w ON p.paperId = w.paperId JOIN author a ON w.authorId = a.authorId JOIN venue v ON p.venueId = v.venueId JOIN avg_citation_quality_score acqs ON TRUE WHERE a.authorName = 'David M. Blei' AND v.venue_type = 'conference' AND p.paper_quality_score > acqs.avg_score; ",
        "schema_links": [
            "writes.paperId",
            "venue.venueName",
            "paper.paper_quality_score",
            "venue.venue_type",
            "author.authorName",
            "venue.venueId",
            "writes.authorId",
            "paper.paperId",
            "author.authorId",
            "paper.venueId"
        ]
    },
    {
        "instance_id": "q_729",
        "db_id": "academic_research_data",
        "question": "What is the yearly trend of David M. Blei's research impact from 2000 to 2023, measured by the number of publications, the average quality score of these publications in venues with an impact factor of 3.0 or higher, and the total number of co-authors involved in these publications?",
        "query": " SELECT      p.year AS publication_year,     COUNT(p.paperId) AS publication_count,     AVG(p.paper_quality_score_normalized) AS avg_paper_quality_score,     SUM(w.co_author_count) AS total_co_author_count FROM      paper p JOIN      writes w ON p.paperId = w.paperId JOIN      venue v ON p.venueId = v.venueId JOIN      author a ON w.authorId = a.authorId WHERE      a.authorName = 'David M. Blei'     AND v.impact_factor >= 3.0 GROUP BY      p.year ORDER BY      p.year ASC; ",
        "schema_links": [
            "venue.impact_factor",
            "venue.venueId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "writes.co_author_count",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_733",
        "db_id": "academic_research_data",
        "question": "How many research papers has David M. Blei published in the last five years in conferences or journals with a citation threshold higher than the average citation threshold of all journals? Additionally, provide the year-wise trend of citations received by these papers over the same five-year period.",
        "query": " WITH high_citation_density_venues AS (     SELECT venueId     FROM venue     WHERE venue_type IN ('conference', 'journal')        AND citation_threshold > (SELECT AVG(citation_threshold) FROM journal) ), david_blei_papers AS (     SELECT w.paperId, p.year     FROM writes w     JOIN author a ON w.authorId = a.authorId     JOIN paper p ON w.paperId = p.paperId     WHERE a.authorName = 'David M. Blei'       AND p.venueId IN (SELECT venueId FROM high_citation_density_venues)       AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5 ), citation_trends AS (     SELECT c.citedPaperId, SUM(c.paper_citation_trend_normalized) AS citation_trend     FROM cite c     JOIN david_blei_papers dbp ON c.citedPaperId = dbp.paperId     GROUP BY c.citedPaperId ) SELECT COUNT(*) AS paper_count, JSON_OBJECT_AGG(dbp.year, ct.citation_trend) AS citation_trend_over_years FROM david_blei_papers dbp LEFT JOIN citation_trends ct ON dbp.paperId = ct.citedPaperId; ",
        "schema_links": [
            "venue.citation_threshold",
            "venue.venueId",
            "cite.paper_citation_trend_normalized",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "journal.citation_threshold",
            "venue.venue_type",
            "author.authorName",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_731",
        "db_id": "academic_research_data",
        "question": "How many distinct research papers has David M. Blei published in conferences or journals with a normalized citation quality score greater than 0.8 over the past five years, and what is the citation trend of these papers?",
        "query": " SELECT      COUNT(DISTINCT p.paperId) AS paper_count,     c.paper_citation_trend AS citation_trend FROM      author a JOIN      writes w ON a.authorId = w.authorId JOIN      paper p ON w.paperId = p.paperId LEFT JOIN      cite c ON p.paperId = c.citedPaperId JOIN      venue v ON p.venueId = v.venueId WHERE      a.authorName = 'David M. Blei'     AND (v.venue_type = 'conference' OR v.venue_type = 'journal')     AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5     AND c.cited_paper_quality_score_normalized > 0.8 GROUP BY      c.paper_citation_trend; ",
        "schema_links": [
            "venue.venueId",
            "cite.cited_paper_quality_score_normalized",
            "cite.citedPaperId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "venue.venue_type",
            "author.authorName",
            "cite.paper_citation_trend",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_735",
        "db_id": "academic_research_data",
        "question": "How many distinct papers authored by David M. Blei have been cited by papers in datasets with a normalized quality score higher than 0.8, where the citing papers also have a normalized quality score higher than 0.8 and a positive citation trend over the past five years? Additionally, provide the citation trend for these papers.",
        "query": " SELECT COUNT(DISTINCT p.paperId) AS paper_count, c.paper_citation_trend FROM writes w JOIN author a ON w.authorId = a.authorId JOIN paper p ON w.paperId = p.paperId JOIN cite c ON p.paperId = c.citedPaperId JOIN paperDataset pd ON c.citingPaperId = pd.paperId WHERE a.authorName = 'David M. Blei'   AND pd.paper_dataset_quality_score_normalized > 0.8   AND c.cited_paper_quality_score_normalized > 0.8   AND c.paper_citation_trend_normalized > 0   AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5 GROUP BY c.paper_citation_trend; ",
        "schema_links": [
            "cite.cited_paper_quality_score_normalized",
            "cite.paper_citation_trend_normalized",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "writes.paperId",
            "paper.year",
            "cite.paper_citation_trend",
            "author.authorName",
            "paperDataset.paper_dataset_quality_score_normalized",
            "paperDataset.paperId",
            "author.authorId",
            "cite.citingPaperId"
        ]
    },
    {
        "instance_id": "q_738",
        "db_id": "academic_research_data",
        "question": "What is the yearly trend of David M. Blei's research impact from 2000 to 2023, measured by the number of publications in conferences and journals, the average quality score of these publications, and the total quality score of citations received, considering only citations from papers published in conferences and journals?",
        "query": " SELECT      p.year AS publication_year,     COUNT(DISTINCT p.paperId) AS publication_count,     AVG(p.paper_quality_score_normalized) AS avg_paper_quality_score,     SUM(c.cited_paper_quality_score_normalized) AS total_citation_quality_score FROM      writes w JOIN      author a ON w.authorId = a.authorId JOIN      paper p ON w.paperId = p.paperId LEFT JOIN      cite c ON p.paperId = c.citedPaperId WHERE      a.authorName = 'David M. Blei'     AND p.venueId IN (         SELECT v.venueId          FROM venue v          WHERE v.venue_type IN ('conference', 'journal')     ) GROUP BY      p.year ORDER BY      p.year ASC; ",
        "schema_links": [
            "venue.venueId",
            "cite.cited_paper_quality_score_normalized",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "venue.venue_type",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_732",
        "db_id": "academic_research_data",
        "question": "How many research papers has David M. Blei published in conferences over his entire career, and what is the year-by-year trend of his citations for the past five years?",
        "query": " WITH david_m_blei_papers AS (     SELECT          p.paperId,          p.year,          p.numCiting     FROM          paper p     JOIN          writes w ON p.paperId = w.paperId     JOIN          author a ON w.authorId = a.authorId     JOIN          venue v ON p.venueId = v.venueId     WHERE          a.authorName = 'David M. Blei'          AND v.venue_type = 'conference' ), citation_trend AS (     SELECT          year,          SUM(numCiting) AS total_citations     FROM          david_m_blei_papers     WHERE          year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5     GROUP BY          year     ORDER BY          year ) SELECT      (SELECT COUNT(*) FROM david_m_blei_papers) AS total_conference_papers,     array_agg(ARRAY[year, total_citations] ORDER BY year) AS citation_trend_over_five_years FROM      citation_trend; ",
        "schema_links": [
            "writes.paperId",
            "paper.year",
            "paper.numCiting",
            "venue.venue_type",
            "author.authorName",
            "venue.venueId",
            "writes.authorId",
            "paper.paperId",
            "author.authorId",
            "paper.venueId"
        ]
    },
    {
        "instance_id": "q_734",
        "db_id": "academic_research_data",
        "question": "Which papers published in EMNLP in the year 2010 have the highest average quality of citations, considering both the normalized quality score of citing papers and the normalized trend of citations over time, ranked first by average citation quality and second by citation trend?",
        "query": " SELECT      p.paperId,      p.title,      AVG(c.citing_paper_quality_score_normalized) AS avg_citation_quality,     c.paper_citation_trend_normalized AS citation_trend FROM      paper p JOIN      cite c ON p.paperId = c.citedPaperId JOIN      venue v ON p.venueId = v.venueId WHERE      v.venueName = 'EMNLP'      AND p.year = 2010 GROUP BY      p.paperId, p.title, c.paper_citation_trend_normalized ORDER BY      avg_citation_quality DESC, citation_trend DESC LIMIT 10; ",
        "schema_links": [
            "cite.citing_paper_quality_score_normalized",
            "venue.venueId",
            "cite.paper_citation_trend_normalized",
            "cite.citedPaperId",
            "paper.paperId",
            "paper.venueId",
            "paper.year",
            "paper.title",
            "venue.venueName"
        ]
    },
    {
        "instance_id": "q_737",
        "db_id": "academic_research_data",
        "question": "Which paper published in EMNLP in 2010 received the highest weighted citation quality, calculated as the sum of the normalized quality scores of citing papers multiplied by their normalized citation trends over time?",
        "query": " SELECT      p.paperId,     p.title,     SUM(c.citing_paper_quality_score_normalized * c.paper_citation_trend_normalized) AS weighted_citation_quality FROM      paper p JOIN      cite c ON p.paperId = c.citedPaperId JOIN      venue v ON p.venueId = v.venueId WHERE      v.venueName = 'EMNLP'      AND p.year = 2010 GROUP BY      p.paperId, p.title ORDER BY      weighted_citation_quality DESC LIMIT 1; ",
        "schema_links": [
            "cite.citing_paper_quality_score_normalized",
            "paper.year",
            "venue.venueName",
            "venue.venueId",
            "cite.paper_citation_trend_normalized",
            "cite.citedPaperId",
            "paper.title",
            "paper.paperId",
            "paper.venueId"
        ]
    },
    {
        "instance_id": "q_739",
        "db_id": "academic_research_data",
        "question": "Which papers published in EMNLP in 2010 have the highest citation quality scores and are most frequently associated with datasets that have a user rating of 4.5 or higher?",
        "query": " SELECT      p.paperId,      p.title,      p.paper_quality_score AS citation_quality_score,      SUM(pd.dataset_paper_count) AS total_dataset_associations FROM      paper p JOIN      venue v ON p.venueId = v.venueId JOIN      paperDataset pd ON p.paperId = pd.paperId JOIN      dataset d ON pd.datasetId = d.datasetId WHERE      v.venueName = 'EMNLP'      AND p.year = 2010      AND d.dataset_user_rating >= 4.5 GROUP BY      p.paperId, p.title, p.paper_quality_score ORDER BY      p.paper_quality_score DESC,      total_dataset_associations DESC LIMIT 10; ",
        "schema_links": [
            "dataset.dataset_user_rating",
            "venue.venueId",
            "paperDataset.datasetId",
            "paper.paperId",
            "paper.venueId",
            "paper.year",
            "paper.paper_quality_score",
            "dataset.datasetId",
            "paperDataset.paperId",
            "paper.title",
            "venue.venueName",
            "paperDataset.dataset_paper_count"
        ]
    },
    {
        "instance_id": "q_741",
        "db_id": "academic_research_data",
        "question": "Which papers published in EMNLP in 2010 have received the highest total quality citations, considering only citations with a positive trend over time, and ranked by the sum of normalized quality scores of citing papers?",
        "query": " SELECT      p.paperId,      p.title,      SUM(c.citing_paper_quality_score_normalized) AS total_quality_citations FROM      paper p JOIN      cite c ON p.paperId = c.citedPaperId JOIN      venue v ON p.venueId = v.venueId WHERE      v.venueName = 'EMNLP'      AND p.year = 2010     AND c.paper_citation_trend_normalized > 0 GROUP BY      p.paperId, p.title ORDER BY      total_quality_citations DESC LIMIT 10; ",
        "schema_links": [
            "cite.citing_paper_quality_score_normalized",
            "paper.year",
            "venue.venueName",
            "venue.venueId",
            "cite.paper_citation_trend_normalized",
            "cite.citedPaperId",
            "paper.title",
            "paper.paperId",
            "paper.venueId"
        ]
    },
    {
        "instance_id": "q_744",
        "db_id": "academic_research_data",
        "question": "Which research articles in the field of computer vision, specifically those discussing multi-modal data fusion techniques with binary features applied to RGB-D datasets, were presented at conferences held in North America in 2016? Additionally, what was the influence of these papers over the subsequent years, as measured by the total normalized quality score of citing papers and the average h-index of their authors? Only include papers that have been cited at least once, and rank the results first by descending total citation influence and then by descending average author h-index.",
        "query": " SELECT      p.paperId,     p.title,     p.year,     v.venueName,     SUM(c.citing_paper_quality_score_normalized) AS total_citation_influence,     AVG(a.h_index) AS avg_author_h_index FROM      paper p JOIN      venue v ON p.venueId = v.venueId JOIN      writes w ON p.paperId = w.paperId JOIN      author a ON w.authorId = a.authorId LEFT JOIN      cite c ON p.paperId = c.citedPaperId JOIN      paperKeyphrase pk ON p.paperId = pk.paperId JOIN      keyphrase k ON pk.keyphraseId = k.keyphraseId WHERE      v.venue_type = 'conference'     AND v.venue_location = 'North America'     AND p.year = 2016     AND p.paper_keywords @> ARRAY['computer vision', 'multi-modal data fusion', 'binary features', 'RGB-D datasets']     AND k.keyphraseName IN ('computer vision', 'multi-modal data fusion', 'binary features', 'RGB-D datasets') GROUP BY      p.paperId, p.title, p.year, v.venueName HAVING      COUNT(DISTINCT c.citingPaperId) > 0 ORDER BY      total_citation_influence DESC, avg_author_h_index DESC; ",
        "schema_links": [
            "cite.citing_paper_quality_score_normalized",
            "paper.paper_keywords",
            "paperKeyphrase.paperId",
            "venue.venueId",
            "keyphrase.keyphraseId",
            "cite.citedPaperId",
            "venue.venue_location",
            "writes.authorId",
            "paper.paperId",
            "writes.paperId",
            "paper.year",
            "paperKeyphrase.keyphraseId",
            "author.h_index",
            "venue.venue_type",
            "keyphrase.keyphraseName",
            "paper.title",
            "venue.venueName",
            "author.authorId",
            "cite.citingPaperId"
        ]
    },
    {
        "instance_id": "q_740",
        "db_id": "academic_research_data",
        "question": "Which research articles published at CVPR in 2016 explored the integration of binary features for multi-modal fusion, specifically focusing on their application to RGB-D object datasets? Additionally, compare the citation trends of these papers with similar works over time, considering both the quality scores and dataset usage details. Provide results sorted by the number of citations in descending order, followed by paper quality score in descending order.",
        "query": " SELECT      p.paperId,     p.title,     p.numCiting,     p.paper_quality_score,     p.paper_keywords,     c.paper_citation_trend,     d.datasetName FROM      paper p JOIN      venue v ON p.venueId = v.venueId JOIN      paperDataset pd ON p.paperId = pd.paperId JOIN      dataset d ON pd.datasetId = d.datasetId LEFT JOIN      cite c ON p.paperId = c.citedPaperId WHERE      v.venueName = 'CVPR'      AND p.year = 2016      AND d.datasetName LIKE '%RGB-D%'      AND p.paper_keywords @> ARRAY['binary features', 'multi-modal fusion', 'object datasets'] GROUP BY      p.paperId, p.title, p.numCiting, p.paper_quality_score, p.paper_keywords, c.paper_citation_trend, d.datasetName ORDER BY      p.numCiting DESC, p.paper_quality_score DESC; ",
        "schema_links": [
            "paper.paper_keywords",
            "venue.venueId",
            "paperDataset.datasetId",
            "cite.citedPaperId",
            "paper.paperId",
            "paper.venueId",
            "paper.year",
            "paper.paper_quality_score",
            "dataset.datasetId",
            "paper.numCiting",
            "cite.paper_citation_trend",
            "paperDataset.paperId",
            "paper.title",
            "venue.venueName",
            "dataset.datasetName"
        ]
    },
    {
        "instance_id": "q_742",
        "db_id": "academic_research_data",
        "question": "Which research topics and datasets are most frequently associated with publications authored by Luke Zettlemoyer over the past five years, and how have the citation quality and usage trends of these publications evolved during this period, ordered by year in descending order, citation count in descending order, and average citation quality in descending order?",
        "query": " WITH luke_papers AS (     SELECT p.paperId, p.year, p.paper_quality_score_normalized, p.numCiting, p.numCitedBy     FROM paper p     INNER JOIN writes w ON p.paperId = w.paperId     INNER JOIN author a ON w.authorId = a.authorId     WHERE a.authorName = 'Luke Zettlemoyer' AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5 ), paper_topics AS (     SELECT pk.paperId, STRING_AGG(DISTINCT k.keyphraseName, ', ') AS research_topics     FROM paperKeyphrase pk     INNER JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId     GROUP BY pk.paperId ), paper_datasets AS (     SELECT pd.paperId, STRING_AGG(DISTINCT d.datasetName, ', ') AS associated_datasets     FROM paperDataset pd     INNER JOIN dataset d ON pd.datasetId = d.datasetId     GROUP BY pd.paperId ), citation_quality_trends AS (     SELECT          l.paperId,          AVG(c.citing_paper_quality_score_normalized) AS avg_citation_quality,         COUNT(c.citingPaperId) AS citation_count     FROM luke_papers l     LEFT JOIN cite c ON l.paperId = c.citedPaperId     GROUP BY l.paperId ) SELECT      lt.paperId,      pt.research_topics,      pd.associated_datasets,      lt.year,      ct.avg_citation_quality,      ct.citation_count,      lt.paper_quality_score_normalized FROM luke_papers lt LEFT JOIN paper_topics pt ON lt.paperId = pt.paperId LEFT JOIN paper_datasets pd ON lt.paperId = pd.paperId LEFT JOIN citation_quality_trends ct ON lt.paperId = ct.paperId ORDER BY lt.year DESC, ct.citation_count DESC, ct.avg_citation_quality DESC; ",
        "schema_links": [
            "cite.citedPaperId",
            "paper.paperId",
            "writes.paperId",
            "paperKeyphrase.keyphraseId",
            "dataset.datasetId",
            "paper.numCitedBy",
            "keyphrase.keyphraseName",
            "paperDataset.paperId",
            "author.authorId",
            "cite.citingPaperId",
            "dataset.datasetName",
            "cite.citing_paper_quality_score_normalized",
            "paperKeyphrase.paperId",
            "keyphrase.keyphraseId",
            "paperDataset.datasetId",
            "writes.authorId",
            "paper.year",
            "paper.numCiting",
            "author.authorName",
            "paper.paper_quality_score_normalized"
        ]
    },
    {
        "instance_id": "q_750",
        "db_id": "academic_research_data",
        "question": "Which keyphrases are most frequently associated with papers written by authors whose normalized research interests include \"machine learning\" over the past five years, categorized by venue? Additionally, compare the average quality of citations received by these papers across venues, and rank the results first by keyphrase usage frequency in descending order and then by the average citation quality in descending order within each venue.",
        "query": " WITH ml_authors AS (     SELECT DISTINCT authorId     FROM author     WHERE 'machine learning' = ANY(author_research_interests_normalized) ), ml_papers AS (     SELECT DISTINCT p.paperId     FROM paper p     JOIN writes w ON p.paperId = w.paperId     JOIN ml_authors a ON w.authorId = a.authorId     WHERE p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5 ), keyphrase_usage AS (     SELECT pk.keyphraseId, COUNT(*) AS usage_count, p.venueId     FROM ml_papers mp     JOIN paperKeyphrase pk ON mp.paperId = pk.paperId     JOIN paper p ON mp.paperId = p.paperId     GROUP BY pk.keyphraseId, p.venueId ), citation_quality AS (     SELECT c.citedPaperId, AVG(c.citing_paper_quality_score_normalized) AS avg_citation_quality, p.venueId     FROM cite c     JOIN ml_papers mp ON c.citedPaperId = mp.paperId     JOIN paper p ON mp.paperId = p.paperId     GROUP BY c.citedPaperId, p.venueId ), venue_impact AS (     SELECT ku.keyphraseId, ku.venueId, ku.usage_count, AVG(cq.avg_citation_quality) AS avg_venue_citation_quality     FROM keyphrase_usage ku     JOIN citation_quality cq ON ku.venueId = cq.venueId     GROUP BY ku.keyphraseId, ku.venueId, ku.usage_count ) SELECT k.keyphraseName, vi.venueId, vi.usage_count, vi.avg_venue_citation_quality FROM venue_impact vi JOIN keyphrase k ON vi.keyphraseId = k.keyphraseId ORDER BY vi.usage_count DESC, vi.avg_venue_citation_quality DESC; ",
        "schema_links": [
            "cite.citing_paper_quality_score_normalized",
            "paperKeyphrase.paperId",
            "keyphrase.keyphraseId",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "paperKeyphrase.keyphraseId",
            "author.author_research_interests_normalized",
            "keyphrase.keyphraseName",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_743",
        "db_id": "academic_research_data",
        "question": "What are the key research topics that Luke Zettlemoyer has focused on in his publications, and how have these topics evolved over the years in terms of total citations, average paper quality, and average citation impact? Specifically, identify the first and last publication years for each topic, along with their respective citation trends and research impact metrics.",
        "query": " WITH luke_publications AS (     SELECT p.paperId, p.title, p.year, p.numCiting, p.paper_quality_score, pk.keyphraseName, pk.paper_keyphrase_weighted_frequency_normalized     FROM paper p     JOIN writes w ON p.paperId = w.paperId     JOIN author a ON w.authorId = a.authorId     JOIN paperKeyphrase pk ON p.paperId = pk.paperId     WHERE a.authorName = 'Luke Zettlemoyer' ), citation_trends AS (     SELECT lp.paperId, lp.keyphraseName, c.citing_paper_quality_score_normalized, lp.year     FROM luke_publications lp     JOIN cite c ON lp.paperId = c.citedPaperId ) SELECT keyphraseName AS research_topic,         MIN(year) AS first_year,         MAX(year) AS last_year,         SUM(numCiting) AS total_citations,         AVG(paper_quality_score) AS avg_paper_quality,         AVG(citing_paper_quality_score_normalized) AS avg_citation_impact FROM citation_trends GROUP BY keyphraseName ORDER BY total_citations DESC; ",
        "schema_links": [
            "cite.citing_paper_quality_score_normalized",
            "citation_trends.year",
            "paperkeyphrase.keyphraseName",
            "citation_trends.keyphraseName",
            "paperKeyphrase.paperId",
            "writes.authorId",
            "cite.citedPaperId",
            "paperKeyphrase.keyphraseName",
            "paper.paperId",
            "writes.paperId",
            "paper.year",
            "paperKeyphrase.paper_keyphrase_weighted_frequency_normalized",
            "paper.paper_quality_score",
            "paper.numCiting",
            "author.authorName",
            "paper.title",
            "paperkeyphrase.paper_keyphrase_weighted_frequency_normalized",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_745",
        "db_id": "academic_research_data",
        "question": "哪些作者的研究兴趣与其发表的论文中使用的数据集高度相关，且这些论文在高质量期刊（影响因子高于所有期刊平均值）中的引用量呈现逐年增长趋势（年份从2010年起，且至少跨越两个年份，年份与引用量的相关性大于0.8）？请列出这些作者的ID、姓名、研究兴趣，以及相关的数据集名称、论文ID、标题、发表年份和引用次数，并注明期刊名称及其影响因子。分析时需结合作者的研究领域、数据集的使用情况以及论文的引用质量。",
        "query": " SELECT      a.authorId,     a.authorName,     a.author_research_interests,     d.datasetName,     p.paperId,     p.title,     p.year,     p.numCitedBy,     j.journalName,     j.impact_factor FROM      author a JOIN      writes w ON a.authorId = w.authorId JOIN      paper p ON w.paperId = p.paperId JOIN      venue v ON p.venueId = v.venueId JOIN      journal j ON v.venueId = j.journalId LEFT JOIN      paperDataset pd ON p.paperId = pd.paperId LEFT JOIN      dataset d ON pd.datasetId = d.datasetId WHERE      j.impact_factor > (SELECT AVG(impact_factor) FROM journal)     AND p.numCitedBy > 0     AND p.year >= 2010     AND EXISTS (         SELECT 1         FROM paperKeyphrase pk         JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId         WHERE p.paperId = pk.paperId         AND k.keyphraseName IN (SELECT unnest(a.author_research_interests))     ) GROUP BY      a.authorId, a.authorName, a.author_research_interests, d.datasetName, p.paperId, p.title, p.year, p.numCitedBy, j.journalName, j.impact_factor HAVING      COUNT(DISTINCT p.year) > 1     AND CORR(p.year, p.numCitedBy) > 0.8; ",
        "schema_links": [
            "journal.journalName",
            "journal.journalId",
            "paper.paperId",
            "writes.paperId",
            "paperKeyphrase.keyphraseId",
            "dataset.datasetId",
            "paper.numCitedBy",
            "paperDataset.paperId",
            "keyphrase.keyphraseName",
            "author.authorId",
            "dataset.datasetName",
            "paperKeyphrase.paperId",
            "venue.venueId",
            "keyphrase.keyphraseId",
            "paperDataset.datasetId",
            "author.author_research_interests",
            "writes.authorId",
            "paper.venueId",
            "paper.year",
            "author.authorName",
            "journal.impact_factor",
            "paper.title"
        ]
    },
    {
        "instance_id": "q_751",
        "db_id": "academic_research_data",
        "question": "What are the key research topics that Luke Zettlemoyer has focused on in the past five years, and how have these topics evolved in terms of total normalized citation scores and citation counts, ranked by their research impact within the academic community?",
        "query": " WITH recent_papers AS (     SELECT          p.paperId,         p.title,         p.year,         p.numCiting,         p.paper_quality_score,         pk.keyphraseId,         k.keyphraseName     FROM          paper p     JOIN          writes w ON p.paperId = w.paperId     JOIN          author a ON w.authorId = a.authorId     LEFT JOIN          paperKeyphrase pk ON p.paperId = pk.paperId     LEFT JOIN          keyphrase k ON pk.keyphraseId = k.keyphraseId     WHERE          a.authorName = 'Luke Zettlemoyer'          AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5 ), citation_trends AS (     SELECT          rp.keyphraseName,         SUM(c.cited_paper_quality_score_normalized) AS total_citation_score,         COUNT(c.citedPaperId) AS citation_count     FROM          recent_papers rp     LEFT JOIN          cite c ON rp.paperId = c.citedPaperId     GROUP BY          rp.keyphraseName ) SELECT      ct.keyphraseName AS research_topic,     ct.total_citation_score,     ct.citation_count,     ROW_NUMBER() OVER (ORDER BY ct.total_citation_score DESC) AS impact_rank FROM      citation_trends ct WHERE      ct.keyphraseName IS NOT NULL ORDER BY      ct.total_citation_score DESC; ",
        "schema_links": [
            "citation_trends.keyphraseName",
            "paperKeyphrase.paperId",
            "keyphrase.keyphraseId",
            "cite.cited_paper_quality_score_normalized",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "citation_trends.citation_count",
            "writes.paperId",
            "paper.year",
            "paperKeyphrase.keyphraseId",
            "paper.paper_quality_score",
            "paper.numCiting",
            "citation_trends.total_citation_score",
            "author.authorName",
            "recent_papers.keyphraseName",
            "keyphrase.keyphraseName",
            "paper.title",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_754",
        "db_id": "academic_research_data",
        "question": "Which keyphrases have experienced a significant increase in usage over the past five years, specifically those with more than 50% of their total usage occurring in this period? Additionally, evaluate the correlation between these keyphrases' usage trends and the citation quality of papers that employ them, particularly in journals with an impact factor exceeding the 80th percentile. Identify notable authors who frequently use these keyphrases in their publications (with at least 10 usages) and assess their research impact based on their h-index and total citation counts. Present the results sorted by the recent usage count of the keyphrases in descending order, and by the authors' h-index in descending order as a tiebreaker.",
        "query": " WITH keyphrase_trend AS (     SELECT          pk.keyphraseId,         k.keyphraseName,         COUNT(CASE WHEN p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5 THEN 1 END) AS recent_usage_count,         COUNT(*) AS total_usage_count     FROM paperKeyphrase pk     JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId     JOIN paper p ON pk.paperId = p.paperId     WHERE p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 10     GROUP BY pk.keyphraseId, k.keyphraseName     HAVING COUNT(CASE WHEN p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5 THEN 1 END) > 0.5 * COUNT(*) ), citation_quality AS (     SELECT          pk.keyphraseId,         AVG(p.paper_quality_score_normalized) AS avg_paper_quality_score,         AVG(c.cited_paper_quality_score_normalized) AS avg_citation_quality_score     FROM paperKeyphrase pk     JOIN paper p ON pk.paperId = p.paperId     LEFT JOIN cite c ON p.paperId = c.citedPaperId     JOIN journal j ON p.venueId = j.journalId     WHERE j.impact_factor > (SELECT PERCENTILE_CONT(0.8) WITHIN GROUP (ORDER BY impact_factor) FROM journal)     GROUP BY pk.keyphraseId ), author_impact AS (     SELECT          w.authorId,         a.authorName,         kt.keyphraseId,         kt.keyphraseName,         COUNT(w.paperId) AS usage_count,         MAX(a.h_index) AS h_index,         SUM(p.numCitedBy) AS total_citations     FROM writes w     JOIN author a ON w.authorId = a.authorId     JOIN paper p ON w.paperId = p.paperId     JOIN paperKeyphrase pk ON w.paperId = pk.paperId     JOIN keyphrase_trend kt ON pk.keyphraseId = kt.keyphraseId     GROUP BY w.authorId, a.authorName, kt.keyphraseId, kt.keyphraseName     HAVING COUNT(w.paperId) > 10 ) SELECT      kt.keyphraseName,     kt.recent_usage_count,     kt.total_usage_count,     cq.avg_paper_quality_score,     cq.avg_citation_quality_score,     ai.authorName,     ai.usage_count,     ai.h_index,     ai.total_citations FROM keyphrase_trend kt LEFT JOIN citation_quality cq ON kt.keyphraseId = cq.keyphraseId LEFT JOIN author_impact ai ON kt.keyphraseId = ai.keyphraseId ORDER BY kt.recent_usage_count DESC, ai.h_index DESC; ",
        "schema_links": [
            "journal.journalId",
            "citation_quality.avg_citation_quality_score",
            "paperKeyphrase.paperId",
            "author_impact.authorName",
            "keyphrase_trend.recent_usage_count",
            "cite.cited_paper_quality_score_normalized",
            "citation_quality.avg_paper_quality_score",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "author_impact.usage_count",
            "paper.venueId",
            "writes.paperId",
            "paperKeyphrase.keyphraseId",
            "paper.year",
            "author.h_index",
            "paper.numCitedBy",
            "keyphrase_trend.keyphraseName",
            "author_impact.total_citations",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "journal.impact_factor",
            "keyphrase.keyphraseName",
            "keyphrase_trend.total_usage_count",
            "author_impact.h_index"
        ]
    },
    {
        "instance_id": "q_748",
        "db_id": "academic_research_data",
        "question": "What are the key research topics and associated datasets explored by Luke Zettlemoyer in his publications from the past three years, along with the citation trends and quality scores (including normalized quality scores) of these works, ordered by the most recently updated papers first and then by their normalized quality scores in descending order?",
        "query": " SELECT      pk.keyphraseName AS key_research_topic,     d.datasetName AS associated_dataset,     c.paper_citation_trend AS citation_trend,     p.paper_quality_score AS quality_score,     p.paper_quality_score_normalized AS normalized_quality_score FROM      writes w JOIN      author a ON w.authorId = a.authorId JOIN      paper p ON w.paperId = p.paperId LEFT JOIN      paperKeyphrase pk ON p.paperId = pk.paperId LEFT JOIN      paperDataset pd ON p.paperId = pd.paperId LEFT JOIN      dataset d ON pd.datasetId = d.datasetId LEFT JOIN      cite c ON p.paperId = c.citedPaperId WHERE      a.authorName = 'Luke Zettlemoyer'     AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 3 ORDER BY      p.paper_last_updated DESC,      p.paper_quality_score_normalized DESC; ",
        "schema_links": [
            "paperKeyphrase.paperId",
            "paperDataset.datasetId",
            "paper.paper_last_updated",
            "writes.authorId",
            "cite.citedPaperId",
            "paperKeyphrase.keyphraseName",
            "paper.paperId",
            "writes.paperId",
            "paper.year",
            "paper.paper_quality_score",
            "dataset.datasetId",
            "cite.paperId",
            "cite.paper_citation_trend",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "paperDataset.paperId",
            "author.authorId",
            "dataset.datasetName"
        ]
    },
    {
        "instance_id": "q_752",
        "db_id": "academic_research_data",
        "question": "What are the main research areas of Luke Zettlemoyer, along with the citation trends of his papers published since the year 2000, including the normalized quality of citations and the total number of citations received, ordered by publication year in descending order and citation trend quality in descending order where available?",
        "query": " SELECT      a.author_research_interests AS main_research_areas,     c.paper_citation_trend AS citation_trends,     p.year AS publication_year,     c.citing_paper_quality_score_normalized AS normalized_citation_quality,     p.numCitedBy AS total_citations FROM      author a JOIN      writes w ON a.authorId = w.authorId JOIN      paper p ON w.paperId = p.paperId LEFT JOIN      cite c ON p.paperId = c.citedPaperId WHERE      a.authorName = 'Luke Zettlemoyer'     AND p.paper_last_updated >= '2000-01-01'::timestamp ORDER BY      p.year DESC,      c.paper_citation_trend_normalized DESC NULLS LAST; ",
        "schema_links": [
            "cite.citing_paper_quality_score_normalized",
            "author.author_research_interests",
            "paper.paper_last_updated",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "writes.paperId",
            "paper.year",
            "paper.numCitedBy",
            "cite.paper_citation_trend",
            "author.authorName",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_747",
        "db_id": "academic_research_data",
        "question": "What are the research areas and key topics that Luke Zettlemoyer has most actively contributed to in the past three years, considering only his publications in venues with above-average impact factors and papers with a normalized quality score greater than 0.8, ranked by the total number of publications and the total number of citations received?",
        "query": " SELECT      a.author_research_interests_normalized AS research_areas,     STRING_AGG(DISTINCT k.keyphraseName, ', ') AS key_topics FROM      author a JOIN      writes w ON a.authorId = w.authorId JOIN      paper p ON w.paperId = p.paperId JOIN      venue v ON p.venueId = v.venueId JOIN      paperKeyphrase pk ON p.paperId = pk.paperId JOIN      keyphrase k ON pk.keyphraseId = k.keyphraseId WHERE      a.authorName = 'Luke Zettlemoyer'     AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 3     AND v.impact_factor > (SELECT AVG(impact_factor) FROM journal)     AND p.paper_quality_score_normalized > 0.8 GROUP BY      a.author_research_interests_normalized ORDER BY      COUNT(p.paperId) DESC, SUM(p.numCitedBy) DESC LIMIT 10; ",
        "schema_links": [
            "paper.paperId",
            "writes.paperId",
            "paperKeyphrase.keyphraseId",
            "paper.numCitedBy",
            "keyphrase.keyphraseName",
            "author.authorId",
            "venue.impact_factor",
            "paperKeyphrase.paperId",
            "venue.venueId",
            "keyphrase.keyphraseId",
            "writes.authorId",
            "paper.venueId",
            "paper.year",
            "author.author_research_interests_normalized",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "journal.impact_factor"
        ]
    },
    {
        "instance_id": "q_746",
        "db_id": "academic_research_data",
        "question": "What are the key research topics (as indicated by keyphrases) in the papers authored by Luke Zettlemoyer over the last five years, along with their average paper relevance scores, total citation quality scores, and venue impact factors, considering the normalized quality scores of citations and the impact factor of the journals where the papers were published? Please rank the results first by the total citation quality score in descending order and then by the venue impact factor in descending order.",
        "query": " SELECT      pk.keyphraseName AS research_topic,     AVG(p.paper_quality_score_normalized) AS paper_relevance_score,     SUM(c.cited_paper_quality_score_normalized) AS total_citation_quality_score,     j.impact_factor AS venue_impact_factor FROM      writes w JOIN      author a ON w.authorId = a.authorId JOIN      paper p ON w.paperId = p.paperId JOIN      cite c ON p.paperId = c.citedPaperId JOIN      venue v ON p.venueId = v.venueId JOIN      journal j ON v.venueId = j.journalId JOIN      paperKeyphrase pk ON p.paperId = pk.paperId WHERE      a.authorName = 'Luke Zettlemoyer'     AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5 GROUP BY      pk.keyphraseName, j.impact_factor ORDER BY      total_citation_quality_score DESC, venue_impact_factor DESC; ",
        "schema_links": [
            "journal.journalId",
            "paperKeyphrase.paperId",
            "venue.venueId",
            "cite.cited_paper_quality_score_normalized",
            "writes.authorId",
            "cite.citedPaperId",
            "paperKeyphrase.keyphraseName",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "journal.impact_factor",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_755",
        "db_id": "academic_research_data",
        "question": "What are the keyphrases most frequently associated with authors who have published papers with a normalized quality score greater than 0.8 in top-tier journals (defined as journals in the top 10% by impact factor) within the last five years? Additionally, how does the usage and relevance of these keyphrases trend over time across different venues, measured by the count of papers using each keyphrase and the sum of their weighted frequency scores? Provide the total usage and relevance for each keyphrase, along with the venues where they appear and yearly trends for both usage and relevance.",
        "query": " WITH high_quality_authors AS (     SELECT DISTINCT w.authorId     FROM writes w     JOIN paper p ON w.paperId = p.paperId     JOIN journal j ON p.venueId = j.journalId     WHERE p.paper_quality_score_normalized > 0.8       AND j.impact_factor >= (SELECT PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY impact_factor) FROM journal)       AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5 ), keyphrase_trends AS (     SELECT pk.keyphraseId,            k.keyphraseName,            COUNT(*) AS usage_count,            SUM(pk.paper_keyphrase_weighted_frequency_normalized) AS relevance_score,            p.year,            v.venueName     FROM paperKeyphrase pk     JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId     JOIN paper p ON pk.paperId = p.paperId     JOIN venue v ON p.venueId = v.venueId     JOIN high_quality_authors hqa ON EXISTS (         SELECT 1         FROM writes w         WHERE w.paperId = p.paperId           AND w.authorId = hqa.authorId     )     GROUP BY pk.keyphraseId, k.keyphraseName, p.year, v.venueName ) SELECT keyphraseName,        SUM(usage_count) AS total_usage,        SUM(relevance_score) AS total_relevance,        ARRAY_AGG(DISTINCT venueName) AS venues,        JSON_OBJECT_AGG(year, usage_count) AS usage_trend,        JSON_OBJECT_AGG(year, relevance_score) AS relevance_trend FROM keyphrase_trends GROUP BY keyphraseName ORDER BY total_relevance DESC, total_usage DESC; ",
        "schema_links": [
            "journal.journalId",
            "paperKeyphrase.paperId",
            "venue.venueId",
            "keyphrase.keyphraseId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "paperKeyphrase.keyphraseId",
            "paperKeyphrase.paper_keyphrase_weighted_frequency_normalized",
            "high_quality_authors.authorId",
            "paper.paper_quality_score_normalized",
            "journal.impact_factor",
            "keyphrase.keyphraseName",
            "venue.venueName"
        ]
    },
    {
        "instance_id": "q_753",
        "db_id": "academic_research_data",
        "question": "在最近五年内，哪些研究领域展现出最高的引用质量增长趋势？对于这些领域的关键作者，他们的共同学术特征包括哪些（如h指数、发表论文数量、所在国家以及研究兴趣置信度）？",
        "query": " WITH recent_citations AS (     SELECT          p.paperId,         p.year,         p.numCitedBy,         p.paper_quality_score_normalized,         a.author_research_interests_normalized     FROM          paper p     JOIN          writes w ON p.paperId = w.paperId     JOIN          author a ON w.authorId = a.authorId     WHERE          p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5 ), citation_growth AS (     SELECT          unnest(author_research_interests_normalized) AS research_interest,         AVG(paper_quality_score_normalized) AS avg_quality_score,         COUNT(*) AS citation_count     FROM          recent_citations     GROUP BY          research_interest     ORDER BY          avg_quality_score DESC     LIMIT 10 ), author_features AS (     SELECT          DISTINCT a.authorId,         a.h_index,         a.publication_count,         a.author_country,         a.author_research_interests_confidence     FROM          author a     JOIN          writes w ON a.authorId = w.authorId     JOIN          paper p ON w.paperId = p.paperId     WHERE          p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5         AND EXISTS (             SELECT 1              FROM citation_growth cg              WHERE cg.research_interest = ANY(a.author_research_interests_normalized)         ) ) SELECT      cg.research_interest,     cg.avg_quality_score,     cg.citation_count,     af.h_index,     af.publication_count,     af.author_country,     af.author_research_interests_confidence FROM      citation_growth cg JOIN      author_features af ON cg.research_interest = ANY(af.author_research_interests_normalized); ",
        "schema_links": [
            "writes.authorId",
            "paper.paperId",
            "writes.paperId",
            "paper.year",
            "author.author_research_interests_normalized",
            "author.author_country",
            "author.h_index",
            "paper.numCitedBy",
            "author.publication_count",
            "paper.paper_quality_score_normalized",
            "author.author_research_interests_confidence",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_764",
        "db_id": "academic_research_data",
        "question": "In which venues has Ed Desmond published papers discussing \"Semantic Parsing\" over the past five years, and what is the citation density ranking of these venues during the same period? Additionally, what is the average relevance score of the keyphrase \"Semantic Parsing\" in these papers, and how does this compare to the author's overall research focus over time?",
        "query": " WITH ed_desmond_papers AS (     SELECT p.paperId, p.venueId, p.year, pk.paper_keyphrase_weighted_frequency_normalized AS relevance_score     FROM paper p     JOIN writes w ON p.paperId = w.paperId     JOIN author a ON w.authorId = a.authorId     JOIN paperKeyphrase pk ON p.paperId = pk.paperId     JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId     WHERE a.authorName = 'Ed Desmond'       AND k.keyphraseName = 'Semantic Parsing'       AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5 ), venue_citation_density AS (     SELECT v.venueId, v.venueName, AVG(p.numCiting::float / NULLIF(p.numCitedBy, 0)) AS citation_density     FROM venue v     JOIN paper p ON v.venueId = p.venueId     WHERE p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5     GROUP BY v.venueId, v.venueName ), ed_desmond_venues AS (     SELECT DISTINCT ep.venueId     FROM ed_desmond_papers ep ) SELECT vc.venueName, vc.citation_density, AVG(ep.relevance_score) AS avg_relevance_score FROM venue_citation_density vc JOIN ed_desmond_venues ev ON vc.venueId = ev.venueId JOIN ed_desmond_papers ep ON vc.venueId = ep.venueId GROUP BY vc.venueName, vc.citation_density ORDER BY vc.citation_density DESC; ",
        "schema_links": [
            "venue_citation_density.citation_density",
            "ed_desmond_venues.venueId",
            "ed_desmond_papers.relevance_score",
            "paperKeyphrase.paperId",
            "venue.venueId",
            "keyphrase.keyphraseId",
            "writes.authorId",
            "paper.paperId",
            "ed_desmond_papers.venueId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "paperKeyphrase.paper_keyphrase_weighted_frequency_normalized",
            "paperKeyphrase.keyphraseId",
            "paperKeyphrase.relevance_score",
            "paper.numCiting",
            "paper.numCitedBy",
            "author.authorName",
            "keyphrase.keyphraseName",
            "venue.venueName",
            "venue_citation_density.venueName",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_756",
        "db_id": "academic_research_data",
        "question": "How many distinct research contributions has Ed Desmond made in the field of Semantic Parsing over the past five years, considering both the papers he authored and the quality of citations received, where the normalized quality score of citing papers is greater than 0.5 or the paper has not been cited?",
        "query": " SELECT COUNT(DISTINCT p.paperId) AS research_contributions FROM writes w JOIN author a ON w.authorId = a.authorId JOIN paper p ON w.paperId = p.paperId LEFT JOIN cite c ON p.paperId = c.citedPaperId WHERE a.authorName = 'Ed Desmond'   AND unnest(a.author_research_interests_normalized) ILIKE '%Semantic Parsing%'   AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5   AND (c.citing_paper_quality_score_normalized > 0.5 OR c.citing_paper_quality_score_normalized IS NULL); ",
        "schema_links": [
            "writes.paperId",
            "paper.year",
            "author.author_research_interests_normalized",
            "cite.citing_paper_quality_score_normalized",
            "author.authorName",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_758",
        "db_id": "academic_research_data",
        "question": "How many distinct research papers in the field of Semantic Parsing has the author Ed Desmond written, considering only papers with a paper quality score above the average score of all papers published in the last five years?",
        "query": " SELECT COUNT(DISTINCT p.paperId) AS paper_count FROM writes w JOIN author a ON w.authorId = a.authorId JOIN paper p ON w.paperId = p.paperId JOIN paperKeyphrase pk ON p.paperId = pk.paperId JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId WHERE a.authorName = 'Ed Desmond'   AND k.keyphraseName ILIKE '%semantic parsing%'   AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5   AND p.paper_quality_score > (     SELECT AVG(paper_quality_score)     FROM paper     WHERE year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5   ); ",
        "schema_links": [
            "paperKeyphrase.paperId",
            "keyphrase.keyphraseId",
            "writes.authorId",
            "paper.paperId",
            "writes.paperId",
            "paperKeyphrase.keyphraseId",
            "paper.year",
            "paper.paper_quality_score",
            "author.authorName",
            "keyphrase.keyphraseName",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_757",
        "db_id": "academic_research_data",
        "question": "How many distinct research papers has Ed Desmond authored that are specifically focused on Semantic Parsing, where the papers have a quality score above the average citation quality score across all papers, and were published in venues with an average citation count higher than the global average citation count per venue?",
        "query": " SELECT COUNT(DISTINCT p.paperId) AS paper_count FROM author a JOIN writes w ON a.authorId = w.authorId JOIN paper p ON w.paperId = p.paperId JOIN venue v ON p.venueId = v.venueId WHERE a.authorName = 'Ed Desmond'   AND unnest(a.author_research_interests_normalized) @> array['Semantic Parsing']   AND p.paper_quality_score > (     SELECT AVG(paper_quality_score)     FROM paper   )   AND v.venueId IN (     SELECT venueId     FROM paper     GROUP BY venueId     HAVING AVG(numCitedBy) > (       SELECT AVG(numCitedBy)       FROM paper     )   ); ",
        "schema_links": [
            "venue.venueId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "author.author_research_interests_normalized",
            "paper.paper_quality_score",
            "paper.numCitedBy",
            "author.authorName",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_763",
        "db_id": "academic_research_data",
        "question": "Which research papers published in 2012 have the highest total normalized citation quality score, maximum keyphrase relevance score for topics related to \"Parsing,\" and average normalized citation trend score over subsequent years? Only consider papers with at least 6 distinct citing papers that have a normalized citation quality score greater than 0.8. Rank the results by descending order of total citation quality, followed by keyphrase relevance, and then citation trend, and return the top 10 papers.",
        "query": " SELECT      p.paperId,     p.title,     SUM(c.cited_paper_quality_score_normalized) AS total_citation_quality,     MAX(p.paper_keywords_similarity_score) AS max_keyphrase_relevance,     AVG(c.paper_citation_trend_normalized) AS avg_citation_trend FROM      paper p JOIN      cite c ON p.paperId = c.citedPaperId JOIN      paperKeyphrase pk ON p.paperId = pk.paperId JOIN      keyphrase k ON pk.keyphraseId = k.keyphraseId WHERE      p.year = 2012     AND k.keyphraseName ILIKE '%parsing%'     AND c.cited_paper_quality_score_normalized > 0.8 GROUP BY      p.paperId, p.title HAVING      COUNT(DISTINCT c.citingPaperId) > 5 ORDER BY      total_citation_quality DESC,     max_keyphrase_relevance DESC,     avg_citation_trend DESC LIMIT 10; ",
        "schema_links": [
            "paperKeyphrase.paperId",
            "keyphrase.keyphraseId",
            "cite.cited_paper_quality_score_normalized",
            "cite.paper_citation_trend_normalized",
            "cite.citedPaperId",
            "paper.paper_keywords_similarity_score",
            "paper.paperId",
            "paper.year",
            "paperKeyphrase.keyphraseId",
            "keyphrase.keyphraseName",
            "paper.title",
            "cite.citingPaperId"
        ]
    },
    {
        "instance_id": "q_760",
        "db_id": "academic_research_data",
        "question": "Which research articles in the field of Parsing were published at the venue \"acl\" in 2012, have a paper quality score higher than the average quality score of all papers published in 2012, and also consider the trend of their dataset usage over time, ranked first by the number of citations in descending order and then by the dataset quality score associated with the paper in descending order?",
        "query": " SELECT      p.paperId,      p.title,      p.numCiting,      p.paper_quality_score,      pd.dataset_paper_count,      pd.paper_dataset_quality_score FROM      paper p JOIN      venue v ON p.venueId = v.venueId JOIN      writes w ON p.paperId = w.paperId JOIN      author a ON w.authorId = a.authorId LEFT JOIN      paperDataset pd ON p.paperId = pd.paperId WHERE      v.venueName = 'acl'      AND p.year = 2012      AND a.author_research_interests_normalized @> ARRAY['Parsing']      AND p.paper_quality_score > (SELECT AVG(paper_quality_score) FROM paper WHERE year = 2012) ORDER BY      p.numCiting DESC,      pd.paper_dataset_quality_score DESC; ",
        "schema_links": [
            "venue.venueId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "author.author_research_interests_normalized",
            "paper.paper_quality_score",
            "paper.numCiting",
            "paperDataset.paper_dataset_quality_score",
            "paperDataset.paperId",
            "paper.title",
            "venue.venueName",
            "author.authorId",
            "paperDataset.dataset_paper_count"
        ]
    },
    {
        "instance_id": "q_768",
        "db_id": "academic_research_data",
        "question": "Which authors published papers on the topic of Parsing at the ACL venue in the past year, have a paper quality score higher than 0.8, and cite datasets with a growing citation trend (above the average trend for the same citations over the last three years)? Additionally, provide their research interests and affiliation details, ordered by the paper quality score in descending order.",
        "query": " SELECT      a.authorId,     a.authorName,     a.affiliation,     a.author_research_interests,     p.paper_quality_score FROM      author a JOIN      writes w ON a.authorId = w.authorId JOIN      paper p ON w.paperId = p.paperId JOIN      venue v ON p.venueId = v.venueId JOIN      cite c ON p.paperId = c.citingPaperId JOIN      paperDataset pd ON c.citedPaperId = pd.paperId WHERE      v.venueName = 'acl'     AND p.year = EXTRACT(YEAR FROM CURRENT_DATE) - 1     AND 'Parsing' = ANY(a.author_research_interests_normalized)     AND c.paper_citation_trend_normalized > 0     AND c.paper_citation_trend_normalized >= (         SELECT AVG(c2.paper_citation_trend_normalized)         FROM cite c2         WHERE c2.citingPaperId = c.citingPaperId           AND c2.citedPaperId = c.citedPaperId           AND c2.paper_citation_trend_normalized IS NOT NULL     )     AND p.paper_quality_score_normalized > 0.8     AND pd.dataset_paper_count > 0 ORDER BY      p.paper_quality_score DESC; ",
        "schema_links": [
            "venue.venueId",
            "cite.paper_citation_trend_normalized",
            "author.author_research_interests",
            "cite.citedPaperId",
            "writes.authorId",
            "paper.paperId",
            "author.affiliation",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "author.author_research_interests_normalized",
            "paper.paper_quality_score",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "paperDataset.paperId",
            "cite.citingPaperId",
            "venue.venueName",
            "author.authorId",
            "paperDataset.dataset_paper_count"
        ]
    },
    {
        "instance_id": "q_762",
        "db_id": "academic_research_data",
        "question": "Which authors who published papers in conferences in 2012 have the highest average normalized citation quality scores? For these authors, how have their research interests evolved over the past five years, as indicated by changes in their normalized research interests? Additionally, identify trends in dataset usage within their publications by counting the number of datasets associated with each paper written by these authors.",
        "query": " WITH conference_papers_2012 AS (     SELECT DISTINCT w.authorId     FROM writes w     JOIN paper p ON w.paperId = p.paperId     JOIN venue v ON p.venueId = v.venueId     WHERE v.venue_type = 'conference'       AND p.year = 2012 ), author_citation_quality AS (     SELECT cp.authorId, AVG(p.paper_quality_score_normalized) AS avg_citation_quality     FROM conference_papers_2012 cp     JOIN writes w ON cp.authorId = w.authorId     JOIN paper p ON w.paperId = p.paperId     GROUP BY cp.authorId     ORDER BY avg_citation_quality DESC ), research_interest_evolution AS (     SELECT authorId, author_research_interests_normalized, author_last_updated     FROM author     WHERE authorId IN (SELECT authorId FROM conference_papers_2012)       AND author_last_updated >= NOW() - INTERVAL '5 years' ), dataset_usage_trends AS (     SELECT pd.paperId, COUNT(pd.datasetId) AS dataset_count     FROM paperDataset pd     JOIN writes w ON pd.paperId = w.paperId     WHERE w.authorId IN (SELECT authorId FROM conference_papers_2012)     GROUP BY pd.paperId ) SELECT acq.authorId, a.authorName, acq.avg_citation_quality,        ri.author_research_interests_normalized, ri.author_last_updated,        dut.dataset_count FROM author_citation_quality acq JOIN author a ON acq.authorId = a.authorId LEFT JOIN research_interest_evolution ri ON acq.authorId = ri.authorId LEFT JOIN dataset_usage_trends dut ON acq.authorId = dut.paperId ORDER BY acq.avg_citation_quality DESC; ",
        "schema_links": [
            "venue.venueId",
            "author.author_last_updated",
            "paperDataset.datasetId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "author.author_research_interests_normalized",
            "venue.venue_type",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "paperDataset.paperId",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_759",
        "db_id": "academic_research_data",
        "question": "在2012年的ACL会议上，哪些研究者发表了与“Parsing”相关的论文，并且这些研究者的H指数在过去五年中有显著增长？同时，请列出这些论文引用的高质量数据集名称及其下载量趋势（作为使用趋势的指标），其中高质量数据集定义为数据集质量评分归一化值大于0.8。结果按研究者姓名、论文标题和数据集名称排序。",
        "query": " WITH significant_h_index_growth AS (     SELECT          authorId,          h_index,         LAG(h_index) OVER (PARTITION BY authorId ORDER BY author_last_updated) AS prev_h_index     FROM author     WHERE author_last_updated >= NOW() - INTERVAL '5 years' ), eligible_authors AS (     SELECT DISTINCT w.authorId     FROM writes w     JOIN paper p ON w.paperId = p.paperId     JOIN venue v ON p.venueId = v.venueId     WHERE v.venueName = 'ACL'       AND p.year = 2012       AND EXISTS (           SELECT 1           FROM paperKeyphrase pk           JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId           WHERE pk.paperId = p.paperId             AND LOWER(k.keyphraseName) LIKE '%parsing%'       )       AND w.authorId IN (           SELECT sag.authorId           FROM significant_h_index_growth sag           WHERE sag.h_index > COALESCE(sag.prev_h_index, 0)       ) ), high_quality_datasets AS (     SELECT DISTINCT pd.datasetId, d.datasetName     FROM paperDataset pd     JOIN dataset d ON pd.datasetId = d.datasetId     WHERE pd.paper_dataset_quality_score_normalized > 0.8 ) SELECT      a.authorName,     p.title,     d.datasetName,     d.dataset_download_count AS usage_trend FROM eligible_authors ea JOIN writes w ON ea.authorId = w.authorId JOIN paper p ON w.paperId = p.paperId LEFT JOIN paperDataset pd ON p.paperId = pd.paperId LEFT JOIN high_quality_datasets hd ON pd.datasetId = hd.datasetId LEFT JOIN dataset d ON hd.datasetId = d.datasetId JOIN author a ON ea.authorId = a.authorId WHERE d.datasetName IS NOT NULL ORDER BY a.authorName, p.title, d.datasetName; ",
        "schema_links": [
            "significant_h_index_growth.prev_h_index",
            "paper.paperId",
            "writes.paperId",
            "dataset.datasetId",
            "author.h_index",
            "paperDataset.paper_dataset_quality_score_normalized",
            "keyphrase.keyphraseName",
            "paperDataset.paperId",
            "author.authorId",
            "dataset.datasetName",
            "paperKeyphrase.paperId",
            "author.author_last_updated",
            "venue.venueId",
            "keyphrase.keyphraseId",
            "paperDataset.datasetId",
            "writes.authorId",
            "paper.venueId",
            "paper.year",
            "significant_h_index_growth.h_index",
            "dataset.dataset_download_count",
            "author.authorName",
            "significant_h_index_growth.authorId",
            "paper.title",
            "venue.venueName"
        ]
    },
    {
        "instance_id": "q_766",
        "db_id": "academic_research_data",
        "question": "In the Parsing research domain during the year 2012, identify papers with the highest normalized citation quality scores across different citation sources. Specifically, determine how these scores vary by citation source. Additionally, for these papers, list the most frequently associated keyphrases and evaluate their relevance trends over time based on the last update year of the papers. Ensure results are ordered primarily by descending average citation quality score and secondarily by descending keyphrase frequency.",
        "query": " WITH parsing_papers AS (     SELECT          p.paperId,          p.title,          p.year,          p.paper_quality_score,          c.cited_paper_quality_score_normalized,          c.paper_citation_source     FROM          paper p     JOIN          cite c ON p.paperId = c.citedPaperId     JOIN          writes w ON p.paperId = w.paperId     JOIN          author a ON w.authorId = a.authorId     WHERE          p.year = 2012          AND 'Parsing' = ANY(a.author_research_interests_normalized) ), citation_quality_scores AS (     SELECT          paperId,          AVG(cited_paper_quality_score_normalized) AS avg_quality_score,          paper_citation_source     FROM          parsing_papers     GROUP BY          paperId, paper_citation_source ), keyphrase_frequency AS (     SELECT          pk.paperId,          k.keyphraseName,          SUM(pk.keyphrase_frequency) AS total_frequency     FROM          paperKeyphrase pk     JOIN          keyphrase k ON pk.keyphraseId = k.keyphraseId     WHERE          pk.paperId IN (SELECT DISTINCT paperId FROM parsing_papers)     GROUP BY          pk.paperId, k.keyphraseName     ORDER BY          total_frequency DESC ), relevance_trends AS (     SELECT          kp.paperId,          kp.keyphraseName,          EXTRACT(YEAR FROM p.paper_last_updated) AS update_year     FROM          keyphrase_frequency kp     JOIN          paper p ON kp.paperId = p.paperId ) SELECT      pp.paperId,      pp.title,      cq.avg_quality_score,      cq.paper_citation_source,      kf.keyphraseName,      kf.total_frequency,      rt.update_year FROM      parsing_papers pp JOIN      citation_quality_scores cq ON pp.paperId = cq.paperId LEFT JOIN      keyphrase_frequency kf ON pp.paperId = kf.paperId LEFT JOIN      relevance_trends rt ON pp.paperId = rt.paperId ORDER BY      cq.avg_quality_score DESC,      kf.total_frequency DESC; ",
        "schema_links": [
            "keyphrase_frequency.total_frequency",
            "paperKeyphrase.paperId",
            "paperKeyphrase.keyphrase_frequency",
            "keyphrase.keyphraseId",
            "cite.cited_paper_quality_score_normalized",
            "paper.paper_last_updated",
            "relevance_trends.update_year",
            "cite.citedPaperId",
            "writes.authorId",
            "paper.paperId",
            "writes.paperId",
            "paper.year",
            "author.author_research_interests_normalized",
            "paperKeyphrase.keyphraseId",
            "paper.paper_quality_score",
            "cite.paper_citation_source",
            "keyphrase.keyphraseName",
            "paper.title",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_765",
        "db_id": "academic_research_data",
        "question": "In 2012, which papers in the field of Parsing are the most influential when considering both the quality of citations and the trend of dataset usage over time? Specifically, identify the top 10 most influential papers based on their total citation quality, average dataset quality, and number of citations. Additionally, list the key authors contributing to these papers along with their H-index and normalized research interest areas. Present the results ordered by paper ID and author H-index in descending order.",
        "query": " WITH influential_papers AS (     SELECT          p.paperId,         p.title,         p.numCiting,         p.paper_quality_score_normalized,         SUM(c.cited_paper_quality_score_normalized) AS total_citation_quality,         AVG(pd.paper_dataset_quality_score_normalized) AS avg_dataset_quality     FROM          paper p     JOIN          cite c ON p.paperId = c.citedPaperId     LEFT JOIN          paperDataset pd ON p.paperId = pd.paperId     WHERE          p.year = 2012         AND 'Parsing' = ANY(p.paper_keywords_normalized)     GROUP BY          p.paperId, p.title, p.numCiting, p.paper_quality_score_normalized ), ranked_papers AS (     SELECT          ip.paperId,         ip.title,         ip.numCiting,         ip.paper_quality_score_normalized,         ip.total_citation_quality,         ip.avg_dataset_quality,         ROW_NUMBER() OVER (ORDER BY ip.total_citation_quality DESC, ip.avg_dataset_quality DESC, ip.numCiting DESC) AS influence_rank     FROM          influential_papers ip ), key_authors AS (     SELECT          r.paperId,         r.title,         w.authorId,         a.authorName,         a.h_index,         a.author_research_interests_normalized     FROM          ranked_papers r     JOIN          writes w ON r.paperId = w.paperId     JOIN          author a ON w.authorId = a.authorId     WHERE          r.influence_rank <= 10 ) SELECT      ka.paperId,     ka.title,     ka.authorId,     ka.authorName,     ka.h_index,     ka.author_research_interests_normalized FROM      key_authors ka ORDER BY      ka.paperId, ka.h_index DESC; ",
        "schema_links": [
            "paper.paper_keywords_normalized",
            "ranked_papers.paperId",
            "ranked_papers.avg_dataset_quality",
            "author.authorId",
            "cite.cited_paper_quality_score_normalized",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "ranked_papers.title",
            "writes.paperId",
            "ranked_papers.numCiting",
            "author.author_research_interests_normalized",
            "paper.year",
            "paper.numCiting",
            "author.h_index",
            "author.authorName",
            "paperDataset.paper_dataset_quality_score_normalized",
            "paper.paper_quality_score_normalized",
            "paperDataset.paperId",
            "paper.title",
            "ranked_papers.total_citation_quality",
            "ranked_papers.paper_quality_score_normalized"
        ]
    },
    {
        "instance_id": "q_767",
        "db_id": "academic_research_data",
        "question": "Which research articles in the field of Parsing were presented at the ACL conference in 2012 and have received citations from papers with a normalized citation quality score greater than 0.8? Additionally, provide the citation trends over time for these articles and identify any relevant keyphrases containing the term \"parsing\" to assess their relevance to key research topics within the domain. Finally, rank the results by the number of citations received in descending order and then by the normalized citation quality score in descending order.",
        "query": " SELECT      p.paperId,     p.title,     p.numCiting,     p.paper_quality_score AS paper_quality_score,     c.citing_paper_quality_score_normalized AS avg_citation_quality_score,     c.paper_citation_trend AS citation_trend,     pk.keyphraseName AS relevant_keyphrases FROM      paper p JOIN      venue v ON p.venueId = v.venueId JOIN      writes w ON p.paperId = w.paperId JOIN      author a ON w.authorId = a.authorId LEFT JOIN      cite c ON p.paperId = c.citedPaperId LEFT JOIN      paperKeyphrase pk ON p.paperId = pk.paperId JOIN      keyphrase k ON pk.keyphraseId = k.keyphraseId WHERE      v.venueName = 'acl'     AND p.year = 2012     AND a.author_research_interests_normalized @> ARRAY['Parsing']     AND c.citing_paper_quality_score_normalized > 0.8     AND k.keyphraseName ILIKE '%parsing%' GROUP BY      p.paperId, p.title, p.numCiting, p.paper_quality_score, c.citing_paper_quality_score_normalized, c.paper_citation_trend, pk.keyphraseName ORDER BY      p.numCiting DESC, c.citing_paper_quality_score_normalized DESC; ",
        "schema_links": [
            "cite.citing_paper_quality_score_normalized",
            "paperKeyphrase.paperId",
            "venue.venueId",
            "keyphrase.keyphraseId",
            "cite.citedPaperId",
            "paperKeyphrase.keyphraseName",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "author.author_research_interests_normalized",
            "paperKeyphrase.keyphraseId",
            "paper.paper_quality_score",
            "paper.numCiting",
            "cite.paper_citation_trend",
            "keyphrase.keyphraseName",
            "paper.title",
            "venue.venueName",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_770",
        "db_id": "academic_research_data",
        "question": "Which papers on \"Parsing\" were published in the venue \"acl\" during the year 2012? For these papers, provide their citation trends in subsequent years. Additionally, list the keyphrases associated with these papers and evaluate their relevance using the normalized weighted frequency of the keyphrases. Ensure that only papers with a non-null citation trend are included in the results. Present the information ordered by paper ID and keyphrase name.",
        "query": " SELECT      p.paperId,     p.title,     c.paper_citation_trend,     kp.keyphraseName,     pk.paper_keyphrase_weighted_frequency_normalized AS relevance_score FROM      paper p JOIN      venue v ON p.venueId = v.venueId JOIN      writes w ON p.paperId = w.paperId JOIN      author a ON w.authorId = a.authorId LEFT JOIN      cite c ON p.paperId = c.citedPaperId LEFT JOIN      paperKeyphrase pk ON p.paperId = pk.paperId LEFT JOIN      keyphrase k ON pk.keyphraseId = k.keyphraseId WHERE      v.venueName = 'acl'     AND p.year = 2012     AND 'Parsing' = ANY(a.author_research_interests_normalized)     AND c.paper_citation_trend IS NOT NULL ORDER BY      p.paperId, kp.keyphraseName; ",
        "schema_links": [
            "paperKeyphrase.paperId",
            "venue.venueId",
            "keyphrase.keyphraseId",
            "writes.authorId",
            "cite.citedPaperId",
            "paperKeyphrase.keyphraseName",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paperKeyphrase.keyphraseId",
            "paper.year",
            "author.author_research_interests_normalized",
            "paperKeyphrase.paper_keyphrase_weighted_frequency_normalized",
            "cite.paper_citation_trend",
            "keyphrase.keyphraseName",
            "paper.title",
            "venue.venueName",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_761",
        "db_id": "academic_research_data",
        "question": "What was the yearly trend of papers related to Parsing research published in venues with 'acl' in their names, in terms of the number of papers, average citations received, and average paper quality? Additionally, how did the citation quality of these papers evolve over the years compared to other conferences, as measured by the total citations received and the average quality of citing papers?",
        "query": " WITH parsing_papers AS (     SELECT          p.paperId,         p.year,         p.numCiting,         p.paper_quality_score_normalized AS paper_quality,         v.venueName     FROM          paper p     JOIN          venue v ON p.venueId = v.venueId     JOIN          writes w ON p.paperId = w.paperId     JOIN          author a ON w.authorId = a.authorId     WHERE          v.venueName LIKE '%acl%'         AND 'Parsing' = ANY(a.author_research_interests_normalized) ), citation_trends AS (     SELECT          pp.year,         COUNT(pp.paperId) AS paper_count,         AVG(pp.numCiting) AS avg_citations,         AVG(pp.paper_quality) AS avg_paper_quality     FROM          parsing_papers pp     GROUP BY          pp.year ), comparison_trends AS (     SELECT          c.year,         COUNT(c.citedPaperId) AS total_citations,         AVG(c.cited_paper_quality_score_normalized) AS avg_cited_paper_quality     FROM          cite c     JOIN          parsing_papers pp ON c.citedPaperId = pp.paperId     GROUP BY          c.year ) SELECT      ct.year,     ct.paper_count,     ct.avg_citations,     ct.avg_paper_quality,     cmp.total_citations AS total_citations_received,     cmp.avg_cited_paper_quality FROM      citation_trends ct LEFT JOIN      comparison_trends cmp ON ct.year = cmp.year ORDER BY      ct.year; ",
        "schema_links": [
            "venue.venueId",
            "cite.cited_paper_quality_score_normalized",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "author.author_research_interests_normalized",
            "paper.numCiting",
            "paper.paper_quality_score_normalized",
            "venue.venueName",
            "cite.year",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_769",
        "db_id": "academic_research_data",
        "question": "Which researchers, affiliated with institutions in the United States, have authored papers on the topic of Parsing that received high-quality citations (with normalized quality score greater than 0.8) at ACL conferences between the years 2010 and 2015? Additionally, provide the count of distinct papers they contributed to, their average normalized citation quality score across these papers, and the years in which they were active during this period, sorted by the average citation quality in descending order.",
        "query": " SELECT      a.authorName,      COUNT(DISTINCT p.paperId) AS paper_count,      AVG(c.cited_paper_quality_score_normalized) AS avg_citation_quality,      STRING_AGG(DISTINCT CAST(p.year AS TEXT), ',') AS years_active FROM      author a JOIN      writes w ON a.authorId = w.authorId JOIN      paper p ON w.paperId = p.paperId JOIN      cite c ON p.paperId = c.citedPaperId JOIN      venue v ON p.venueId = v.venueId WHERE      a.author_country = 'United States'      AND 'Parsing' = ANY(p.paper_keywords_normalized)      AND c.citing_paper_quality_score_normalized > 0.8      AND v.venueName = 'ACL'      AND p.year BETWEEN 2010 AND 2015 GROUP BY      a.authorName ORDER BY      avg_citation_quality DESC; ",
        "schema_links": [
            "cite.citing_paper_quality_score_normalized",
            "paper.paper_keywords_normalized",
            "venue.venueId",
            "cite.cited_paper_quality_score_normalized",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "author.author_country",
            "author.authorName",
            "venue.venueName",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_772",
        "db_id": "academic_research_data",
        "question": "What were the research papers published in ACL 2012 that focused on Parsing, including their citation counts? How many of these papers were cited by other high-quality papers (with a normalized quality score greater than 0.8) published in the same year? Additionally, which datasets and keyphrases were most frequently associated with these Parsing-related papers, ranked by their association strength?",
        "query": " WITH parsing_papers AS (     SELECT          p.paperId,         p.title,         p.numCiting,         p.numCitedBy,         p.paper_quality_score     FROM          paper p     JOIN          venue v ON p.venueId = v.venueId     JOIN          paperKeyphrase pk ON p.paperId = pk.paperId     JOIN          keyphrase k ON pk.keyphraseId = k.keyphraseId     WHERE          v.venueName = 'ACL'          AND p.year = 2012          AND LOWER(k.keyphraseName) LIKE '%parsing%' ), citations_by_high_quality AS (     SELECT          c.citedPaperId,         COUNT(c.citingPaperId) AS high_quality_citations     FROM          cite c     JOIN          paper cp ON c.citingPaperId = cp.paperId     WHERE          cp.year = 2012          AND cp.paper_quality_score_normalized > 0.8     GROUP BY          c.citedPaperId ), datasets_associated AS (     SELECT          pd.paperId,         d.datasetName,         SUM(pd.dataset_paper_count) AS total_dataset_count     FROM          paperDataset pd     JOIN          dataset d ON pd.datasetId = d.datasetId     WHERE          pd.paperId IN (SELECT paperId FROM parsing_papers)     GROUP BY          pd.paperId, d.datasetName ), keyphrases_associated AS (     SELECT          pk.paperId,         k.keyphraseName,         SUM(pk.keyphrase_frequency) AS total_keyphrase_frequency     FROM          paperKeyphrase pk     JOIN          keyphrase k ON pk.keyphraseId = k.keyphraseId     WHERE          pk.paperId IN (SELECT paperId FROM parsing_papers)     GROUP BY          pk.paperId, k.keyphraseName ) SELECT      pp.paperId,     pp.title,     COALESCE(cq.high_quality_citations, 0) AS high_quality_citations,     da.datasetName AS associated_dataset,     da.total_dataset_count,     ka.keyphraseName AS associated_keyphrase,     ka.total_keyphrase_frequency FROM      parsing_papers pp LEFT JOIN      citations_by_high_quality cq ON pp.paperId = cq.citedPaperId LEFT JOIN      datasets_associated da ON pp.paperId = da.paperId LEFT JOIN      keyphrases_associated ka ON pp.paperId = ka.paperId ORDER BY      pp.paperId, da.total_dataset_count DESC, ka.total_keyphrase_frequency DESC; ",
        "schema_links": [
            "cite.citedPaperId",
            "paper.paperId",
            "paperKeyphrase.keyphraseId",
            "paper.paper_quality_score",
            "dataset.datasetId",
            "paper.numCitedBy",
            "paperDataset.paperId",
            "keyphrase.keyphraseName",
            "paperDataset.dataset_paper_count",
            "dataset.datasetName",
            "cite.citingPaperId",
            "paperKeyphrase.paperId",
            "venue.venueId",
            "keyphrase.keyphraseId",
            "paperKeyphrase.keyphrase_frequency",
            "paperDataset.datasetId",
            "paper.venueId",
            "paper.year",
            "paper.numCiting",
            "paper.paper_quality_score_normalized",
            "paper.title",
            "venue.venueName"
        ]
    },
    {
        "instance_id": "q_778",
        "db_id": "academic_research_data",
        "question": "Which research papers published in ACL 2012 that focus on Parsing techniques have had a significant impact on subsequent studies, as evidenced by receiving more than 5 citations with an average normalized quality score of citing papers greater than the general threshold? Additionally, which authors of these papers have demonstrated a sustained interest in Parsing-related topics, as indicated by publishing more than one paper on Parsing and having \"Parsing\" explicitly listed in their research interests? Please provide the titles of the papers, their average citation quality scores, total citation counts, author names, the number of Parsing-focused papers they have written, and the distinct keywords associated with their Parsing-related publications, sorted by descending average citation quality and then by descending citation count.",
        "query": " WITH parsing_papers AS (     SELECT          p.paperId,         p.title,         p.numCiting,         p.paper_quality_score,         p.paper_keywords,         p.year     FROM          paper p     INNER JOIN          venue v ON p.venueId = v.venueId     INNER JOIN          paperKeyphrase pk ON p.paperId = pk.paperId     INNER JOIN          keyphrase k ON pk.keyphraseId = k.keyphraseId     WHERE          v.venueName = 'ACL'          AND p.year = 2012          AND LOWER(k.keyphraseName) LIKE '%parsing%' ), citation_impact AS (     SELECT          cp.citedPaperId,         AVG(cp.citing_paper_quality_score_normalized) AS avg_citation_quality,         COUNT(cp.citingPaperId) AS citation_count     FROM          cite cp     INNER JOIN          parsing_papers pp ON cp.citedPaperId = pp.paperId     GROUP BY          cp.citedPaperId     HAVING          COUNT(cp.citingPaperId) > 5 ), author_interest AS (     SELECT          w.authorId,         a.authorName,         COUNT(w.paperId) AS parsing_paper_count,         ARRAY_AGG(DISTINCT p.paper_keywords) AS author_parsing_keywords     FROM          writes w     INNER JOIN          parsing_papers p ON w.paperId = p.paperId     INNER JOIN          author a ON w.authorId = a.authorId     WHERE          LOWER(a.author_research_interests)::text LIKE '%parsing%'     GROUP BY          w.authorId, a.authorName     HAVING          COUNT(w.paperId) > 1 ) SELECT      pi.title,     ci.avg_citation_quality,     ci.citation_count,     ai.authorName,     ai.parsing_paper_count,     ai.author_parsing_keywords FROM      parsing_papers pi INNER JOIN      citation_impact ci ON pi.paperId = ci.citedPaperId INNER JOIN      writes w ON pi.paperId = w.paperId INNER JOIN      author_interest ai ON w.authorId = ai.authorId ORDER BY      ci.avg_citation_quality DESC, ci.citation_count DESC; ",
        "schema_links": [
            "paper.paper_keywords",
            "cite.citing_paper_quality_score_normalized",
            "paperKeyphrase.paperId",
            "venue.venueId",
            "keyphrase.keyphraseId",
            "author.author_research_interests",
            "cite.citedPaperId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "paperKeyphrase.keyphraseId",
            "paper.paper_quality_score",
            "paper.numCiting",
            "author.authorName",
            "keyphrase.keyphraseName",
            "paper.title",
            "venue.venueName",
            "cite.citingPaperId"
        ]
    },
    {
        "instance_id": "q_773",
        "db_id": "academic_research_data",
        "question": "What are the key research topics mentioned in the publications of author Luke S Zettlemoyer, including their usage trends over the years, as measured by the frequency of topic mentions and their relevance scores based on normalized paper quality scores? Additionally, how do these topics compare in terms of average citation counts, distribution across different publication venues, and association with various datasets, providing both the venue-wise and dataset-wise topic counts?",
        "query": " WITH author_papers AS (     SELECT          p.paperId,         p.paper_keywords,         p.paper_keywords_normalized,         p.paper_quality_score_normalized,         p.numCiting,         p.venueId,         p.year     FROM          writes w     JOIN          paper p ON w.paperId = p.paperId     JOIN          author a ON w.authorId = a.authorId     WHERE          a.authorName = 'Luke S Zettlemoyer' ), topic_frequency AS (     SELECT          unnest(paper_keywords) AS topic,         COUNT(*) AS mention_count,         SUM(paper_quality_score_normalized) AS relevance_score,         AVG(numCiting) AS avg_citations     FROM          author_papers     GROUP BY          topic ), topic_trends AS (     SELECT          ap.year,         ak.topic,         COUNT(*) AS yearly_mentions     FROM          author_papers ap     CROSS JOIN          unnest(ap.paper_keywords) AS ak(topic)     GROUP BY          ap.year, ak.topic ), venue_distribution AS (     SELECT          v.venueName,         ak.topic,         COUNT(*) AS venue_topic_count     FROM          author_papers ap     JOIN          venue v ON ap.venueId = v.venueId     CROSS JOIN          unnest(ap.paper_keywords) AS ak(topic)     GROUP BY          v.venueName, ak.topic ), dataset_distribution AS (     SELECT          d.datasetName,         ak.topic,         COUNT(*) AS dataset_topic_count     FROM          author_papers ap     JOIN          paperDataset pd ON ap.paperId = pd.paperId     JOIN          dataset d ON pd.datasetId = d.datasetId     CROSS JOIN          unnest(ap.paper_keywords) AS ak(topic)     GROUP BY          d.datasetName, ak.topic ) SELECT      tf.topic,     tf.mention_count,     tf.relevance_score,     tf.avg_citations,     tt.yearly_mentions,     vd.venueName,     vd.venue_topic_count,     dd.datasetName,     dd.dataset_topic_count FROM      topic_frequency tf LEFT JOIN      topic_trends tt ON tf.topic = tt.topic LEFT JOIN      venue_distribution vd ON tf.topic = vd.topic LEFT JOIN      dataset_distribution dd ON tf.topic = dd.topic ORDER BY      tf.relevance_score DESC, tf.mention_count DESC; ",
        "schema_links": [
            "paper.paper_keywords",
            "paper.paper_keywords_normalized",
            "venue.venueId",
            "paperDataset.datasetId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "dataset.datasetId",
            "paper.numCiting",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "paperDataset.paperId",
            "venue.venueName",
            "author.authorId",
            "dataset.datasetName"
        ]
    },
    {
        "instance_id": "q_777",
        "db_id": "academic_research_data",
        "question": "What are the evolving research trends of Sanjeev Arora over the past decade, specifically analyzing the citation quality of his papers, the impact factor of the journals he published in, and the relevant keyphrases associated with his work? Additionally, how do these trends vary across the different venues and datasets he has contributed to, ordered by the publication year in descending order?",
        "query": " WITH sanjeev_papers AS (     SELECT          p.paperId,          p.title,          p.year,          p.numCiting,          p.numCitedBy,          p.paper_quality_score,          p.paper_keywords_normalized,          j.impact_factor,          v.venueName,          d.datasetName     FROM          writes w     JOIN          paper p ON w.paperId = p.paperId     LEFT JOIN          journal j ON p.venueId = j.journalId     LEFT JOIN          venue v ON p.venueId = v.venueId     LEFT JOIN          paperDataset pd ON p.paperId = pd.paperId     LEFT JOIN          dataset d ON pd.datasetId = d.datasetId     WHERE          w.authorId = (SELECT authorId FROM author WHERE authorName = 'Sanjeev Arora')         AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 10 ),  citation_quality AS (     SELECT          sp.paperId,          AVG(c.cited_paper_quality_score_normalized) AS avg_citation_quality     FROM          sanjeev_papers sp     JOIN          cite c ON sp.paperId = c.citedPaperId     GROUP BY          sp.paperId ),  keyphrase_relevance AS (     SELECT          sp.paperId,          STRING_AGG(kp.keyphraseName, ', ') AS relevant_keyphrases     FROM          sanjeev_papers sp     JOIN          paperKeyphrase pk ON sp.paperId = pk.paperId     JOIN          keyphrase kp ON pk.keyphraseId = kp.keyphraseId     GROUP BY          sp.paperId ) SELECT      sp.title,      sp.year,      sp.numCiting,      sp.numCitedBy,      sp.paper_quality_score,      sp.impact_factor,      sp.venueName,      sp.datasetName,      cq.avg_citation_quality,      kr.relevant_keyphrases FROM      sanjeev_papers sp LEFT JOIN      citation_quality cq ON sp.paperId = cq.paperId LEFT JOIN      keyphrase_relevance kr ON sp.paperId = kr.paperId ORDER BY      sp.year DESC; ",
        "schema_links": [
            "journal.journalId",
            "paper.paper_keywords_normalized",
            "cite.cited_paper_quality_score_normalized",
            "cite.citedPaperId",
            "paper.paperId",
            "writes.paperId",
            "paperKeyphrase.keyphraseId",
            "paper.paper_quality_score",
            "dataset.datasetId",
            "paper.numCitedBy",
            "keyphrase.keyphraseName",
            "paperDataset.paperId",
            "author.authorId",
            "dataset.datasetName",
            "paperKeyphrase.paperId",
            "venue.venueId",
            "keyphrase.keyphraseId",
            "paperDataset.datasetId",
            "writes.authorId",
            "paper.venueId",
            "paper.year",
            "paper.numCiting",
            "journal.impact_factor",
            "paper.title",
            "venue.venueName"
        ]
    },
    {
        "instance_id": "q_775",
        "db_id": "academic_research_data",
        "question": "What are the trending research topics of Sanjeev Arora in the last five years, specifically focusing on papers that are open access, and analyzing the quality of citations and the prestige of publication venues? Additionally, identify how these topics align with high-impact journals (with an impact factor greater than 10) and conferences, and determine the growth trend of his work's influence in these areas based on the frequency of topic mentions and citation quality. Provide results for topics mentioned more than five times, ordered by the frequency of mentions and average citation quality.",
        "query": " WITH recent_papers AS (     SELECT          w.paperId,         p.title,         p.year,         p.paper_quality_score_normalized,         v.venueName,         v.impact_factor,         p.paper_keywords_normalized     FROM          writes w     JOIN          paper p ON w.paperId = p.paperId     JOIN          venue v ON p.venueId = v.venueId     WHERE          w.authorId = (SELECT authorId FROM author WHERE authorName = 'Sanjeev Arora')         AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5         AND p.is_open_access = TRUE ), citation_quality AS (     SELECT          cp.citedPaperId,         AVG(cp.citing_paper_quality_score_normalized) AS avg_citation_quality     FROM          cite cp     JOIN          recent_papers rp ON cp.citedPaperId = rp.paperId     GROUP BY          cp.citedPaperId ), topic_trends AS (     SELECT          UNNEST(paper_keywords_normalized) AS keyword,         COUNT(*) AS mention_count,         AVG(avg_citation_quality) AS avg_citation_quality,         STRING_AGG(DISTINCT venueName, ', ') AS venues     FROM          recent_papers rp     JOIN          citation_quality cq ON rp.paperId = cq.citedPaperId     GROUP BY          keyword     ORDER BY          mention_count DESC, avg_citation_quality DESC ), high_impact_alignment AS (     SELECT          tt.keyword,         tt.mention_count,         tt.avg_citation_quality,         tt.venues,         COUNT(vj.journalId) AS high_impact_count     FROM          topic_trends tt     LEFT JOIN          paper pj ON POSITION(tt.keyword IN pj.paper_keywords_normalized) > 0     LEFT JOIN          journal vj ON pj.venueId = vj.journalId AND vj.impact_factor > 10     GROUP BY          tt.keyword, tt.mention_count, tt.avg_citation_quality, tt.venues ) SELECT      keyword,     mention_count,     avg_citation_quality,     venues,     high_impact_count,     CASE          WHEN mention_count > LAG(mention_count) OVER (ORDER BY keyword) THEN 'Growing'         WHEN mention_count < LAG(mention_count) OVER (ORDER BY keyword) THEN 'Declining'         ELSE 'Stable'     END AS growth_trend FROM      high_impact_alignment WHERE      mention_count > 5 ORDER BY      mention_count DESC, avg_citation_quality DESC; ",
        "schema_links": [
            "journal.journalId",
            "paper.paper_keywords_normalized",
            "vj.impact_factor",
            "paper.title",
            "vj.journalId",
            "cite.citedPaperId",
            "topic_trends.avg_citation_quality",
            "paper.paperId",
            "writes.paperId",
            "citation_quality.citedPaperId",
            "high_impact_alignment.mention_count",
            "high_impact_alignment.avg_citation_quality",
            "high_impact_alignment.keyword",
            "author.authorId",
            "cite.citing_paper_quality_score_normalized",
            "venue.impact_factor",
            "high_impact_alignment.venues",
            "recent_papers.paper_keywords_normalized",
            "topic_trends.mention_count",
            "writes.authorId",
            "recent_papers.paperId",
            "paper.is_open_access",
            "paper.venueId",
            "paper.year",
            "topic_trends.venues",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "journal.impact_factor",
            "topic_trends.keyword",
            "venue.venueName"
        ]
    },
    {
        "instance_id": "q_776",
        "db_id": "academic_research_data",
        "question": "What are the high-quality research papers authored by Sanjeev Arora in the past five years, where the papers have a normalized paper quality score greater than 0.8 and are published in venues with an impact factor exceeding 2.5? Additionally, list the trending research topics associated with these papers based on the distinct keyphrases used, ordered by the paper quality score in descending order.",
        "query": " SELECT      p.paperId,     p.title,     p.year,     p.paper_quality_score,     v.venueName,     v.impact_factor,     STRING_AGG(DISTINCT k.keyphraseName, ', ') AS trending_topics FROM      paper p JOIN      writes w ON p.paperId = w.paperId JOIN      author a ON w.authorId = a.authorId JOIN      venue v ON p.venueId = v.venueId LEFT JOIN      paperKeyphrase pk ON p.paperId = pk.paperId LEFT JOIN      keyphrase k ON pk.keyphraseId = k.keyphraseId WHERE      a.authorName = 'Sanjeev Arora'     AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5     AND p.paper_quality_score_normalized > 0.8     AND v.impact_factor > 2.5 GROUP BY      p.paperId, p.title, p.year, p.paper_quality_score, v.venueName, v.impact_factor ORDER BY      p.paper_quality_score DESC; ",
        "schema_links": [
            "venue.impact_factor",
            "paperKeyphrase.paperId",
            "venue.venueId",
            "keyphrase.keyphraseId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "paperKeyphrase.keyphraseId",
            "paper.paper_quality_score",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "keyphrase.keyphraseName",
            "paper.title",
            "venue.venueName",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_771",
        "db_id": "academic_research_data",
        "question": "How many papers related to the keyphrase \"parsing\" were published in venues with \"ACL\" in their name over the past 10 years, broken down by year? Additionally, what is the average normalized quality score trend of these papers compared to the average normalized quality score trend of papers from other NLP-related conferences (identified by keyphrases \"NLP\" or \"natural language processing\") over the same time period?",
        "query": " WITH acl_parsing_papers AS (     SELECT          p.paperId,         p.title,         p.year,         p.numCiting,         p.paper_quality_score_normalized     FROM          paper p     JOIN          venue v ON p.venueId = v.venueId     JOIN          paperKeyphrase pk ON p.paperId = pk.paperId     JOIN          keyphrase k ON pk.keyphraseId = k.keyphraseId     WHERE          v.venueName LIKE '%ACL%'         AND k.keyphraseName = 'parsing'         AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 10 ), citation_quality_trend AS (     SELECT          year,         COUNT(*) AS paper_count,         AVG(paper_quality_score_normalized) AS avg_quality_score     FROM          acl_parsing_papers     GROUP BY          year ), nlp_conference_comparison AS (     SELECT          p.year,         AVG(p.paper_quality_score_normalized) AS avg_nlp_quality_score     FROM          paper p     JOIN          venue v ON p.venueId = v.venueId     JOIN          paperKeyphrase pk ON p.paperId = pk.paperId     JOIN          keyphrase k ON pk.keyphraseId = k.keyphraseId     WHERE          v.venue_type = 'conference'         AND k.keyphraseName IN ('NLP', 'natural language processing')         AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 10     GROUP BY          p.year ) SELECT      cpt.year,     cpt.paper_count,     cpt.avg_quality_score,     ncc.avg_nlp_quality_score FROM      citation_quality_trend cpt LEFT JOIN      nlp_conference_comparison ncc ON cpt.year = ncc.year ORDER BY      cpt.year; ",
        "schema_links": [
            "nlp_conference_comparison.year",
            "acl_parsing_papers.year",
            "paperKeyphrase.paperId",
            "acl_parsing_papers.paper_quality_score_normalized",
            "venue.venueId",
            "keyphrase.keyphraseId",
            "citation_quality_trend.year",
            "nlp_conference_comparison.avg_nlp_quality_score",
            "paper.paperId",
            "citation_quality_trend.paper_count",
            "paper.venueId",
            "paper.year",
            "paperKeyphrase.keyphraseId",
            "paper.numCiting",
            "venue.venue_type",
            "paper.paper_quality_score_normalized",
            "keyphrase.keyphraseName",
            "paper.title",
            "venue.venueName",
            "citation_quality_trend.avg_quality_score"
        ]
    },
    {
        "instance_id": "q_779",
        "db_id": "academic_research_data",
        "question": "How many papers with \"parsing\" as a keyphrase were published in conferences in the year 2014, and what is the yearly trend of their citations from 2015 to 2019?",
        "query": " WITH parsing_papers AS (     SELECT          p.paperId,         p.title,         p.year,         p.numCiting,         pk.keyphraseName     FROM          paper p     JOIN          paperKeyphrase pkp ON p.paperId = pkp.paperId     JOIN          keyphrase k ON pkp.keyphraseId = k.keyphraseId     JOIN          venue v ON p.venueId = v.venueId     WHERE          k.keyphraseName ILIKE '%parsing%'         AND v.venue_type = 'conference'         AND p.year = 2014 ), citation_trend AS (     SELECT          cp.citedPaperId,         c.citingPaperId,         EXTRACT(YEAR FROM c.paper_citation_trend_normalized) AS citation_year,         COUNT(c.citingPaperId) AS citation_count     FROM          cite c     JOIN          parsing_papers pp ON c.citedPaperId = pp.paperId     WHERE          EXTRACT(YEAR FROM c.paper_citation_trend_normalized) BETWEEN 2015 AND 2019     GROUP BY          cp.citedPaperId, citation_year ) SELECT      COUNT(pp.paperId) AS paper_count,     ct.citation_year,     SUM(ct.citation_count) AS total_citations FROM      parsing_papers pp LEFT JOIN      citation_trend ct ON pp.paperId = ct.citedPaperId GROUP BY      ct.citation_year ORDER BY      ct.citation_year; ",
        "schema_links": [
            "citation_trend.citation_year",
            "paperKeyphrase.paperId",
            "parsing_papers.paperId",
            "venue.venueId",
            "keyphrase.keyphraseId",
            "cite.paper_citation_trend_normalized",
            "cite.citedPaperId",
            "paper.paperId",
            "paper.venueId",
            "paper.year",
            "paperKeyphrase.keyphraseId",
            "paper.numCiting",
            "venue.venue_type",
            "citation_trend.citation_count",
            "keyphrase.keyphraseName",
            "paper.title",
            "cite.citingPaperId"
        ]
    },
    {
        "instance_id": "q_774",
        "db_id": "academic_research_data",
        "question": "How many papers with the keyword \"parsing\" were published in 2014, and what is the yearly trend of citations these papers received from papers published in subsequent years? Additionally, identify the top 10 venues with the highest citation density for these \"parsing\"-related papers, defined as the average number of citations per paper.",
        "query": " WITH parsing_papers AS (     SELECT          p.paperId,         p.title,         p.year,         p.numCitedBy,         v.venueName     FROM          paper p     JOIN          venue v ON p.venueId = v.venueId     WHERE          p.year = 2014         AND 'parsing' = ANY(p.paper_keywords_normalized) ), citation_trend AS (     SELECT          c.citedPaperId,         EXTRACT(YEAR FROM CURRENT_DATE) - p.year AS years_since_publication,         COUNT(c.citingPaperId) AS citations_received     FROM          cite c     JOIN          parsing_papers pp ON c.citedPaperId = pp.paperId     JOIN          paper p ON c.citingPaperId = p.paperId     WHERE          p.year > 2014     GROUP BY          c.citedPaperId, years_since_publication ), venue_citation_density AS (     SELECT          pp.venueName,         SUM(pp.numCitedBy) / COUNT(pp.paperId) AS citation_density     FROM          parsing_papers pp     GROUP BY          pp.venueName     ORDER BY          citation_density DESC     LIMIT 10 ) SELECT      (SELECT COUNT(*) FROM parsing_papers) AS papers_published_in_2014,     ct.years_since_publication,     SUM(ct.citations_received) AS total_citations_received,     vcd.venueName,     vcd.citation_density FROM      citation_trend ct RIGHT JOIN      venue_citation_density vcd ON ct.citedPaperId = vcd.venueName GROUP BY      ct.years_since_publication, vcd.venueName, vcd.citation_density; ",
        "schema_links": [
            "venue_citation_density.citation_density",
            "parsing_papers.numCitedBy",
            "paper.paper_keywords_normalized",
            "citation_trend.citations_received",
            "parsing_papers.paperId",
            "venue.venueId",
            "cite.citedPaperId",
            "paper.paperId",
            "paper.venueId",
            "paper.year",
            "citation_trend.years_since_publication",
            "paper.numCitedBy",
            "cite.citingPaperId",
            "paper.title",
            "venue.venueName",
            "venue_citation_density.venueName",
            "parsing_papers.venueName"
        ]
    },
    {
        "instance_id": "q_781",
        "db_id": "academic_research_data",
        "question": "What are the high-quality research papers authored by Brian Curless that include convolution techniques as key topics, published or updated in the past five years, with a normalized paper quality score greater than 0.8? Additionally, provide their citation counts and trends from citing papers over the past five years, along with any related datasets and the quality scores of those datasets. The results should be ordered by descending citation count and then by the most recently updated papers.",
        "query": " SELECT      p.paperId,     p.title,     p.year,     p.numCiting AS citation_count,     c.paper_citation_trend AS citation_trend,     d.datasetName AS related_dataset,     pd.paper_dataset_quality_score AS dataset_quality_score FROM      paper p JOIN      writes w ON p.paperId = w.paperId JOIN      author a ON w.authorId = a.authorId JOIN      paperKeyphrase pk ON p.paperId = pk.paperId JOIN      keyphrase k ON pk.keyphraseId = k.keyphraseId LEFT JOIN      cite c ON p.paperId = c.citedPaperId LEFT JOIN      paperDataset pd ON p.paperId = pd.paperId LEFT JOIN      dataset d ON pd.datasetId = d.datasetId WHERE      a.authorName = 'Brian Curless'     AND k.keyphraseName ILIKE '%convolution%'     AND p.paper_last_updated >= NOW() - INTERVAL '5 years'     AND p.paper_quality_score_normalized > 0.8 ORDER BY      p.numCiting DESC,      p.paper_last_updated DESC; ",
        "schema_links": [
            "cite.citedPaperId",
            "paper.paperId",
            "writes.paperId",
            "paperKeyphrase.keyphraseId",
            "dataset.datasetId",
            "cite.paper_citation_trend",
            "paperDataset.paper_dataset_quality_score",
            "paperDataset.paperId",
            "keyphrase.keyphraseName",
            "author.authorId",
            "dataset.datasetName",
            "paperKeyphrase.paperId",
            "keyphrase.keyphraseId",
            "paperDataset.datasetId",
            "paper.paper_last_updated",
            "writes.authorId",
            "paper.year",
            "paper.numCiting",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "paper.title"
        ]
    },
    {
        "instance_id": "q_783",
        "db_id": "academic_research_data",
        "question": "Which research works authored by Brian Curless that are associated with convolution techniques have been published, and how have these publications influenced the field over time in terms of citation trends and quality scores? Specifically, provide the publication year, total citations, quality score, and normalized quality score for each paper. Additionally, explore the citing papers' quality scores and citation trends, including their normalized values. Investigate the datasets used in these papers, listing the dataset names along with their quality scores and normalized quality scores. Finally, analyze the relevance of these papers to key research phrases by providing the keyphrase names, their frequencies, weighted frequencies, and normalized weighted frequencies, sorted by publication year in ascending order and by total citations in descending order within each year.",
        "query": " WITH RelevantPapers AS (     SELECT          p.paperId,         p.title,         p.year,         p.numCiting,         p.numCitedBy,         p.paper_quality_score,         p.paper_quality_score_normalized,         p.paper_last_updated     FROM          paper p     INNER JOIN          writes w ON p.paperId = w.paperId     INNER JOIN          author a ON w.authorId = a.authorId     INNER JOIN          paperKeyphrase pk ON p.paperId = pk.paperId     INNER JOIN          keyphrase k ON pk.keyphraseId = k.keyphraseId     WHERE          a.authorName = 'Brian Curless'          AND LOWER(k.keyphraseName) LIKE '%convolution%' ), CitationTrends AS (     SELECT          r.paperId,         c.citingPaperId,         c.cited_paper_quality_score,         c.cited_paper_quality_score_normalized,         c.paper_citation_trend,         c.paper_citation_trend_normalized     FROM          RelevantPapers r     INNER JOIN          cite c ON r.paperId = c.citedPaperId ), DatasetUsage AS (     SELECT          r.paperId,         pd.datasetId,         d.datasetName,         pd.paper_dataset_quality_score,         pd.paper_dataset_quality_score_normalized     FROM          RelevantPapers r     INNER JOIN          paperDataset pd ON r.paperId = pd.paperId     INNER JOIN          dataset d ON pd.datasetId = d.datasetId ), KeyphraseRelevance AS (     SELECT          r.paperId,         pk.keyphraseId,         k.keyphraseName,         pk.keyphrase_frequency,         pk.paper_keyphrase_weighted_frequency,         pk.paper_keyphrase_weighted_frequency_normalized     FROM          RelevantPapers r     INNER JOIN          paperKeyphrase pk ON r.paperId = pk.paperId     INNER JOIN          keyphrase k ON pk.keyphraseId = k.keyphraseId ) SELECT      rp.title AS PaperTitle,     rp.year AS PublicationYear,     rp.numCiting AS TotalCitations,     rp.paper_quality_score AS QualityScore,     rp.paper_quality_score_normalized AS NormalizedQualityScore,     ct.citingPaperId AS CitingPaperId,     ct.cited_paper_quality_score AS CitedPaperQualityScore,     ct.paper_citation_trend AS CitationTrend,     ct.paper_citation_trend_normalized AS NormalizedCitationTrend,     du.datasetName AS DatasetUsed,     du.paper_dataset_quality_score AS DatasetQualityScore,     du.paper_dataset_quality_score_normalized AS NormalizedDatasetQualityScore,     kr.keyphraseName AS KeyResearchPhrase,     kr.keyphrase_frequency AS KeyphraseFrequency,     kr.paper_keyphrase_weighted_frequency AS WeightedKeyphraseFrequency,     kr.paper_keyphrase_weighted_frequency_normalized AS NormalizedWeightedKeyphraseFrequency FROM      RelevantPapers rp LEFT JOIN      CitationTrends ct ON rp.paperId = ct.paperId LEFT JOIN      DatasetUsage du ON rp.paperId = du.paperId LEFT JOIN      KeyphraseRelevance kr ON rp.paperId = kr.paperId ORDER BY      rp.year ASC, rp.numCiting DESC; ",
        "schema_links": [
            "cite.cited_paper_quality_score_normalized",
            "cite.citedPaperId",
            "paperKeyphrase.paper_keyphrase_weighted_frequency",
            "paper.paperId",
            "writes.paperId",
            "paperKeyphrase.keyphraseId",
            "paperKeyphrase.paper_keyphrase_weighted_frequency_normalized",
            "paper.paper_quality_score",
            "dataset.datasetId",
            "paper.numCitedBy",
            "cite.paper_citation_trend",
            "paperDataset.paper_dataset_quality_score_normalized",
            "paperDataset.paper_dataset_quality_score",
            "paperDataset.paperId",
            "keyphrase.keyphraseName",
            "author.authorId",
            "dataset.datasetName",
            "cite.citingPaperId",
            "cite.cited_paper_quality_score",
            "paperKeyphrase.paperId",
            "paperKeyphrase.keyphrase_frequency",
            "keyphrase.keyphraseId",
            "cite.paper_citation_trend_normalized",
            "paperDataset.datasetId",
            "paper.paper_last_updated",
            "writes.authorId",
            "paper.year",
            "paper.numCiting",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "paper.title"
        ]
    },
    {
        "instance_id": "q_792",
        "db_id": "academic_research_data",
        "question": "Which papers authored by Brian Curless in the past five years focus on convolution techniques? For these papers, compare their citation counts to the average citation counts of all papers published in the same venues over the same five-year period. Additionally, evaluate the quality of datasets used in these papers by examining the dataset names, download counts, user ratings, and paper-specific dataset quality scores.",
        "query": " WITH brian_curless_papers AS (     SELECT          p.paperId,          p.title,          p.venueId,          p.year,          p.numCiting,          p.paper_quality_score     FROM          paper p     JOIN          writes w ON p.paperId = w.paperId     JOIN          author a ON w.authorId = a.authorId     WHERE          a.authorName = 'Brian Curless'         AND 'convolution' = ANY(p.paper_keywords_normalized)         AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5 ), venue_avg_citations AS (     SELECT          bp.venueId,          AVG(p.numCiting) AS avg_citations     FROM          brian_curless_papers bp     JOIN          paper p ON bp.venueId = p.venueId     WHERE          p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5     GROUP BY          bp.venueId ), dataset_quality AS (     SELECT          pd.paperId,          d.datasetName,          d.dataset_download_count,          d.dataset_user_rating,          pd.paper_dataset_quality_score     FROM          paperDataset pd     JOIN          dataset d ON pd.datasetId = d.datasetId     WHERE          pd.paperId IN (SELECT paperId FROM brian_curless_papers) ) SELECT      bcp.title,      bcp.numCiting AS paper_citations,      vac.avg_citations AS venue_avg_citations,      dq.datasetName,      dq.dataset_download_count,      dq.dataset_user_rating,      dq.paper_dataset_quality_score FROM      brian_curless_papers bcp LEFT JOIN      venue_avg_citations vac ON bcp.venueId = vac.venueId LEFT JOIN      dataset_quality dq ON bcp.paperId = dq.paperId; ",
        "schema_links": [
            "paper.paper_keywords_normalized",
            "dataset.dataset_user_rating",
            "author.authorId",
            "paperDataset.datasetId",
            "writes.authorId",
            "dataset.download_count",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "paper.paper_quality_score",
            "dataset.datasetId",
            "paper.numCiting",
            "dataset.dataset_download_count",
            "author.authorName",
            "paperDataset.paper_dataset_quality_score",
            "paperDataset.paperId",
            "paper.title",
            "dataset.user_rating",
            "dataset.datasetName"
        ]
    },
    {
        "instance_id": "q_784",
        "db_id": "academic_research_data",
        "question": "Which are the top 10 research topics related to \"convolution\" that Brian Curless has most frequently explored, and how have these topics evolved over time in terms of average citation counts and publication quality scores? Additionally, identify any datasets and keyphrases that are prominently associated with his work on these convolution-related topics.",
        "query": " WITH convolution_topics AS (     SELECT          w.authorId,         p.paperId,         unnest(p.paper_keywords_normalized) AS topic,         p.year,         p.numCiting AS citation_count,         p.paper_quality_score_normalized AS quality_score,         pd.datasetId,         pk.keyphraseId     FROM          writes w     JOIN          paper p ON w.paperId = p.paperId     LEFT JOIN          paperDataset pd ON p.paperId = pd.paperId     LEFT JOIN          paperKeyphrase pk ON p.paperId = pk.paperId     WHERE          w.authorId = (SELECT authorId FROM author WHERE authorName = 'Brian Curless')         AND EXISTS (SELECT 1 FROM unnest(p.paper_keywords_normalized) AS t WHERE t ILIKE '%convolution%') ), topic_frequency AS (     SELECT          topic,         COUNT(*) AS frequency     FROM          convolution_topics     GROUP BY          topic     ORDER BY          frequency DESC     LIMIT 10 ), topic_evolution AS (     SELECT          ct.topic,         ct.year,         AVG(ct.citation_count) AS avg_citations,         AVG(ct.quality_score) AS avg_quality     FROM          convolution_topics ct     JOIN          topic_frequency tf ON ct.topic = tf.topic     GROUP BY          ct.topic, ct.year     ORDER BY          ct.topic, ct.year ), dataset_association AS (     SELECT          DISTINCT ct.topic, d.datasetName     FROM          convolution_topics ct     JOIN          dataset d ON ct.datasetId = d.datasetId ), keyphrase_association AS (     SELECT          DISTINCT ct.topic, k.keyphraseName     FROM          convolution_topics ct     JOIN          keyphrase k ON ct.keyphraseId = k.keyphraseId ) SELECT      tf.topic,     tf.frequency,     te.year,     te.avg_citations,     te.avg_quality,     da.datasetName,     ka.keyphraseName FROM      topic_frequency tf LEFT JOIN      topic_evolution te ON tf.topic = te.topic LEFT JOIN      dataset_association da ON tf.topic = da.topic LEFT JOIN      keyphrase_association ka ON tf.topic = ka.topic ORDER BY      tf.frequency DESC, te.year; ",
        "schema_links": [
            "paper.paper_keywords_normalized",
            "keyphrase.keyphraseId",
            "paperDataset.datasetId",
            "writes.authorId",
            "paper.paperId",
            "paper.year",
            "paperKeyphrase.keyphraseId",
            "dataset.datasetId",
            "paper.numCiting",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "keyphrase.keyphraseName",
            "author.authorId",
            "dataset.datasetName"
        ]
    },
    {
        "instance_id": "q_786",
        "db_id": "academic_research_data",
        "question": "Which papers authored by Brian Curless are most closely associated with the topic of convolution, considering the weighted frequency of keyphrases related to convolution techniques? Additionally, evaluate these papers based on their citation trends from 2010 onwards, including the average quality of citing papers. Further, assess the impact of these papers by counting citations from high-impact journals and conferences (with an impact factor greater than 5), and rank the results by the relevance of keyphrases, average citation quality, and paper quality score in descending order. Include papers with no high-impact citations in the results, showing zero as their high-impact citation count.",
        "query": " WITH convolution_keyphrases AS (     SELECT keyphraseId      FROM keyphrase      WHERE keyphraseName ILIKE '%convolution%' ), author_papers AS (     SELECT p.paperId, p.title, p.numCiting, p.paper_quality_score, p.paper_keywords_similarity_score, p.year     FROM paper p     JOIN writes w ON p.paperId = w.paperId     JOIN author a ON w.authorId = a.authorId     WHERE a.authorName = 'Brian Curless' ), paper_convolution_relevance AS (     SELECT ap.paperId, ap.title, ap.numCiting, ap.paper_quality_score, ap.paper_keywords_similarity_score, SUM(pkw.paper_keyphrase_weighted_frequency_normalized) AS keyphrase_relevance_score     FROM author_papers ap     JOIN paperKeyphrase pkw ON ap.paperId = pkw.paperId     JOIN convolution_keyphrases ck ON pkw.keyphraseId = ck.keyphraseId     GROUP BY ap.paperId, ap.title, ap.numCiting, ap.paper_quality_score, ap.paper_keywords_similarity_score ), citation_trends AS (     SELECT cp.citedPaperId, AVG(cp.citing_paper_quality_score_normalized) AS avg_citation_quality, COUNT(cp.citingPaperId) AS citation_count     FROM cite cp     JOIN paper citer ON cp.citingPaperId = citer.paperId     WHERE citer.year >= 2010     GROUP BY cp.citedPaperId ), high_impact_venues AS (     SELECT v.venueId      FROM venue v     JOIN journal j ON v.venueId = j.journalId     WHERE j.impact_factor > 5 ), paper_high_impact_citations AS (     SELECT c.citedPaperId, COUNT(c.citingPaperId) AS high_impact_citations     FROM cite c     JOIN paper p ON c.citingPaperId = p.paperId     JOIN high_impact_venues hiv ON p.venueId = hiv.venueId     GROUP BY c.citedPaperId ) SELECT pcr.paperId, pcr.title, pcr.numCiting, pcr.paper_quality_score, pcr.paper_keywords_similarity_score, pcr.keyphrase_relevance_score, ct.avg_citation_quality, ct.citation_count, COALESCE(phic.high_impact_citations, 0) AS high_impact_citations FROM paper_convolution_relevance pcr LEFT JOIN citation_trends ct ON pcr.paperId = ct.citedPaperId LEFT JOIN paper_high_impact_citations phic ON pcr.paperId = phic.citedPaperId ORDER BY pcr.keyphrase_relevance_score DESC, ct.avg_citation_quality DESC, pcr.paper_quality_score DESC; ",
        "schema_links": [
            "journal.journalId",
            "cite.citedPaperId",
            "paper.paper_keywords_similarity_score",
            "paper.paperId",
            "writes.paperId",
            "paperKeyphrase.keyphraseId",
            "paperKeyphrase.paper_keyphrase_weighted_frequency_normalized",
            "paper.paper_quality_score",
            "keyphrase.keyphraseName",
            "author.authorId",
            "cite.citingPaperId",
            "cite.citing_paper_quality_score_normalized",
            "paper.citing_paper_quality_score_normalized",
            "paperKeyphrase.paperId",
            "venue.venueId",
            "keyphrase.keyphraseId",
            "writes.authorId",
            "paper.venueId",
            "paper.year",
            "paper.numCiting",
            "author.authorName",
            "journal.impact_factor",
            "paper.title"
        ]
    },
    {
        "instance_id": "q_793",
        "db_id": "academic_research_data",
        "question": "What are the keyphrases most relevant to Brian Curless's research, considering the citation trends and quality of papers he has authored in the past five years, specifically focusing on open-access papers? Additionally, compare the usage frequency of these keyphrases across conferences versus journals, using weighted frequency as the comparison metric. Provide results ordered by the average normalized paper quality score in descending order, followed by the total keyphrase frequency in descending order.",
        "query": " WITH RelevantPapers AS (     SELECT          p.paperId,          p.title,          p.numCiting,          p.paper_quality_score_normalized,          c.paper_citation_trend_normalized     FROM          writes w     JOIN          author a ON w.authorId = a.authorId     JOIN          paper p ON w.paperId = p.paperId     LEFT JOIN          cite c ON p.paperId = c.citedPaperId     WHERE          a.authorName = 'Brian Curless'          AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5         AND p.is_open_access IS NOT NULL ), KeyphraseRelevance AS (     SELECT          pk.keyphraseId,          k.keyphraseName,          AVG(rp.numCiting) AS avg_numCiting,          AVG(rp.paper_quality_score_normalized) AS avg_paper_quality_score_normalized,          AVG(rp.paper_citation_trend_normalized) AS avg_paper_citation_trend_normalized,          SUM(pk.keyphrase_frequency) AS total_keyphrase_frequency     FROM          RelevantPapers rp     JOIN          paperKeyphrase pk ON rp.paperId = pk.paperId     JOIN          keyphrase k ON pk.keyphraseId = k.keyphraseId     GROUP BY          pk.keyphraseId,          k.keyphraseName ), VenueComparison AS (     SELECT          kr.keyphraseName,          SUM(CASE WHEN v.venue_type = 'conference' THEN pkw.paper_keyphrase_weighted_frequency ELSE 0 END) AS conference_usage,         SUM(CASE WHEN v.venue_type = 'journal' THEN pkw.paper_keyphrase_weighted_frequency ELSE 0 END) AS journal_usage     FROM          KeyphraseRelevance kr     JOIN          paperKeyphrase pkw ON kr.keyphraseName = (SELECT keyphraseName FROM keyphrase WHERE keyphraseId = pkw.keyphraseId)     JOIN          paper p ON pkw.paperId = p.paperId     JOIN          venue v ON p.venueId = v.venueId     GROUP BY          kr.keyphraseName ) SELECT      kc.keyphraseName,      kc.avg_numCiting,      kc.avg_paper_quality_score_normalized,      kc.avg_paper_citation_trend_normalized,      vc.conference_usage,      vc.journal_usage FROM      KeyphraseRelevance kc JOIN      VenueComparison vc ON kc.keyphraseName = vc.keyphraseName ORDER BY      kc.avg_paper_quality_score_normalized DESC,      kc.total_keyphrase_frequency DESC; ",
        "schema_links": [
            "cite.citedPaperId",
            "paperKeyphrase.paper_keyphrase_weighted_frequency",
            "paper.paperId",
            "writes.paperId",
            "paperKeyphrase.keyphraseId",
            "keyphrase.keyphraseName",
            "author.authorId",
            "paperKeyphrase.paperId",
            "paperKeyphrase.keyphrase_frequency",
            "keyphrase.keyphraseId",
            "venue.venueId",
            "cite.paper_citation_trend_normalized",
            "writes.authorId",
            "paper.is_open_access",
            "paper.venueId",
            "paper.year",
            "paper.numCiting",
            "venue.venue_type",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "VenueComparison.keyphraseName",
            "paper.title",
            "RelevantPapers.paperId"
        ]
    },
    {
        "instance_id": "q_787",
        "db_id": "academic_research_data",
        "question": "在过去五年中，哪些研究者的兴趣领域包含卷积神经网络，并且其发表的论文引用质量评分超过所有论文的平均值？请进一步分析这些研究者在顶级期刊和会议（定义为影响因子大于5）中的论文分布情况，以及他们对数据集的使用趋势。最终结果需按照研究者的H指数降序排列，若H指数相同，则按平均论文质量评分降序排列。",
        "query": " WITH influential_authors AS (     SELECT          a.authorId,         a.authorName,         a.h_index,         AVG(p.paper_quality_score) AS avg_paper_quality_score     FROM          author a     JOIN          writes w ON a.authorId = w.authorId     JOIN          paper p ON w.paperId = p.paperId     WHERE          'convolutional neural network' = ANY(a.author_research_interests_normalized)         AND p.paper_quality_score > (SELECT AVG(paper_quality_score) FROM paper)     GROUP BY          a.authorId, a.authorName, a.h_index     HAVING          COUNT(DISTINCT p.paperId) > 0 ), top_venues_distribution AS (     SELECT          ia.authorId,         v.venueName,         COUNT(p.paperId) AS paper_count     FROM          influential_authors ia     JOIN          writes w ON ia.authorId = w.authorId     JOIN          paper p ON w.paperId = p.paperId     JOIN          venue v ON p.venueId = v.venueId     WHERE          v.impact_factor > 5 -- Assuming top journals/conferences have an impact factor > 5     GROUP BY          ia.authorId, v.venueName ), dataset_usage_trend AS (     SELECT          ia.authorId,         d.datasetName,         SUM(pd.dataset_paper_count) AS total_dataset_usage     FROM          influential_authors ia     JOIN          writes w ON ia.authorId = w.authorId     JOIN          paper p ON w.paperId = p.paperId     JOIN          paperDataset pd ON p.paperId = pd.paperId     JOIN          dataset d ON pd.datasetId = d.datasetId     WHERE          p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5     GROUP BY          ia.authorId, d.datasetName ) SELECT      ia.authorName,     ia.h_index,     ia.avg_paper_quality_score,     COALESCE(tv.venueName, 'No Top Venue') AS top_venue,     COALESCE(tv.paper_count, 0) AS papers_in_top_venue,     COALESCE(dut.datasetName, 'No Dataset Used') AS dataset_used,     COALESCE(dut.total_dataset_usage, 0) AS dataset_usage_count FROM      influential_authors ia LEFT JOIN      top_venues_distribution tv ON ia.authorId = tv.authorId LEFT JOIN      dataset_usage_trend dut ON ia.authorId = dut.authorId ORDER BY      ia.h_index DESC, ia.avg_paper_quality_score DESC; ",
        "schema_links": [
            "venue.impact_factor",
            "venue.venueId",
            "paperDataset.datasetId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "author.author_research_interests_normalized",
            "paper.paper_quality_score",
            "dataset.datasetId",
            "author.h_index",
            "author.authorName",
            "paperDataset.paperId",
            "dataset.datasetName",
            "venue.venueName",
            "author.authorId",
            "paperDataset.dataset_paper_count"
        ]
    },
    {
        "instance_id": "q_796",
        "db_id": "academic_research_data",
        "question": "Which research papers authored by Brian Curless include \"convolution\" in their keyphrases? For these papers, compare their citation trends across different venues and publication years, considering the quality of citations received over time as indicated by the normalized quality score of cited papers. Additionally, identify any shifts in research interest by analyzing the associated keyphrases and datasets linked to these papers, and present the results ordered by publication year in descending order and by the number of citations in descending order within each year.",
        "query": " WITH convolution_papers AS (     SELECT          p.paperId,         p.title,         p.venueId,         p.year,         p.numCiting,         p.paper_quality_score,         p.paper_last_updated     FROM          paper p     INNER JOIN          writes w ON p.paperId = w.paperId     INNER JOIN          author a ON w.authorId = a.authorId     INNER JOIN          paperKeyphrase pk ON p.paperId = pk.paperId     INNER JOIN          keyphrase k ON pk.keyphraseId = k.keyphraseId     WHERE          a.authorName = 'Brian Curless'          AND LOWER(k.keyphraseName) LIKE '%convolution%' ), citation_trends AS (     SELECT          cp.paperId,         cp.title,         cp.venueId,         cp.year,         cp.numCiting,         cp.paper_quality_score,         v.venueName,         c.paper_citation_trend,         c.cited_paper_quality_score_normalized     FROM          convolution_papers cp     INNER JOIN          cite c ON cp.paperId = c.citedPaperId     INNER JOIN          venue v ON cp.venueId = v.venueId ), keyphrase_analysis AS (     SELECT          cp.paperId,         STRING_AGG(DISTINCT k.keyphraseName, ', ') AS associated_keyphrases     FROM          convolution_papers cp     INNER JOIN          paperKeyphrase pk ON cp.paperId = pk.paperId     INNER JOIN          keyphrase k ON pk.keyphraseId = k.keyphraseId     GROUP BY          cp.paperId ), dataset_analysis AS (     SELECT          cp.paperId,         STRING_AGG(DISTINCT d.datasetName, ', ') AS associated_datasets     FROM          convolution_papers cp     INNER JOIN          paperDataset pd ON cp.paperId = pd.paperId     INNER JOIN          dataset d ON pd.datasetId = d.datasetId     GROUP BY          cp.paperId ) SELECT      ct.paperId,     ct.title,     ct.venueName,     ct.year,     ct.numCiting,     ct.paper_quality_score,     ct.paper_citation_trend,     ct.cited_paper_quality_score_normalized,     COALESCE(ka.associated_keyphrases, '') AS associated_keyphrases,     COALESCE(da.associated_datasets, '') AS associated_datasets FROM      citation_trends ct LEFT JOIN      keyphrase_analysis ka ON ct.paperId = ka.paperId LEFT JOIN      dataset_analysis da ON ct.paperId = da.paperId ORDER BY      ct.year DESC, ct.numCiting DESC; ",
        "schema_links": [
            "cite.cited_paper_quality_score_normalized",
            "cite.citedPaperId",
            "paper.paperId",
            "writes.paperId",
            "paperKeyphrase.keyphraseId",
            "paper.paper_quality_score",
            "dataset.datasetId",
            "cite.paper_citation_trend",
            "paperDataset.paperId",
            "keyphrase.keyphraseName",
            "author.authorId",
            "dataset.datasetName",
            "paperKeyphrase.paperId",
            "venue.venueId",
            "keyphrase.keyphraseId",
            "paperDataset.datasetId",
            "paper.paper_last_updated",
            "writes.authorId",
            "paper.venueId",
            "paper.year",
            "paper.numCiting",
            "author.authorName",
            "paper.title",
            "venue.venueName"
        ]
    },
    {
        "instance_id": "q_791",
        "db_id": "academic_research_data",
        "question": "In the past decade, which research papers authored by Brian Curless focus on convolution techniques? For these papers, compare their citation trends across different venues and datasets, ranking them based on the number of citations received. Additionally, evaluate the relevance of keyphrases associated with these papers by considering their weighted frequency normalized scores, to understand their impact within the academic community. Provide results ordered by the number of citations in descending order and then by publication year in descending order.",
        "query": " WITH convolution_papers AS (     SELECT          p.paperId,         p.title,         p.year,         p.numCiting,         p.numCitedBy,         p.venueId,         p.paper_quality_score,         p.paper_keywords_normalized,         v.venueName,         v.venue_type,         d.datasetName,         d.dataset_size,         pk.keyphraseName,         pk.paper_keyphrase_weighted_frequency_normalized     FROM          paper p     JOIN          writes w ON p.paperId = w.paperId     JOIN          author a ON w.authorId = a.authorId     LEFT JOIN          venue v ON p.venueId = v.venueId     LEFT JOIN          paperDataset pd ON p.paperId = pd.paperId     LEFT JOIN          dataset d ON pd.datasetId = d.datasetId     LEFT JOIN          paperKeyphrase pk ON p.paperId = pk.paperId     LEFT JOIN          keyphrase k ON pk.keyphraseId = k.keyphraseId     WHERE          a.authorName = 'Brian Curless'         AND 'convolution' = ANY(p.paper_keywords_normalized)         AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE - INTERVAL '10 years') ), citation_trends AS (     SELECT          cp.paperId,         cp.title,         cp.year,         cp.numCiting,         cp.numCitedBy,         cp.venueName,         cp.venue_type,         cp.datasetName,         cp.dataset_size,         cp.keyphraseName,         cp.paper_keyphrase_weighted_frequency_normalized,         ROW_NUMBER() OVER (PARTITION BY cp.venueName ORDER BY cp.numCiting DESC) AS venue_citation_rank,         ROW_NUMBER() OVER (PARTITION BY cp.datasetName ORDER BY cp.numCiting DESC) AS dataset_citation_rank     FROM          convolution_papers cp ) SELECT      ct.paperId,     ct.title,     ct.year,     ct.numCiting,     ct.numCitedBy,     ct.venueName,     ct.venue_type,     ct.datasetName,     ct.dataset_size,     ct.keyphraseName,     ct.paper_keyphrase_weighted_frequency_normalized,     ct.venue_citation_rank,     ct.dataset_citation_rank FROM      citation_trends ct ORDER BY      ct.numCiting DESC, ct.year DESC; ",
        "schema_links": [
            "paper.paper_keywords_normalized",
            "paper.paperId",
            "writes.paperId",
            "paperKeyphrase.keyphraseId",
            "paperKeyphrase.paper_keyphrase_weighted_frequency_normalized",
            "paper.paper_quality_score",
            "dataset.datasetId",
            "paper.numCitedBy",
            "paper.authorId",
            "paperDataset.paperId",
            "keyphrase.keyphraseName",
            "author.authorId",
            "dataset.datasetName",
            "dataset.dataset_size",
            "paperKeyphrase.paperId",
            "keyphrase.keyphraseId",
            "paperDataset.datasetId",
            "writes.authorId",
            "paperKeyphrase.keyphraseName",
            "paper.venueId",
            "paper.year",
            "paper.numCiting",
            "venue.venue_type",
            "author.authorName",
            "paper.title",
            "venue.venueName"
        ]
    },
    {
        "instance_id": "q_790",
        "db_id": "academic_research_data",
        "question": "哪些研究者在其发表的论文中涉及“卷积技术”领域，且这些论文的引用质量得分高于所有论文的平均引用质量得分？请进一步分析这些研究者的以下信息：\n\n1. 每位研究者的论文在顶级期刊和会议中的分布情况，其中顶级期刊和会议定义为影响因子高于所有期刊平均影响因子的出版物。\n2. 这些研究者使用数据集的频率（即使用不同数据集的数量）以及这些数据集的质量趋势（通过数据集质量得分的平均值衡量）。\n\n最终结果请按照研究者的总引用次数从高到低排序，并包含以下具体指标：\n- 研究者的ID和姓名\n- 该研究者论文的平均引用质量得分\n- 该研究者的总引用次数\n- 研究者论文在每个顶级期刊或会议中的数量及对应的期刊/会议名称\n- 研究者使用数据集的数量及这些数据集的平均质量得分",
        "query": " WITH influential_authors AS (     SELECT          w.authorId,         a.authorName,         AVG(p.paper_quality_score) AS avg_paper_quality_score,         COUNT(DISTINCT p.paperId) AS paper_count,         SUM(p.numCitedBy) AS total_citations     FROM          writes w     JOIN          author a ON w.authorId = a.authorId     JOIN          paper p ON w.paperId = p.paperId     WHERE          '卷积技术' = ANY(a.author_research_interests_normalized)         AND p.paper_quality_score > (SELECT AVG(paper_quality_score) FROM paper)     GROUP BY          w.authorId, a.authorName     HAVING          COUNT(DISTINCT p.paperId) > 0 ), top_venues AS (     SELECT          v.venueId,         v.venueName     FROM          venue v     WHERE          v.impact_factor > (SELECT AVG(impact_factor) FROM journal) ), author_venue_distribution AS (     SELECT          ia.authorId,         ia.authorName,         v.venueName,         COUNT(p.paperId) AS paper_count_in_venue     FROM          influential_authors ia     JOIN          paper p ON ia.authorId = ANY(SELECT w.authorId FROM writes w WHERE w.paperId = p.paperId)     JOIN          venue v ON p.venueId = v.venueId     WHERE          v.venueId IN (SELECT venueId FROM top_venues)     GROUP BY          ia.authorId, ia.authorName, v.venueName ), dataset_usage AS (     SELECT          ia.authorId,         ia.authorName,         COUNT(pd.datasetId) AS dataset_count,         AVG(pd.paper_dataset_quality_score) AS avg_dataset_quality_score     FROM          influential_authors ia     JOIN          writes w ON ia.authorId = w.authorId     JOIN          paperDataset pd ON w.paperId = pd.paperId     GROUP BY          ia.authorId, ia.authorName ) SELECT      ia.authorId,     ia.authorName,     ia.avg_paper_quality_score,     ia.total_citations,     avd.venueName,     avd.paper_count_in_venue,     du.dataset_count,     du.avg_dataset_quality_score FROM      influential_authors ia LEFT JOIN      author_venue_distribution avd ON ia.authorId = avd.authorId LEFT JOIN      dataset_usage du ON ia.authorId = du.authorId ORDER BY      ia.total_citations DESC; ",
        "schema_links": [
            "venue.impact_factor",
            "venue.venueId",
            "paperDataset.datasetId",
            "writes.authorId",
            "paper.paperId",
            "influential_authors.authorName",
            "paper.venueId",
            "writes.paperId",
            "author.author_research_interests_normalized",
            "paper.paper_quality_score",
            "influential_authors.authorId",
            "paper.numCitedBy",
            "author.authorName",
            "journal.impact_factor",
            "paperDataset.paper_dataset_quality_score",
            "paperDataset.paperId",
            "venue.venueName"
        ]
    },
    {
        "instance_id": "q_789",
        "db_id": "academic_research_data",
        "question": "What is the annual trend of Brian Curless's research impact over the past five years, measured by the number of publications, average citations received, average quality of citations, and average relevance of keyphrases in his papers?",
        "query": " WITH recent_papers AS (     SELECT          p.paperId,          p.title,          p.year,          p.numCiting,          p.paper_quality_score_normalized,         pk.paper_keyphrase_weighted_frequency_normalized     FROM          paper p     JOIN          writes w ON p.paperId = w.paperId     JOIN          author a ON w.authorId = a.authorId     LEFT JOIN          paperKeyphrase pk ON p.paperId = pk.paperId     WHERE          a.authorName = 'Brian Curless'          AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5 ), citation_quality AS (     SELECT          rp.paperId,          AVG(c.cited_paper_quality_score_normalized) AS avg_citation_quality     FROM          recent_papers rp     JOIN          cite c ON rp.paperId = c.citedPaperId     GROUP BY          rp.paperId ), keyphrase_relevance AS (     SELECT          rp.paperId,          AVG(rp.paper_keyphrase_weighted_frequency_normalized) AS avg_keyphrase_relevance     FROM          recent_papers rp     GROUP BY          rp.paperId ) SELECT      rp.year,      COUNT(rp.paperId) AS paper_count,      AVG(rp.numCiting) AS avg_citations,      AVG(cq.avg_citation_quality) AS avg_citation_quality,      AVG(kr.avg_keyphrase_relevance) AS avg_keyphrase_relevance FROM      recent_papers rp LEFT JOIN      citation_quality cq ON rp.paperId = cq.paperId LEFT JOIN      keyphrase_relevance kr ON rp.paperId = kr.paperId GROUP BY      rp.year ORDER BY      rp.year; ",
        "schema_links": [
            "paperKeyphrase.paperId",
            "cite.cited_paper_quality_score_normalized",
            "writes.authorId",
            "recent_papers.paperId",
            "cite.citedPaperId",
            "paper.paperId",
            "writes.paperId",
            "paper.year",
            "paperKeyphrase.paper_keyphrase_weighted_frequency_normalized",
            "paper.numCiting",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "citation_quality.avg_citation_quality",
            "paper.title",
            "keyphrase_relevance.avg_keyphrase_relevance",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_799",
        "db_id": "academic_research_data",
        "question": "Which papers published in NIPS have a normalized citation quality score greater than 0.8 and are associated with datasets that have been updated at least monthly, weekly, or daily over the past three years, showing an increasing trend in usage during this period? Additionally, include only those papers where the primary author has a research interest in machine learning and has published at least five papers in the last two years.",
        "query": " SELECT DISTINCT p.paperId, p.title FROM paper p JOIN venue v ON p.venueId = v.venueId JOIN paperDataset pd ON p.paperId = pd.paperId JOIN dataset d ON pd.datasetId = d.datasetId JOIN writes w ON p.paperId = w.paperId JOIN author a ON w.authorId = a.authorId WHERE v.venueName = 'NIPS'   AND p.cited_paper_quality_score_normalized > 0.8   AND d.dataset_update_frequency IN ('Monthly', 'Weekly', 'Daily')   AND d.dataset_last_updated >= NOW() - INTERVAL '3 years'   AND EXISTS (     SELECT 1     FROM dataset_usage du     WHERE du.datasetId = d.datasetId       AND du.usage_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 3       AND du.usage_count > LAG(du.usage_count) OVER (PARTITION BY du.datasetId ORDER BY du.usage_year)   )   AND a.author_research_interests @> ARRAY['machine learning']   AND a.authorId = (     SELECT wa.authorId     FROM writes wa     JOIN paper pa ON wa.paperId = pa.paperId     WHERE pa.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 2     GROUP BY wa.authorId     HAVING COUNT(DISTINCT pa.paperId) >= 5   )   AND w.co_author_count = (     SELECT MIN(w2.co_author_count)     FROM writes w2     WHERE w2.paperId = p.paperId   ); ",
        "schema_links": [
            "paper.paperId",
            "writes.paperId",
            "dataset.datasetId",
            "paperDataset.paperId",
            "author.authorId",
            "dataset_usage.usage_year",
            "venue.venueId",
            "paperDataset.datasetId",
            "author.author_research_interests",
            "writes.authorId",
            "dataset.dataset_update_frequency",
            "dataset.dataset_last_updated",
            "paper.venueId",
            "paper.year",
            "paper.cited_paper_quality_score_normalized",
            "writes.co_author_count",
            "dataset_usage.usage_count",
            "dataset_usage.datasetId",
            "paper.title",
            "venue.venueName"
        ]
    },
    {
        "instance_id": "q_794",
        "db_id": "academic_research_data",
        "question": "Analyze the trend of dataset usage in research articles discussing TAIL that were presented at NIPS over the past five years, focusing on papers with a higher-than-average citation quality score. Specifically, identify the number of such papers each year, the datasets used in these papers (considering only datasets with a user rating greater than 4.0 and download count exceeding 1,000), and the average quality score of dataset usage in these papers. Present the results in descending order of year.",
        "query": " WITH tail_nips_papers AS (     SELECT          p.paperId,         p.title,         p.paper_quality_score_normalized,         p.numCiting,         p.year     FROM          paper p     INNER JOIN          venue v ON p.venueId = v.venueId     INNER JOIN          paperKeyphrase pk ON p.paperId = pk.paperId     INNER JOIN          keyphrase k ON pk.keyphraseId = k.keyphraseId     WHERE          LOWER(k.keyphraseName) LIKE '%tail%'         AND LOWER(v.venueName) LIKE '%nips%'         AND p.paper_quality_score_normalized > (SELECT AVG(paper_quality_score_normalized) FROM paper) ), significant_datasets AS (     SELECT          datasetId,         datasetName     FROM          dataset     WHERE          dataset_user_rating > 4.0         AND dataset_download_count > 1000 ), paper_dataset_usage AS (     SELECT          pd.paperId,         d.datasetName,         pd.paper_dataset_quality_score_normalized,         p.year     FROM          paperDataset pd     INNER JOIN          significant_datasets d ON pd.datasetId = d.datasetId     INNER JOIN          tail_nips_papers p ON pd.paperId = p.paperId     WHERE          p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5 ) SELECT      pn.year,     COUNT(DISTINCT pn.paperId) AS paper_count,     STRING_AGG(DISTINCT pn.datasetName, ', ') AS datasets_used,     AVG(pn.paper_dataset_quality_score_normalized) AS avg_dataset_quality FROM      paper_dataset_usage pn GROUP BY      pn.year ORDER BY      pn.year DESC; ",
        "schema_links": [
            "dataset.dataset_user_rating",
            "paper_dataset_usage.datasetName",
            "significant_datasets.datasetName",
            "paper.paperId",
            "paperKeyphrase.keyphraseId",
            "dataset.datasetId",
            "significant_datasets.datasetId",
            "paperDataset.paper_dataset_quality_score_normalized",
            "paperDataset.paperId",
            "keyphrase.keyphraseName",
            "dataset.datasetName",
            "paper_dataset_usage.year",
            "paperKeyphrase.paperId",
            "venue.venueId",
            "keyphrase.keyphraseId",
            "paperDataset.datasetId",
            "tail_nips_papers.paperId",
            "paper.venueId",
            "paper.year",
            "paper.numCiting",
            "paper_dataset_usage.paperId",
            "paper_dataset_usage.paper_dataset_quality_score_normalized",
            "dataset.dataset_download_count",
            "paper.paper_quality_score_normalized",
            "paper.title",
            "venue.venueName"
        ]
    },
    {
        "instance_id": "q_800",
        "db_id": "academic_research_data",
        "question": "What are the research papers published in NIPS that discuss the concept of TAIL over the past five years, and how do their citation trends and citation quality compare to papers on the same topic published in other venues during the same period? Additionally, consider the relevance of keyphrases associated with these papers and their overall quality scores.",
        "query": " WITH nips_papers AS (     SELECT          p.paperId,         p.title,         p.year,         p.numCiting,         p.paper_quality_score,         p.paper_keywords_normalized     FROM          paper p     JOIN          venue v ON p.venueId = v.venueId     WHERE          v.venueName = 'NIPS'          AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5         AND 'TAIL' = ANY(p.paper_keywords_normalized) ), other_venue_papers AS (     SELECT          p.paperId,         p.title,         p.year,         p.numCiting,         p.paper_quality_score,         p.paper_keywords_normalized     FROM          paper p     JOIN          venue v ON p.venueId = v.venueId     WHERE          v.venueName != 'NIPS'          AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5         AND 'TAIL' = ANY(p.paper_keywords_normalized) ), citation_trends AS (     SELECT          c.citedPaperId,         AVG(c.citing_paper_quality_score_normalized) AS avg_citation_quality,         COUNT(*) AS total_citations     FROM          cite c     WHERE          c.citing_paper_quality_score_normalized IS NOT NULL         AND c.cited_paper_quality_score_normalized IS NOT NULL     GROUP BY          c.citedPaperId ), nips_with_citations AS (     SELECT          np.paperId,         np.title,         np.year,         np.numCiting,         np.paper_quality_score,         ct.total_citations,         ct.avg_citation_quality     FROM          nips_papers np     LEFT JOIN          citation_trends ct ON np.paperId = ct.citedPaperId ), other_with_citations AS (     SELECT          op.paperId,         op.title,         op.year,         op.numCiting,         op.paper_quality_score,         ct.total_citations,         ct.avg_citation_quality     FROM          other_venue_papers op     LEFT JOIN          citation_trends ct ON op.paperId = ct.citedPaperId ) SELECT      'NIPS' AS venue_type,     nwc.paperId,     nwc.title,     nwc.year,     nwc.numCiting,     nwc.paper_quality_score,     nwc.total_citations,     nwc.avg_citation_quality FROM      nips_with_citations nwc UNION ALL SELECT      'Other Venues' AS venue_type,     owc.paperId,     owc.title,     owc.year,     owc.numCiting,     owc.paper_quality_score,     owc.total_citations,     owc.avg_citation_quality FROM      other_with_citations owc; ",
        "schema_links": [
            "cite.citing_paper_quality_score_normalized",
            "paper.paper_keywords_normalized",
            "venue.venueId",
            "cite.cited_paper_quality_score_normalized",
            "cite.citedPaperId",
            "paper.paperId",
            "paper.venueId",
            "paper.year",
            "paper.paper_quality_score",
            "paper.numCiting",
            "paper.title",
            "venue.venueName"
        ]
    },
    {
        "instance_id": "q_795",
        "db_id": "academic_research_data",
        "question": "Which authors have published papers with \"TAIL\"-related keyphrases in NIPS conferences over the past five years, and what are their average citation quality trends based on high or medium quality citations? Additionally, consider the average user ratings of datasets used in these papers, excluding datasets with fewer than 100 downloads. Provide the results sorted by the number of papers in descending order, and then by the average citation quality trend in descending order.",
        "query": " WITH tail_related_papers AS (     SELECT DISTINCT p.paperId     FROM paper p     JOIN venue v ON p.venueId = v.venueId     JOIN paperKeyphrase pk ON p.paperId = pk.paperId     JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId     WHERE LOWER(k.keyphraseName) LIKE '%tail%'       AND LOWER(v.venueName) LIKE '%nips%'       AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5 ), citation_quality_trend AS (     SELECT          c.citedPaperId,         AVG(c.citing_paper_quality_score_normalized) AS avg_citation_quality     FROM cite c     JOIN tail_related_papers trp ON c.citedPaperId = trp.paperId     WHERE c.citing_paper_quality_score_normalized IS NOT NULL       AND c.citing_paper_quality_score_category IN ('High', 'Medium')     GROUP BY c.citedPaperId ), dataset_impact AS (     SELECT          pd.paperId,         AVG(d.dataset_user_rating) AS avg_dataset_rating     FROM paperDataset pd     JOIN dataset d ON pd.datasetId = d.datasetId     WHERE d.dataset_download_count > 100     GROUP BY pd.paperId ) SELECT      a.authorName,     COUNT(DISTINCT w.paperId) AS paper_count,     COALESCE(AVG(cqt.avg_citation_quality), 0) AS avg_citation_quality_trend,     COALESCE(AVG(di.avg_dataset_rating), 0) AS avg_dataset_impact FROM author a JOIN writes w ON a.authorId = w.authorId JOIN tail_related_papers trp ON w.paperId = trp.paperId LEFT JOIN citation_quality_trend cqt ON trp.paperId = cqt.citedPaperId LEFT JOIN dataset_impact di ON trp.paperId = di.paperId GROUP BY a.authorName ORDER BY paper_count DESC, avg_citation_quality_trend DESC; ",
        "schema_links": [
            "tail_related_papers.paperId",
            "dataset.dataset_user_rating",
            "cite.citedPaperId",
            "paper.paperId",
            "writes.paperId",
            "paperKeyphrase.keyphraseId",
            "dataset.datasetId",
            "citation_quality_trend.citedPaperId",
            "citation_quality_trend.avg_citation_quality",
            "paperDataset.paperId",
            "keyphrase.keyphraseName",
            "author.authorId",
            "cite.citing_paper_quality_score_normalized",
            "paperKeyphrase.paperId",
            "dataset_impact.paperId",
            "venue.venueId",
            "keyphrase.keyphraseId",
            "paperDataset.datasetId",
            "writes.authorId",
            "paper.venueId",
            "paper.year",
            "dataset_impact.avg_dataset_rating",
            "dataset.dataset_download_count",
            "author.authorName",
            "cite.citing_paper_quality_score_category",
            "venue.venueName"
        ]
    },
    {
        "instance_id": "q_797",
        "db_id": "academic_research_data",
        "question": "Which authors have published papers containing the keyword \"TAIL\" at the NIPS venue in the past five years, and what is their average research impact based on paper quality scores? Additionally, which datasets are associated with these papers, and what is the average quality score of these datasets as reflected by the papers that use them?",
        "query": " WITH relevant_papers AS (     SELECT DISTINCT p.paperId, p.paper_quality_score, p.year     FROM paper p     JOIN venue v ON p.venueId = v.venueId     JOIN paperKeyphrase pk ON p.paperId = pk.paperId     JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId     WHERE LOWER(k.keyphraseName) LIKE '%tail%'       AND LOWER(v.venueName) = 'nips'       AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5 ), author_impact AS (     SELECT w.authorId, AVG(p.paper_quality_score) AS avg_paper_quality_score     FROM writes w     JOIN relevant_papers p ON w.paperId = p.paperId     GROUP BY w.authorId ), dataset_involvement AS (     SELECT pd.paperId, d.datasetId, d.datasetName, AVG(pd.paper_dataset_quality_score) AS avg_dataset_quality_score     FROM paperDataset pd     JOIN dataset d ON pd.datasetId = d.datasetId     WHERE pd.paperId IN (SELECT paperId FROM relevant_papers)     GROUP BY pd.paperId, d.datasetId, d.datasetName ) SELECT      a.authorName,      ai.avg_paper_quality_score AS research_impact,      STRING_AGG(DISTINCT di.datasetName, ', ') AS involved_datasets,      AVG(di.avg_dataset_quality_score) AS avg_dataset_quality FROM author a JOIN writes w ON a.authorId = w.authorId JOIN relevant_papers rp ON w.paperId = rp.paperId LEFT JOIN author_impact ai ON a.authorId = ai.authorId LEFT JOIN dataset_involvement di ON rp.paperId = di.paperId GROUP BY a.authorName, ai.avg_paper_quality_score; ",
        "schema_links": [
            "paperKeyphrase.paperId",
            "venue.venueId",
            "keyphrase.keyphraseId",
            "paperDataset.datasetId",
            "writes.authorId",
            "paper.paperId",
            "paperDataset.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "paperKeyphrase.keyphraseId",
            "paper.paper_quality_score",
            "dataset.datasetId",
            "author.authorName",
            "paperDataset.paper_dataset_quality_score",
            "keyphrase.keyphraseName",
            "venue.venueName",
            "author.authorId",
            "dataset.datasetName"
        ]
    },
    {
        "instance_id": "q_805",
        "db_id": "academic_research_data",
        "question": "Which authors have written papers about TAIL at NIPS in the past five years, where their average normalized paper quality score is greater than 0.8? Additionally, provide the average citation quality trend of these authors' papers over the same time period, considering only citations from papers with available quality scores. Include the relevance of keyphrases related to TAIL in their publications by ensuring that the papers are associated with keyphrases containing \"tail\". List the results in descending order of the authors' average normalized paper quality score.",
        "query": " WITH tail_related_papers AS (     SELECT DISTINCT p.paperId     FROM paper p     JOIN paperKeyphrase pk ON p.paperId = pk.paperId     JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId     WHERE LOWER(k.keyphraseName) LIKE '%tail%' ), nips_venues AS (     SELECT venueId     FROM venue     WHERE LOWER(venueName) = 'nips' ), author_paper_quality AS (     SELECT          w.authorId,         AVG(p.paper_quality_score_normalized) AS avg_paper_quality_score     FROM writes w     JOIN paper p ON w.paperId = p.paperId     JOIN nips_venues nv ON p.venueId = nv.venueId     JOIN tail_related_papers trp ON p.paperId = trp.paperId     WHERE p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5     GROUP BY w.authorId     HAVING AVG(p.paper_quality_score_normalized) > 0.8 ), citation_quality_trend AS (     SELECT          c.citedPaperId,         AVG(c.citing_paper_quality_score_normalized) AS avg_citation_quality_score     FROM cite c     JOIN paper p ON c.citedPaperId = p.paperId     WHERE p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5     GROUP BY c.citedPaperId ) SELECT      apq.authorId,     a.authorName,     apq.avg_paper_quality_score,     COALESCE(AVG(cqt.avg_citation_quality_score), 0) AS avg_citation_quality_trend FROM author_paper_quality apq JOIN author a ON apq.authorId = a.authorId LEFT JOIN citation_quality_trend cqt ON apq.authorId = ANY(     SELECT w.authorId     FROM writes w     WHERE w.paperId = cqt.citedPaperId ) GROUP BY apq.authorId, a.authorName, apq.avg_paper_quality_score ORDER BY apq.avg_paper_quality_score DESC; ",
        "schema_links": [
            "cite.citing_paper_quality_score_normalized",
            "paperKeyphrase.paperId",
            "venue.venueId",
            "keyphrase.keyphraseId",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "paperKeyphrase.keyphraseId",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "keyphrase.keyphraseName",
            "venue.venueName",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_801",
        "db_id": "academic_research_data",
        "question": "哪些研究论文在引用时表现出高于平均值的质量趋势（引用质量归一化分数大于0.8），并且这些论文的作者在其研究领域中具有显著的影响力（H指数不低于50）？同时，考虑这些论文是否与特定数据集存在强关联性（数据集相关论文数量大于10），以及它们是否发表在顶级期刊或会议中（期刊影响因子不低于2.0）。请按照引用质量归一化分数降序排列，若分数相同则按作者H指数降序排列。",
        "query": " SELECT      p.paperId,     p.title,     p.year,     p.numCiting,     p.paper_quality_score_normalized AS paper_quality,     c.cited_paper_quality_score_normalized AS cited_paper_quality,     a.authorName,     a.h_index,     d.datasetName,     j.journalName,     j.impact_factor FROM      paper p JOIN      cite c ON p.paperId = c.citedPaperId JOIN      writes w ON p.paperId = w.paperId JOIN      author a ON w.authorId = a.authorId LEFT JOIN      paperDataset pd ON p.paperId = pd.paperId LEFT JOIN      dataset d ON pd.datasetId = d.datasetId JOIN      venue v ON p.venueId = v.venueId LEFT JOIN      journal j ON v.venueId = j.journalId WHERE      c.cited_paper_quality_score_normalized > 0.8     AND a.h_index >= 50     AND (d.dataset_paper_count IS NULL OR d.dataset_paper_count > 10)     AND (j.journalName IS NULL OR j.impact_factor >= 2.0) ORDER BY      c.cited_paper_quality_score_normalized DESC,     a.h_index DESC; ",
        "schema_links": [
            "journal.journalName",
            "journal.journalId",
            "cite.cited_paper_quality_score_normalized",
            "cite.citedPaperId",
            "paper.paperId",
            "writes.paperId",
            "dataset.datasetId",
            "author.h_index",
            "paperDataset.paperId",
            "author.authorId",
            "dataset.datasetName",
            "dataset.dataset_paper_count",
            "venue.venueId",
            "paperDataset.datasetId",
            "writes.authorId",
            "paper.year",
            "paper.numCiting",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "journal.impact_factor",
            "paper.title"
        ]
    },
    {
        "instance_id": "q_798",
        "db_id": "academic_research_data",
        "question": "Which authors have demonstrated a higher likelihood of influencing future research trends in the last three years, based on their recent publication activity, citation quality, and engagement with high-impact datasets (rated above 4.0)? Additionally, consider only those whose research interests are relevant to emerging fields such as artificial intelligence or machine learning, and ensure that their average normalized paper quality score exceeds 0.8. Present the results sorted by total citations in descending order, followed by average paper quality and the count of high-impact datasets engaged with, also in descending order.",
        "query": " SELECT      a.authorId,     a.authorName,     a.publication_count,     a.h_index,     a.author_research_interests,     SUM(p.numCiting) AS total_citations,     AVG(p.paper_quality_score_normalized) AS avg_paper_quality,     COUNT(DISTINCT pd.datasetId) AS high_impact_datasets_count FROM      author a JOIN      writes w ON a.authorId = w.authorId JOIN      paper p ON w.paperId = p.paperId LEFT JOIN      paperDataset pd ON p.paperId = pd.paperId JOIN      dataset d ON pd.datasetId = d.datasetId WHERE      p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 3     AND d.dataset_user_rating > 4.0     AND (a.author_research_interests @> ARRAY['artificial intelligence']           OR a.author_research_interests @> ARRAY['machine learning']) GROUP BY      a.authorId, a.authorName, a.publication_count, a.h_index, a.author_research_interests HAVING      AVG(p.paper_quality_score_normalized) > 0.8 ORDER BY      total_citations DESC, avg_paper_quality DESC, high_impact_datasets_count DESC; ",
        "schema_links": [
            "dataset.dataset_user_rating",
            "paperDataset.datasetId",
            "author.author_research_interests",
            "writes.authorId",
            "paper.paperId",
            "writes.paperId",
            "paper.year",
            "dataset.datasetId",
            "author.h_index",
            "author.publication_count",
            "paper.numCiting",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "paperDataset.paperId",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_803",
        "db_id": "academic_research_data",
        "question": "Which datasets have been most frequently utilized by papers published in venues with above-average impact factors over the past five years, and what is the trend of their usage? Additionally, identify the keyphrases associated with these papers, evaluate their relevance scores based on weighted frequency, and present the results ordered by dataset usage count in descending order and keyphrase relevance score in descending order.",
        "query": " WITH high_impact_venues AS (     SELECT venueId     FROM journal     WHERE impact_factor > (SELECT AVG(impact_factor) FROM journal) ), recent_papers AS (     SELECT p.paperId, p.venueId, p.year, pd.datasetId, pk.keyphraseId, pk.paper_keyphrase_weighted_frequency_normalized     FROM paper p     INNER JOIN writes w ON p.paperId = w.paperId     INNER JOIN author a ON w.authorId = a.authorId     INNER JOIN paperDataset pd ON p.paperId = pd.paperId     INNER JOIN paperKeyphrase pk ON p.paperId = pk.paperId     INNER JOIN high_impact_venues hiv ON p.venueId = hiv.venueId     WHERE p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5 ), dataset_usage AS (     SELECT datasetId, COUNT(paperId) AS usage_count     FROM recent_papers     GROUP BY datasetId     ORDER BY usage_count DESC     LIMIT 10 ), keyphrase_relevance AS (     SELECT rp.paperId, rp.keyphraseId, AVG(rp.paper_keyphrase_weighted_frequency_normalized) AS relevance_score     FROM recent_papers rp     INNER JOIN dataset_usage du ON rp.datasetId = du.datasetId     GROUP BY rp.paperId, rp.keyphraseId ) SELECT d.datasetName, du.usage_count, k.keyphraseName, kr.relevance_score FROM dataset_usage du INNER JOIN dataset d ON du.datasetId = d.datasetId INNER JOIN keyphrase_relevance kr ON du.datasetId = kr.datasetId INNER JOIN keyphrase k ON kr.keyphraseId = k.keyphraseId ORDER BY du.usage_count DESC, kr.relevance_score DESC; ",
        "schema_links": [
            "journal.venueId",
            "keyphrase_relevance.paperId",
            "keyphrase_relevance.relevance_score",
            "paper.paperId",
            "writes.paperId",
            "paperKeyphrase.keyphraseId",
            "paperKeyphrase.paper_keyphrase_weighted_frequency_normalized",
            "dataset.datasetId",
            "keyphrase.keyphraseName",
            "paperDataset.paperId",
            "author.authorId",
            "dataset.datasetName",
            "high_impact_venues.venueId",
            "recent_papers.paper_keyphrase_weighted_frequency_normalized",
            "paperKeyphrase.paperId",
            "recent_papers.venueId",
            "keyphrase.keyphraseId",
            "paperDataset.datasetId",
            "writes.authorId",
            "recent_papers.paperId",
            "paper.venueId",
            "recent_papers.keyphraseId",
            "paper.year",
            "keyphrase_relevance.keyphraseId",
            "dataset_usage.usage_count",
            "journal.impact_factor",
            "recent_papers.year",
            "dataset_usage.datasetId",
            "recent_papers.datasetId"
        ]
    },
    {
        "instance_id": "q_802",
        "db_id": "academic_research_data",
        "question": "How many unique co-authors has Mark Steedman collaborated with in the past 10 years, and what is the average quality score of the papers they have jointly published?",
        "query": " SELECT      COUNT(DISTINCT w2.authorId) AS unique_coauthors_count,     AVG(p.paper_quality_score) AS avg_paper_quality_score FROM      writes w1 JOIN      writes w2 ON w1.paperId = w2.paperId AND w1.authorId != w2.authorId JOIN      author a1 ON w1.authorId = a1.authorId JOIN      paper p ON w1.paperId = p.paperId WHERE      a1.authorName = 'Mark Steedman'     AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 10; ",
        "schema_links": [
            "writes.paperId",
            "paper.year",
            "paper.paper_quality_score",
            "author.authorName",
            "writes.authorId",
            "paper.paperId",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_804",
        "db_id": "academic_research_data",
        "question": "What are the top 10 keyphrases most frequently associated with papers written by Christof Dallermassl in the year 2000, and how has the usage trend of these keyphrases evolved in terms of citation count and average relevance score from high-quality citing papers over the years 2001 to 2005? Specifically, for each keyphrase, provide the yearly citation count and the average normalized quality score of citing papers within this time range.",
        "query": " WITH ChristofPapers AS (     SELECT          p.paperId     FROM          author a     JOIN writes w ON a.authorId = w.authorId     JOIN paper p ON w.paperId = p.paperId     WHERE          a.authorName = 'Christof Dallermassl'          AND p.year = 2000 ), FrequentKeyphrases AS (     SELECT          pk.keyphraseId,          k.keyphraseName,          SUM(pk.keyphrase_frequency) AS total_frequency     FROM          ChristofPapers cp     JOIN paperKeyphrase pk ON cp.paperId = pk.paperId     JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId     GROUP BY          pk.keyphraseId, k.keyphraseName     ORDER BY          total_frequency DESC     LIMIT 10 ), CitationTrend AS (     SELECT          fk.keyphraseId,          fk.keyphraseName,          c.citingPaperId,          c.citedPaperId,          c.citing_paper_quality_score_normalized,          EXTRACT(YEAR FROM p.paper_last_updated) AS citation_year     FROM          FrequentKeyphrases fk     JOIN paperKeyphrase pk ON fk.keyphraseId = pk.keyphraseId     JOIN paper p ON pk.paperId = p.paperId     JOIN cite c ON p.paperId = c.citedPaperId     WHERE          EXTRACT(YEAR FROM p.paper_last_updated) BETWEEN 2001 AND 2005 ) SELECT      ct.keyphraseId,      ct.keyphraseName,      ct.citation_year,      COUNT(ct.citingPaperId) AS citation_count,      AVG(ct.citing_paper_quality_score_normalized) AS avg_relevance_score FROM      CitationTrend ct GROUP BY      ct.keyphraseId, ct.keyphraseName, ct.citation_year ORDER BY      ct.keyphraseId, ct.citation_year; ",
        "schema_links": [
            "cite.citing_paper_quality_score_normalized",
            "paperKeyphrase.paperId",
            "paperKeyphrase.keyphrase_frequency",
            "keyphrase.keyphraseId",
            "paper.paper_last_updated",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "writes.paperId",
            "paper.year",
            "paperKeyphrase.keyphraseId",
            "author.authorName",
            "keyphrase.keyphraseName",
            "author.authorId",
            "cite.citingPaperId"
        ]
    },
    {
        "instance_id": "q_807",
        "db_id": "academic_research_data",
        "question": "What were the key research topics explored by Christof Dallermassl in his publications during the year 2000, including the frequency of each topic in his papers, the number of subsequent citations these topics received in later years, the average quality score of the related papers, and representative titles for each topic, ordered by the topic's frequency in 2000 and the number of subsequent citations in descending order?",
        "query": " SELECT      pk.keyphraseName AS key_research_topics,     COUNT(p.paperId) AS topic_frequency_in_2000,     SUM(CASE WHEN p.year > 2000 THEN 1 ELSE 0 END) AS subsequent_citations_count,     AVG(p.paper_quality_score) AS avg_paper_quality_score,     STRING_AGG(DISTINCT p.title, ', ') AS representative_papers FROM      paper p JOIN      writes w ON p.paperId = w.paperId JOIN      author a ON w.authorId = a.authorId JOIN      paperKeyphrase pk ON p.paperId = pk.paperId WHERE      a.authorName = 'Christof Dallermassl'     AND p.year = 2000 GROUP BY      pk.keyphraseName ORDER BY      topic_frequency_in_2000 DESC,      subsequent_citations_count DESC; ",
        "schema_links": [
            "paperKeyphrase.paperId",
            "writes.authorId",
            "paperKeyphrase.keyphraseName",
            "paper.paperId",
            "writes.paperId",
            "paper.year",
            "paper.paper_quality_score",
            "author.authorName",
            "paper.title",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_809",
        "db_id": "academic_research_data",
        "question": "What are the top 5 keyphrases most frequently associated with papers authored by Christof Dallermassl in the past year, broken down by venue? Additionally, how do these keyphrases rank in terms of usage frequency across different venues, ordered by venue name and usage count in descending order?",
        "query": " WITH recent_papers AS (     SELECT          w.paperId     FROM          writes w     JOIN          author a ON w.authorId = a.authorId     WHERE          a.authorName = 'Christof Dallermassl'         AND a.author_last_updated >= NOW() - INTERVAL '1 year' ), keyphrase_usage AS (     SELECT          pk.keyphraseId,         k.keyphraseName,         COUNT(pk.paperId) AS usage_count,         p.venueId     FROM          paperKeyphrase pk     JOIN          keyphrase k ON pk.keyphraseId = k.keyphraseId     JOIN          recent_papers rp ON pk.paperId = rp.paperId     JOIN          paper p ON pk.paperId = p.paperId     GROUP BY          pk.keyphraseId, k.keyphraseName, p.venueId ), ranked_keyphrases AS (     SELECT          ku.keyphraseName,         ku.venueId,         v.venueName,         ku.usage_count,         ROW_NUMBER() OVER (PARTITION BY ku.venueId ORDER BY ku.usage_count DESC) AS rank     FROM          keyphrase_usage ku     JOIN          venue v ON ku.venueId = v.venueId ) SELECT      rk.keyphraseName,     rk.venueName,     rk.usage_count FROM      ranked_keyphrases rk WHERE      rk.rank <= 5 ORDER BY      rk.venueName, rk.usage_count DESC; ",
        "schema_links": [
            "paperKeyphrase.paperId",
            "author.author_last_updated",
            "keyphrase.keyphraseId",
            "venue.venueId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paperKeyphrase.keyphraseId",
            "ranked_keyphrases.venueId",
            "author.authorName",
            "ranked_keyphrases.keyphraseName",
            "ranked_keyphrases.venueName",
            "ranked_keyphrases.usage_count",
            "ranked_keyphrases.rank",
            "keyphrase.keyphraseName",
            "venue.venueName",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_808",
        "db_id": "academic_research_data",
        "question": "What were the prominent research topics associated with Christof Dallermassl's publications in the year 2000, measured by the normalized weighted frequency of keyphrases across his works, and ranked in descending order of their relevance scores?",
        "query": " SELECT      pk.keyphraseName AS research_topic,     SUM(pkw.paper_keyphrase_weighted_frequency_normalized) AS relevance_score FROM      scholar_new.paperKeyphrase pkw JOIN      scholar_new.keyphrase kp ON pkw.keyphraseId = kp.keyphraseId JOIN      scholar_new.paper p ON pkw.paperId = p.paperId JOIN      scholar_new.writes w ON p.paperId = w.paperId JOIN      scholar_new.author a ON w.authorId = a.authorId WHERE      a.authorName = 'Christof Dallermassl'      AND p.year = 2000 GROUP BY      pk.keyphraseName ORDER BY      relevance_score DESC; ",
        "schema_links": [
            "paperKeyphrase.paperId",
            "keyphrase.keyphraseId",
            "writes.authorId",
            "paper.paperId",
            "writes.paperId",
            "paperKeyphrase.keyphraseId",
            "paperKeyphrase.paper_keyphrase_weighted_frequency_normalized",
            "paper.year",
            "author.authorName",
            "keyphrase.keyphraseName",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_806",
        "db_id": "academic_research_data",
        "question": "Which papers published in TACL in 2014 have the highest citation quality scores and are most frequently associated with datasets that have a growing usage trend over time, as indicated by positive download counts and update frequencies of at least weekly, monthly, or daily?",
        "query": " SELECT      p.paperId,      p.title,      p.paper_quality_score AS citation_quality_score,      SUM(pds.dataset_paper_count) AS total_dataset_associations FROM      paper p JOIN      venue v ON p.venueId = v.venueId JOIN      cite c ON p.paperId = c.citedPaperId JOIN      paperDataset pds ON p.paperId = pds.paperId JOIN      dataset d ON pds.datasetId = d.datasetId WHERE      v.venueName = 'TACL'      AND p.year = 2014      AND d.dataset_download_count > 0      AND d.dataset_update_frequency IN ('Monthly', 'Weekly', 'Daily') GROUP BY      p.paperId, p.title, p.paper_quality_score ORDER BY      p.paper_quality_score DESC,      total_dataset_associations DESC LIMIT 10; ",
        "schema_links": [
            "venue.venueId",
            "paperDataset.datasetId",
            "cite.citedPaperId",
            "dataset.dataset_update_frequency",
            "paper.paperId",
            "paper.venueId",
            "paper.year",
            "paper.paper_quality_score",
            "dataset.datasetId",
            "dataset.dataset_download_count",
            "paperDataset.paperId",
            "paper.title",
            "venue.venueName",
            "paperDataset.dataset_paper_count"
        ]
    },
    {
        "instance_id": "q_813",
        "db_id": "academic_research_data",
        "question": "Which paper published in TACL in 2014 received the highest total normalized quality score of citations, considering all citing papers' quality scores?",
        "query": " SELECT      p.paperId,     p.title,     SUM(c.citing_paper_quality_score_normalized) AS total_quality_citations FROM      paper p JOIN      cite c ON p.paperId = c.citedPaperId JOIN      venue v ON p.venueId = v.venueId WHERE      v.venueName = 'TACL'     AND p.year = 2014 GROUP BY      p.paperId, p.title ORDER BY      total_quality_citations DESC LIMIT 1; ",
        "schema_links": [
            "cite.citing_paper_quality_score_normalized",
            "paper.year",
            "venue.venueName",
            "venue.venueId",
            "cite.citedPaperId",
            "paper.title",
            "paper.paperId",
            "paper.venueId"
        ]
    },
    {
        "instance_id": "q_812",
        "db_id": "academic_research_data",
        "question": "What is the yearly trend of research on \"Multiuser Receiver\" in papers mentioning \"Decision Feedback\" over the past year, in terms of both the number of publications and the average normalized citation quality of these papers?",
        "query": " SELECT      p.year AS publication_year,     COUNT(p.paperId) AS number_of_publications,     AVG(p.paper_quality_score_normalized) AS avg_citation_quality FROM      paper p JOIN      writes w ON p.paperId = w.paperId JOIN      author a ON w.authorId = a.authorId JOIN      paperKeyphrase pk ON p.paperId = pk.paperId JOIN      keyphrase k ON pk.keyphraseId = k.keyphraseId WHERE      k.keyphraseName ILIKE '%Multiuser Receiver%'     AND p.paper_abstract ILIKE '%Decision Feedback%'     AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE - INTERVAL '1 year') GROUP BY      p.year ORDER BY      p.year DESC; ",
        "schema_links": [
            "paperKeyphrase.paperId",
            "keyphrase.keyphraseId",
            "writes.authorId",
            "paper.paperId",
            "writes.paperId",
            "paper.year",
            "paperKeyphrase.keyphraseId",
            "paper.paper_quality_score_normalized",
            "paper.paper_abstract",
            "keyphrase.keyphraseName",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_811",
        "db_id": "academic_research_data",
        "question": "In the past decade, which conference venues have featured papers co-authored by Michael Stonebraker, and how has the citation density of these venues evolved year by year? Additionally, among the datasets associated with these papers, which ones have seen the highest usage trends, measured by total usage across papers and download counts, and what are their names?",
        "query": " WITH michael_papers AS (     SELECT DISTINCT p.paperId, p.venueId, p.year     FROM writes w     JOIN author a ON w.authorId = a.authorId     JOIN paper p ON w.paperId = p.paperId     WHERE a.authorName = 'Michael Stonebraker'       AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP - INTERVAL '10 years') ), venue_citation_density AS (     SELECT mv.venueId, v.venueName, mv.year, COUNT(c.citedPaperId) AS citation_count, COUNT(mv.paperId) AS paper_count     FROM michael_papers mv     JOIN paper p ON mv.paperId = p.paperId     LEFT JOIN cite c ON p.paperId = c.citedPaperId     JOIN venue v ON mv.venueId = v.venueId     WHERE v.venue_type = 'conference'     GROUP BY mv.venueId, v.venueName, mv.year ), dataset_usage_trends AS (     SELECT pd.datasetId, d.datasetName, SUM(pd.dataset_paper_count) AS total_usage, d.dataset_download_count     FROM michael_papers mp     JOIN paperDataset pd ON mp.paperId = pd.paperId     JOIN dataset d ON pd.datasetId = d.datasetId     GROUP BY pd.datasetId, d.datasetName     ORDER BY total_usage DESC, d.dataset_download_count DESC     LIMIT 10 ) SELECT vc.venueId, vc.venueName, vc.year, vc.citation_count, vc.paper_count,         CASE WHEN vc.paper_count > 0 THEN vc.citation_count::float / vc.paper_count ELSE 0 END AS citation_density FROM venue_citation_density vc UNION ALL SELECT NULL AS venueId, NULL AS venueName, NULL AS year, NULL AS citation_count, NULL AS paper_count,         d.datasetName AS citation_density FROM dataset_usage_trends d; ",
        "schema_links": [
            "venue.venueId",
            "paperDataset.datasetId",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "dataset.datasetId",
            "dataset.dataset_download_count",
            "venue.venue_type",
            "author.authorName",
            "paperDataset.paperId",
            "dataset.datasetName",
            "venue.venueName",
            "author.authorId",
            "paperDataset.dataset_paper_count"
        ]
    },
    {
        "instance_id": "q_815",
        "db_id": "academic_research_data",
        "question": "Which researchers have demonstrated a consistent year-over-year increase in the normalized quality score of their cited papers over the past five years? For these researchers, provide their names, the count of their publications in high-impact journals (with an impact factor greater than 5) or prestigious conferences during the same period, and any shifts in their primary research areas as reflected by changes in their normalized research interests over the past five years. Include the current and previous research interests for comparison.",
        "query": " WITH citation_trend AS (     SELECT          w.authorId,         p.paperId,         p.year,         p.paper_quality_score_normalized AS quality_score,         ROW_NUMBER() OVER (PARTITION BY w.authorId ORDER BY p.year) AS row_num     FROM          writes w     JOIN          paper p ON w.paperId = p.paperId     WHERE          p.year BETWEEN EXTRACT(YEAR FROM CURRENT_DATE) - 5 AND EXTRACT(YEAR FROM CURRENT_DATE) ), consistent_increase AS (     SELECT          ct1.authorId     FROM          citation_trend ct1     JOIN          citation_trend ct2 ON ct1.authorId = ct2.authorId AND ct1.row_num + 1 = ct2.row_num     WHERE          ct2.quality_score > ct1.quality_score     GROUP BY          ct1.authorId     HAVING          COUNT(*) = 4 ), publication_activity AS (     SELECT          w.authorId,         j.journalName,         COUNT(w.paperId) AS publication_count     FROM          writes w     JOIN          paper p ON w.paperId = p.paperId     JOIN          venue v ON p.venueId = v.venueId     LEFT JOIN          journal j ON v.venueId = j.journalId     WHERE          p.year BETWEEN EXTRACT(YEAR FROM CURRENT_DATE) - 5 AND EXTRACT(YEAR FROM CURRENT_DATE)         AND (j.impact_factor > 5 OR v.venue_type = 'prestigious conference')     GROUP BY          w.authorId, j.journalName ), research_interest_shift AS (     SELECT          a.authorId,         a.author_research_interests_normalized,         LAG(a.author_research_interests_normalized) OVER (PARTITION BY a.authorId ORDER BY a.author_last_updated) AS prev_interests     FROM          author a     WHERE          a.author_last_updated >= CURRENT_DATE - INTERVAL '5 years' ) SELECT      c.authorId,     a.authorName,     pa.journalName,     pa.publication_count,     ri.author_research_interests_normalized AS current_interests,     ri.prev_interests FROM      consistent_increase c JOIN      author a ON c.authorId = a.authorId LEFT JOIN      publication_activity pa ON c.authorId = pa.authorId LEFT JOIN      research_interest_shift ri ON c.authorId = ri.authorId; ",
        "schema_links": [
            "journal.journalName",
            "journal.journalId",
            "venue.venueId",
            "author.author_last_updated",
            "author.authorId",
            "writes.authorId",
            "consistent_increase.authorId",
            "paper.paperId",
            "research_interest_shift.author_research_interests_normalized",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "author.author_research_interests_normalized",
            "venue.venue_type",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "journal.impact_factor",
            "publication_activity.journalName",
            "publication_activity.publication_count",
            "research_interest_shift.prev_interests"
        ]
    },
    {
        "instance_id": "q_814",
        "db_id": "academic_research_data",
        "question": "Which datasets have been most impactful in research papers published over the past five years, considering only open-access papers? Impact should be measured by the total quality of datasets (normalized paper-dataset quality scores), the average quality of citing papers (normalized citation quality scores), and the frequency of usage in these papers. Additionally, how do the usage patterns of these top 10 datasets vary across different conferences and journals, including the count of papers associated with each venue type? Please provide results ordered by dataset impact (total quality descending), usage frequency (count descending), and venue-specific paper counts (descending).",
        "query": " WITH recent_papers AS (     SELECT          p.paperId,         p.venueId,         p.paper_quality_score_normalized,         c.cited_paper_quality_score_normalized,         pd.datasetId,         pd.paper_dataset_quality_score_normalized     FROM          paper p     JOIN          cite c ON p.paperId = c.citingPaperId     JOIN          paperDataset pd ON p.paperId = pd.paperId     WHERE          p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5         AND p.is_open_access = TRUE ), dataset_impact AS (     SELECT          r.datasetId,         d.datasetName,         COUNT(r.paperId) AS usage_count,         AVG(r.paper_quality_score_normalized) AS avg_paper_quality,         AVG(r.cited_paper_quality_score_normalized) AS avg_citation_quality,         SUM(pd.paper_dataset_quality_score_normalized) AS total_dataset_quality     FROM          recent_papers r     JOIN          dataset d ON r.datasetId = d.datasetId     GROUP BY          r.datasetId, d.datasetName     ORDER BY          total_dataset_quality DESC, usage_count DESC     LIMIT 10 ), usage_pattern AS (     SELECT          di.datasetId,         v.venueName,         v.venue_type,         COUNT(rp.paperId) AS paper_count     FROM          dataset_impact di     JOIN          recent_papers rp ON di.datasetId = rp.datasetId     JOIN          venue v ON rp.venueId = v.venueId     GROUP BY          di.datasetId, v.venueName, v.venue_type ) SELECT      di.datasetName,     di.usage_count,     di.avg_paper_quality,     di.avg_citation_quality,     di.total_dataset_quality,     up.venueName,     up.venue_type,     up.paper_count FROM      dataset_impact di JOIN      usage_pattern up ON di.datasetId = up.datasetId ORDER BY      di.total_dataset_quality DESC, di.usage_count DESC, up.paper_count DESC; ",
        "schema_links": [
            "venue.venueId",
            "paperDataset.datasetId",
            "cite.cited_paper_quality_score_normalized",
            "paper.is_open_access",
            "paper.paperId",
            "paper.venueId",
            "paper.year",
            "dataset.datasetId",
            "venue.venue_type",
            "paperDataset.paper_dataset_quality_score_normalized",
            "paper.paper_quality_score_normalized",
            "paperDataset.paperId",
            "cite.citingPaperId",
            "venue.venueName",
            "dataset.datasetName"
        ]
    },
    {
        "instance_id": "q_822",
        "db_id": "academic_research_data",
        "question": "在过去五年内，哪些作者发表了高质量的论文（论文质量评分归一化值大于0.8），并且这些论文引用了高影响力期刊（期刊影响因子大于3.0）中的其他论文，同时使用了数据集？请按照作者的研究兴趣领域和所属机构进行分类，并提供每位作者的H指数、总引用次数，以及他们所使用数据集的平均质量评分。",
        "query": " WITH recent_high_quality_papers AS (     SELECT          w.authorId,         p.paperId,         p.numCitedBy AS citation_count,         pd.dataset_paper_count,         pd.paper_dataset_quality_score     FROM          paper p     INNER JOIN          writes w ON p.paperId = w.paperId     INNER JOIN          cite c ON p.paperId = c.citingPaperId     INNER JOIN          dataset d ON d.datasetId = ANY(             ARRAY(SELECT pd.datasetId FROM paperDataset pd WHERE pd.paperId = p.paperId)         )     INNER JOIN          journal j ON p.venueId = j.journalId     WHERE          p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5         AND p.paper_quality_score_normalized > 0.8         AND j.impact_factor > 3.0 ), author_stats AS (     SELECT          a.authorId,         a.authorName,         a.h_index,         a.affiliation,         a.author_research_interests,         SUM(rhq.citation_count) AS total_citations,         AVG(rhq.paper_dataset_quality_score) AS avg_dataset_quality_score     FROM          author a     INNER JOIN          recent_high_quality_papers rhq ON a.authorId = rhq.authorId     GROUP BY          a.authorId, a.authorName, a.h_index, a.affiliation, a.author_research_interests ) SELECT      authorName,     affiliation,     author_research_interests,     h_index,     total_citations,     avg_dataset_quality_score FROM      author_stats ORDER BY      author_research_interests, affiliation; ",
        "schema_links": [
            "journal.journalId",
            "paperDataset.dataset_paper_count",
            "author.author_research_interests",
            "writes.authorId",
            "paper.paperId",
            "author.affiliation",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "dataset.datasetId",
            "author.h_index",
            "paper.numCitedBy",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "journal.impact_factor",
            "paperDataset.paper_dataset_quality_score",
            "paperDataset.paperId",
            "author.authorId",
            "cite.citingPaperId"
        ]
    },
    {
        "instance_id": "q_816",
        "db_id": "academic_research_data",
        "question": "Which researchers have demonstrated an above-average increase in their normalized citation quality over the past five years, specifically among those with consistent publication activity in high-impact journals (defined as journals with an impact factor greater than the average impact factor across all journals)? Additionally, identify whether these researchers have experienced any shifts in their primary research areas during this period, by comparing their normalized research interests at the beginning and end of the five-year timeframe. Provide the researcher's name, their average normalized citation quality, the count of their publications in high-impact journals, and whether a shift in research interests has occurred (\"Shift Detected\" or \"No Shift\").",
        "query": " WITH citation_quality_trend AS (     SELECT          w.authorId,         p.year,         AVG(p.paper_quality_score_normalized) AS avg_citation_quality     FROM          writes w     JOIN          paper p ON w.paperId = p.paperId     WHERE          p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5         AND p.is_open_access IS NOT NULL     GROUP BY          w.authorId, p.year     ORDER BY          w.authorId, p.year ), publication_in_high_impact_journals AS (     SELECT          w.authorId,         j.impact_factor,         COUNT(p.paperId) AS high_impact_publications     FROM          writes w     JOIN          paper p ON w.paperId = p.paperId     JOIN          venue v ON p.venueId = v.venueId     JOIN          journal j ON v.venueId = j.journalId     WHERE          p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5         AND j.impact_factor > (SELECT AVG(impact_factor) FROM journal)     GROUP BY          w.authorId, j.impact_factor ), research_interest_shift AS (     SELECT          a.authorId,         a.author_research_interests_normalized,         LAG(a.author_research_interests_normalized) OVER (PARTITION BY a.authorId ORDER BY a.author_last_updated) AS prev_research_interests     FROM          author a     WHERE          a.author_last_updated >= CURRENT_DATE - INTERVAL '5 years' ) SELECT      cqt.authorId,     a.authorName,     cqt.avg_citation_quality,     pihij.high_impact_publications,     CASE          WHEN ri.prev_research_interests IS DISTINCT FROM ri.author_research_interests_normalized THEN 'Shift Detected'         ELSE 'No Shift'     END AS research_interest_change FROM      citation_quality_trend cqt JOIN      publication_in_high_impact_journals pihij ON cqt.authorId = pihij.authorId JOIN      research_interest_shift ri ON cqt.authorId = ri.authorId JOIN      author a ON cqt.authorId = a.authorId WHERE      cqt.avg_citation_quality > (         SELECT              AVG(avg_citation_quality)         FROM              citation_quality_trend     ) GROUP BY      cqt.authorId, a.authorName, cqt.avg_citation_quality, pihij.high_impact_publications, ri.author_research_interests_normalized, ri.prev_research_interests ORDER BY      cqt.authorId; ",
        "schema_links": [
            "journal.journalId",
            "venue.venueId",
            "author.author_last_updated",
            "writes.authorId",
            "paper.is_open_access",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "author.author_research_interests_normalized",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "journal.impact_factor",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_824",
        "db_id": "academic_research_data",
        "question": "Which datasets are most frequently used in papers written by authors with a normalized paper quality score greater than 0.8, and what is the yearly citation trend of these papers over time? Additionally, provide the research interests of these authors and the venues where the papers were published, to understand the context of dataset usage. List the results by dataset usage frequency in descending order and by citation year.",
        "query": " WITH high_quality_authors AS (     SELECT DISTINCT w.authorId     FROM writes w     JOIN paper p ON w.paperId = p.paperId     WHERE p.paper_quality_score_normalized > 0.8 ), author_interests AS (     SELECT ha.authorId, unnest(a.author_research_interests) AS research_interest     FROM high_quality_authors ha     JOIN author a ON ha.authorId = a.authorId ), dataset_usage AS (     SELECT pd.datasetId, COUNT(pd.paperId) AS usage_count     FROM paperDataset pd     JOIN writes w ON pd.paperId = w.paperId     JOIN high_quality_authors hqa ON w.authorId = hqa.authorId     GROUP BY pd.datasetId     ORDER BY usage_count DESC     LIMIT 10 ), citation_trends AS (     SELECT c.citedPaperId, EXTRACT(YEAR FROM c.paper_citation_trend) AS citation_year, COUNT(*) AS citation_count     FROM cite c     JOIN dataset_usage du ON c.citedPaperId = du.paperId     GROUP BY c.citedPaperId, citation_year     ORDER BY citation_year ) SELECT      d.datasetName,     du.usage_count,     ai.research_interest,     v.venueName,     ct.citation_year,     ct.citation_count FROM dataset_usage du JOIN dataset d ON du.datasetId = d.datasetId LEFT JOIN paperDataset pd ON du.datasetId = pd.datasetId LEFT JOIN paper p ON pd.paperId = p.paperId LEFT JOIN venue v ON p.venueId = v.venueId LEFT JOIN writes w ON p.paperId = w.paperId LEFT JOIN author_interests ai ON w.authorId = ai.authorId LEFT JOIN citation_trends ct ON p.paperId = ct.citedPaperId ORDER BY du.usage_count DESC, ct.citation_year; ",
        "schema_links": [
            "citation_trends.citation_year",
            "venue.venueId",
            "paperDataset.datasetId",
            "author.author_research_interests",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "citation_trends.citation_count",
            "paper.venueId",
            "writes.paperId",
            "dataset.datasetId",
            "cite.paper_citation_trend",
            "dataset_usage.usage_count",
            "paper.paper_quality_score_normalized",
            "author_interests.research_interest",
            "paperDataset.paperId",
            "venue.venueName",
            "author.authorId",
            "dataset.datasetName"
        ]
    },
    {
        "instance_id": "q_817",
        "db_id": "academic_research_data",
        "question": "在过去一年内更新过的作者中，哪些作者在其最近三年发表的开放获取论文中表现出较高的标准化论文质量，并且其引用的论文在数据集使用方面具有显著的增长趋势？同时，这些数据集在过去六个月内也得到了更新，且平均下载量超过1000次。请按照引用论文的总标准化质量分数降序排列，并结合作者的最新论文质量进行排序，最终返回前10名作者及其相关信息，包括作者ID、姓名、H指数、论文发表数量、最新论文的标准化质量分数、引用论文的总标准化质量分数以及引用论文所使用数据集的平均下载量。",
        "query": " SELECT      a.authorId,     a.authorName,     a.h_index,     a.publication_count,     p.paper_quality_score_normalized AS latest_paper_quality,     SUM(c.cited_paper_quality_score_normalized) AS total_cited_paper_quality,     AVG(d.dataset_download_count) AS avg_dataset_influence FROM      author a JOIN      writes w ON a.authorId = w.authorId JOIN      paper p ON w.paperId = p.paperId JOIN      cite c ON p.paperId = c.citingPaperId JOIN      paperDataset pd ON c.citedPaperId = pd.paperId JOIN      dataset d ON pd.datasetId = d.datasetId WHERE      a.author_last_updated >= NOW() - INTERVAL '1 year'     AND p.year >= EXTRACT(YEAR FROM NOW()) - 3     AND p.is_open_access = TRUE     AND d.dataset_last_updated >= NOW() - INTERVAL '6 months' GROUP BY      a.authorId, a.authorName, a.h_index, a.publication_count, p.paper_quality_score_normalized HAVING      COUNT(DISTINCT c.citedPaperId) > 5     AND AVG(d.dataset_download_count) > 1000 ORDER BY      total_cited_paper_quality DESC,     latest_paper_quality DESC LIMIT 10; ",
        "schema_links": [
            "author.author_last_updated",
            "cite.cited_paper_quality_score_normalized",
            "paperDataset.datasetId",
            "cite.citedPaperId",
            "writes.authorId",
            "paper.is_open_access",
            "dataset.dataset_last_updated",
            "paper.paperId",
            "writes.paperId",
            "paper.year",
            "dataset.datasetId",
            "author.publication_count",
            "author.h_index",
            "dataset.dataset_download_count",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "paperDataset.paperId",
            "author.authorId",
            "cite.citingPaperId"
        ]
    },
    {
        "instance_id": "q_823",
        "db_id": "academic_research_data",
        "question": "Which datasets have been most frequently used in papers published over the past five years, where the papers have a high normalized citation quality score (greater than 0.8) and are authored by researchers with a strong focus on semantic parsing, as indicated by their normalized research interests? Please rank the datasets by their total usage count and return the top 10 results.",
        "query": " SELECT d.datasetName, SUM(psd.dataset_paper_count) AS total_usage FROM paperDataset psd JOIN dataset d ON psd.datasetId = d.datasetId JOIN paper p ON psd.paperId = p.paperId JOIN writes w ON p.paperId = w.paperId JOIN author a ON w.authorId = a.authorId WHERE p.cited_paper_quality_score_normalized > 0.8 AND a.author_research_interests_normalized @> ARRAY['semantic parsing'] AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5 GROUP BY d.datasetName ORDER BY total_usage DESC LIMIT 10; ",
        "schema_links": [
            "paperDataset.datasetId",
            "writes.authorId",
            "paper.paperId",
            "writes.paperId",
            "paper.year",
            "author.author_research_interests_normalized",
            "dataset.datasetId",
            "paper.cited_paper_quality_score_normalized",
            "paperDataset.paperId",
            "dataset.datasetName",
            "author.authorId",
            "paperDataset.dataset_paper_count"
        ]
    },
    {
        "instance_id": "q_820",
        "db_id": "academic_research_data",
        "question": "Which researchers, based on their publications in the past three years, have demonstrated a higher likelihood of shifting focus to emerging research areas, considering their engagement with datasets that have more than 100 downloads and venues updated since January 1, 2020? Additionally, analyze the normalized quality scores of citations received by these researchers, the count of papers associated with specific datasets, and the distribution trends of citations across different sources. Provide results sorted by the researchers' h-index in descending order, followed by the normalized quality score of citations and the count of dataset-associated papers. Include details about the researchers' normalized research interests, the year of their latest publication, and the citation source distribution trends.",
        "query": " SELECT      a.authorId,     a.authorName,     a.publication_count,     a.h_index,     a.author_research_interests_normalized,     p.year AS latest_publication_year,     c.cited_paper_quality_score_normalized,     d.dataset_paper_count,     v.venueName,     c.paper_citation_source_normalized,     c.paper_citation_trend_normalized FROM      author a JOIN      writes w ON a.authorId = w.authorId JOIN      paper p ON w.paperId = p.paperId LEFT JOIN      cite c ON p.paperId = c.citedPaperId LEFT JOIN      paperDataset pd ON p.paperId = pd.paperId LEFT JOIN      dataset d ON pd.datasetId = d.datasetId JOIN      venue v ON p.venueId = v.venueId WHERE      p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 3     AND c.paper_citation_trend_normalized IS NOT NULL     AND d.dataset_download_count > 100     AND v.venue_last_updated >= '2020-01-01' GROUP BY      a.authorId, a.authorName, a.publication_count, a.h_index, a.author_research_interests_normalized, p.year, c.cited_paper_quality_score_normalized, d.dataset_paper_count, v.venueName, c.paper_citation_source_normalized, c.paper_citation_trend_normalized ORDER BY      a.h_index DESC, c.cited_paper_quality_score_normalized DESC, d.dataset_paper_count DESC; ",
        "schema_links": [
            "cite.cited_paper_quality_score_normalized",
            "venue.venue_last_updated",
            "cite.citedPaperId",
            "paper.paperId",
            "writes.paperId",
            "dataset.datasetId",
            "author.h_index",
            "author.publication_count",
            "cite.paper_citation_source_normalized",
            "paperDataset.paperId",
            "author.authorId",
            "dataset.dataset_paper_count",
            "venue.venueId",
            "cite.paper_citation_trend_normalized",
            "paperDataset.datasetId",
            "writes.authorId",
            "paper.venueId",
            "paper.year",
            "author.author_research_interests_normalized",
            "dataset.dataset_download_count",
            "author.authorName",
            "venue.venueName"
        ]
    },
    {
        "instance_id": "q_821",
        "db_id": "academic_research_data",
        "question": "Which researchers, based on their publications in the past three years, have published more than five open-access papers with an average normalized paper quality score exceeding 0.8 and a total normalized quality score of linked datasets greater than 10? Additionally, consider the average impact factor of the venues where their papers were published and the average citation density of those venues (calculated as the number of citations per paper divided by the journal's publication volume). List the researchers in descending order of venue citation density, followed by venue impact factor, and then by the count of recent papers.",
        "query": " SELECT      a.authorId,     a.authorName,     COUNT(p.paperId) AS recent_paper_count,     AVG(p.paper_quality_score_normalized) AS avg_paper_quality_score,     SUM(pd.paper_dataset_quality_score_normalized) AS total_dataset_quality_score,     AVG(j.impact_factor) AS avg_venue_impact_factor,     AVG(p.numCiting / (j.journal_publication_volume + 0.001)) AS avg_citation_density FROM      author a JOIN writes w ON a.authorId = w.authorId JOIN paper p ON w.paperId = p.paperId JOIN venue v ON p.venueId = v.venueId LEFT JOIN journal j ON v.venueId = j.journalId LEFT JOIN paperDataset pd ON p.paperId = pd.paperId WHERE      p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 3     AND p.is_open_access = TRUE     AND pd.dataset_paper_count > 0 GROUP BY      a.authorId, a.authorName HAVING      COUNT(p.paperId) > 5     AND AVG(p.paper_quality_score_normalized) > 0.8     AND SUM(pd.paper_dataset_quality_score_normalized) > 10 ORDER BY      avg_citation_density DESC, avg_venue_impact_factor DESC, recent_paper_count DESC; ",
        "schema_links": [
            "journal.journalId",
            "venue.venueId",
            "writes.authorId",
            "journal.journal_publication_volume",
            "paper.is_open_access",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "paper.numCiting",
            "author.authorName",
            "paperDataset.paper_dataset_quality_score_normalized",
            "paper.paper_quality_score_normalized",
            "journal.impact_factor",
            "paperDataset.paperId",
            "author.authorId",
            "paperDataset.dataset_paper_count"
        ]
    },
    {
        "instance_id": "q_826",
        "db_id": "academic_research_data",
        "question": "Which researchers have shown a consistent year-over-year increase in their normalized paper quality score over the past five years, specifically for papers published in this time frame that are associated with an open access status? Additionally, determine the number of publications these researchers have in top-tier journals or conferences (defined as venues with an impact factor above the average impact factor of all journals) during the same five-year period. Finally, identify any changes in their primary research areas by comparing their current research interests (as of the last five years) with their research interests prior to this period. Present the results ordered by the number of publications in top-tier venues in descending order.",
        "query": " WITH citation_trend AS (     SELECT          w.authorId,         p.paperId,         p.year,         p.paper_quality_score_normalized AS quality_score,         ROW_NUMBER() OVER (PARTITION BY w.authorId ORDER BY p.year) AS row_num     FROM          writes w     JOIN          paper p ON w.paperId = p.paperId     WHERE          p.year BETWEEN EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5 AND EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC')         AND p.is_open_access IS NOT NULL ), consistent_increase AS (     SELECT          ct1.authorId     FROM          citation_trend ct1     JOIN          citation_trend ct2 ON ct1.authorId = ct2.authorId AND ct1.row_num + 1 = ct2.row_num     WHERE          ct2.quality_score > ct1.quality_score     GROUP BY          ct1.authorId     HAVING          COUNT(*) = 4 ), top_venues AS (     SELECT          v.venueId     FROM          venue v     WHERE          v.impact_factor > (SELECT AVG(impact_factor) FROM journal) ), publication_activity AS (     SELECT          w.authorId,         COUNT(w.paperId) AS top_venue_pubs     FROM          writes w     JOIN          paper p ON w.paperId = p.paperId     JOIN          top_venues tv ON p.venueId = tv.venueId     WHERE          p.year BETWEEN EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5 AND EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC')     GROUP BY          w.authorId ), research_interest_shift AS (     SELECT          a.authorId,         STRING_AGG(DISTINCT a.author_research_interests, ', ') AS current_interests,         STRING_AGG(DISTINCT prev_interests.interest, ', ') AS previous_interests     FROM          author a     LEFT JOIN (         SELECT              w.authorId,             unnest(a.author_research_interests) AS interest         FROM              writes w         JOIN              paper p ON w.paperId = p.paperId         JOIN              author a ON w.authorId = a.authorId         WHERE              p.year < EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5     ) prev_interests ON a.authorId = prev_interests.authorId     WHERE          a.author_last_updated >= (CURRENT_TIMESTAMP AT TIME ZONE 'UTC' - INTERVAL '5 years')     GROUP BY          a.authorId ) SELECT      ci.authorId,     a.authorName,     pa.top_venue_pubs,     ri.current_interests,     ri.previous_interests FROM      consistent_increase ci JOIN      publication_activity pa ON ci.authorId = pa.authorId JOIN      research_interest_shift ri ON ci.authorId = ri.authorId JOIN      author a ON ci.authorId = a.authorId ORDER BY      pa.top_venue_pubs DESC; ",
        "schema_links": [
            "venue.impact_factor",
            "research_interest_shift.authorId",
            "research_interest_shift.current_interests",
            "publication_activity.top_venue_pubs",
            "venue.venueId",
            "author.author_last_updated",
            "top_venues.venueId",
            "author.author_research_interests",
            "writes.authorId",
            "consistent_increase.authorId",
            "paper.is_open_access",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "publication_activity.authorId",
            "citation_trend.authorId",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "journal.impact_factor",
            "research_interest_shift.previous_interests",
            "citation_trend.quality_score",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_825",
        "db_id": "academic_research_data",
        "question": "在过去一年中，哪些作者在其研究领域中表现出较高的影响力？具体表现为：高引用质量分数（归一化论文质量分数大于0.8）、活跃的论文发表趋势（发表论文数量超过5篇），以及与特定数据集的强关联性（数据集相关论文的质量归一化分数大于0.7）。同时，请分析这些作者最近一年的研究兴趣变化情况，包括其研究兴趣的调整及其对所在领域的影响，并按照作者的h指数降序和发表论文数量降序进行排序。",
        "query": " WITH influential_authors AS (     SELECT          w.authorId,         a.authorName,         a.h_index,         p.paper_quality_score_normalized,         pd.paper_dataset_quality_score_normalized,         COUNT(DISTINCT p.paperId) AS paper_count     FROM          writes w     JOIN          author a ON w.authorId = a.authorId     JOIN          paper p ON w.paperId = p.paperId     LEFT JOIN          paperDataset pd ON p.paperId = pd.paperId     WHERE          p.paper_quality_score_normalized > 0.8         AND pd.paper_dataset_quality_score_normalized > 0.7         AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 1     GROUP BY          w.authorId, a.authorName, a.h_index, p.paper_quality_score_normalized, pd.paper_dataset_quality_score_normalized     HAVING          COUNT(DISTINCT p.paperId) > 5 ), research_interest_changes AS (     SELECT          ia.authorId,         a.author_research_interests,         LAG(a.author_research_interests) OVER (PARTITION BY a.authorId ORDER BY a.author_last_updated) AS prev_research_interests,         a.author_last_updated     FROM          influential_authors ia     JOIN          author a ON ia.authorId = a.authorId     WHERE          a.author_last_updated >= NOW() - INTERVAL '1 year' ) SELECT      ric.authorId,     a.authorName,     ric.author_research_interests,     ric.prev_research_interests,     ric.author_last_updated,     ia.h_index,     ia.paper_quality_score_normalized,     ia.paper_dataset_quality_score_normalized,     ia.paper_count FROM      research_interest_changes ric JOIN      influential_authors ia ON ric.authorId = ia.authorId JOIN      author a ON ric.authorId = a.authorId ORDER BY      ia.h_index DESC, ia.paper_count DESC; ",
        "schema_links": [
            "author.author_last_updated",
            "author.author_research_interests",
            "writes.authorId",
            "paper.paperId",
            "writes.paperId",
            "paper.year",
            "author.h_index",
            "author.authorName",
            "paperDataset.paper_dataset_quality_score_normalized",
            "paper.paper_quality_score_normalized",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_829",
        "db_id": "academic_research_data",
        "question": "Identify deep learning publications that have marked significant advancements in the field since 2010, as indicated by a normalized paper quality score exceeding 0.8. For each publication, provide details including the title, year, number of citations (both citing and cited), venue name, venue type, and normalized citation trends across different venues and research areas. Additionally, analyze how the citations of these significant papers have evolved over time, considering the quality scores of both citing and cited papers. Investigate patterns in dataset usage by identifying datasets with a normalized quality score greater than 0.5 that are associated with these papers. Similarly, evaluate keyphrase relevance by examining keyphrases with a normalized weighted frequency greater than 0.3 linked to these publications. Present the results ordered by publication year in ascending order and by the number of citations in descending order for each year.",
        "query": " WITH significant_papers AS (     SELECT          p.paperId,         p.title,         p.year,         p.numCiting,         p.numCitedBy,         p.paper_quality_score_normalized,         v.venueName,         v.venue_type,         a.author_research_interests_normalized     FROM          paper p     JOIN          venue v ON p.venueId = v.venueId     JOIN          writes w ON p.paperId = w.paperId     JOIN          author a ON w.authorId = a.authorId     WHERE          'deep learning' = ANY(a.author_research_interests_normalized)         AND p.paper_quality_score_normalized > 0.8         AND p.year >= 2010 ), citation_trends AS (     SELECT          sp.paperId,         sp.title,         c.citingPaperId,         c.citedPaperId,         c.paper_citation_trend_normalized,         c.paper_citation_source_normalized,         c.citing_paper_quality_score_normalized,         c.cited_paper_quality_score_normalized     FROM          significant_papers sp     JOIN          cite c ON sp.paperId = c.citedPaperId ), dataset_usage AS (     SELECT          pd.paperId,         d.datasetName,         pd.dataset_paper_count,         pd.paper_dataset_quality_score_normalized     FROM          paperDataset pd     JOIN          dataset d ON pd.datasetId = d.datasetId     WHERE          pd.paper_dataset_quality_score_normalized > 0.5 ), keyphrase_relevance AS (     SELECT          pk.paperId,         k.keyphraseName,         pk.paper_keyphrase_weighted_frequency_normalized     FROM          paperKeyphrase pk     JOIN          keyphrase k ON pk.keyphraseId = k.keyphraseId     WHERE          pk.paper_keyphrase_weighted_frequency_normalized > 0.3 ) SELECT      st.paperId,     st.title,     st.year,     st.numCiting,     st.numCitedBy,     st.paper_quality_score_normalized,     st.venueName,     st.venue_type,     st.author_research_interests_normalized,     ct.paper_citation_trend_normalized,     ct.paper_citation_source_normalized,     ct.citing_paper_quality_score_normalized,     ct.cited_paper_quality_score_normalized,     du.datasetName,     du.dataset_paper_count,     du.paper_dataset_quality_score_normalized,     kr.keyphraseName,     kr.paper_keyphrase_weighted_frequency_normalized FROM      significant_papers st LEFT JOIN      citation_trends ct ON st.paperId = ct.citedPaperId LEFT JOIN      dataset_usage du ON st.paperId = du.paperId LEFT JOIN      keyphrase_relevance kr ON st.paperId = kr.paperId ORDER BY      st.year ASC, st.numCiting DESC; ",
        "schema_links": [
            "cite.cited_paper_quality_score_normalized",
            "cite.citedPaperId",
            "paper.paperId",
            "writes.paperId",
            "paperKeyphrase.keyphraseId",
            "paperKeyphrase.paper_keyphrase_weighted_frequency_normalized",
            "dataset.datasetId",
            "paper.numCitedBy",
            "paperDataset.paper_dataset_quality_score_normalized",
            "cite.paper_citation_source_normalized",
            "keyphrase.keyphraseName",
            "paperDataset.paperId",
            "author.authorId",
            "dataset.datasetName",
            "paperDataset.dataset_paper_count",
            "cite.citing_paper_quality_score_normalized",
            "cite.citingPaperId",
            "paperKeyphrase.paperId",
            "venue.venueId",
            "keyphrase.keyphraseId",
            "cite.paper_citation_trend_normalized",
            "paperDataset.datasetId",
            "writes.authorId",
            "paper.venueId",
            "paper.year",
            "author.author_research_interests_normalized",
            "paper.numCiting",
            "venue.venue_type",
            "paper.paper_quality_score_normalized",
            "paper.title",
            "venue.venueName"
        ]
    },
    {
        "instance_id": "q_819",
        "db_id": "academic_research_data",
        "question": "In which year was the earliest publication that gained above-average citations and was referenced by high-quality subsequent works (with normalized quality score greater than 0.8), marking the emergence of deep learning as a significant research area?",
        "query": " SELECT p.year  FROM paper p JOIN cite c ON p.paperId = c.citedPaperId WHERE c.citing_paper_quality_score_normalized > 0.8   AND p.numCitedBy > (SELECT AVG(numCitedBy) FROM paper) ORDER BY p.year ASC LIMIT 1; ",
        "schema_links": [
            "cite.citing_paper_quality_score_normalized",
            "paper.year",
            "paper.numCitedBy",
            "cite.citedPaperId",
            "paper.paperId"
        ]
    },
    {
        "instance_id": "q_827",
        "db_id": "academic_research_data",
        "question": "What are the research papers authored by Li Dong in 2016, including their titles and venues (conferences or journals), that have been cited by high-quality publications with a normalized quality score greater than 0.8? Additionally, provide the count of citations grouped by the distinct conferences and journals where these citing papers were published. Identify the key research topics and datasets associated with the cited papers, specifically focusing on datasets with more than 1000 downloads. Finally, sort the results in descending order based on the total number of citations received by each paper.",
        "query": " WITH cited_papers AS (     SELECT          p.paperId,         p.title,         p.venueId,         p.year,         p.numCitedBy,         p.paper_quality_score_normalized,         v.venueName,         v.venue_type     FROM          paper p     JOIN          writes w ON p.paperId = w.paperId     JOIN          author a ON w.authorId = a.authorId     WHERE          a.authorName = 'Li Dong'          AND p.year = 2016 ),  high_quality_citations AS (     SELECT          c.citedPaperId,         COUNT(c.citingPaperId) AS citation_count,         STRING_AGG(DISTINCT j.journalName, ', ') AS journal_names,         STRING_AGG(DISTINCT ve.venueName, ', ') AS conference_names     FROM          cite c     JOIN          paper cp ON c.citingPaperId = cp.paperId     LEFT JOIN          journal j ON cp.venueId = j.journalId     LEFT JOIN          venue ve ON cp.venueId = ve.venueId     WHERE          cp.paper_quality_score_normalized > 0.8     GROUP BY          c.citedPaperId ),  paper_topics_datasets AS (     SELECT          pk.paperId,         STRING_AGG(DISTINCT k.keyphraseName, ', ') AS key_topics,         STRING_AGG(DISTINCT d.datasetName, ', ') AS significant_datasets     FROM          paperKeyphrase pk     JOIN          keyphrase k ON pk.keyphraseId = k.keyphraseId     LEFT JOIN          paperDataset pd ON pk.paperId = pd.paperId     LEFT JOIN          dataset d ON pd.datasetId = d.datasetId     WHERE          d.dataset_download_count > 1000     GROUP BY          pk.paperId ) SELECT      cp.paperId,     cp.title,     cp.year,     cp.venueName,     cp.venue_type,     hqc.citation_count,     hqc.journal_names,     hqc.conference_names,     pt.significant_datasets,     pt.key_topics FROM      cited_papers cp JOIN      high_quality_citations hqc ON cp.paperId = hqc.citedPaperId LEFT JOIN      paper_topics_datasets pt ON cp.paperId = pt.paperId ORDER BY      cp.numCitedBy DESC; ",
        "schema_links": [
            "journal.journalName",
            "journal.journalId",
            "cite.citedPaperId",
            "paper.paperId",
            "writes.paperId",
            "paperKeyphrase.keyphraseId",
            "dataset.datasetId",
            "paper.numCitedBy",
            "keyphrase.keyphraseName",
            "paperDataset.paperId",
            "author.authorId",
            "dataset.datasetName",
            "cite.citingPaperId",
            "paperKeyphrase.paperId",
            "venue.venueId",
            "keyphrase.keyphraseId",
            "paperDataset.datasetId",
            "writes.authorId",
            "paper.venueId",
            "paper.year",
            "dataset.dataset_download_count",
            "venue.venue_type",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "paper.title",
            "venue.venueName"
        ]
    },
    {
        "instance_id": "q_830",
        "db_id": "academic_research_data",
        "question": "Which researchers have achieved the highest growth in publication impact since 2005, as measured by the total normalized citation impact of their papers and the average prestige of the venues where their papers were published, considering only papers published in or after 2005? Please rank the researchers first by their total citation impact in descending order and then by the average venue prestige in descending order, and return the top 10 results.",
        "query": " SELECT      a.authorId,     a.authorName,     SUM(p.numCitedBy * p.paper_quality_score_normalized) AS total_citation_impact,     AVG(j.impact_factor) AS avg_venue_prestige FROM      author a JOIN      writes w ON a.authorId = w.authorId JOIN      paper p ON w.paperId = p.paperId JOIN      venue v ON p.venueId = v.venueId LEFT JOIN      journal j ON v.venueId = j.journalId WHERE      p.year >= 2005 GROUP BY      a.authorId, a.authorName ORDER BY      total_citation_impact DESC, avg_venue_prestige DESC LIMIT 10; ",
        "schema_links": [
            "journal.journalId",
            "venue.venueId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "paper.numCitedBy",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "journal.impact_factor",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_836",
        "db_id": "academic_research_data",
        "question": "Which authors have published more than one paper on \"semantic parsing\" in top-tier venues (defined as venues with an impact factor greater than the 90th percentile of journal impact factors) since 2005, considering the normalized quality scores of their papers and the average normalized weighted frequency of relevant keyphrases, ranked by the total normalized quality score of their papers in descending order and then by the average keyphrase relevance in descending order, limited to the top 10 authors?",
        "query": " SELECT      a.authorName,      SUM(p.paper_quality_score_normalized) AS total_quality_score,     COUNT(DISTINCT p.paperId) AS paper_count,     AVG(pk.paper_keyphrase_weighted_frequency_normalized) AS avg_keyphrase_relevance FROM      author a JOIN writes w ON a.authorId = w.authorId JOIN paper p ON w.paperId = p.paperId JOIN venue v ON p.venueId = v.venueId JOIN paperKeyphrase pk ON p.paperId = pk.paperId JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId WHERE      v.impact_factor > (SELECT PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY journal.impact_factor) FROM journal)     AND p.year >= 2005     AND k.keyphraseName ILIKE '%semantic parsing%' GROUP BY      a.authorName HAVING      COUNT(DISTINCT p.paperId) > 1 ORDER BY      total_quality_score DESC,      avg_keyphrase_relevance DESC LIMIT 10; ",
        "schema_links": [
            "venue.impact_factor",
            "paperKeyphrase.paperId",
            "venue.venueId",
            "keyphrase.keyphraseId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "paperKeyphrase.keyphraseId",
            "paperKeyphrase.paper_keyphrase_weighted_frequency_normalized",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "journal.impact_factor",
            "keyphrase.keyphraseName",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_835",
        "db_id": "academic_research_data",
        "question": "Which authors have the highest paper quality scores among papers published in journals with above-average impact factors after the year 2005? Additionally, provide the citation categories and sources for these papers, along with the evolution of the authors' research interests over time, including their latest updates. Present the results ordered by the paper quality score in descending order.",
        "query": " WITH high_impact_journals AS (     SELECT journalId     FROM journal     WHERE impact_factor > (SELECT AVG(impact_factor) FROM journal) ), author_citation_quality AS (     SELECT w.authorId, p.paperId, p.paper_quality_score, j.journalId     FROM writes w     JOIN paper p ON w.paperId = p.paperId     JOIN venue v ON p.venueId = v.venueId     JOIN high_impact_journals j ON v.venueId = j.journalId     WHERE p.year > 2005 ), author_max_citation_quality AS (     SELECT authorId, MAX(paper_quality_score) AS max_quality_score     FROM author_citation_quality     GROUP BY authorId ), top_authors AS (     SELECT acq.authorId, acq.paperId, acq.paper_quality_score     FROM author_citation_quality acq     JOIN author_max_citation_quality amcq ON acq.authorId = amcq.authorId         AND acq.paper_quality_score = amcq.max_quality_score ), citation_trends AS (     SELECT c.citedPaperId, STRING_AGG(c.paper_citation_category, ',') AS citation_categories, STRING_AGG(c.paper_citation_source, ',') AS citation_sources     FROM cite c     GROUP BY c.citedPaperId ), research_interest_evolution AS (     SELECT a.authorId, a.author_research_interests, a.author_last_updated     FROM author a     WHERE a.authorId IN (SELECT DISTINCT authorId FROM top_authors) ) SELECT ta.authorId, a.authorName, ta.paperId, ta.paper_quality_score, ct.citation_categories, ct.citation_sources, ri.author_research_interests, ri.author_last_updated FROM top_authors ta JOIN author a ON ta.authorId = a.authorId LEFT JOIN citation_trends ct ON ta.paperId = ct.citedPaperId LEFT JOIN research_interest_evolution ri ON ta.authorId = ri.authorId ORDER BY ta.paper_quality_score DESC; ",
        "schema_links": [
            "citation_trends.citation_sources",
            "journal.journalId",
            "top_authors.paperId",
            "author_max_citation_quality.max_quality_score",
            "author_max_citation_quality.authorId",
            "cite.citedPaperId",
            "citation_trends.citedPaperId",
            "paper.paperId",
            "research_interest_evolution.author_last_updated",
            "writes.paperId",
            "paper.paper_quality_score",
            "research_interest_evolution.author_research_interests",
            "citation_trends.citation_categories",
            "author.authorId",
            "research_interest_evolution.authorId",
            "venue.venueId",
            "author.author_last_updated",
            "author.author_research_interests",
            "writes.authorId",
            "paper.venueId",
            "paper.year",
            "top_authors.authorId",
            "author_citation_quality.authorId",
            "author.authorName",
            "cite.paper_citation_source",
            "journal.impact_factor",
            "author_citation_quality.paper_quality_score",
            "author_citation_quality.paperId",
            "cite.paper_citation_category",
            "top_authors.paper_quality_score"
        ]
    },
    {
        "instance_id": "q_828",
        "db_id": "academic_research_data",
        "question": "What is the total number of normalized quality-score citations received by Dan Makumbi's publications that are specifically related to the topic of \"genetic identity\", broken down by the venues where these papers were published and the years they were published in, ordered chronologically by year and in descending order of total citations for each year-venue combination?",
        "query": " SELECT      p.venueId,     v.venueName,     p.year,     SUM(c.cited_paper_quality_score_normalized) AS total_citations FROM      paper p JOIN      writes w ON p.paperId = w.paperId JOIN      author a ON w.authorId = a.authorId JOIN      cite c ON p.paperId = c.citedPaperId LEFT JOIN      venue v ON p.venueId = v.venueId WHERE      a.authorName = 'Dan Makumbi'     AND p.paper_keywords_normalized @> ARRAY['genetic identity'] GROUP BY      p.venueId, v.venueName, p.year ORDER BY      p.year, total_citations DESC; ",
        "schema_links": [
            "paper.paper_keywords_normalized",
            "venue.venueId",
            "cite.cited_paper_quality_score_normalized",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "author.authorName",
            "venue.venueName",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_831",
        "db_id": "academic_research_data",
        "question": "What are the research areas that Oren Etzioni focuses on, and how have the number of his publications and the quality of citations evolved from the beginning of the past 10 years until now, broken down by year?",
        "query": " SELECT      a.author_research_interests AS research_areas,     p.year AS publication_year,     c.citing_paper_quality_score_normalized AS citation_quality,     COUNT(p.paperId) AS publication_count FROM      author a JOIN      writes w ON a.authorId = w.authorId JOIN      paper p ON w.paperId = p.paperId LEFT JOIN      cite c ON p.paperId = c.citedPaperId WHERE      a.authorName = 'Oren Etzioni'     AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 10 GROUP BY      a.author_research_interests, p.year, c.citing_paper_quality_score_normalized ORDER BY      p.year ASC; ",
        "schema_links": [
            "cite.citing_paper_quality_score_normalized",
            "paper.year",
            "writes.paperId",
            "author.authorName",
            "author.author_research_interests",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_832",
        "db_id": "academic_research_data",
        "question": "Which studies in the field of deep learning have referenced the ImageNet dataset, and how has the quality of these references evolved over time in terms of average paper quality score and total citations? Additionally, analyze the distribution of these studies across different venues, categorized by venue type, and identify the trends in the usage of ImageNet within high-impact journals, ordered by descending journal impact factor.",
        "query": " WITH imagenet_papers AS (     SELECT          pd.paperId,         p.title,         p.year,         p.numCiting,         p.paper_quality_score_normalized AS paper_quality,         v.venueName,         v.venue_type,         j.journalName,         j.impact_factor     FROM          paperDataset pd     JOIN          paper p ON pd.paperId = p.paperId     LEFT JOIN          venue v ON p.venueId = v.venueId     LEFT JOIN          journal j ON v.venueId = j.journalId     WHERE          pd.datasetId = (SELECT datasetId FROM dataset WHERE datasetName = 'ImageNet') ), citation_quality_trends AS (     SELECT          ip.year,         AVG(ip.paper_quality) AS avg_paper_quality,         COUNT(*) AS paper_count,         SUM(ip.numCiting) AS total_citations     FROM          imagenet_papers ip     GROUP BY          ip.year     ORDER BY          ip.year ), venue_trends AS (     SELECT          ip.venueName,         ip.venue_type,         COUNT(*) AS paper_count     FROM          imagenet_papers ip     GROUP BY          ip.venueName, ip.venue_type ), journal_impact_distribution AS (     SELECT          ip.journalName,         ip.impact_factor,         COUNT(*) AS paper_count     FROM          imagenet_papers ip     WHERE          ip.journalName IS NOT NULL     GROUP BY          ip.journalName, ip.impact_factor     ORDER BY          ip.impact_factor DESC ) SELECT      cq.year,     cq.avg_paper_quality,     cq.paper_count,     cq.total_citations,     vt.venueName,     vt.venue_type,     vt.paper_count AS venue_paper_count,     ji.journalName,     ji.impact_factor,     ji.paper_count AS journal_paper_count FROM      citation_quality_trends cq LEFT JOIN      venue_trends vt ON cq.year = vt.year LEFT JOIN      journal_impact_distribution ji ON cq.year = ji.year; ",
        "schema_links": [
            "journal.journalName",
            "journal.journalId",
            "citation_quality_trends.year",
            "venue_trends.venueName",
            "journal_impact_distribution.journalName",
            "citation_quality_trends.paper_count",
            "citation_quality_trends.total_citations",
            "journal_impact_distribution.paper_count",
            "dataset.datasetId",
            "paperDataset.paperId",
            "dataset.datasetName",
            "imagenet_papers.numCiting",
            "venue.venueId",
            "paperDataset.datasetId",
            "venue_trends.paper_count",
            "citation_quality_trends.avg_paper_quality",
            "paper.venueId",
            "paper.year",
            "paper.numCiting",
            "imagenet_papers.year",
            "venue.venue_type",
            "paper.paper_quality_score_normalized",
            "journal.impact_factor",
            "imagenet_papers.paper_quality",
            "journal_impact_distribution.impact_factor",
            "paper.title",
            "venue.venueName",
            "venue_trends.venue_type"
        ]
    },
    {
        "instance_id": "q_837",
        "db_id": "academic_research_data",
        "question": "Which research papers published within the last five years have the highest paper quality scores,引用了用户评分为4.0以上的高影响力 datasets, and were published in either top-tier journals with an impact factor greater than 10.0 or top-tier conferences? Additionally, consider the normalized trend of citations these papers received over time, and return the results sorted by paper quality score in descending order, followed by the normalized citation trend in descending order, limiting the output to the top 10 papers.",
        "query": " SELECT      p.paperId,      p.title,      p.year,      p.paper_quality_score AS quality_score,      c.paper_citation_trend AS citation_trend,      d.datasetName AS dataset_name,      j.journalName AS journal_name FROM      paper p JOIN      cite c ON p.paperId = c.citedPaperId JOIN      paperDataset pd ON p.paperId = pd.paperId JOIN      dataset d ON pd.datasetId = d.datasetId JOIN      venue v ON p.venueId = v.venueId LEFT JOIN      journal j ON v.venueId = j.journalId WHERE      p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5     AND d.dataset_user_rating > 4.0     AND (j.impact_factor > 10.0 OR v.venue_type IN ('top-tier conference', 'top-tier journal')) ORDER BY      p.paper_quality_score DESC,      c.paper_citation_trend_normalized DESC LIMIT 10; ",
        "schema_links": [
            "journal.journalName",
            "journal.journalId",
            "dataset.dataset_user_rating",
            "venue.venueId",
            "cite.paper_citation_trend_normalized",
            "paperDataset.datasetId",
            "cite.citedPaperId",
            "paper.paperId",
            "paper.venueId",
            "paper.year",
            "paper.paper_quality_score",
            "dataset.datasetId",
            "cite.paper_citation_trend",
            "venue.venue_type",
            "journal.impact_factor",
            "paperDataset.paperId",
            "paper.title",
            "dataset.datasetName"
        ]
    },
    {
        "instance_id": "q_833",
        "db_id": "academic_research_data",
        "question": "在综合考虑论文的引用质量分数、所使用数据集的影响力以及关键词与论文内容的相关性得分的情况下，筛选出最具影响力的前10篇研究论文。具体要求如下：\n\n- 论文的引用质量分数（`paper_quality_score`）需作为衡量引用质量的核心指标。\n- 所使用数据集的影响力通过平均数据集质量分数（`paper_dataset_quality_score`）来评估。\n- 关键词与论文内容的相关性通过最大关键词加权频率归一化值（`paper_keyphrase_weighted_frequency_normalized`）来衡量。\n- 按照上述三个指标的优先级顺序进行排序，即依次按照引用质量分数降序、平均数据集影响力降序以及最大关键词相关性降序排列。\n- 最终输出论文ID、标题、引用质量分数、平均数据集影响力以及最大关键词相关性得分。",
        "query": " SELECT      p.paperId,     p.title,     p.paper_quality_score AS citation_quality_score,     AVG(pd.paper_dataset_quality_score) AS avg_dataset_influence,     MAX(pks.paper_keyphrase_weighted_frequency_normalized) AS max_keyword_relevance FROM      paper p JOIN      cite c ON p.paperId = c.citedPaperId JOIN      paperDataset pd ON p.paperId = pd.paperId JOIN      paperKeyphrase pks ON p.paperId = pks.paperId GROUP BY      p.paperId, p.title, p.paper_quality_score ORDER BY      p.paper_quality_score DESC,      AVG(pd.paper_dataset_quality_score) DESC,      MAX(pks.paper_keyphrase_weighted_frequency_normalized) DESC LIMIT 10; ",
        "schema_links": [
            "paperKeyphrase.paper_keyphrase_weighted_frequency_normalized",
            "paper.paper_quality_score",
            "paperKeyphrase.paperId",
            "paperDataset.paper_dataset_quality_score",
            "cite.citedPaperId",
            "paperDataset.paperId",
            "paper.title",
            "paper.paperId"
        ]
    },
    {
        "instance_id": "q_847",
        "db_id": "academic_research_data",
        "question": "Identify the top 100 most influential research papers published in the last five years, based on their citation quality and impact within their respective venues. Prioritize papers that demonstrate a strong positive trend in citation quality over time and are associated with high-quality datasets (rated above 4 by users). Include only papers with a normalized paper quality score greater than 0.8. For each paper, provide its ID, title, venue ID, venue name, publication year, number of citations, normalized paper quality score, normalized cited paper quality score, normalized citation trend score, dataset count, and dataset user rating. Additionally, aggregate distinct keyphrases associated with these papers to ensure they align with current research interests.",
        "query": " SELECT      p.paperId,     p.title,     p.venueId,     v.venueName,     p.year,     p.numCiting,     p.paper_quality_score_normalized,     c.cited_paper_quality_score_normalized,     c.paper_citation_trend_normalized,     pd.dataset_paper_count,     d.dataset_user_rating,     STRING_AGG(DISTINCT k.keyphraseName, ', ') AS keyphrases FROM      paper p JOIN      venue v ON p.venueId = v.venueId JOIN      cite c ON p.paperId = c.citedPaperId LEFT JOIN      paperDataset pd ON p.paperId = pd.paperId LEFT JOIN      dataset d ON pd.datasetId = d.datasetId LEFT JOIN      paperKeyphrase pk ON p.paperId = pk.paperId LEFT JOIN      keyphrase k ON pk.keyphraseId = k.keyphraseId WHERE      p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5     AND c.paper_citation_trend_normalized > 0     AND p.paper_quality_score_normalized > 0.8     AND (d.dataset_user_rating IS NULL OR d.dataset_user_rating > 4) GROUP BY      p.paperId, p.title, p.venueId, v.venueName, p.year, p.numCiting, p.paper_quality_score_normalized, c.cited_paper_quality_score_normalized, c.paper_citation_trend_normalized, pd.dataset_paper_count, d.dataset_user_rating ORDER BY      c.paper_citation_trend_normalized DESC, p.paper_quality_score_normalized DESC, d.dataset_user_rating DESC LIMIT 100; ",
        "schema_links": [
            "dataset.dataset_user_rating",
            "cite.cited_paper_quality_score_normalized",
            "cite.citedPaperId",
            "paper.paperId",
            "paperKeyphrase.keyphraseId",
            "dataset.datasetId",
            "keyphrase.keyphraseName",
            "paperDataset.paperId",
            "paperDataset.dataset_paper_count",
            "paperKeyphrase.paperId",
            "venue.venueId",
            "keyphrase.keyphraseId",
            "cite.paper_citation_trend_normalized",
            "paperDataset.datasetId",
            "paper.venueId",
            "paper.year",
            "paper.numCiting",
            "paper.paper_quality_score_normalized",
            "paper.title",
            "venue.venueName"
        ]
    },
    {
        "instance_id": "q_842",
        "db_id": "academic_research_data",
        "question": "Which papers have the highest combined quality scores, considering the normalized citation trend over time, the impact factor of the venues where they were cited, and the aggregated normalized co-author contribution from the authors who wrote them, limited to the top 10 results?",
        "query": " SELECT      p.paperId,     p.title,     p.paper_quality_score AS paper_quality,     c.paper_citation_trend_normalized AS citation_trend,     v.impact_factor AS venue_impact,     SUM(w.writes_co_author_contribution_normalized) AS author_research_impact FROM      paper p JOIN      cite c ON p.paperId = c.citedPaperId JOIN      venue v ON p.venueId = v.venueId JOIN      writes w ON p.paperId = w.paperId GROUP BY      p.paperId, p.title, p.paper_quality_score, c.paper_citation_trend_normalized, v.impact_factor ORDER BY      (p.paper_quality_score * c.paper_citation_trend_normalized * v.impact_factor * author_research_impact) DESC LIMIT 10; ",
        "schema_links": [
            "venue.impact_factor",
            "venue.venueId",
            "cite.paper_citation_trend_normalized",
            "cite.citedPaperId",
            "paper.paperId",
            "writes.writes_co_author_contribution_normalized",
            "paper.venueId",
            "writes.paperId",
            "paper.paper_quality_score",
            "paper.title"
        ]
    },
    {
        "instance_id": "q_834",
        "db_id": "academic_research_data",
        "question": "Which research topic, represented by keyphrases associated with papers published in high-impact journals (journals with an impact factor greater than the average impact factor of all journals) over the past five years, has received the greatest increase in scholarly attention, as measured by the sum of normalized weighted keyphrase frequencies in papers that are among the top 10% most cited papers overall?",
        "query": " WITH high_impact_journals AS (     SELECT journalId     FROM journal     WHERE impact_factor > (SELECT AVG(impact_factor) FROM journal) ), most_cited_papers AS (     SELECT p.paperId, p.title, p.year, pk.keyphraseId, pk.paper_keyphrase_weighted_frequency_normalized     FROM paper p     JOIN writes w ON p.paperId = w.paperId     JOIN author a ON w.authorId = a.authorId     JOIN venue v ON p.venueId = v.venueId     JOIN high_impact_journals hj ON v.venueId = hj.journalId     JOIN paperKeyphrase pk ON p.paperId = pk.paperId     WHERE p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5       AND p.numCitedBy > (SELECT PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY numCitedBy) FROM paper) ), research_topic_growth AS (     SELECT keyphraseId, SUM(paper_keyphrase_weighted_frequency_normalized) AS total_attention     FROM most_cited_papers     GROUP BY keyphraseId ) SELECT k.keyphraseName FROM research_topic_growth rg JOIN keyphrase k ON rg.keyphraseId = k.keyphraseId ORDER BY rg.total_attention DESC LIMIT 1; ",
        "schema_links": [
            "journal.journalId",
            "paperKeyphrase.paperId",
            "venue.venueId",
            "keyphrase.keyphraseId",
            "most_cited_papers.paperId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paperKeyphrase.keyphraseId",
            "paperKeyphrase.paper_keyphrase_weighted_frequency_normalized",
            "paper.year",
            "most_cited_papers.keyphraseId",
            "paper.numCitedBy",
            "journal.impact_factor",
            "high_impact_journals.journalId",
            "keyphrase.keyphraseName",
            "paper.title",
            "author.authorId",
            "research_topic_growth.keyphraseId"
        ]
    },
    {
        "instance_id": "q_841",
        "db_id": "academic_research_data",
        "question": "Which research papers, published in venues with a growing citation density trend, have been cited by more than 100 other works within the last five years, and what are their citation counts and average quality scores of the citing papers? Additionally, include the papers' titles, publication years, and venue names, ordered by the total number of citations in descending order and then by the average quality score of citations in descending order, while considering the relevance of keyphrases associated with these papers. Limit the results to the top 100 papers.",
        "query": " SELECT      p.paperId,     p.title,     p.year,     v.venueName,     COUNT(c.citedPaperId) AS citation_count,     AVG(c.citing_paper_quality_score_normalized) AS avg_citation_quality FROM      paper p JOIN      cite c ON p.paperId = c.citedPaperId JOIN      venue v ON p.venueId = v.venueId JOIN      paperKeyphrase pk ON p.paperId = pk.paperId WHERE      c.citingPaperId IN (         SELECT citingPaperId          FROM cite          WHERE year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5     )     AND v.venueId IN (         SELECT venueId          FROM venue          WHERE venue_type = 'growing_citation_density'     ) GROUP BY      p.paperId, p.title, p.year, v.venueName HAVING      COUNT(c.citedPaperId) > 100 ORDER BY      citation_count DESC, avg_citation_quality DESC LIMIT 100; ",
        "schema_links": [
            "cite.citing_paper_quality_score_normalized",
            "paperKeyphrase.paperId",
            "venue.venueId",
            "cite.citedPaperId",
            "paper.paperId",
            "paper.venueId",
            "paper.year",
            "venue.venue_type",
            "paper.title",
            "venue.venueName",
            "cite.year",
            "cite.citingPaperId"
        ]
    },
    {
        "instance_id": "q_838",
        "db_id": "academic_research_data",
        "question": "Which research papers published in the past five years have received the highest quality citations, as measured by the normalized quality scores of their citation sources, while also considering the average normalized quality scores of related datasets, and excluding any papers with a non-positive trending impact on their citation sources? Please rank the results first by total quality citations in descending order and then by average dataset quality in descending order, and limit the output to the top 10 papers.",
        "query": " SELECT      p.paperId,     p.title,     SUM(c.cited_paper_quality_score_normalized) AS total_quality_citations,     AVG(pd.paper_dataset_quality_score_normalized) AS avg_dataset_quality FROM      paper p JOIN      cite c ON p.paperId = c.citedPaperId JOIN      paperDataset pd ON p.paperId = pd.paperId WHERE      c.paper_citation_trend_normalized > 0     AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5 GROUP BY      p.paperId, p.title ORDER BY      total_quality_citations DESC, avg_dataset_quality DESC LIMIT 10; ",
        "schema_links": [
            "paper.year",
            "paperDataset.paper_dataset_quality_score_normalized",
            "cite.cited_paper_quality_score_normalized",
            "cite.paper_citation_trend_normalized",
            "cite.citedPaperId",
            "paperDataset.paperId",
            "paper.title",
            "paper.paperId"
        ]
    },
    {
        "instance_id": "q_839",
        "db_id": "academic_research_data",
        "question": "Which research papers have the highest normalized citation quality scores, are most frequently associated with datasets having a user rating greater than 4.0, and exhibit the highest average normalized weighted frequency of keyphrases, while also considering only papers with a positive normalized citation trend over time? Please rank the results first by descending normalized citation quality score, then by descending total associations with high-impact datasets, and finally by descending average keyphrase relevance, limiting the output to the top 10 papers.",
        "query": " SELECT      p.paperId,     p.title,     p.paper_quality_score_normalized AS citation_quality_score,     SUM(pd.dataset_paper_count) AS total_high_impact_dataset_associations,     AVG(pkw.paper_keyphrase_weighted_frequency_normalized) AS avg_keyphrase_relevance FROM      paper p JOIN      cite c ON p.paperId = c.citedPaperId JOIN      paperDataset pd ON p.paperId = pd.paperId JOIN      dataset d ON pd.datasetId = d.datasetId JOIN      paperKeyphrase pkw ON p.paperId = pkw.paperId WHERE      d.dataset_user_rating > 4.0 -- Assuming high-impact datasets have a user rating greater than 4.0     AND c.paper_citation_trend_normalized > 0 -- Positive citation trend over time     AND p.paper_quality_score_normalized IS NOT NULL GROUP BY      p.paperId, p.title, p.paper_quality_score_normalized ORDER BY      p.paper_quality_score_normalized DESC,      total_high_impact_dataset_associations DESC,      avg_keyphrase_relevance DESC LIMIT 10; ",
        "schema_links": [
            "dataset.dataset_user_rating",
            "paperKeyphrase.paperId",
            "cite.paper_citation_trend_normalized",
            "paperDataset.datasetId",
            "cite.citedPaperId",
            "paper.paperId",
            "paperKeyphrase.paper_keyphrase_weighted_frequency_normalized",
            "dataset.datasetId",
            "paper.paper_quality_score_normalized",
            "paperDataset.paperId",
            "paper.title",
            "paperDataset.dataset_paper_count"
        ]
    },
    {
        "instance_id": "q_840",
        "db_id": "academic_research_data",
        "question": "Which research papers have the highest average quality of citations, considering both the normalized quality score of citing papers and the normalized trend of citations over time, ranked in descending order of these metrics?",
        "query": " SELECT      p.paperId,     p.title,     AVG(c.citing_paper_quality_score_normalized) AS avg_citing_paper_quality,     c.paper_citation_trend_normalized AS citation_trend_score FROM      paper p JOIN      cite c ON p.paperId = c.citedPaperId GROUP BY      p.paperId, p.title, c.paper_citation_trend_normalized ORDER BY      avg_citing_paper_quality DESC, citation_trend_score DESC LIMIT 10; ",
        "schema_links": [
            "cite.citing_paper_quality_score_normalized",
            "cite.paper_citation_trend_normalized",
            "cite.citedPaperId",
            "paper.title",
            "paper.paperId"
        ]
    },
    {
        "instance_id": "q_844",
        "db_id": "academic_research_data",
        "question": "Which research papers published in the past five years have received more than 10 distinct citations, where the average quality score of citing papers exceeds 0.8, and demonstrate above-average interaction with datasets? Additionally, provide the title, publication year, normalized paper quality score, total count of distinct citations, average quality of citations, relevant keyphrases, total dataset usage count, and average normalized quality score of associated datasets for these papers, sorted primarily by descending average citation quality and secondarily by descending total dataset usage.",
        "query": " SELECT      p.paperId,     p.title,     p.year,     p.paper_quality_score_normalized,     COUNT(DISTINCT c.citedPaperId) AS citation_count,     AVG(c.citing_paper_quality_score_normalized) AS avg_citation_quality,     STRING_AGG(DISTINCT k.keyphraseName, ', ') AS keyphrases,     SUM(pd.dataset_paper_count) AS total_dataset_usage,     AVG(pd.paper_dataset_quality_score_normalized) AS avg_dataset_quality FROM      paper p JOIN      cite c ON p.paperId = c.citedPaperId JOIN      paperKeyphrase pk ON p.paperId = pk.paperId JOIN      keyphrase k ON pk.keyphraseId = k.keyphraseId LEFT JOIN      paperDataset pd ON p.paperId = pd.paperId WHERE      p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5     AND c.citing_paper_quality_score_normalized > 0.8     AND pd.dataset_paper_count > (SELECT AVG(dataset_paper_count) FROM paperDataset) GROUP BY      p.paperId, p.title, p.year, p.paper_quality_score_normalized HAVING      COUNT(DISTINCT c.citedPaperId) > 10 ORDER BY      avg_citation_quality DESC, total_dataset_usage DESC; ",
        "schema_links": [
            "cite.citing_paper_quality_score_normalized",
            "paperKeyphrase.paperId",
            "keyphrase.keyphraseId",
            "cite.citedPaperId",
            "paper.paperId",
            "paperDataset.paperId",
            "paper.year",
            "paperKeyphrase.keyphraseId",
            "paperDataset.paper_dataset_quality_score_normalized",
            "paper.paper_quality_score_normalized",
            "keyphrase.keyphraseName",
            "paper.title",
            "paperDataset.dataset_paper_count"
        ]
    },
    {
        "instance_id": "q_843",
        "db_id": "academic_research_data",
        "question": "Which papers have the highest citation quality scores, are most frequently associated with datasets having a user rating of 4.0 or above, and exhibit a positive citation trend over time, while also considering the diversity of keyphrases used in the paper? The results should be ranked first by citation quality score in descending order, then by the total number of dataset associations in descending order, and finally by the average dataset rating in descending order, limited to the top 10 papers.",
        "query": " SELECT      p.paperId,     p.title,     p.paper_quality_score AS citation_quality_score,     SUM(pd.dataset_paper_count) AS total_dataset_associations,     AVG(d.dataset_user_rating) AS avg_dataset_rating,     COUNT(DISTINCT pk.keyphraseId) AS keyphrase_count FROM      paper p JOIN      cite c ON p.paperId = c.citedPaperId JOIN      paperDataset pd ON p.paperId = pd.paperId JOIN      dataset d ON pd.datasetId = d.datasetId LEFT JOIN      paperKeyphrase pk ON p.paperId = pk.paperId WHERE      d.dataset_user_rating >= 4.0 -- Assuming high-impact datasets have a rating of 4.0 or above     AND c.paper_citation_trend_normalized > 0 -- Positive citation trend over time GROUP BY      p.paperId, p.title, p.paper_quality_score ORDER BY      p.paper_quality_score DESC,      total_dataset_associations DESC,      avg_dataset_rating DESC LIMIT 10; ",
        "schema_links": [
            "dataset.dataset_user_rating",
            "paperKeyphrase.paperId",
            "cite.paper_citation_trend_normalized",
            "paperDataset.datasetId",
            "cite.citedPaperId",
            "paper.paperId",
            "paperKeyphrase.keyphraseId",
            "paper.paper_quality_score",
            "dataset.datasetId",
            "paperDataset.paperId",
            "paper.title",
            "paperDataset.dataset_paper_count"
        ]
    },
    {
        "instance_id": "q_851",
        "db_id": "academic_research_data",
        "question": "Which research papers, published in the past five years and focusing on advanced parsing methodologies, have the highest citation quality scores, are most frequently associated with high-impact datasets (rated 4.5 or above), and exhibit a strong citation trend over the past five years? Additionally, consider the relevance of keyphrases related to advanced parsing techniques in determining the papers' overall ranking. Return the top 10 results.",
        "query": " SELECT      p.paperId,     p.title,     p.paper_quality_score AS citation_quality_score,     SUM(pd.dataset_paper_count) AS total_high_impact_datasets,     AVG(p.paper_keywords_similarity_score) AS keyphrase_relevance_score,     c.paper_citation_trend_normalized AS citation_trend_score FROM      paper p JOIN      paperKeyphrase pk ON p.paperId = pk.paperId JOIN      keyphrase k ON pk.keyphraseId = k.keyphraseId LEFT JOIN      paperDataset pd ON p.paperId = pd.paperId JOIN      dataset d ON pd.datasetId = d.datasetId LEFT JOIN      cite c ON p.paperId = c.citedPaperId WHERE      k.keyphraseName ILIKE '%advanced parsing%'     AND d.dataset_user_rating >= 4.5     AND p.year BETWEEN EXTRACT(YEAR FROM CURRENT_TIMESTAMP - INTERVAL '5 years') AND EXTRACT(YEAR FROM CURRENT_TIMESTAMP) GROUP BY      p.paperId, p.title, p.paper_quality_score, c.paper_citation_trend_normalized ORDER BY      p.paper_quality_score DESC, total_high_impact_datasets DESC, citation_trend_score DESC, keyphrase_relevance_score DESC LIMIT 10; ",
        "schema_links": [
            "dataset.dataset_user_rating",
            "paperKeyphrase.paperId",
            "keyphrase.keyphraseId",
            "cite.paper_citation_trend_normalized",
            "paperDataset.datasetId",
            "cite.citedPaperId",
            "paper.paper_keywords_similarity_score",
            "paper.paperId",
            "paperDataset.paperId",
            "paper.year",
            "paperKeyphrase.keyphraseId",
            "paper.paper_quality_score",
            "dataset.datasetId",
            "keyphrase.keyphraseName",
            "paper.title",
            "paperDataset.dataset_paper_count"
        ]
    },
    {
        "instance_id": "q_848",
        "db_id": "academic_research_data",
        "question": "Which paper authored by Ohad Shamir has the highest citation quality score, considering only papers that have been cited more than 50 times and were published in journals with an impact factor greater than 2.0? Additionally, provide the citation trend of this paper over the last five years, ensuring the trend data is within the past five years from the current UTC timestamp.",
        "query": " SELECT      p.paperId,      p.title,      p.paper_quality_score AS citation_quality_score,      c.paper_citation_trend AS citation_trend FROM      paper p JOIN      writes w ON p.paperId = w.paperId JOIN      author a ON w.authorId = a.authorId JOIN      journal j ON p.venueId = j.journalId LEFT JOIN      cite c ON p.paperId = c.citedPaperId WHERE      a.authorName = 'Ohad Shamir'      AND p.numCitedBy > 50      AND j.impact_factor > 2.0      AND EXTRACT(YEAR FROM AGE(CURRENT_TIMESTAMP AT TIME ZONE 'UTC', c.paper_citation_trend::timestamp)) <= 5 GROUP BY      p.paperId, p.title, p.paper_quality_score, c.paper_citation_trend ORDER BY      p.paper_quality_score DESC LIMIT 1; ",
        "schema_links": [
            "journal.journalId",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.paper_quality_score",
            "paper.numCitedBy",
            "cite.paper_citation_trend",
            "author.authorName",
            "journal.impact_factor",
            "paper.title",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_846",
        "db_id": "academic_research_data",
        "question": "Which paper authored by Ohad Shamir has the highest citation quality score, considering both the overall impact and the distribution across high-impact journals and conferences published in the last five years? High-impact is defined as having an impact factor greater than the average impact factor of all journals.",
        "query": " SELECT      p.paperId,      p.title,      p.paper_quality_score AS citation_quality_score FROM      paper p JOIN      writes w ON p.paperId = w.paperId JOIN      author a ON w.authorId = a.authorId JOIN      venue v ON p.venueId = v.venueId WHERE      a.authorName = 'Ohad Shamir'     AND p.year BETWEEN EXTRACT(YEAR FROM CURRENT_DATE) - 5 AND EXTRACT(YEAR FROM CURRENT_DATE)     AND (v.venue_type = 'journal' OR v.venue_type = 'conference')     AND EXISTS (         SELECT 1          FROM journal j          WHERE j.journalId = v.venueId          AND j.impact_factor > (SELECT AVG(impact_factor) FROM journal)     ) ORDER BY      p.paper_quality_score DESC LIMIT 1; ",
        "schema_links": [
            "journal.journalId",
            "venue.venueId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "paper.paper_quality_score",
            "venue.venue_type",
            "author.authorName",
            "journal.impact_factor",
            "paper.title",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_845",
        "db_id": "academic_research_data",
        "question": "Which paper authored by Ohad Shamir has the highest normalized citation quality score, considering both the overall trend and the distribution across different sources? Additionally, compare this paper's citation quality score to the average normalized citation quality score of all papers published in the same venue over the past five years, and calculate the difference between these two scores.",
        "query": "WITH paper_citation_quality AS (     SELECT          p.paperId,         p.title,         p.venueId,         p.year,         c.cited_paper_quality_score_normalized AS citation_quality_score,         ROW_NUMBER() OVER (PARTITION BY w.authorId ORDER BY c.cited_paper_quality_score_normalized DESC) AS rank     FROM          paper p     JOIN          cite c ON p.paperId = c.citedPaperId     JOIN          writes w ON p.paperId = w.paperId     JOIN          author a ON w.authorId = a.authorId     WHERE          a.authorName = 'Ohad Shamir' ), highest_citation_paper AS (     SELECT          pcq.paperId,         pcq.title,         pcq.venueId,         pcq.citation_quality_score     FROM          paper_citation_quality pcq     WHERE          pcq.rank = 1 ), venue_avg_citation_quality AS (     SELECT          p.venueId,         AVG(c.cited_paper_quality_score_normalized) AS avg_citation_quality     FROM          paper p     JOIN          cite c ON p.paperId = c.citedPaperId     WHERE          p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5     GROUP BY          p.venueId ) SELECT      hcp.paperId,     hcp.title,     hcp.citation_quality_score,     vacq.avg_citation_quality,     (hcp.citation_quality_score - vacq.avg_citation_quality) AS citation_quality_difference FROM      highest_citation_paper hcp JOIN      venue_avg_citation_quality vacq ON hcp.venueId = vacq.venueId;",
        "schema_links": [
            "highest_citation_paper.title",
            "cite.cited_paper_quality_score_normalized",
            "writes.authorId",
            "cite.citedPaperId",
            "paper_citation_quality.venueId",
            "highest_citation_paper.venueId",
            "paper_citation_quality.citation_quality_score",
            "paper.paperId",
            "venue_avg_citation_quality.venueId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "highest_citation_paper.citation_quality_score",
            "paper_citation_quality.paperId",
            "paper_citation_quality.title",
            "author.authorName",
            "paper.title",
            "highest_citation_paper.paperId",
            "author.authorId",
            "venue_avg_citation_quality.avg_citation_quality"
        ]
    },
    {
        "instance_id": "q_849",
        "db_id": "academic_research_data",
        "question": "Which research paper authored by Ohad Shamir within the past five years has the highest overall quality score, considering both the paper's citation quality score and the normalized trend of citations? Additionally, compare the engagement of this paper with datasets and key research phrases to his other works during the same period, by counting the number of associated datasets and keyphrases for each paper.",
        "query": " WITH ohad_papers AS (     SELECT          p.paperId,         p.title,         p.paper_quality_score AS overall_quality_score,         c.paper_citation_trend_normalized AS citation_trend_score,         p.numCiting,         p.year     FROM          paper p     JOIN          writes w ON p.paperId = w.paperId     JOIN          author a ON w.authorId = a.authorId     LEFT JOIN          cite c ON p.paperId = c.citedPaperId     WHERE          a.authorName = 'Ohad Shamir'         AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5 ), highest_citation_paper AS (     SELECT          paperId,         title,         overall_quality_score,         citation_trend_score,         numCiting     FROM          ohad_papers     ORDER BY          overall_quality_score DESC,          citation_trend_score DESC     LIMIT 1 ), dataset_engagement AS (     SELECT          pd.paperId,         COUNT(pd.datasetId) AS dataset_count     FROM          paperDataset pd     JOIN          ohad_papers op ON pd.paperId = op.paperId     GROUP BY          pd.paperId ), keyphrase_engagement AS (     SELECT          pk.paperId,         COUNT(pk.keyphraseId) AS keyphrase_count     FROM          paperKeyphrase pk     JOIN          ohad_papers op ON pk.paperId = op.paperId     GROUP BY          pk.paperId ) SELECT     hcp.paperId,     hcp.title,     hcp.overall_quality_score,     hcp.citation_trend_score,     hcp.numCiting,     COALESCE(de.dataset_count, 0) AS dataset_engagement,     COALESCE(ke.keyphrase_count, 0) AS keyphrase_engagement FROM      highest_citation_paper hcp LEFT JOIN      dataset_engagement de ON hcp.paperId = de.paperId LEFT JOIN      keyphrase_engagement ke ON hcp.paperId = ke.paperId; ",
        "schema_links": [
            "paperKeyphrase.paperId",
            "cite.paper_citation_trend_normalized",
            "paperDataset.datasetId",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "writes.paperId",
            "paper.year",
            "paperKeyphrase.keyphraseId",
            "paper.paper_quality_score",
            "paper.numCiting",
            "author.authorName",
            "paperDataset.paperId",
            "paper.title",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_856",
        "db_id": "academic_research_data",
        "question": "Which research paper authored by Ohad Shamir achieves the highest influence score, calculated as a weighted combination of citation frequency (40%), paper quality score (30%), citation trend over the past five years (20%), and the impact factor of the publication venue (10%)? The paper must also be relevant to the key research topic of \"machine learning\".",
        "query": " SELECT      p.paperId,     p.title,     (p.numCiting * 0.4 + p.paper_quality_score * 0.3 + COALESCE(c.citation_trend_score, 0) * 0.2 + COALESCE(v.impact_factor, 0) * 0.1) AS influence_score FROM      paper p JOIN      writes w ON p.paperId = w.paperId JOIN      author a ON w.authorId = a.authorId LEFT JOIN      (SELECT           citingPaperId,           SUM(citing_paper_quality_score_normalized) AS citation_trend_score      FROM           cite      WHERE           EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM TO_TIMESTAMP(paper_citation_source_normalized)) <= 5      GROUP BY           citingPaperId) c ON p.paperId = c.citingPaperId LEFT JOIN      venue v ON p.venueId = v.venueId WHERE      a.authorName = 'Ohad Shamir'     AND 'machine learning' = ANY(p.paper_keywords_normalized) ORDER BY      influence_score DESC LIMIT 1; ",
        "schema_links": [
            "cite.citing_paper_quality_score_normalized",
            "venue.impact_factor",
            "paper.paper_keywords_normalized",
            "venue.venueId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.paper_quality_score",
            "paper.numCiting",
            "author.authorName",
            "cite.citation_trend_score",
            "cite.paper_citation_source_normalized",
            "paper.title",
            "author.authorId",
            "cite.citingPaperId"
        ]
    },
    {
        "instance_id": "q_850",
        "db_id": "academic_research_data",
        "question": "Which paper authored by Ohad Shamir has the highest citation quality score, considering both the overall trend and the normalized quality scores across different sources, within the past five years? Additionally, compare the citation quality score of this paper to the average citation quality score of all papers published in the same venue during the same five-year period. Provide the difference between the highest citation quality score and the average citation quality score for the venue.",
        "query": " WITH ohad_papers AS (     SELECT          p.paperId,         p.title,         p.numCiting,         p.paper_quality_score AS paper_quality,         c.cited_paper_quality_score_normalized AS citation_quality_score,         v.venueName     FROM          paper p     JOIN          writes w ON p.paperId = w.paperId     JOIN          author a ON w.authorId = a.authorId     LEFT JOIN          cite c ON p.paperId = c.citedPaperId     JOIN          venue v ON p.venueId = v.venueId     WHERE          a.authorName = 'Ohad Shamir'         AND p.paper_last_updated AT TIME ZONE 'UTC' >= NOW() AT TIME ZONE 'UTC' - INTERVAL '5 years' ), highest_citation_paper AS (     SELECT          paperId,         title,         MAX(citation_quality_score) AS max_citation_quality_score     FROM          ohad_papers     GROUP BY          paperId, title     ORDER BY          max_citation_quality_score DESC     LIMIT 1 ), avg_venue_citation_quality AS (     SELECT          v.venueId,         AVG(c.cited_paper_quality_score_normalized) AS avg_citation_quality     FROM          paper p     JOIN          cite c ON p.paperId = c.citedPaperId     JOIN          venue v ON p.venueId = v.venueId     WHERE          p.paper_last_updated AT TIME ZONE 'UTC' >= NOW() AT TIME ZONE 'UTC' - INTERVAL '5 years'     GROUP BY          v.venueId ) SELECT      hp.paperId,     hp.title,     hp.max_citation_quality_score,     av.avg_citation_quality,     (hp.max_citation_quality_score - av.avg_citation_quality) AS quality_difference FROM      highest_citation_paper hp JOIN      paper p ON hp.paperId = p.paperId JOIN      avg_venue_citation_quality av ON p.venueId = av.venueId; ",
        "schema_links": [
            "venue.venueId",
            "cite.cited_paper_quality_score_normalized",
            "paper.paper_last_updated",
            "cite.citedPaperId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.paper_quality_score",
            "paper.numCiting",
            "author.authorName",
            "paper.title",
            "venue.venueName",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_853",
        "db_id": "academic_research_data",
        "question": "Which research paper authored by Ohad Shamir has received the highest total quality citations over the past five years, considering the normalized quality scores of citation sources, and how does this impact his overall publication influence?",
        "query": " SELECT      p.paperId,      p.title,      SUM(c.cited_paper_quality_score_normalized) AS total_quality_citations FROM      paper p JOIN      cite c ON p.paperId = c.citedPaperId JOIN      writes w ON p.paperId = w.paperId JOIN      author a ON w.authorId = a.authorId WHERE      a.authorName = 'Ohad Shamir'     AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5 GROUP BY      p.paperId, p.title ORDER BY      total_quality_citations DESC LIMIT 1; ",
        "schema_links": [
            "writes.paperId",
            "paper.year",
            "author.authorName",
            "cite.cited_paper_quality_score_normalized",
            "cite.citedPaperId",
            "writes.authorId",
            "paper.title",
            "paper.paperId",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_852",
        "db_id": "academic_research_data",
        "question": "Which authors had the highest influence in computer vision research in 2007, as measured by both the number of papers published at major conferences and the average quality of those papers? Please consider only authors whose normalized research interests explicitly include \"computer vision\".",
        "query": " SELECT      a.authorId,     a.authorName,     SUM(w.co_author_count) AS total_co_authors,     COUNT(p.paperId) AS total_papers,     AVG(p.paper_quality_score_normalized) AS avg_paper_quality FROM      author a JOIN      writes w ON a.authorId = w.authorId JOIN      paper p ON w.paperId = p.paperId JOIN      venue v ON p.venueId = v.venueId WHERE      v.venue_type = 'conference'     AND p.year = 2007     AND 'computer vision' = ANY(a.author_research_interests_normalized) GROUP BY      a.authorId, a.authorName ORDER BY      total_papers DESC, avg_paper_quality DESC LIMIT 10; ",
        "schema_links": [
            "venue.venueId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "author.author_research_interests_normalized",
            "writes.co_author_count",
            "venue.venue_type",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_859",
        "db_id": "academic_research_data",
        "question": "Which researchers authored publications at the CVPR conference in 2007, and how do their citation trends across all conferences in the same year compare? Additionally, identify any patterns in their research interests or affiliations that might explain their focus on computer vision during this period, including the conferences they participated in and the corresponding citations received.",
        "query": " WITH cvpr_authors AS (     SELECT DISTINCT w.authorId, a.authorName, a.affiliation, a.author_research_interests     FROM writes w     JOIN paper p ON w.paperId = p.paperId     JOIN venue v ON p.venueId = v.venueId     JOIN author a ON w.authorId = a.authorId     WHERE v.venueName = 'CVPR' AND p.year = 2007 ), citation_trends AS (     SELECT w.authorId, p.venueId, v.venueName, SUM(c.citing_paper_quality_score_normalized) AS total_citations     FROM writes w     JOIN paper p ON w.paperId = p.paperId     JOIN cite c ON p.paperId = c.citedPaperId     JOIN venue v ON p.venueId = v.venueId     WHERE p.year = 2007     GROUP BY w.authorId, p.venueId, v.venueName ), research_patterns AS (     SELECT ca.authorId, ca.authorName, ca.affiliation, ca.author_research_interests,            STRING_AGG(DISTINCT ct.venueName, ', ') AS conferences_participated,            STRING_AGG(DISTINCT ct.total_citations::text, ', ') AS citations_per_conference     FROM cvpr_authors ca     LEFT JOIN citation_trends ct ON ca.authorId = ct.authorId     GROUP BY ca.authorId, ca.authorName, ca.affiliation, ca.author_research_interests ) SELECT rp.authorId, rp.authorName, rp.affiliation, rp.author_research_interests,        rp.conferences_participated, rp.citations_per_conference FROM research_patterns rp; ",
        "schema_links": [
            "cite.citing_paper_quality_score_normalized",
            "research_patterns.affiliation",
            "research_patterns.authorId",
            "research_patterns.conferences_participated",
            "research_patterns.authorName",
            "venue.venueId",
            "author.author_research_interests",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "paper.venueId",
            "author.affiliation",
            "writes.paperId",
            "paper.year",
            "author.authorName",
            "research_patterns.citations_per_conference",
            "research_patterns.author_research_interests",
            "venue.venueName",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_854",
        "db_id": "academic_research_data",
        "question": "Which authors had the highest impact in CVPR 2007, based on both the number of papers published and the total citations received, considering only those whose paper quality score was above the average for that year?",
        "query": " WITH avg_citation_quality AS (     SELECT AVG(p.paper_quality_score) AS avg_quality     FROM paper p     JOIN venue v ON p.venueId = v.venueId     WHERE v.venueName = 'CVPR' AND p.year = 2007 ) SELECT w.authorId, a.authorName, COUNT(w.paperId) AS paper_count, SUM(p.numCitedBy) AS total_citations FROM writes w JOIN paper p ON w.paperId = p.paperId JOIN venue v ON p.venueId = v.venueId JOIN author a ON w.authorId = a.authorId WHERE v.venueName = 'CVPR'    AND p.year = 2007    AND p.paper_quality_score > (SELECT avg_quality FROM avg_citation_quality) GROUP BY w.authorId, a.authorName ORDER BY paper_count DESC, total_citations DESC LIMIT 10; ",
        "schema_links": [
            "venue.venueId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "paper.paper_quality_score",
            "paper.numCitedBy",
            "author.authorName",
            "venue.venueName",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_857",
        "db_id": "academic_research_data",
        "question": "Which authors at CVPR 2007 had the highest research impact, measured by both the number of publications and the total citations received for those publications within the conference?",
        "query": " SELECT      a.authorName,      COUNT(w.paperId) AS publication_count,      SUM(p.numCitedBy) AS total_citations_received FROM      author a JOIN      writes w ON a.authorId = w.authorId JOIN      paper p ON w.paperId = p.paperId JOIN      venue v ON p.venueId = v.venueId WHERE      v.venueName = 'CVPR'      AND p.year = 2007 GROUP BY      a.authorName ORDER BY      publication_count DESC,      total_citations_received DESC LIMIT 10; ",
        "schema_links": [
            "venue.venueId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "paper.numCitedBy",
            "author.authorName",
            "venue.venueName",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_860",
        "db_id": "academic_research_data",
        "question": "Which researchers specializing in computer vision had the highest impact in 2007, as measured by both the total number of citations received for their publications and the count of those publications in conferences and journals related to this field? Results should be limited to the top 10 researchers, ranked first by total citations in descending order and then by publication count in descending order.",
        "query": " SELECT      a.authorId,     a.authorName,     SUM(p.numCiting) AS total_citations,     COUNT(p.paperId) AS publication_count FROM      author a JOIN      writes w ON a.authorId = w.authorId JOIN      paper p ON w.paperId = p.paperId JOIN      venue v ON p.venueId = v.venueId WHERE      p.year = 2007     AND 'computer vision' = ANY(a.author_research_interests_normalized)     AND (v.venue_type = 'conference' OR v.venue_type = 'journal') GROUP BY      a.authorId, a.authorName ORDER BY      total_citations DESC, publication_count DESC LIMIT 10; ",
        "schema_links": [
            "venue.venueId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "author.author_research_interests_normalized",
            "paper.numCiting",
            "venue.venue_type",
            "author.authorName",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_855",
        "db_id": "academic_research_data",
        "question": "Which authors published the most papers at CVPR in 2007 and received the highest average normalized quality of citations, considering both the number of papers published and the average quality of citations received?",
        "query": " SELECT      a.authorId,     a.authorName,     COUNT(p.paperId) AS num_papers_published,     AVG(c.cited_paper_quality_score_normalized) AS avg_citation_quality FROM      author a JOIN      writes w ON a.authorId = w.authorId JOIN      paper p ON w.paperId = p.paperId JOIN      cite c ON p.paperId = c.citedPaperId JOIN      venue v ON p.venueId = v.venueId WHERE      v.venueName = 'CVPR'      AND p.year = 2007 GROUP BY      a.authorId, a.authorName ORDER BY      num_papers_published DESC, avg_citation_quality DESC LIMIT 10; ",
        "schema_links": [
            "venue.venueId",
            "cite.cited_paper_quality_score_normalized",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "author.authorName",
            "venue.venueName",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_865",
        "db_id": "academic_research_data",
        "question": "In the past five years, which conferences has Richard Ladner published in, and what is the average citation impact of these venues along with the number of papers published by him in each? Additionally, based on keyphrase analysis, what are the trending research topics within these publications?",
        "query": " WITH recent_papers AS (     SELECT          p.paperId,         p.venueId,         p.numCitedBy,         p.year     FROM          paper p     INNER JOIN writes w ON p.paperId = w.paperId     INNER JOIN author a ON w.authorId = a.authorId     WHERE          a.authorName = 'Richard Ladner'         AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5 ), conference_details AS (     SELECT          r.venueId,         v.venueName,         AVG(r.numCitedBy) AS avg_citation_impact,         COUNT(r.paperId) AS paper_count     FROM          recent_papers r     INNER JOIN venue v ON r.venueId = v.venueId     WHERE          v.venue_type = 'conference'     GROUP BY          r.venueId, v.venueName ), trending_topics AS (     SELECT          pk.paperId,         k.keyphraseName,         SUM(pk.paper_keyphrase_weighted_frequency_normalized) AS topic_score     FROM          paperKeyphrase pk     INNER JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId     INNER JOIN recent_papers rp ON pk.paperId = rp.paperId     GROUP BY          pk.paperId, k.keyphraseName ) SELECT      cd.venueName,     cd.avg_citation_impact,     cd.paper_count,     STRING_AGG(tt.keyphraseName, ', ') AS trending_topics FROM      conference_details cd LEFT JOIN trending_topics tt ON cd.venueId = (SELECT rp.venueId FROM recent_papers rp WHERE rp.paperId = tt.paperId LIMIT 1) GROUP BY      cd.venueName, cd.avg_citation_impact, cd.paper_count; ",
        "schema_links": [
            "paperKeyphrase.paperId",
            "recent_papers.venueId",
            "venue.venueId",
            "keyphrase.keyphraseId",
            "writes.authorId",
            "recent_papers.paperId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "paperKeyphrase.keyphraseId",
            "paperKeyphrase.paper_keyphrase_weighted_frequency_normalized",
            "paper.numCitedBy",
            "venue.venue_type",
            "author.authorName",
            "keyphrase.keyphraseName",
            "venue.venueName",
            "trending_topics.paperId",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_858",
        "db_id": "academic_research_data",
        "question": "Which journals has Richard Ladner contributed to with publications having a normalized quality score greater than 0.8 over the past five years, and what are the citation trends for these publications with positive normalized citation trends, ordered by publication quality score in descending order and then by normalized citation trend in descending order?",
        "query": " SELECT      j.journalName AS Journal_Name,     p.paperId AS Publication_ID,     p.title AS Publication_Title,     p.paper_quality_score AS Quality_Score,     c.paper_citation_trend AS Citation_Trend FROM      journal j JOIN      venue v ON j.journalId = v.venueId JOIN      paper p ON v.venueId = p.venueId JOIN      cite c ON p.paperId = c.citedPaperId JOIN      writes w ON p.paperId = w.paperId JOIN      author a ON w.authorId = a.authorId WHERE      a.authorName = 'Richard Ladner'     AND p.paper_quality_score_normalized > 0.8     AND c.paper_citation_trend_normalized > 0     AND p.year BETWEEN EXTRACT(YEAR FROM CURRENT_TIMESTAMP - INTERVAL '5 years') AND EXTRACT(YEAR FROM CURRENT_TIMESTAMP) ORDER BY      p.paper_quality_score DESC,      c.paper_citation_trend_normalized DESC; ",
        "schema_links": [
            "journal.journalName",
            "journal.journalId",
            "venue.venueId",
            "cite.paper_citation_trend_normalized",
            "cite.citedPaperId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "paper.paper_quality_score",
            "cite.paper_citation_trend",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "paper.title",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_861",
        "db_id": "academic_research_data",
        "question": "In the past decade, which conferences has Richard Ladner contributed to with publications having a normalized paper quality score greater than 0.8, and how have these contributions evolved in terms of average citation quality and total citations received each year? Provide the list of conferences along with the years of contribution, the average citation quality across all years, and the total citations accumulated over the years, ordered by the average citation quality in descending order.",
        "query": " WITH high_quality_papers AS (     SELECT          p.paperId,          p.title,          p.year,          p.numCiting,          p.paper_quality_score_normalized,         v.venueName,         v.venueId     FROM          paper p     JOIN          writes w ON p.paperId = w.paperId     JOIN          author a ON w.authorId = a.authorId     JOIN          venue v ON p.venueId = v.venueId     WHERE          a.authorName = 'Richard Ladner'         AND p.paper_quality_score_normalized > 0.8         AND v.venue_type = 'conference'         AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 10 ), citation_trends AS (     SELECT          hqp.venueName,         hqp.year,         AVG(c.citing_paper_quality_score_normalized) AS avg_citation_quality,         COUNT(c.citedPaperId) AS total_citations     FROM          high_quality_papers hqp     LEFT JOIN          cite c ON hqp.paperId = c.citedPaperId     GROUP BY          hqp.venueName, hqp.year ) SELECT      ct.venueName,     STRING_AGG(DISTINCT ct.year::text, ', ') AS years_contributed,     AVG(ct.avg_citation_quality) AS avg_citation_quality_over_years,     SUM(ct.total_citations) AS total_citations_over_years FROM      citation_trends ct GROUP BY      ct.venueName ORDER BY      avg_citation_quality_over_years DESC; ",
        "schema_links": [
            "cite.citing_paper_quality_score_normalized",
            "venue.venueId",
            "cite.citedPaperId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "paper.numCiting",
            "venue.venue_type",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "paper.title",
            "venue.venueName",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_862",
        "db_id": "academic_research_data",
        "question": "Which conferences has Richard Ladner contributed to with publications having a normalized quality score greater than 0.8 over the past decade, and how have these contributions evolved in terms of average citations per year and associated research keywords for each conference?",
        "query": " WITH high_quality_papers AS (     SELECT          p.paperId,          p.title,          p.venueId,          p.year,          p.numCiting,          p.paper_quality_score_normalized,         v.venueName,         v.venue_type     FROM          paper p     JOIN          venue v ON p.venueId = v.venueId     JOIN          writes w ON p.paperId = w.paperId     JOIN          author a ON w.authorId = a.authorId     WHERE          a.authorName = 'Richard Ladner'          AND p.paper_quality_score_normalized > 0.8          AND v.venue_type = 'conference'         AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 10 ), citation_impact AS (     SELECT          hqp.venueName,         hqp.year,         AVG(hqp.numCiting) AS avg_citations,         COUNT(hqp.paperId) AS paper_count     FROM          high_quality_papers hqp     GROUP BY          hqp.venueName,          hqp.year ), research_focus AS (     SELECT          hqp.venueName,         STRING_AGG(DISTINCT unnest(p.paper_keywords), ', ') AS keywords     FROM          high_quality_papers hqp     JOIN          paper p ON hqp.paperId = p.paperId     GROUP BY          hqp.venueName ) SELECT      ci.venueName,     ci.year,     ci.avg_citations,     ci.paper_count,     rf.keywords FROM      citation_impact ci JOIN      research_focus rf ON ci.venueName = rf.venueName ORDER BY      ci.venueName,      ci.year; ",
        "schema_links": [
            "paper.paper_keywords",
            "venue.venueId",
            "author.authorId",
            "research_focus.keywords",
            "writes.authorId",
            "citation_impact.paper_count",
            "paper.paperId",
            "high_quality_papers.year",
            "high_quality_papers.paperId",
            "writes.paperId",
            "paper.venueId",
            "paper.year",
            "citation_impact.avg_citations",
            "paper.numCiting",
            "venue.venue_type",
            "author.authorName",
            "citation_impact.venueName",
            "paper.paper_quality_score_normalized",
            "high_quality_papers.venueName",
            "citation_impact.year",
            "paper.title",
            "venue.venueName",
            "high_quality_papers.numCiting",
            "research_focus.venueName"
        ]
    },
    {
        "instance_id": "q_863",
        "db_id": "academic_research_data",
        "question": "How frequently has Richard Ladner utilized datasets in his publications over the past five years, specifically identifying the total count of publications involving datasets out of his overall publications during this period? Additionally, which specific datasets have been most frequently used and had the highest average quality scores in his papers? Lastly, compare the average quality of dataset usage across different publication venues where Richard Ladner's papers involving datasets were published.",
        "query": " WITH richard_papers AS (     SELECT p.paperId, p.venueId, pd.datasetId, pd.paper_dataset_quality_score_normalized, p.year     FROM paper p     JOIN writes w ON p.paperId = w.paperId     JOIN author a ON w.authorId = a.authorId     LEFT JOIN paperDataset pd ON p.paperId = pd.paperId     WHERE a.authorName = 'Richard Ladner' AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5 ), dataset_frequency AS (     SELECT COUNT(*) AS dataset_usage_count, datasetId     FROM richard_papers     WHERE datasetId IS NOT NULL     GROUP BY datasetId ), impactful_datasets AS (     SELECT df.datasetId, df.dataset_usage_count, d.datasetName, AVG(rp.paper_dataset_quality_score_normalized) AS avg_quality_score     FROM dataset_frequency df     JOIN dataset d ON df.datasetId = d.datasetId     JOIN richard_papers rp ON df.datasetId = rp.datasetId     GROUP BY df.datasetId, df.dataset_usage_count, d.datasetName     ORDER BY df.dataset_usage_count DESC, avg_quality_score DESC ), venue_quality_comparison AS (     SELECT v.venueName, AVG(rp.paper_dataset_quality_score_normalized) AS avg_venue_quality_score     FROM richard_papers rp     JOIN venue v ON rp.venueId = v.venueId     WHERE rp.datasetId IS NOT NULL     GROUP BY v.venueName ) SELECT      (SELECT COUNT(*) FROM richard_papers WHERE datasetId IS NOT NULL) AS total_dataset_involvement,     (SELECT COUNT(*) FROM richard_papers) AS total_publications,     id.datasetName, id.dataset_usage_count, id.avg_quality_score,     vqc.venueName, vqc.avg_venue_quality_score FROM impactful_datasets id LEFT JOIN venue_quality_comparison vqc ON TRUE; ",
        "schema_links": [
            "venue.venueId",
            "paperDataset.datasetId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "dataset.datasetId",
            "author.authorName",
            "paperDataset.paper_dataset_quality_score_normalized",
            "paperDataset.paperId",
            "venue.venueName",
            "author.authorId",
            "dataset.datasetName"
        ]
    },
    {
        "instance_id": "q_870",
        "db_id": "academic_research_data",
        "question": "What are the research topics that Richard Ladner has focused on in the past ten years, and how have these topics evolved in terms of citation trends and research impact within the academic community? Additionally, analyze the quality of his publications by identifying the venues where his papers have been cited the most, and explore any patterns in the types of datasets or keyphrases frequently associated with his work. Specifically, provide the citation trends, citation sources, and normalized quality scores of his papers, along with the names of venues and their respective citation counts. Also, include the names of datasets and their association frequencies, as well as the keyphrases and their total weighted frequencies for each of his papers, sorted by year in descending order and by the number of citations in descending order.",
        "query": " WITH richard_papers AS (     SELECT p.paperId, p.title, p.year, p.numCiting, p.paper_quality_score, p.venueId, p.paper_last_updated     FROM paper p     INNER JOIN writes w ON p.paperId = w.paperId     INNER JOIN author a ON w.authorId = a.authorId     WHERE a.authorName = 'Richard Ladner' AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 10 ), citation_trends AS (     SELECT rp.paperId, rp.title, rp.year, rp.numCiting, c.paper_citation_trend, c.paper_citation_source, c.cited_paper_quality_score_normalized     FROM richard_papers rp     LEFT JOIN cite c ON rp.paperId = c.citedPaperId ), venue_analysis AS (     SELECT rp.paperId, rp.title, v.venueName, COUNT(c.citingPaperId) AS citation_count     FROM richard_papers rp     INNER JOIN cite c ON rp.paperId = c.citedPaperId     INNER JOIN venue v ON c.citingPaperId = v.venueId     GROUP BY rp.paperId, rp.title, v.venueName     ORDER BY citation_count DESC ), dataset_analysis AS (     SELECT rp.paperId, d.datasetName, COUNT(pd.datasetId) AS dataset_count     FROM richard_papers rp     INNER JOIN paperDataset pd ON rp.paperId = pd.paperId     INNER JOIN dataset d ON pd.datasetId = d.datasetId     GROUP BY rp.paperId, d.datasetName ), keyphrase_analysis AS (     SELECT rp.paperId, k.keyphraseName, SUM(pkw.paper_keyphrase_weighted_frequency) AS total_keyphrase_frequency     FROM richard_papers rp     INNER JOIN paperKeyphrase pkw ON rp.paperId = pkw.paperId     INNER JOIN keyphrase k ON pkw.keyphraseId = k.keyphraseId     GROUP BY rp.paperId, k.keyphraseName ) SELECT      ct.paperId,      ct.title,      ct.year,      ct.numCiting,      ct.paper_citation_trend,      ct.paper_citation_source,      ct.cited_paper_quality_score_normalized,     va.venueName,      va.citation_count,     da.datasetName,      da.dataset_count,     ka.keyphraseName,      ka.total_keyphrase_frequency FROM citation_trends ct LEFT JOIN venue_analysis va ON ct.paperId = va.paperId LEFT JOIN dataset_analysis da ON ct.paperId = da.paperId LEFT JOIN keyphrase_analysis ka ON ct.paperId = ka.paperId ORDER BY ct.year DESC, ct.numCiting DESC; ",
        "schema_links": [
            "cite.cited_paper_quality_score_normalized",
            "cite.citedPaperId",
            "paperKeyphrase.paper_keyphrase_weighted_frequency",
            "paper.paperId",
            "writes.paperId",
            "paperKeyphrase.keyphraseId",
            "paper.paper_quality_score",
            "dataset.datasetId",
            "cite.paper_citation_trend",
            "keyphrase.keyphraseName",
            "paperDataset.paperId",
            "author.authorId",
            "dataset.datasetName",
            "cite.citingPaperId",
            "paperKeyphrase.paperId",
            "venue.venueId",
            "keyphrase.keyphraseId",
            "paperDataset.datasetId",
            "paper.paper_last_updated",
            "writes.authorId",
            "paper.venueId",
            "paper.year",
            "paper.numCiting",
            "author.authorName",
            "cite.paper_citation_source",
            "paper.title",
            "venue.venueName"
        ]
    },
    {
        "instance_id": "q_866",
        "db_id": "academic_research_data",
        "question": "What are the research papers authored by Richard Ladner that have received citations with a normalized quality score greater than 0.8 over the past five years, and how do these citations vary across different conferences and journals? Additionally, can we identify any trends in the usage of datasets associated with these papers, including the names of the datasets and the number of papers each dataset is associated with?",
        "query": " WITH high_quality_citations AS (     SELECT          c.citedPaperId,         p.title,         p.year,         v.venueName,         v.venue_type,         c.citing_paper_quality_score_normalized AS citation_quality_score     FROM          cite c     JOIN          paper p ON c.citedPaperId = p.paperId     JOIN          venue v ON p.venueId = v.venueId     WHERE          c.citing_paper_quality_score_normalized > 0.8         AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5 ), richard_ladner_papers AS (     SELECT          w.paperId     FROM          writes w     JOIN          author a ON w.authorId = a.authorId     WHERE          a.authorName = 'Richard Ladner' ), cited_papers_with_datasets AS (     SELECT          pd.datasetId,         d.datasetName,         COUNT(pd.paperId) AS paper_count     FROM          paperDataset pd     JOIN          dataset d ON pd.datasetId = d.datasetId     WHERE          pd.paperId IN (SELECT paperId FROM richard_ladner_papers)     GROUP BY          pd.datasetId, d.datasetName ) SELECT      hqc.title,     hqc.year,     hqc.venueName,     hqc.venue_type,     AVG(hqc.citation_quality_score) AS avg_citation_quality_score,     cpd.datasetName,     cpd.paper_count FROM      high_quality_citations hqc JOIN      richard_ladner_papers rlp ON hqc.citedPaperId = rlp.paperId LEFT JOIN      cited_papers_with_datasets cpd ON rlp.paperId = cpd.paperId GROUP BY      hqc.title, hqc.year, hqc.venueName, hqc.venue_type, cpd.datasetName, cpd.paper_count ORDER BY      hqc.year DESC; ",
        "schema_links": [
            "cite.citing_paper_quality_score_normalized",
            "venue.venueId",
            "paperDataset.datasetId",
            "cite.citedPaperId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "dataset.datasetId",
            "venue.venue_type",
            "author.authorName",
            "paperDataset.paperId",
            "paper.title",
            "venue.venueName",
            "author.authorId",
            "dataset.datasetName"
        ]
    },
    {
        "instance_id": "q_864",
        "db_id": "academic_research_data",
        "question": "What are the key research topics and citation trends associated with Richard Ladner's publications in venues with above-average impact factors over the past 10 years?",
        "query": " SELECT      pk.keyphraseName AS key_research_topics,     c.paper_citation_trend AS citation_trends FROM      writes w JOIN      author a ON w.authorId = a.authorId JOIN      paper p ON w.paperId = p.paperId JOIN      venue v ON p.venueId = v.venueId JOIN      cite c ON p.paperId = c.citedPaperId LEFT JOIN      paperKeyphrase pk ON p.paperId = pk.paperId WHERE      a.authorName = 'Richard Ladner'     AND v.impact_factor > (SELECT AVG(impact_factor) FROM journal)     AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 10 GROUP BY      pk.keyphraseName, c.paper_citation_trend; ",
        "schema_links": [
            "venue.impact_factor",
            "paperKeyphrase.paperId",
            "venue.venueId",
            "writes.authorId",
            "cite.citedPaperId",
            "paperKeyphrase.keyphraseName",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "cite.paper_citation_trend",
            "author.authorName",
            "journal.impact_factor",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_867",
        "db_id": "academic_research_data",
        "question": "Which research paper in the field of Artificial Intelligence, published in the past five years, has received the most significant influence as measured by the highest total quality of citations (using normalized quality scores), the greatest number of citations, and an association with high-impact datasets (based on average normalized dataset quality scores)? Include distinct key research phrases associated with the paper in the results.",
        "query": " SELECT      p.paperId,     p.title,     SUM(c.cited_paper_quality_score_normalized) AS total_citation_quality,     COUNT(c.citedPaperId) AS citation_count,     AVG(pd.paper_dataset_quality_score_normalized) AS avg_dataset_quality,     STRING_AGG(DISTINCT k.keyphraseName, ', ') AS keyphrases FROM      paper p JOIN      cite c ON p.paperId = c.citedPaperId LEFT JOIN      paperDataset pd ON p.paperId = pd.paperId LEFT JOIN      dataset d ON pd.datasetId = d.datasetId JOIN      paperKeyphrase pk ON p.paperId = pk.paperId JOIN      keyphrase k ON pk.keyphraseId = k.keyphraseId WHERE      p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5     AND 'Artificial Intelligence' = ANY(p.paper_keywords_normalized) GROUP BY      p.paperId, p.title HAVING      COUNT(c.citedPaperId) > 0 ORDER BY      total_citation_quality DESC,      citation_count DESC,      avg_dataset_quality DESC LIMIT 1; ",
        "schema_links": [
            "paper.paper_keywords_normalized",
            "paperKeyphrase.paperId",
            "keyphrase.keyphraseId",
            "cite.cited_paper_quality_score_normalized",
            "paperDataset.datasetId",
            "cite.citedPaperId",
            "paper.paperId",
            "paperDataset.paperId",
            "paper.year",
            "paperKeyphrase.keyphraseId",
            "dataset.datasetId",
            "paperDataset.paper_dataset_quality_score_normalized",
            "keyphrase.keyphraseName",
            "paper.title"
        ]
    },
    {
        "instance_id": "q_869",
        "db_id": "academic_research_data",
        "question": "Among publications in the field of Artificial Intelligence over the past five years, which have received the highest quality citations, considering both the normalized quality score of the citing papers and the trend of citation quality? Additionally, for these publications, what is their performance in terms of total dataset usage, average dataset quality, and keyphrase relevance specifically related to the AI domain? Please rank the results by descending order of average citation quality, citation trend, total dataset usage, and keyphrase relevance, and limit the output to the top 10 publications.",
        "query": " WITH ai_papers AS (     SELECT DISTINCT p.paperId, p.title, p.year, p.numCiting, p.paper_quality_score_normalized     FROM paper p     JOIN writes w ON p.paperId = w.paperId     JOIN author a ON w.authorId = a.authorId     WHERE 'Artificial Intelligence' = ANY(a.author_research_interests_normalized)       AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5 ),  citation_quality AS (     SELECT c.citedPaperId, AVG(c.citing_paper_quality_score_normalized) AS avg_citation_quality,             MAX(c.paper_citation_trend_normalized) AS max_citation_trend     FROM cite c     JOIN ai_papers ap ON c.citedPaperId = ap.paperId     GROUP BY c.citedPaperId ), dataset_usage AS (     SELECT pd.paperId, SUM(pd.dataset_paper_count) AS total_dataset_usage,             AVG(pd.paper_dataset_quality_score_normalized) AS avg_dataset_quality     FROM paperDataset pd     JOIN dataset d ON pd.datasetId = d.datasetId     JOIN ai_papers ap ON pd.paperId = ap.paperId     GROUP BY pd.paperId ), keyphrase_relevance AS (     SELECT pk.paperId, SUM(pk.paper_keyphrase_weighted_frequency_normalized) AS total_keyphrase_relevance     FROM paperKeyphrase pk     JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId     WHERE k.keyphraseName ILIKE '%artificial intelligence%'     GROUP BY pk.paperId ) SELECT ap.paperId, ap.title, cq.avg_citation_quality, cq.max_citation_trend,         du.total_dataset_usage, du.avg_dataset_quality, kr.total_keyphrase_relevance FROM ai_papers ap LEFT JOIN citation_quality cq ON ap.paperId = cq.citedPaperId LEFT JOIN dataset_usage du ON ap.paperId = du.paperId LEFT JOIN keyphrase_relevance kr ON ap.paperId = kr.paperId ORDER BY cq.avg_citation_quality DESC, cq.max_citation_trend DESC, du.total_dataset_usage DESC, kr.total_keyphrase_relevance DESC LIMIT 10; ",
        "schema_links": [
            "dataset_usage.avg_dataset_quality",
            "dataset_usage.total_dataset_usage",
            "ai_papers.paperId",
            "keyphrase_relevance.paperId",
            "cite.citedPaperId",
            "paper.paperId",
            "writes.paperId",
            "paperKeyphrase.keyphraseId",
            "paperKeyphrase.paper_keyphrase_weighted_frequency_normalized",
            "citation_quality.citedPaperId",
            "dataset.datasetId",
            "paperDataset.paper_dataset_quality_score_normalized",
            "citation_quality.avg_citation_quality",
            "dataset_usage.paperId",
            "keyphrase.keyphraseName",
            "paperDataset.paperId",
            "author.authorId",
            "paperDataset.dataset_paper_count",
            "cite.citing_paper_quality_score_normalized",
            "paperKeyphrase.paperId",
            "keyphrase.keyphraseId",
            "cite.paper_citation_trend_normalized",
            "paperDataset.datasetId",
            "writes.authorId",
            "paper.year",
            "author.author_research_interests_normalized",
            "paper.numCiting",
            "citation_quality.max_citation_trend",
            "paper.paper_quality_score_normalized",
            "keyphrase_relevance.total_keyphrase_relevance",
            "paper.title"
        ]
    },
    {
        "instance_id": "q_868",
        "db_id": "academic_research_data",
        "question": "Which research topics, specifically among authors with \"natural language processing\" as a normalized research interest, gained the most attention from 2013 to 2015, as measured by the number of distinct papers, the total normalized quality score of citations received, and the average trending impact of their publications? Only consider citations with a normalized quality score greater than 0.8, and return the top 10 results ordered by total quality score in descending order and then by average trending impact in descending order.",
        "query": " SELECT      ak.author_research_interests AS research_topic,     COUNT(DISTINCT p.paperId) AS paper_count,     SUM(c.cited_paper_quality_score_normalized) AS total_quality_score,     AVG(p.paper_keywords_similarity_score) AS avg_trending_impact FROM      author AS a JOIN      writes AS w ON a.authorId = w.authorId JOIN      paper AS p ON w.paperId = p.paperId JOIN      cite AS c ON p.paperId = c.citedPaperId JOIN      author AS ak ON a.authorId = ak.authorId WHERE      p.year BETWEEN 2013 AND 2015     AND 'natural language processing' = ANY(ak.author_research_interests_normalized)     AND c.citing_paper_quality_score_normalized > 0.8 GROUP BY      ak.author_research_interests ORDER BY      total_quality_score DESC,      avg_trending_impact DESC LIMIT 10; ",
        "schema_links": [
            "cite.citing_paper_quality_score_normalized",
            "cite.cited_paper_quality_score_normalized",
            "author.author_research_interests",
            "cite.citedPaperId",
            "writes.authorId",
            "paper.paper_keywords_similarity_score",
            "paper.paperId",
            "writes.paperId",
            "paper.year",
            "author.author_research_interests_normalized",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_877",
        "db_id": "academic_research_data",
        "question": "Which research areas, represented by key phrases, received the most attention in academic papers published at major conferences in 2015, based on a weighted score combining the frequency of key phrases and the quality of citations received by those papers, where the paper quality is above the average normalized quality score of cited papers?",
        "query": " SELECT      pk.keyphraseName AS research_area,     SUM(p.numCiting * pk.paper_keyphrase_weighted_frequency_normalized) AS weighted_attention_score FROM      paperKeyphrase pk JOIN      paper p ON pk.paperId = p.paperId JOIN      venue v ON p.venueId = v.venueId WHERE      v.venue_type = 'conference'      AND p.year = 2015     AND p.paper_quality_score_normalized > (SELECT AVG(cited_paper_quality_score_normalized) FROM cite) GROUP BY      pk.keyphraseName ORDER BY      weighted_attention_score DESC LIMIT 10; ",
        "schema_links": [
            "paperKeyphrase.paperId",
            "venue.venueId",
            "cite.cited_paper_quality_score_normalized",
            "paperKeyphrase.keyphraseName",
            "paper.paperId",
            "paper.venueId",
            "paper.year",
            "paperKeyphrase.paper_keyphrase_weighted_frequency_normalized",
            "paper.numCiting",
            "venue.venue_type",
            "paper.paper_quality_score_normalized"
        ]
    },
    {
        "instance_id": "q_879",
        "db_id": "academic_research_data",
        "question": "Which research areas, represented by keywords, received the most attention in academic publications during the year 2015, based on both the total quality of citations (sum of normalized quality scores of citing papers) and the total number of citations? Additionally, among the top 10 most frequently used datasets in papers published in 2015, how many of these research areas are associated with each dataset, and what are the names of these datasets? The results should be ordered by descending total citation quality, then descending total citation count, and finally descending count of keyword associations with datasets.",
        "query": " WITH cited_papers_2015 AS (     SELECT          p.paperId,         p.title,         p.numCiting,         p.paper_quality_score_normalized,         unnest(p.paper_keywords_normalized) AS keyword     FROM          paper p     WHERE          p.year = 2015         AND p.numCiting > 0 ),  citation_quality AS (     SELECT          cp.paperId,         SUM(c.cited_paper_quality_score_normalized) AS total_citation_quality,         COUNT(c.citedPaperId) AS citation_count     FROM          cited_papers_2015 cp     JOIN          cite c     ON          cp.paperId = c.citedPaperId     GROUP BY          cp.paperId ),  keywords_attention AS (     SELECT          cp.keyword,         SUM(cq.total_citation_quality) AS total_keyword_quality,         SUM(cq.citation_count) AS total_keyword_citations     FROM          cited_papers_2015 cp     JOIN          citation_quality cq     ON          cp.paperId = cq.paperId     GROUP BY          cp.keyword     ORDER BY          total_keyword_quality DESC,         total_keyword_citations DESC     LIMIT 10 ),  datasets_2015 AS (     SELECT          pd.datasetId,         COUNT(pd.paperId) AS dataset_usage_count     FROM          paperDataset pd     JOIN          paper p     ON          pd.paperId = p.paperId     WHERE          p.year = 2015     GROUP BY          pd.datasetId     ORDER BY          dataset_usage_count DESC     LIMIT 10 ),  dataset_keywords AS (     SELECT          d.datasetId,         d.datasetName,         unnest(p.paper_keywords_normalized) AS keyword     FROM          datasets_2015 d     JOIN          paperDataset pd     ON          d.datasetId = pd.datasetId     JOIN          paper p     ON          pd.paperId = p.paperId ) SELECT      ka.keyword,     ka.total_keyword_quality,     ka.total_keyword_citations,     dk.datasetName,     COUNT(dk.keyword) AS keyword_in_dataset_count FROM      keywords_attention ka LEFT JOIN      dataset_keywords dk ON      ka.keyword = dk.keyword GROUP BY      ka.keyword, ka.total_keyword_quality, ka.total_keyword_citations, dk.datasetName ORDER BY      ka.total_keyword_quality DESC, ka.total_keyword_citations DESC, keyword_in_dataset_count DESC; ",
        "schema_links": [
            "datasets_2015.dataset_usage_count",
            "paper.paper_keywords_normalized",
            "dataset_keywords.datasetName",
            "cite.cited_paper_quality_score_normalized",
            "paperDataset.datasetId",
            "cite.citedPaperId",
            "paper.paperId",
            "paper.year",
            "paperDataset.datasetName",
            "paper.numCiting",
            "paper.paper_quality_score_normalized",
            "datasets_2015.datasetId",
            "paperDataset.paperId",
            "paper.title"
        ]
    },
    {
        "instance_id": "q_871",
        "db_id": "academic_research_data",
        "question": "Which research topics, represented by keyphrases, gained the most attention from high-impact authors (with an h-index of 50 or higher) in academic papers published in 2015, considering both the normalized quality of citations with a positive citation trend and the diversity and average quality of datasets associated with those papers? List the top 10 research topics ranked by total normalized citation quality in descending order, using average normalized dataset quality as a secondary ranking criterion.",
        "query": " SELECT      pk.keyphraseName AS research_topic,     SUM(c.cited_paper_quality_score_normalized) AS total_citation_quality,     COUNT(DISTINCT pd.datasetId) AS unique_datasets_used,     AVG(pd.paper_dataset_quality_score_normalized) AS avg_dataset_quality FROM      paperKeyphrase pk JOIN      paper p ON pk.paperId = p.paperId JOIN      cite c ON p.paperId = c.citedPaperId JOIN      writes w ON p.paperId = w.paperId JOIN      author a ON w.authorId = a.authorId LEFT JOIN      paperDataset pd ON p.paperId = pd.paperId WHERE      p.year = 2015     AND a.h_index >= 50 -- High-impact authors based on h-index threshold     AND c.paper_citation_trend_normalized > 0 -- Positive citation trend GROUP BY      pk.keyphraseName ORDER BY      total_citation_quality DESC, avg_dataset_quality DESC LIMIT 10; ",
        "schema_links": [
            "paperKeyphrase.paperId",
            "paperDataset.datasetId",
            "cite.cited_paper_quality_score_normalized",
            "cite.paper_citation_trend_normalized",
            "paperKeyphrase.keyphraseName",
            "cite.citedPaperId",
            "writes.authorId",
            "paper.paperId",
            "writes.paperId",
            "paper.year",
            "author.h_index",
            "paperDataset.paper_dataset_quality_score_normalized",
            "paperDataset.paperId",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_872",
        "db_id": "academic_research_data",
        "question": "In 2015, among academic venues, which research topics were most frequently mentioned by authors with an h-index of 50 or higher, and what was the average quality of the papers associated with these topics? Please rank the results first by the frequency of topic mentions in descending order, and then by the average paper quality in descending order, and limit the output to the top 10 topics.",
        "query": " SELECT      pk.keyphraseName AS research_topic,     COUNT(pk.paperId) AS mention_frequency,     AVG(p.paper_quality_score_normalized) AS avg_paper_quality FROM      paperKeyphrase pk JOIN      paper p ON pk.paperId = p.paperId JOIN      writes w ON p.paperId = w.paperId JOIN      author a ON w.authorId = a.authorId JOIN      venue v ON p.venueId = v.venueId WHERE      p.year = 2015     AND a.h_index >= 50     AND v.venue_type = 'academic' GROUP BY      pk.keyphraseName ORDER BY      mention_frequency DESC, avg_paper_quality DESC LIMIT 10; ",
        "schema_links": [
            "paperKeyphrase.paperId",
            "venue.venueId",
            "paperKeyphrase.keyphraseName",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "author.h_index",
            "venue.venue_type",
            "paper.paper_quality_score_normalized",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_876",
        "db_id": "academic_research_data",
        "question": "What were the top 10 most impactful research areas in academic publications from the year 2015, considering both the total number of citations received and the average quality of citing papers, while ensuring author expertise confidence was above 0.8?",
        "query": " SELECT      a.author_research_interests_normalized AS research_area,     SUM(p.numCitedBy) AS total_citations,     AVG(c.citing_paper_quality_score_normalized) AS avg_citation_quality FROM      scholar_new.paper p JOIN      scholar_new.cite c ON p.paperId = c.citedPaperId JOIN      scholar_new.writes w ON p.paperId = w.paperId JOIN      scholar_new.author a ON w.authorId = a.authorId WHERE      p.year = 2015     AND a.author_research_interests_confidence > 0.8 GROUP BY      a.author_research_interests_normalized ORDER BY      total_citations DESC, avg_citation_quality DESC LIMIT 10; ",
        "schema_links": [
            "cite.citing_paper_quality_score_normalized",
            "paper.year",
            "author.author_research_interests_normalized",
            "writes.paperId",
            "paper.numCitedBy",
            "cite.citedPaperId",
            "writes.authorId",
            "paper.paperId",
            "author.author_research_interests_confidence",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_883",
        "db_id": "academic_research_data",
        "question": "What is the trend of research on deep reinforcement learning over the past five years, in terms of the number of publications, average citation count, and average paper quality score, separately for conferences and journals? Additionally, provide the total number of publications, average citations per year, and average paper quality per year for each venue type (conference or journal), ordered chronologically by year and venue type.",
        "query": " WITH relevant_papers AS (     SELECT          p.paperId,         p.title,         p.year,         p.numCiting,         p.paper_quality_score_normalized,         v.venueName,         v.venue_type     FROM          paper p     JOIN          venue v ON p.venueId = v.venueId     WHERE          p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5         AND 'deep reinforcement learning' = ANY(p.paper_keywords_normalized) ), citation_trends AS (     SELECT          rp.year,         COUNT(rp.paperId) AS publication_count,         AVG(rp.numCiting) AS avg_citations,         AVG(rp.paper_quality_score_normalized) AS avg_paper_quality,         rp.venue_type     FROM          relevant_papers rp     GROUP BY          rp.year, rp.venue_type ), venue_impact AS (     SELECT          ct.year,         ct.venue_type,         SUM(ct.publication_count) AS total_publications,         AVG(ct.avg_citations) AS avg_citations_per_year,         AVG(ct.avg_paper_quality) AS avg_quality_per_year     FROM          citation_trends ct     GROUP BY          ct.year, ct.venue_type ) SELECT      vi.year,     vi.venue_type,     vi.total_publications,     vi.avg_citations_per_year,     vi.avg_quality_per_year FROM      venue_impact vi ORDER BY      vi.year, vi.venue_type; ",
        "schema_links": [
            "relevant_papers.year",
            "citation_trends.year",
            "citation_trends.publication_count",
            "paper.paper_keywords_normalized",
            "venue_impact.year",
            "venue_impact.avg_citations_per_year",
            "venue.venueId",
            "venue_impact.total_publications",
            "citation_trends.avg_paper_quality",
            "relevant_papers.numCiting",
            "paper.paperId",
            "relevant_papers.venue_type",
            "paper.venueId",
            "citation_trends.avg_citations",
            "relevant_papers.paper_quality_score_normalized",
            "paper.year",
            "relevant_papers.paperId",
            "paper.numCiting",
            "venue.venue_type",
            "venue_impact.avg_quality_per_year",
            "paper.paper_quality_score_normalized",
            "paper.title",
            "venue.venueName",
            "citation_trends.venue_type",
            "venue_impact.venue_type"
        ]
    },
    {
        "instance_id": "q_874",
        "db_id": "academic_research_data",
        "question": "Which author in the CVPR venue has the highest influence, measured by the total number of citations received over the past five years and the average normalized quality score of their publications?",
        "query": " SELECT      a.authorName,      SUM(p.numCitedBy) AS total_citations,      AVG(p.paper_quality_score_normalized) AS avg_paper_quality FROM      author a JOIN      writes w ON a.authorId = w.authorId JOIN      paper p ON w.paperId = p.paperId JOIN      venue v ON p.venueId = v.venueId WHERE      v.venueName = 'CVPR'      AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5 GROUP BY      a.authorName ORDER BY      total_citations DESC,      avg_paper_quality DESC LIMIT 1; ",
        "schema_links": [
            "venue.venueId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "paper.numCitedBy",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "venue.venueName",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_875",
        "db_id": "academic_research_data",
        "question": "Which authors have the highest influence in terms of total citation quality, average venue impact factor, and the number of unique datasets used in their studies within the last five years? The total citation quality is calculated as the sum of the product of the number of citations each paper received and the normalized quality score of the citing papers. The average venue impact factor considers the venues where the authors published their papers, and the unique datasets are those utilized in the studies. Only papers published in the past five years are considered, and the results are ordered by total citation quality in descending order, followed by average venue impact factor and the number of unique datasets used, also in descending order, with a limit of 10 authors displayed.",
        "query": " SELECT      a.authorId,     a.authorName,     SUM(p.numCiting * c.cited_paper_quality_score_normalized) AS total_citation_quality,     AVG(j.impact_factor) AS avg_venue_impact_factor,     COUNT(DISTINCT pd.datasetId) AS unique_datasets_used FROM      author a JOIN      writes w ON a.authorId = w.authorId JOIN      paper p ON w.paperId = p.paperId JOIN      cite c ON p.paperId = c.citedPaperId LEFT JOIN      paperDataset pd ON p.paperId = pd.paperId JOIN      venue v ON p.venueId = v.venueId LEFT JOIN      journal j ON v.venueId = j.journalId WHERE      p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5 GROUP BY      a.authorId, a.authorName ORDER BY      total_citation_quality DESC, avg_venue_impact_factor DESC, unique_datasets_used DESC LIMIT 10; ",
        "schema_links": [
            "journal.journalId",
            "venue.venueId",
            "cite.cited_paper_quality_score_normalized",
            "paperDataset.datasetId",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "paper.numCiting",
            "author.authorName",
            "journal.impact_factor",
            "paperDataset.paperId",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_878",
        "db_id": "academic_research_data",
        "question": "What are the syntactic parsing research topics that have gained significant attention in the last five years, excluding any papers authored by Chris Dyer, and which of these topics are associated with high-impact journals (impact factor > 3.0) or top-tier conferences? Additionally, provide the count of distinct papers for each topic and list the related high-impact journals or conferences, ordered by the number of papers in descending order. Only include topics that have more than 10 distinct papers associated with them.",
        "query": " SELECT      pk.keyphraseName AS research_topic,     COUNT(DISTINCT p.paperId) AS paper_count,     STRING_AGG(DISTINCT j.journalName, ', ') AS related_journals_conferences FROM      paperKeyphrase pkp JOIN      keyphrase pk ON pkp.keyphraseId = pk.keyphraseId JOIN      paper p ON pkp.paperId = p.paperId JOIN      venue v ON p.venueId = v.venueId LEFT JOIN      journal j ON v.venueId = j.journalId JOIN      writes w ON p.paperId = w.paperId JOIN      author a ON w.authorId = a.authorId WHERE      pk.keyphraseName ILIKE '%syntactic parsing%'     AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5     AND a.authorName != 'Chris Dyer'     AND (j.impact_factor > 3.0 OR v.venue_type IN ('high-impact conference', 'top-tier conference')) GROUP BY      pk.keyphraseName HAVING      COUNT(DISTINCT p.paperId) > 10 ORDER BY      paper_count DESC; ",
        "schema_links": [
            "journal.journalName",
            "journal.journalId",
            "paperkeyphrase.keyphraseId",
            "paperKeyphrase.paperId",
            "venue.venueId",
            "keyphrase.keyphraseId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "paperkeyphrase.paperId",
            "writes.paperId",
            "paper.year",
            "paperKeyphrase.keyphraseId",
            "venue.venue_type",
            "author.authorName",
            "journal.impact_factor",
            "keyphrase.keyphraseName",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_881",
        "db_id": "academic_research_data",
        "question": "Which research papers, excluding those authored by Chris Dyer, have been cited in high-impact journals or conferences (defined as venues with an impact factor greater than 5 or categorized as 'high-impact journal' or 'conference') within the past five years, and how do their citation trends compare when ordered by the total number of citations in descending order?",
        "query": " SELECT      p.paperId,     p.title,     p.year,     p.numCiting AS total_citations,     c.paper_citation_trend AS citation_trend FROM      paper p JOIN      cite c ON p.paperId = c.citedPaperId JOIN      venue v ON p.venueId = v.venueId LEFT JOIN      writes w ON p.paperId = w.paperId LEFT JOIN      author a ON w.authorId = a.authorId WHERE      a.authorName != 'Chris Dyer'     AND (v.impact_factor > 5 OR v.venue_type IN ('high-impact journal', 'conference'))     AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5 GROUP BY      p.paperId, p.title, p.year, p.numCiting, c.paper_citation_trend ORDER BY      p.numCiting DESC; ",
        "schema_links": [
            "venue.impact_factor",
            "venue.venueId",
            "cite.citedPaperId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "paper.numCiting",
            "cite.paper_citation_trend",
            "venue.venue_type",
            "author.authorName",
            "paper.title",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_884",
        "db_id": "academic_research_data",
        "question": "Which research papers in the field of natural language processing have been cited by studies that do not involve Chris Dyer as an author, and how many unique citations do these papers receive across different conferences and journals? Provide the results sorted in descending order of citation count.",
        "query": " SELECT      p.paperId,      p.title,      v.venueName AS publication_venue,      COUNT(DISTINCT c.citedPaperId) AS citation_count FROM      paper p JOIN      venue v ON p.venueId = v.venueId JOIN      cite c ON p.paperId = c.citedPaperId LEFT JOIN      writes w ON c.citingPaperId = w.paperId LEFT JOIN      author a ON w.authorId = a.authorId WHERE      p.paper_keywords_normalized @> '{\"natural language processing\"}'::text[]     AND (a.authorName IS NULL OR a.authorName != 'Chris Dyer')     AND v.venue_type IN ('conference', 'journal') GROUP BY      p.paperId,      p.title,      v.venueName ORDER BY      citation_count DESC; ",
        "schema_links": [
            "paper.paper_keywords_normalized",
            "venue.venueId",
            "cite.citedPaperId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "venue.venue_type",
            "author.authorName",
            "paper.title",
            "venue.venueName",
            "author.authorId",
            "cite.citingPaperId"
        ]
    },
    {
        "instance_id": "q_882",
        "db_id": "academic_research_data",
        "question": "Which researchers have the highest citation impact on Daniel A Reed's work, considering both the total number of citations and the average quality of citations across distinct venues and research areas, ranked first by citation count and then by average citation quality, limited to the top 10 results?",
        "query": " SELECT      a.authorName,      COUNT(c.citedPaperId) AS citation_count,      AVG(c.citing_paper_quality_score_normalized) AS avg_citation_quality,     STRING_AGG(DISTINCT v.venueName, ', ') AS venues_involved,     STRING_AGG(DISTINCT a.author_research_interests, ', ') AS research_areas FROM      author a JOIN      writes w ON a.authorId = w.authorId JOIN      cite c ON w.paperId = c.citedPaperId JOIN      paper p ON c.citingPaperId = p.paperId JOIN      venue v ON p.venueId = v.venueId WHERE      c.citedPaperId IN (         SELECT w.paperId          FROM writes w          JOIN author a ON w.authorId = a.authorId          WHERE a.authorName = 'Daniel A Reed'     ) GROUP BY      a.authorName ORDER BY      citation_count DESC,      avg_citation_quality DESC LIMIT 10; ",
        "schema_links": [
            "cite.citing_paper_quality_score_normalized",
            "venue.venueId",
            "author.author_research_interests",
            "cite.citedPaperId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "author.authorName",
            "venue.venueName",
            "author.authorId",
            "cite.citingPaperId"
        ]
    },
    {
        "instance_id": "q_886",
        "db_id": "academic_research_data",
        "question": "Which authors have the highest total normalized citation quality scores for papers published in the past five years, where these papers are related to Daniel A Reed's research interests based on keyword matching, considering both direct citations and the quality of those citations? Please list the top 10 authors by their total citation quality score, including their names and IDs.",
        "query": " WITH reed_interests AS (     SELECT unnest(author_research_interests) AS interest     FROM author     WHERE authorName = 'Daniel A Reed' ), related_papers AS (     SELECT DISTINCT p.paperId     FROM paper p     JOIN paperKeyphrase pk ON p.paperId = pk.paperId     JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId     JOIN reed_interests ri ON k.keyphraseName ILIKE '%' || ri.interest || '%'     WHERE p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5 ), citation_quality AS (     SELECT          w.authorId,         SUM(c.cited_paper_quality_score_normalized) AS total_citation_quality     FROM related_papers rp     JOIN cite c ON rp.paperId = c.citedPaperId     JOIN paper p ON c.citingPaperId = p.paperId     JOIN writes w ON p.paperId = w.paperId     WHERE p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5     GROUP BY w.authorId ) SELECT      a.authorName,     a.authorId,     cq.total_citation_quality FROM citation_quality cq JOIN author a ON cq.authorId = a.authorId ORDER BY cq.total_citation_quality DESC LIMIT 10; ",
        "schema_links": [
            "paperKeyphrase.paperId",
            "keyphrase.keyphraseId",
            "cite.cited_paper_quality_score_normalized",
            "author.author_research_interests",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "writes.paperId",
            "paper.year",
            "paperKeyphrase.keyphraseId",
            "author.authorName",
            "keyphrase.keyphraseName",
            "author.authorId",
            "cite.citingPaperId"
        ]
    },
    {
        "instance_id": "q_888",
        "db_id": "academic_research_data",
        "question": "Which researchers, whose normalized publication quality score has consistently increased over the past five years and who have \"Machine Learning\" as one of their normalized research interests, along with the comparison of their citation trends across papers published in top-tier conferences and journals? Specifically, provide the researcher's ID, name, year, average normalized quality score for each year, the venue name where the paper was published, and the citation count for each paper. Ensure the results are ordered by the researcher's name and year.",
        "query": " WITH researcher_quality_trend AS (     SELECT          w.authorId,         a.authorName,         p.year,         AVG(p.paper_quality_score_normalized) AS avg_quality_score     FROM          writes w     JOIN          paper p ON w.paperId = p.paperId     JOIN          author a ON w.authorId = a.authorId     WHERE          p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5         AND 'Machine Learning' = ANY(a.author_research_interests_normalized)     GROUP BY          w.authorId, a.authorName, p.year ), citation_trend AS (     SELECT          c.citedPaperId,         v.venueName,         COUNT(c.citingPaperId) AS citation_count     FROM          cite c     JOIN          paper p ON c.citedPaperId = p.paperId     JOIN          venue v ON p.venueId = v.venueId     WHERE          v.venue_type IN ('top-tier conference', 'top-tier journal')     GROUP BY          c.citedPaperId, v.venueName ) SELECT      rqt.authorId,     rqt.authorName,     rqt.year,     rqt.avg_quality_score,     ct.venueName,     ct.citation_count FROM      researcher_quality_trend rqt JOIN      writes w ON rqt.authorId = w.authorId JOIN      paper p ON w.paperId = p.paperId LEFT JOIN      citation_trend ct ON p.paperId = ct.citedPaperId WHERE      rqt.avg_quality_score > LAG(rqt.avg_quality_score) OVER (PARTITION BY rqt.authorId ORDER BY rqt.year) ORDER BY      rqt.authorName, rqt.year; ",
        "schema_links": [
            "researcher_quality_trend.avg_quality_score",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "author.author_research_interests_normalized",
            "venue.venue_type",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "venue.venueName",
            "citation_trend.venueName",
            "cite.citingPaperId"
        ]
    },
    {
        "instance_id": "q_887",
        "db_id": "academic_research_data",
        "question": "Which researchers have contributed to the development of sensor fusion techniques in papers published within the last five years, and how has their work influenced related datasets that have been updated in the same time frame? Specifically, provide the count of papers associated with each dataset influenced by these researchers. Additionally, assess the quality of these researchers' contributions based on the average normalized quality score of citations received by their papers within the last five years. Present the results ordered by researcher name and dataset name.",
        "query": " WITH sensor_fusion_researchers AS (     SELECT DISTINCT w.authorId, a.authorName     FROM writes w     JOIN author a ON w.authorId = a.authorId     JOIN paper p ON w.paperId = p.paperId     JOIN paperKeyphrase pk ON p.paperId = pk.paperId     JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId     WHERE LOWER(k.keyphraseName) LIKE '%sensor fusion%'       AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5 ), dataset_influence AS (     SELECT pd.datasetId, d.datasetName, COUNT(DISTINCT pd.paperId) AS paper_count     FROM paperDataset pd     JOIN dataset d ON pd.datasetId = d.datasetId     JOIN sensor_fusion_researchers sfr ON pd.paperId IN (         SELECT paperId FROM writes WHERE authorId = sfr.authorId     )     WHERE d.dataset_last_updated >= CURRENT_TIMESTAMP - INTERVAL '5 years'     GROUP BY pd.datasetId, d.datasetName ), citation_trends AS (     SELECT c.citedPaperId, AVG(c.citing_paper_quality_score_normalized) AS avg_citation_quality     FROM cite c     JOIN paper p ON c.citedPaperId = p.paperId     JOIN sensor_fusion_researchers sfr ON p.paperId IN (         SELECT paperId FROM writes WHERE authorId = sfr.authorId     )     WHERE p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5     GROUP BY c.citedPaperId ) SELECT sfr.authorName,        di.datasetName,        di.paper_count,        ct.avg_citation_quality FROM sensor_fusion_researchers sfr JOIN writes w ON sfr.authorId = w.authorId LEFT JOIN dataset_influence di ON w.paperId = di.paperId LEFT JOIN citation_trends ct ON w.paperId = ct.citedPaperId ORDER BY sfr.authorName, di.datasetName; ",
        "schema_links": [
            "cite.citing_paper_quality_score_normalized",
            "paperKeyphrase.paperId",
            "keyphrase.keyphraseId",
            "paperDataset.datasetId",
            "writes.authorId",
            "cite.citedPaperId",
            "dataset.dataset_last_updated",
            "paper.paperId",
            "paperDataset.paperId",
            "writes.paperId",
            "paper.year",
            "paperKeyphrase.keyphraseId",
            "author.authorName",
            "keyphrase.keyphraseName",
            "dataset.datasetName"
        ]
    },
    {
        "instance_id": "q_885",
        "db_id": "academic_research_data",
        "question": "Which authors have significantly contributed to research on sensor fusion, as indicated by their total paper quality scores and citation counts over the past five years, while also being associated with either high-impact journals (above average impact factor) or prestigious venues? Please rank the results by descending order of total paper quality score, total citations, and average journal impact factor.",
        "query": " SELECT      a.authorId,     a.authorName,     SUM(p.paper_quality_score) AS total_paper_quality_score,     COUNT(c.citedPaperId) AS total_citations,     AVG(j.impact_factor) AS avg_journal_impact_factor FROM      author a JOIN      writes w ON a.authorId = w.authorId JOIN      paper p ON w.paperId = p.paperId LEFT JOIN      cite c ON p.paperId = c.citedPaperId LEFT JOIN      venue v ON p.venueId = v.venueId LEFT JOIN      journal j ON v.venueId = j.journalId WHERE      a.author_research_interests_normalized @> ARRAY['sensor fusion']     AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5     AND (j.impact_factor > (SELECT AVG(impact_factor) FROM journal) OR v.venue_type = 'prestigious') GROUP BY      a.authorId, a.authorName HAVING      SUM(p.paper_quality_score) > (SELECT AVG(paper_quality_score) FROM paper) ORDER BY      total_paper_quality_score DESC, total_citations DESC, avg_journal_impact_factor DESC; ",
        "schema_links": [
            "journal.journalId",
            "venue.venueId",
            "cite.citedPaperId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "author.author_research_interests_normalized",
            "paper.paper_quality_score",
            "venue.venue_type",
            "author.authorName",
            "journal.impact_factor",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_893",
        "db_id": "academic_research_data",
        "question": "Which researchers have published papers on sensor fusion techniques in the past five years, and what is their contribution in terms of publication impact and citation quality? Additionally, provide the count of their publications, total citations, average paper quality score, and their research focus areas during this period. Identify frequent collaborators among these researchers based on co-authorship patterns in their recent papers. Finally, order the results by total citations in descending order, and then by average paper quality score in descending order.",
        "query": " WITH recent_papers AS (     SELECT          p.paperId,         p.title,         p.year,         p.numCiting,         p.paper_quality_score_normalized,         pk.keyphraseId,         pk.paper_keyphrase_weighted_frequency_normalized     FROM          paper p     INNER JOIN          paperKeyphrase pk ON p.paperId = pk.paperId     INNER JOIN          keyphrase k ON pk.keyphraseId = k.keyphraseId     WHERE          p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5         AND LOWER(k.keyphraseName) LIKE '%sensor fusion%' ), author_contribution AS (     SELECT          w.authorId,         a.authorName,         COUNT(DISTINCT rp.paperId) AS paper_count,         SUM(rp.numCiting) AS total_citations,         AVG(rp.paper_quality_score_normalized) AS avg_paper_quality,         STRING_AGG(DISTINCT k.keyphraseName, ', ') AS research_focus     FROM          writes w     INNER JOIN          recent_papers rp ON w.paperId = rp.paperId     INNER JOIN          author a ON w.authorId = a.authorId     INNER JOIN          paperKeyphrase pk ON rp.paperId = pk.paperId     INNER JOIN          keyphrase k ON pk.keyphraseId = k.keyphraseId     GROUP BY          w.authorId, a.authorName ), collaboration_trends AS (     SELECT          w1.authorId AS author1,         w2.authorId AS author2,         COUNT(*) AS collaboration_count     FROM          writes w1     INNER JOIN          writes w2 ON w1.paperId = w2.paperId AND w1.authorId < w2.authorId     INNER JOIN          recent_papers rp ON w1.paperId = rp.paperId     GROUP BY          w1.authorId, w2.authorId ) SELECT      ac.authorId,     ac.authorName,     ac.paper_count,     ac.total_citations,     ac.avg_paper_quality,     ac.research_focus,     STRING_AGG(ct.author2::TEXT, ', ') AS frequent_collaborators FROM      author_contribution ac LEFT JOIN      collaboration_trends ct ON ac.authorId = ct.author1 WHERE      ac.paper_count > 0 GROUP BY      ac.authorId, ac.authorName, ac.paper_count, ac.total_citations, ac.avg_paper_quality, ac.research_focus ORDER BY      ac.total_citations DESC, ac.avg_paper_quality DESC; ",
        "schema_links": [
            "paperKeyphrase.paperId",
            "keyphrase.keyphraseId",
            "writes.authorId",
            "paper.paperId",
            "writes.paperId",
            "paper.year",
            "paperKeyphrase.keyphraseId",
            "paperKeyphrase.paper_keyphrase_weighted_frequency_normalized",
            "paper.numCiting",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "keyphrase.keyphraseName",
            "paper.title",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_894",
        "db_id": "academic_research_data",
        "question": "Which researchers focus on \"sensor fusion\" as one of their research interests, have a significant influence in their field indicated by either a normalized paper quality score greater than 0.8 or publications in journals with an impact factor exceeding 10, and have updated their research interests or affiliations within the last year? Please provide distinct results sorted in descending order of the researcher's h-index, and then by their publication count if the h-index values are equal. Include each researcher's ID, name, affiliation, h-index, publication count, research interests, and the timestamp of their last update.",
        "query": " SELECT DISTINCT a.authorId, a.authorName, a.affiliation, a.h_index, a.publication_count, a.author_research_interests, a.author_last_updated FROM author a JOIN writes w ON a.authorId = w.authorId JOIN paper p ON w.paperId = p.paperId LEFT JOIN journal j ON p.venueId = j.journalId WHERE ('sensor fusion' = ANY(a.author_research_interests_normalized) OR 'sensor fusion' = ANY(a.author_research_interests))   AND (p.paper_quality_score_normalized > 0.8 OR j.impact_factor > 10)   AND a.author_last_updated >= NOW() - INTERVAL '1 year' ORDER BY a.h_index DESC, a.publication_count DESC; ",
        "schema_links": [
            "journal.journalId",
            "author.author_last_updated",
            "author.author_research_interests",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "author.affiliation",
            "author.author_research_interests_normalized",
            "author.publication_count",
            "author.h_index",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "journal.impact_factor",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_890",
        "db_id": "academic_research_data",
        "question": "How many distinct high-quality papers written by Dan Klein have been cited by Michael I. Jordan, where the citing papers have a normalized citation quality score above the average threshold? Additionally, provide the total number of such citations that have occurred in papers published within the past five years.",
        "query": " WITH AverageCitationQuality AS (     SELECT AVG(cited_paper_quality_score_normalized) AS avg_citation_quality     FROM cite ), DanKleinPapers AS (     SELECT DISTINCT w.paperId     FROM writes w     JOIN author a ON w.authorId = a.authorId     WHERE a.authorName = 'Dan Klein'       AND w.writes_co_author_contribution_normalized > 0 ), MichaelJordanCitations AS (     SELECT DISTINCT c.citedPaperId, c.paper_citation_trend, c.citing_paper_quality_score_normalized     FROM cite c     JOIN writes w ON c.citingPaperId = w.paperId     JOIN author a ON w.authorId = a.authorId     CROSS JOIN AverageCitationQuality acq     WHERE a.authorName = 'Michael I. Jordan'       AND c.citing_paper_quality_score_normalized > acq.avg_citation_quality ), HighQualityCitations AS (     SELECT mj.citedPaperId, mj.paper_citation_trend     FROM MichaelJordanCitations mj     JOIN DanKleinPapers dk ON mj.citedPaperId = dk.paperId     WHERE mj.citedPaperId IN (SELECT paperId FROM paper WHERE paper_quality_score_normalized > 0.8) ), CitationTrendOverYears AS (     SELECT citedPaperId, SUM(CASE WHEN EXTRACT(YEAR FROM AGE(NOW(), p.paper_last_updated)) <= 5 THEN 1 ELSE 0 END) AS recent_citations     FROM HighQualityCitations hqc     JOIN paper p ON hqc.citedPaperId = p.paperId     GROUP BY citedPaperId ) SELECT COUNT(DISTINCT citedPaperId) AS high_quality_paper_count, SUM(recent_citations) AS citation_trend_past_5_years FROM CitationTrendOverYears; ",
        "schema_links": [
            "cite.citing_paper_quality_score_normalized",
            "cite.cited_paper_quality_score_normalized",
            "paper.paper_last_updated",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "writes.writes_co_author_contribution_normalized",
            "writes.paperId",
            "cite.paper_citation_trend",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "author.authorId",
            "cite.citingPaperId"
        ]
    },
    {
        "instance_id": "q_891",
        "db_id": "academic_research_data",
        "question": "How many distinct papers written by Dan Klein reference works authored by Michael I. Jordan, considering only those citations with a quality score above the average normalized quality score within their respective citation sources? Additionally, analyze the yearly trend of such citations over the past five years, with the citation year determined by the last updated date of the citing paper.",
        "query": " WITH AverageCitationQuality AS (     SELECT          paper_citation_source,         AVG(cited_paper_quality_score_normalized) AS avg_quality_score     FROM cite     GROUP BY paper_citation_source ), FilteredCitations AS (     SELECT          c.citingPaperId,         c.paper_citation_source,         c.cited_paper_quality_score_normalized     FROM cite c     JOIN AverageCitationQuality acq         ON c.paper_citation_source = acq.paper_citation_source     WHERE c.cited_paper_quality_score_normalized > acq.avg_quality_score ), DanKleinPapers AS (     SELECT w.paperId     FROM writes w     JOIN author a ON w.authorId = a.authorId     WHERE a.authorName = 'Dan Klein' ), MichaelJordanPapers AS (     SELECT w.paperId     FROM writes w     JOIN author a ON w.authorId = a.authorId     WHERE a.authorName = 'Michael I. Jordan' ) SELECT      COUNT(DISTINCT fc.citingPaperId) AS citation_count,     EXTRACT(YEAR FROM p.paper_last_updated) AS citation_year FROM FilteredCitations fc JOIN paper p ON fc.citingPaperId = p.paperId JOIN DanKleinPapers dkp ON fc.citingPaperId = dkp.paperId JOIN MichaelJordanPapers mj ON fc.citedPaperId = mj.paperId WHERE p.paper_last_updated >= NOW() - INTERVAL '5 years' GROUP BY citation_year ORDER BY citation_year; ",
        "schema_links": [
            "writes.paperId",
            "author.authorName",
            "cite.paper_citation_source",
            "cite.cited_paper_quality_score_normalized",
            "paper.paper_last_updated",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "author.authorId",
            "cite.citingPaperId"
        ]
    },
    {
        "instance_id": "q_889",
        "db_id": "academic_research_data",
        "question": "Which researchers, excluding Ameet Soni and Ras Bodik, have collaborated on papers that received citations from high-impact journals over the past five years, and how many distinct collaborations did they have each year? High-impact journals are defined as those with an impact factor greater than the average impact factor of all journals. Please provide the researcher names, the number of distinct collaborations per year, and the corresponding year.",
        "query": " WITH high_impact_journals AS (     SELECT journalId     FROM journal     WHERE impact_factor > (SELECT AVG(impact_factor) FROM journal) ), cited_papers AS (     SELECT DISTINCT c.citedPaperId     FROM cite c     JOIN paper p ON c.citedPaperId = p.paperId     JOIN venue v ON p.venueId = v.venueId     WHERE v.venueId IN (SELECT journalId FROM high_impact_journals) ), collaborators AS (     SELECT DISTINCT w.authorId     FROM writes w     JOIN cited_papers cp ON w.paperId = cp.citedPaperId     WHERE w.authorId IN (         SELECT authorId          FROM author          WHERE authorName IN ('Ameet Soni', 'Ras Bodik')     ) ), researchers_collaboration_trend AS (     SELECT w.authorId, a.authorName, COUNT(DISTINCT w.paperId) AS collaboration_count, YEAR(p.paper_last_updated) AS year     FROM writes w     JOIN author a ON w.authorId = a.authorId     JOIN paper p ON w.paperId = p.paperId     WHERE w.authorId NOT IN (SELECT authorId FROM author WHERE authorName IN ('Ameet Soni', 'Ras Bodik'))       AND w.authorId IN (SELECT authorId FROM collaborators)       AND p.paper_last_updated >= NOW() - INTERVAL '5 years'     GROUP BY w.authorId, a.authorName, YEAR(p.paper_last_updated) ) SELECT rct.authorName, rct.year, rct.collaboration_count FROM researchers_collaboration_trend rct ORDER BY rct.authorName, rct.year; ",
        "schema_links": [
            "journal.journalId",
            "venue.venueId",
            "paper.paper_last_updated",
            "cite.citedPaperId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "author.authorName",
            "journal.impact_factor",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_892",
        "db_id": "academic_research_data",
        "question": "Which authors, with a paper quality score greater than 0.75, have contributed to papers discussing topics related to \"Bacterial Wilt\" in the fourth quarter of 2016? Additionally, compare the average normalized co-author contribution of these authors across similar research interests, ordered by their average contribution in descending order. Include the authors' research interest confidence levels in the results.",
        "query": " SELECT      a.authorName,      a.author_research_interests_confidence,      AVG(w.writes_co_author_contribution_normalized) AS avg_contribution FROM      author a JOIN      writes w ON a.authorId = w.authorId JOIN      paper p ON w.paperId = p.paperId JOIN      paperKeyphrase pk ON p.paperId = pk.paperId JOIN      keyphrase k ON pk.keyphraseId = k.keyphraseId WHERE      p.paper_quality_score > 0.75     AND k.keyphraseName ILIKE '%Bacterial Wilt%'     AND p.year = 2016     AND EXTRACT(QUARTER FROM p.paper_last_updated::timestamp) = 4 GROUP BY      a.authorName,      a.author_research_interests_confidence ORDER BY      avg_contribution DESC; ",
        "schema_links": [
            "paperKeyphrase.paperId",
            "keyphrase.keyphraseId",
            "paper.paper_last_updated",
            "writes.authorId",
            "paper.paperId",
            "writes.writes_co_author_contribution_normalized",
            "writes.paperId",
            "paper.year",
            "paperKeyphrase.keyphraseId",
            "paper.paper_quality_score",
            "author.authorName",
            "keyphrase.keyphraseName",
            "author.author_research_interests_confidence",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_897",
        "db_id": "academic_research_data",
        "question": "Which authors, whose normalized research interests include plant diseases and specifically mention Bacterial Wilt, published papers in journals with an impact factor higher than the average impact factor of all journals during the years 2015 to 2017, and what were the normalized citation trends of those papers over the subsequent three-year period from 2018 to 2020?",
        "query": " SELECT      a.authorName,      p.title,      j.journalName,      c.paper_citation_trend_normalized AS citation_trend FROM      author a JOIN      writes w ON a.authorId = w.authorId JOIN      paper p ON w.paperId = p.paperId JOIN      journal j ON p.venueId = j.journalId LEFT JOIN      cite c ON p.paperId = c.citedPaperId WHERE      a.author_research_interests_normalized @> ARRAY['plant diseases', 'Bacterial Wilt']     AND j.impact_factor > (SELECT AVG(impact_factor) FROM journal)     AND p.year BETWEEN 2015 AND 2017     AND c.citingPaperId IN (         SELECT citingPaperId          FROM cite          WHERE citedPaperId = p.paperId          AND year BETWEEN 2018 AND 2020     ) GROUP BY      a.authorName, p.title, j.journalName, c.paper_citation_trend_normalized; ",
        "schema_links": [
            "journal.journalName",
            "journal.journalId",
            "cite.paper_citation_trend_normalized",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "author.author_research_interests_normalized",
            "author.authorName",
            "journal.impact_factor",
            "paper.title",
            "cite.year",
            "author.authorId",
            "cite.citingPaperId"
        ]
    },
    {
        "instance_id": "q_895",
        "db_id": "academic_research_data",
        "question": "Over the last five years, which keyphrases have the highest influence on driving citations, taking into account both their usage frequency in papers and the quality of those papers?",
        "query": " SELECT      pk.keyphraseName,     SUM(p.numCiting * pk.paper_keyphrase_weighted_frequency_normalized * p.paper_quality_score_normalized) AS influence_score FROM      paperKeyphrase pk JOIN      paper p ON pk.paperId = p.paperId WHERE      p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5 GROUP BY      pk.keyphraseName ORDER BY      influence_score DESC; ",
        "schema_links": [
            "paper.year",
            "paperKeyphrase.paper_keyphrase_weighted_frequency_normalized",
            "paper.numCiting",
            "paperKeyphrase.paperId",
            "paper.paper_quality_score_normalized",
            "paperKeyphrase.keyphraseName",
            "paper.paperId"
        ]
    },
    {
        "instance_id": "q_896",
        "db_id": "academic_research_data",
        "question": "Which papers published in ACL 2014 have focused on Parsing techniques, referenced datasets with above-average download counts, and are sorted in descending order based on the download count of the referenced datasets?",
        "query": " SELECT DISTINCT p.paperId, p.title, p.year, p.paper_keywords  FROM paper p JOIN venue v ON p.venueId = v.venueId JOIN paperDataset pd ON p.paperId = pd.paperId JOIN dataset d ON pd.datasetId = d.datasetId JOIN paperKeyphrase pk ON p.paperId = pk.paperId JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId WHERE v.venueName = 'ACL'  AND p.year = 2014  AND k.keyphraseName ILIKE '%parsing%'  AND d.dataset_download_count > (SELECT AVG(dataset_download_count) FROM dataset) ORDER BY d.dataset_download_count DESC; ",
        "schema_links": [
            "paper.paper_keywords",
            "paperKeyphrase.paperId",
            "venue.venueId",
            "keyphrase.keyphraseId",
            "paperDataset.datasetId",
            "paper.paperId",
            "paperDataset.paperId",
            "paper.venueId",
            "paper.year",
            "paperKeyphrase.keyphraseId",
            "dataset.datasetId",
            "dataset.dataset_download_count",
            "keyphrase.keyphraseName",
            "paper.title",
            "venue.venueName"
        ]
    },
    {
        "instance_id": "q_901",
        "db_id": "academic_research_data",
        "question": "在2014年，哪些研究者发表的论文引用了ACL会议的论文？这些被引用的论文所在领域的影响力（通过期刊影响因子衡量）如何？同时，请分析这些研究者的合作网络特征，包括他们发表的论文数量、平均合作者贡献度以及不同合作者的数量。此外，这些研究者在其相关数据集上的使用趋势如何，具体体现在数据集的质量评分上？请按照引用论文的质量评分降序排列结果。",
        "query": " WITH acl_citations AS (     SELECT          c.citingPaperId,         p.year AS citing_paper_year,         p.paper_quality_score_normalized AS citing_paper_quality_score,         v.venueName AS cited_venue_name,         j.impact_factor AS cited_venue_impact_factor     FROM          cite c     JOIN          paper p ON c.citingPaperId = p.paperId     JOIN          venue v ON c.citedPaperId = v.venueId     LEFT JOIN          journal j ON v.venueId = j.journalId     WHERE          v.venueName = 'ACL'          AND p.year = 2014 ), author_networks AS (     SELECT          w.authorId,         COUNT(DISTINCT w.paperId) AS paper_count,         AVG(w.writes_co_author_contribution_normalized) AS avg_co_author_contribution,         COUNT(DISTINCT w.co_author_count) AS distinct_co_author_count     FROM          writes w     JOIN          acl_citations ac ON w.paperId = ac.citingPaperId     GROUP BY          w.authorId ), dataset_usage AS (     SELECT          pd.paperId,         d.datasetName,         pd.paper_dataset_quality_score_normalized AS dataset_quality_score     FROM          paperDataset pd     JOIN          dataset d ON pd.datasetId = d.datasetId     WHERE          pd.paperId IN (SELECT citingPaperId FROM acl_citations) ) SELECT      a.authorName,     ac.citing_paper_year,     ac.cited_venue_name,     ac.cited_venue_impact_factor,     an.paper_count,     an.avg_co_author_contribution,     an.distinct_co_author_count,     du.datasetName,     du.dataset_quality_score FROM      author a JOIN      writes w ON a.authorId = w.authorId JOIN      acl_citations ac ON w.paperId = ac.citingPaperId JOIN      author_networks an ON a.authorId = an.authorId LEFT JOIN      dataset_usage du ON ac.citingPaperId = du.paperId ORDER BY      ac.citing_paper_quality_score DESC; ",
        "schema_links": [
            "journal.journalId",
            "cite.citedPaperId",
            "paper.paperId",
            "writes.paperId",
            "dataset.datasetId",
            "paperDataset.paper_dataset_quality_score_normalized",
            "paperDataset.paperId",
            "author.authorId",
            "cite.citingPaperId",
            "dataset.datasetName",
            "venue.venueId",
            "paperDataset.datasetId",
            "writes.authorId",
            "writes.writes_co_author_contribution_normalized",
            "paper.year",
            "writes.co_author_count",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "journal.impact_factor",
            "venue.venueName"
        ]
    },
    {
        "instance_id": "q_908",
        "db_id": "academic_research_data",
        "question": "Which researchers, identified by their name and ID, have contributed to papers with a normalized paper quality score greater than 0.8 that extensively utilize more than three distinct datasets, across different venues over the past five years? Additionally, provide the total number of citations received by these papers, the average paper quality score, and the number of distinct datasets used, grouped by the researcher and the venue (identified by venue ID and name). Sort the results in descending order of average paper quality score and total citations.",
        "query": " SELECT      a.authorName,     a.authorId,     p.venueId,     v.venueName,     SUM(p.numCitedBy) AS total_citations,     AVG(p.paper_quality_score) AS avg_paper_quality_score,     COUNT(DISTINCT pd.datasetId) AS num_datasets_used FROM      author a JOIN writes w ON a.authorId = w.authorId JOIN paper p ON w.paperId = p.paperId JOIN venue v ON p.venueId = v.venueId JOIN paperDataset pd ON p.paperId = pd.paperId WHERE      p.paper_quality_score_normalized > 0.8     AND p.year BETWEEN EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5 AND EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') GROUP BY      a.authorName, a.authorId, p.venueId, v.venueName HAVING      COUNT(DISTINCT pd.datasetId) > 3 ORDER BY      avg_paper_quality_score DESC, total_citations DESC; ",
        "schema_links": [
            "venue.venueId",
            "paperDataset.datasetId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "paper.paper_quality_score",
            "paper.numCitedBy",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "paperDataset.paperId",
            "venue.venueName",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_898",
        "db_id": "academic_research_data",
        "question": "Which research papers from the ACL 2014 conference, whose abstracts mention \"question-answering\", have been most influential in shaping the understanding of question-answering systems? Consider both the normalized quality scores of citations received by these papers and the trend of unique dataset usage over time, as reflected by the average normalized quality of datasets associated with each paper. Return the top 10 results, ordered first by total citation quality in descending order and then by average dataset quality in descending order.",
        "query": " SELECT      p.paperId,     p.title,     SUM(c.cited_paper_quality_score_normalized) AS total_citation_quality,     COUNT(DISTINCT pd.datasetId) AS unique_datasets_used,     AVG(pd.paper_dataset_quality_score_normalized) AS avg_dataset_quality FROM      paper p JOIN      cite c ON p.paperId = c.citedPaperId JOIN      paperDataset pd ON p.paperId = pd.paperId JOIN      venue v ON p.venueId = v.venueId WHERE      v.venueName = 'ACL'      AND p.year = 2014      AND p.paper_abstract ILIKE '%question-answering%' GROUP BY      p.paperId, p.title ORDER BY      total_citation_quality DESC, avg_dataset_quality DESC LIMIT 10; ",
        "schema_links": [
            "venue.venueId",
            "paperDataset.datasetId",
            "cite.cited_paper_quality_score_normalized",
            "cite.citedPaperId",
            "paper.paperId",
            "paper.venueId",
            "paper.year",
            "paperDataset.paper_dataset_quality_score_normalized",
            "paper.paper_abstract",
            "paperDataset.paperId",
            "paper.title",
            "venue.venueName"
        ]
    },
    {
        "instance_id": "q_900",
        "db_id": "academic_research_data",
        "question": "Which research papers discussing the keyphrase \"Parsing\" and referencing datasets related to \"game shows\" were published in conferences with a higher-than-average citation density among all conference papers? Additionally, provide the citation trend of these papers over the years. Include only papers authored by researchers who have demonstrated a consistent year-over-year increase in their normalized paper quality score across all their publications. List the paper ID, title, dataset name, and citation trend in the results.",
        "query": " SELECT      p.paperId,     p.title,     d.datasetName,     c.paper_citation_trend AS citation_trend FROM      paper p JOIN      writes w ON p.paperId = w.paperId JOIN      author a ON w.authorId = a.authorId JOIN      paperKeyphrase pk ON p.paperId = pk.paperId JOIN      keyphrase k ON pk.keyphraseId = k.keyphraseId JOIN      paperDataset pd ON p.paperId = pd.paperId JOIN      dataset d ON pd.datasetId = d.datasetId JOIN      venue v ON p.venueId = v.venueId LEFT JOIN      cite c ON p.paperId = c.citedPaperId WHERE      k.keyphraseName = 'Parsing'     AND d.datasetName LIKE '%game shows%'     AND v.venue_type = 'conference'     AND p.numCiting > (SELECT AVG(p2.numCiting) FROM paper p2 JOIN venue v2 ON p2.venueId = v2.venueId WHERE v2.venue_type = 'conference')     AND a.authorId IN (         SELECT wa.authorId         FROM writes wa         JOIN paper pa ON wa.paperId = pa.paperId         GROUP BY wa.authorId         HAVING BOOL_AND(pa.paper_quality_score_normalized > LAG(pa.paper_quality_score_normalized) OVER (PARTITION BY wa.authorId ORDER BY pa.year))     ) GROUP BY      p.paperId, p.title, d.datasetName, c.paper_citation_trend; ",
        "schema_links": [
            "cite.citedPaperId",
            "paper.paperId",
            "writes.paperId",
            "paperKeyphrase.keyphraseId",
            "dataset.datasetId",
            "cite.paper_citation_trend",
            "paperDataset.paperId",
            "keyphrase.keyphraseName",
            "author.authorId",
            "dataset.datasetName",
            "paperKeyphrase.paperId",
            "venue.venueId",
            "keyphrase.keyphraseId",
            "paperDataset.datasetId",
            "writes.authorId",
            "paper.year",
            "paper2.numCiting",
            "paper.numCiting",
            "venue.venue_type",
            "paper.paper_quality_score_normalized",
            "venue2.venue_type",
            "paper.title"
        ]
    },
    {
        "instance_id": "q_899",
        "db_id": "academic_research_data",
        "question": "Which conference venue has the highest concentration of high-quality papers related to deep learning, considering both the average citation count and the average quality score of papers published in the past five years, where the normalized quality score of each paper exceeds 0.8? Provide the venue ID, venue name, average citation count, average paper quality score, and total count of such high-quality papers, ranked first by descending average paper quality, then by descending average citation count, and finally by descending paper count.",
        "query": " WITH high_quality_papers AS (     SELECT          p.paperId,         p.venueId,         p.paper_quality_score_normalized,         p.numCiting,         p.year     FROM          paper p     INNER JOIN          paperKeyphrase pk ON p.paperId = pk.paperId     INNER JOIN          keyphrase k ON pk.keyphraseId = k.keyphraseId     WHERE          k.keyphraseName ILIKE '%deep learning%'         AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5         AND p.paper_quality_score_normalized > 0.8 ), citation_density AS (     SELECT          hqp.venueId,         AVG(hqp.numCiting) AS avg_citations,         AVG(hqp.paper_quality_score_normalized) AS avg_paper_quality     FROM          high_quality_papers hqp     GROUP BY          hqp.venueId ), venue_concentration AS (     SELECT          cd.venueId,         v.venueName,         cd.avg_citations,         cd.avg_paper_quality,         COUNT(hqp.paperId) AS paper_count     FROM          citation_density cd     INNER JOIN          venue v ON cd.venueId = v.venueId     INNER JOIN          high_quality_papers hqp ON cd.venueId = hqp.venueId     WHERE          v.venue_type = 'conference'     GROUP BY          cd.venueId, v.venueName, cd.avg_citations, cd.avg_paper_quality ) SELECT      vc.venueId,     vc.venueName,     vc.avg_citations,     vc.avg_paper_quality,     vc.paper_count FROM      venue_concentration vc ORDER BY      vc.avg_paper_quality DESC, vc.avg_citations DESC, vc.paper_count DESC LIMIT 1; ",
        "schema_links": [
            "paperKeyphrase.paperId",
            "venue.venueId",
            "keyphrase.keyphraseId",
            "paper.paperId",
            "paper.venueId",
            "paper.year",
            "paperKeyphrase.keyphraseId",
            "paper.numCiting",
            "venue.venue_type",
            "paper.paper_quality_score_normalized",
            "keyphrase.keyphraseName",
            "venue.venueName"
        ]
    },
    {
        "instance_id": "q_910",
        "db_id": "academic_research_data",
        "question": "Which papers authored by Ali Farhadi in 2016 have been cited by other works with a normalized citing paper quality score greater than 0.8, and how do these citations vary across different conferences and journals? Additionally, for these papers, what is the trend of dataset usage over time, including the total usage count, the first year of usage, and the last year of usage for each associated dataset?",
        "query": " WITH ali_papers AS (     SELECT          p.paperId,          p.title,          p.year,          p.venueId,          v.venueName,          v.venue_type     FROM          paper p     JOIN          writes w ON p.paperId = w.paperId     JOIN          author a ON w.authorId = a.authorId     LEFT JOIN          venue v ON p.venueId = v.venueId     WHERE          a.authorName = 'Ali Farhadi'          AND p.year = 2016 ), high_quality_citations AS (     SELECT          c.citedPaperId,          c.citing_paper_quality_score_normalized,          p.venueId,          v.venueName,          v.venue_type     FROM          cite c     JOIN          paper p ON c.citingPaperId = p.paperId     LEFT JOIN          venue v ON p.venueId = v.venueId     WHERE          c.citing_paper_quality_score_normalized > 0.8 ), citation_trends AS (     SELECT          ap.paperId,          ap.title,          hqc.venueName AS citing_venue,          hqc.venue_type AS citing_venue_type,          COUNT(*) AS citation_count     FROM          ali_papers ap     JOIN          high_quality_citations hqc ON ap.paperId = hqc.citedPaperId     GROUP BY          ap.paperId, ap.title, hqc.venueName, hqc.venue_type ), dataset_usage_trends AS (     SELECT          pd.paperId,          d.datasetName,          SUM(pd.dataset_paper_count) AS total_usage,          MIN(p.year) AS first_used_year,          MAX(p.year) AS last_used_year     FROM          paperDataset pd     JOIN          dataset d ON pd.datasetId = d.datasetId     JOIN          paper p ON pd.paperId = p.paperId     WHERE          p.paperId IN (SELECT paperId FROM ali_papers)     GROUP BY          pd.paperId, d.datasetName ) SELECT      ct.paperId,      ct.title,      ct.citing_venue,      ct.citing_venue_type,      ct.citation_count,      dut.datasetName,      dut.total_usage,      dut.first_used_year,      dut.last_used_year FROM      citation_trends ct LEFT JOIN      dataset_usage_trends dut ON ct.paperId = dut.paperId; ",
        "schema_links": [
            "cite.citing_paper_quality_score_normalized",
            "venue.venueId",
            "paperDataset.datasetId",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "paper.venueId",
            "dataset.datasetName",
            "writes.paperId",
            "paper.year",
            "dataset.datasetId",
            "venue.venue_type",
            "author.authorName",
            "paperDataset.paperId",
            "cite.citingPaperId",
            "paper.title",
            "venue.venueName",
            "author.authorId",
            "paperDataset.dataset_paper_count"
        ]
    },
    {
        "instance_id": "q_913",
        "db_id": "academic_research_data",
        "question": "What are the citation trends and research impacts of papers authored by Ali Farhadi in computer vision-related conferences between 2015 and 2017, specifically focusing on venues with above-average citation density and paper quality? List the results in descending order of citation count and paper quality score. Include the paper ID, title, publication year, citation count, paper quality score, venue name, and venue impact factor in the output.",
        "query": " SELECT      p.paperId,     p.title,     p.year,     p.numCiting AS citation_count,     p.paper_quality_score AS paper_quality,     v.venueName,     v.impact_factor AS venue_impact_factor FROM      paper p JOIN      writes w ON p.paperId = w.paperId JOIN      author a ON w.authorId = a.authorId JOIN      venue v ON p.venueId = v.venueId WHERE      a.authorName = 'Ali Farhadi'     AND p.year BETWEEN 2015 AND 2017     AND v.venue_type = 'conference'     AND 'computer vision' = ANY(a.author_research_interests_normalized)     AND v.impact_factor > (SELECT AVG(impact_factor) FROM venue WHERE venue_type = 'conference')     AND p.numCiting > (SELECT AVG(numCiting) FROM paper WHERE year BETWEEN 2015 AND 2017) ORDER BY      p.numCiting DESC,     p.paper_quality_score DESC; ",
        "schema_links": [
            "venue.impact_factor",
            "venue.venueId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "author.author_research_interests_normalized",
            "paper.paper_quality_score",
            "paper.numCiting",
            "venue.venue_type",
            "author.authorName",
            "paper.title",
            "venue.venueName",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_902",
        "db_id": "academic_research_data",
        "question": "What are the high-quality publications authored by Ali Farhadi in 2016, where the papers have a significant impact on dataset usage and strong relevance to key research phrases? Include details on the citation count, quality score of the papers, the number of times these papers influence dataset usage, the dataset influence score, the frequency of associated keyphrases, and the weighted relevance of these keyphrases over time. Only consider papers with a quality score of 8.0 or higher, dataset usage counts exceeding 50, and weighted keyphrase relevance scores of at least 0.7. Sort the results by citation count in descending order, followed by dataset influence score and weighted keyphrase relevance in descending order.",
        "query": " SELECT      p.paperId,     p.title,     p.numCiting AS citation_count,     p.paper_quality_score AS quality_score,     pd.dataset_paper_count AS dataset_usage_count,     pd.paper_dataset_quality_score AS dataset_influence_score,     pk.keyphrase_frequency AS keyphrase_relevance,     pk.paper_keyphrase_weighted_frequency AS weighted_keyphrase_relevance,     p.year AS publication_year FROM      paper p JOIN      writes w ON p.paperId = w.paperId JOIN      author a ON w.authorId = a.authorId LEFT JOIN      paperDataset pd ON p.paperId = pd.paperId LEFT JOIN      paperKeyphrase pk ON p.paperId = pk.paperId WHERE      a.authorName = 'Ali Farhadi'     AND p.year = 2016     AND p.paper_quality_score >= 8.0     AND pd.dataset_paper_count > 50     AND pk.paper_keyphrase_weighted_frequency >= 0.7 ORDER BY      p.numCiting DESC,     pd.paper_dataset_quality_score DESC,     pk.paper_keyphrase_weighted_frequency DESC; ",
        "schema_links": [
            "paperKeyphrase.paperId",
            "paperKeyphrase.keyphrase_frequency",
            "writes.authorId",
            "paperKeyphrase.paper_keyphrase_weighted_frequency",
            "paper.paperId",
            "writes.paperId",
            "paper.year",
            "paper.paper_quality_score",
            "paper.numCiting",
            "author.authorName",
            "paperDataset.paper_dataset_quality_score",
            "paperDataset.paperId",
            "paper.title",
            "author.authorId",
            "paperDataset.dataset_paper_count"
        ]
    },
    {
        "instance_id": "q_907",
        "db_id": "academic_research_data",
        "question": "Which research papers, considering only open-access papers, are most closely associated with the concept of \"semantic data,\" based on their normalized quality scores, the impact factors of the venues where they were published, and the normalized weighted frequency of the keyphrase \"semantic data\"? Additionally, for these papers, what is the trend of citations over time, measured by the normalized citation trend and the age of the paper? Finally, which datasets, having a download count exceeding 1,000, have been frequently utilized in conjunction with these papers, and what is the normalized relevance score of these datasets to the respective papers? The results should be ordered by descending normalized quality score, descending venue impact factor, descending keyphrase relevance, and descending citation trend.",
        "query": " WITH relevant_papers AS (     SELECT          p.paperId,         p.title,         p.paper_quality_score_normalized AS quality_score,         v.impact_factor AS venue_prominence,         pk.paper_keyphrase_weighted_frequency_normalized AS keyphrase_relevance     FROM          paper p     JOIN          paperKeyphrase pk ON p.paperId = pk.paperId     JOIN          keyphrase k ON pk.keyphraseId = k.keyphraseId     JOIN          venue v ON p.venueId = v.venueId     WHERE          k.keyphraseName ILIKE '%semantic data%'         AND p.is_open_access = TRUE ), citation_trends AS (     SELECT          c.citedPaperId,         c.paper_citation_trend_normalized AS citation_trend,         EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - p.year AS age     FROM          cite c     JOIN          paper p ON c.citedPaperId = p.paperId     WHERE          c.cited_paper_quality_score_normalized > 0.5 ), frequent_datasets AS (     SELECT          pd.paperId,         d.datasetName,         pd.paper_dataset_quality_score_normalized AS dataset_relevance     FROM          paperDataset pd     JOIN          dataset d ON pd.datasetId = d.datasetId     WHERE          d.dataset_download_count > 1000 ) SELECT      rp.paperId,     rp.title,     rp.quality_score,     rp.venue_prominence,     rp.keyphrase_relevance,     ct.citation_trend,     ct.age,     fd.datasetName,     fd.dataset_relevance FROM      relevant_papers rp LEFT JOIN      citation_trends ct ON rp.paperId = ct.citedPaperId LEFT JOIN      frequent_datasets fd ON rp.paperId = fd.paperId ORDER BY      rp.quality_score DESC,      rp.venue_prominence DESC,      rp.keyphrase_relevance DESC,      ct.citation_trend DESC; ",
        "schema_links": [
            "cite.cited_paper_quality_score_normalized",
            "cite.citedPaperId",
            "paper.paperId",
            "paperKeyphrase.keyphraseId",
            "paperKeyphrase.paper_keyphrase_weighted_frequency_normalized",
            "dataset.datasetId",
            "paperDataset.paper_dataset_quality_score_normalized",
            "paperDataset.paperId",
            "keyphrase.keyphraseName",
            "dataset.datasetName",
            "venue.impact_factor",
            "paperKeyphrase.paperId",
            "venue.venueId",
            "keyphrase.keyphraseId",
            "cite.paper_citation_trend_normalized",
            "paperDataset.datasetId",
            "paper.is_open_access",
            "paper.venueId",
            "paper.year",
            "dataset.dataset_download_count",
            "paper.paper_quality_score_normalized",
            "paper.title"
        ]
    },
    {
        "instance_id": "q_903",
        "db_id": "academic_research_data",
        "question": "Which authors from China have the highest weighted citation scores for their publications in the last five years, considering both the journal impact factors and the number of distinct datasets used in their papers? The weighted citation score is calculated by multiplying the number of citations each publication has received by the impact factor of the journal in which it was published. The results should be ordered first by descending weighted citation score and then by descending count of distinct datasets used, limited to the top 10 authors.",
        "query": " SELECT      a.authorName,      SUM(p.numCitedBy * j.impact_factor) AS weighted_citation_score,      COUNT(DISTINCT pd.datasetId) AS dataset_usage_count FROM      author a JOIN      writes w ON a.authorId = w.authorId JOIN      paper p ON w.paperId = p.paperId JOIN      journal j ON p.venueId = j.journalId LEFT JOIN      paperDataset pd ON p.paperId = pd.paperId WHERE      a.author_country = 'China'     AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5 GROUP BY      a.authorName ORDER BY      weighted_citation_score DESC,      dataset_usage_count DESC LIMIT 10; ",
        "schema_links": [
            "journal.journalId",
            "paperDataset.datasetId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "author.author_country",
            "paper.numCitedBy",
            "author.authorName",
            "journal.impact_factor",
            "paperDataset.paperId",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_909",
        "db_id": "academic_research_data",
        "question": "Which authors have the highest influence in conferences related to human-computer interaction, considering both the total number of papers published and the weighted quality of citations received over the past five years? The weighted citation quality is calculated by multiplying the number of citations each paper received by the normalized quality score of those citations. Only authors whose normalized research interests include human-computer interaction are considered, and the results are limited to the top 10 authors based on the combined metrics of published papers and citation quality.",
        "query": " SELECT      a.authorId,     a.authorName,     SUM(w.co_author_count) AS total_papers_published,     SUM(p.numCitedBy * c.cited_paper_quality_score_normalized) AS weighted_citation_quality FROM      author a JOIN      writes w ON a.authorId = w.authorId JOIN      paper p ON w.paperId = p.paperId JOIN      cite c ON p.paperId = c.citedPaperId JOIN      venue v ON p.venueId = v.venueId WHERE      v.venue_type = 'conference'     AND 'human-computer interaction' = ANY(a.author_research_interests_normalized)     AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5 GROUP BY      a.authorId, a.authorName ORDER BY      total_papers_published DESC, weighted_citation_quality DESC LIMIT 10; ",
        "schema_links": [
            "venue.venueId",
            "cite.cited_paper_quality_score_normalized",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "author.author_research_interests_normalized",
            "paper.numCitedBy",
            "writes.co_author_count",
            "venue.venue_type",
            "author.authorName",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_906",
        "db_id": "academic_research_data",
        "question": "Which author from China has the highest influence in the past decade, based on the weighted quality of their publications (considering co-author contributions), the total quality of citations received, and the average impact factor of the venues where their papers were published, while also taking into account the significance of their research areas?",
        "query": " SELECT      a.authorId,     a.authorName,     SUM(p.paper_quality_score_normalized * w.writes_co_author_contribution_normalized) AS weighted_paper_quality,     COUNT(DISTINCT p.paperId) AS paper_count,     SUM(c.citing_paper_quality_score_normalized) AS total_citation_quality,     AVG(v.impact_factor) AS avg_venue_impact FROM      author a JOIN      writes w ON a.authorId = w.authorId JOIN      paper p ON w.paperId = p.paperId LEFT JOIN      cite c ON p.paperId = c.citedPaperId JOIN      venue v ON p.venueId = v.venueId WHERE      a.author_country = 'CHI'     AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 10 GROUP BY      a.authorId, a.authorName ORDER BY      weighted_paper_quality DESC, total_citation_quality DESC, avg_venue_impact DESC LIMIT 1; ",
        "schema_links": [
            "cite.citing_paper_quality_score_normalized",
            "venue.impact_factor",
            "venue.venueId",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "writes.writes_co_author_contribution_normalized",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "author.author_country",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_905",
        "db_id": "academic_research_data",
        "question": "Which researchers have the highest influence in conferences with names containing \"chi,\" considering both the total number of publications and the average quality of citations received over the past five years? Provide results for up to 10 researchers, ranked first by the total number of publications in descending order and then by the total quality of citations in descending order.",
        "query": " SELECT      a.authorId,     a.authorName,     SUM(w.co_author_count) AS total_publications,     AVG(p.paper_quality_score_normalized) AS avg_paper_quality,     SUM(c.cited_paper_quality_score_normalized) AS total_citation_quality FROM      author a JOIN      writes w ON a.authorId = w.authorId JOIN      paper p ON w.paperId = p.paperId JOIN      cite c ON p.paperId = c.citedPaperId JOIN      venue v ON p.venueId = v.venueId WHERE      v.venueName ILIKE '%chi%'     AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5 GROUP BY      a.authorId, a.authorName ORDER BY      total_publications DESC, total_citation_quality DESC LIMIT 10; ",
        "schema_links": [
            "venue.venueId",
            "cite.cited_paper_quality_score_normalized",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "writes.co_author_count",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "venue.venueName",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_911",
        "db_id": "academic_research_data",
        "question": "In which year did Ye Cao experience the highest combined growth in both the number of publications and the quality of citations received, compared to the previous year?",
        "query": " WITH yearly_impact AS (     SELECT          p.year,         COUNT(p.paperId) AS publication_count,         SUM(c.cited_paper_quality_score_normalized) AS quality_citations     FROM          paper p     JOIN          writes w ON p.paperId = w.paperId     JOIN          cite c ON p.paperId = c.citedPaperId     WHERE          w.authorId = (SELECT authorId FROM author WHERE authorName = 'Ye Cao')     GROUP BY          p.year ), impact_growth AS (     SELECT          year,         publication_count,         quality_citations,         (publication_count - LAG(publication_count) OVER (ORDER BY year)) AS pub_growth,         (quality_citations - LAG(quality_citations) OVER (ORDER BY year)) AS citation_growth     FROM          yearly_impact ) SELECT      year FROM      impact_growth WHERE      (pub_growth IS NOT NULL AND citation_growth IS NOT NULL) ORDER BY      SQRT(pub_growth * pub_growth + citation_growth * citation_growth) DESC LIMIT 1; ",
        "schema_links": [
            "writes.paperId",
            "paper.year",
            "author.authorName",
            "cite.cited_paper_quality_score_normalized",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_914",
        "db_id": "academic_research_data",
        "question": "在哪些年份，Ye Cao 发表的论文同时满足以下条件时，其引用质量与发表数量的综合影响最大：论文引用了用户评分为4.5及以上的高质量数据集，并且发表在影响因子不低于10的顶级期刊或顶级会议（包括类型为“top conference”和“top journal”的场所）？请按照引用数量总和与论文质量归一化评分平均值的乘积进行排序，并返回影响最大的年份。",
        "query": " SELECT p.year  FROM paper p JOIN writes w ON p.paperId = w.paperId JOIN author a ON w.authorId = a.authorId JOIN paperDataset pd ON p.paperId = pd.paperId JOIN dataset d ON pd.datasetId = d.datasetId JOIN venue v ON p.venueId = v.venueId WHERE a.authorName = 'Ye Cao'   AND d.dataset_user_rating >= 4.5   AND (v.impact_factor >= 10 OR v.venue_type IN ('top conference', 'top journal')) GROUP BY p.year ORDER BY SUM(p.numCitedBy) * AVG(p.paper_quality_score_normalized) DESC LIMIT 1; ",
        "schema_links": [
            "venue.impact_factor",
            "dataset.dataset_user_rating",
            "venue.venueId",
            "paperDataset.datasetId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "dataset.datasetId",
            "paper.numCitedBy",
            "venue.venue_type",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "paperDataset.paperId",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_912",
        "db_id": "academic_research_data",
        "question": "Which conferences in the field of NLP have the highest influence over the past five years, considering the number of papers published, the average quality of these papers, the total normalized citation quality, and the average h-index of the authors? Please rank the results by total citation quality in descending order, followed by average paper quality and average author h-index, and limit the output to the top 10 conferences.",
        "query": " SELECT      v.venueName AS conference_name,     COUNT(DISTINCT p.paperId) AS paper_count,     AVG(p.paper_quality_score_normalized) AS avg_paper_quality,     SUM(c.cited_paper_quality_score_normalized) AS total_citation_quality,     AVG(a.h_index) AS avg_author_h_index FROM      venue v JOIN      paper p ON v.venueId = p.venueId JOIN      cite c ON p.paperId = c.citedPaperId JOIN      writes w ON p.paperId = w.paperId JOIN      author a ON w.authorId = a.authorId WHERE      v.venue_type = 'conference'     AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5     AND 'NLP' = ANY(a.author_research_interests_normalized) GROUP BY      v.venueName ORDER BY      total_citation_quality DESC,     avg_paper_quality DESC,     avg_author_h_index DESC LIMIT 10; ",
        "schema_links": [
            "venue.venueId",
            "cite.cited_paper_quality_score_normalized",
            "cite.citedPaperId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "author.author_research_interests_normalized",
            "author.h_index",
            "venue.venue_type",
            "paper.paper_quality_score_normalized",
            "venue.venueName",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_918",
        "db_id": "academic_research_data",
        "question": "Among Brian DeRenzi's publications, which keyphrase has the highest citation quality score when considering both the relevance of the keyphrase (measured by its weighted frequency normalized) and the trend of citations over time (indicated by the normalized quality score of cited papers)?",
        "query": " SELECT      pk.keyphraseName AS keyphrase,      SUM(c.cited_paper_quality_score_normalized * pk.paper_keyphrase_weighted_frequency_normalized) AS citation_quality_score FROM      author a JOIN      writes w ON a.authorId = w.authorId JOIN      paper p ON w.paperId = p.paperId JOIN      cite c ON p.paperId = c.citedPaperId JOIN      paperKeyphrase pk ON p.paperId = pk.paperId WHERE      a.authorName = 'Brian DeRenzi' GROUP BY      pk.keyphraseName ORDER BY      citation_quality_score DESC LIMIT 1; ",
        "schema_links": [
            "writes.paperId",
            "paperKeyphrase.paper_keyphrase_weighted_frequency_normalized",
            "paperKeyphrase.paperId",
            "author.authorName",
            "cite.cited_paper_quality_score_normalized",
            "cite.citedPaperId",
            "writes.authorId",
            "paperKeyphrase.keyphraseName",
            "paper.paperId",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_919",
        "db_id": "academic_research_data",
        "question": "What are the key research areas and influential papers of Brian DeRenzi over the past decade, considering the citation trends and quality of venues where his work has been published? Specifically, identify the papers' titles, publication years, citation counts (both incoming and outgoing), normalized paper quality scores, venue names, and venue impact factors. Additionally, list the associated keyphrases and datasets for each paper. Finally, rank the results by publication year in descending order, total citation quality in descending order, and paper quality score in descending order to analyze how his research interests have evolved over time.",
        "query": " WITH brian_papers AS (     SELECT          p.paperId,         p.title,         p.year,         p.numCiting,         p.numCitedBy,         p.paper_quality_score_normalized,         v.venueName,         v.impact_factor,         ARRAY_AGG(DISTINCT pk.keyphraseName) AS keyphrases,         ARRAY_AGG(DISTINCT d.datasetName) AS datasets     FROM          author a     JOIN writes w ON a.authorId = w.authorId     JOIN paper p ON w.paperId = p.paperId     LEFT JOIN venue v ON p.venueId = v.venueId     LEFT JOIN paperKeyphrase pk ON p.paperId = pk.paperId     LEFT JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId     LEFT JOIN paperDataset pd ON p.paperId = pd.paperId     LEFT JOIN dataset d ON pd.datasetId = d.datasetId     WHERE          a.authorName = 'Brian DeRenzi'          AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 10     GROUP BY          p.paperId, p.title, p.year, p.numCiting, p.numCitedBy, p.paper_quality_score_normalized, v.venueName, v.impact_factor ), citation_trends AS (     SELECT          c.citedPaperId,         SUM(c.citing_paper_quality_score_normalized) AS total_citation_quality     FROM          cite c     JOIN brian_papers bp ON c.citedPaperId = bp.paperId     WHERE          c.citing_paper_quality_score_normalized IS NOT NULL     GROUP BY          c.citedPaperId ) SELECT      bp.title,     bp.year,     bp.numCiting,     bp.numCitedBy,     bp.paper_quality_score_normalized,     bp.venueName,     bp.impact_factor,     bp.keyphrases,     bp.datasets,     ct.total_citation_quality FROM      brian_papers bp LEFT JOIN citation_trends ct ON bp.paperId = ct.citedPaperId ORDER BY      bp.year DESC, ct.total_citation_quality DESC, bp.paper_quality_score_normalized DESC; ",
        "schema_links": [
            "cite.citedPaperId",
            "citation_trends.citedPaperId",
            "paper.paperId",
            "writes.paperId",
            "paperKeyphrase.keyphraseId",
            "dataset.datasetId",
            "paper.numCitedBy",
            "keyphrase.keyphraseName",
            "paperDataset.paperId",
            "author.authorId",
            "dataset.datasetName",
            "cite.citing_paper_quality_score_normalized",
            "venue.impact_factor",
            "paperKeyphrase.paperId",
            "venue.venueId",
            "keyphrase.keyphraseId",
            "paperDataset.datasetId",
            "writes.authorId",
            "paperKeyphrase.keyphraseName",
            "paper.venueId",
            "paper.year",
            "paper.numCiting",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "brian_papers.paperId",
            "paper.title",
            "venue.venueName"
        ]
    },
    {
        "instance_id": "q_916",
        "db_id": "academic_research_data",
        "question": "What is the annual publication count, total citation quality score, and average venue influence of Michael Stonebraker's papers in GIS-related conferences over the past 10 years, where citation quality is measured by the normalized quality score of citing papers and venue influence is determined by the average impact factor of associated journals?",
        "query": " SELECT      p.year AS publication_year,     COUNT(p.paperId) AS publication_count,     SUM(c.cited_paper_quality_score_normalized) AS total_citation_quality,     AVG(j.impact_factor) AS avg_venue_influence FROM      paper p JOIN      writes w ON p.paperId = w.paperId JOIN      author a ON w.authorId = a.authorId JOIN      cite c ON p.paperId = c.citedPaperId JOIN      venue v ON p.venueId = v.venueId LEFT JOIN      journal j ON v.venueId = j.journalId WHERE      a.authorName = 'Michael Stonebraker'      AND v.venue_type = 'conference'      AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 10      AND LOWER(a.author_research_interests::text) LIKE '%gis%' GROUP BY      p.year ORDER BY      p.year ASC; ",
        "schema_links": [
            "journal.journalId",
            "venue.venueId",
            "cite.cited_paper_quality_score_normalized",
            "author.author_research_interests",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "venue.venue_type",
            "author.authorName",
            "journal.impact_factor",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_915",
        "db_id": "academic_research_data",
        "question": "In which year did Michael Stonebraker contribute to a research paper in the field of GIS databases that had a significant influence, as evidenced by both strong citation trends and publication in high-quality venues? Specifically, consider papers with a normalized quality score greater than 0.8 for citing papers, an impact factor greater than 3.0 for the venues where the citing papers were published, and a normalized citation trend score greater than 0.7. The result should be based on the year with the highest number of citations and, in case of a tie, the highest average normalized quality score of the citing papers.",
        "query": " SELECT p.year  FROM paper p JOIN writes w ON p.paperId = w.paperId JOIN author a ON w.authorId = a.authorId JOIN cite c ON p.paperId = c.citedPaperId JOIN paper citing_p ON c.citingPaperId = citing_p.paperId JOIN venue v ON citing_p.venueId = v.venueId WHERE a.authorName = 'Michael Stonebraker'   AND citing_p.paper_quality_score_normalized > 0.8   AND v.impact_factor > 3.0   AND c.paper_citation_trend_normalized > 0.7   AND p.paper_keywords_normalized @> ARRAY['GIS', 'databases'] GROUP BY p.year ORDER BY COUNT(c.citingPaperId) DESC, AVG(citing_p.paper_quality_score_normalized) DESC LIMIT 1; ",
        "schema_links": [
            "venue.impact_factor",
            "paper.paper_keywords_normalized",
            "venue.venueId",
            "cite.paper_citation_trend_normalized",
            "writes.authorId",
            "cite.citedPaperId",
            "citing_p.paper_quality_score_normalized",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "author.authorId",
            "cite.citingPaperId"
        ]
    },
    {
        "instance_id": "q_917",
        "db_id": "academic_research_data",
        "question": "In which year did Michael Stonebraker contribute to a paper that significantly influenced the GIS domain, as evidenced by the paper being cited in high-quality venues with an impact factor greater than 2.0, where the normalized quality score of the citing papers exceeded 0.8, and the aggregated normalized quality score of all citations was greater than 10?",
        "query": " SELECT p.year FROM paper p JOIN writes w ON p.paperId = w.paperId JOIN author a ON w.authorId = a.authorId JOIN cite c ON p.paperId = c.citedPaperId JOIN paper citing_p ON c.citingPaperId = citing_p.paperId JOIN venue v ON citing_p.venueId = v.venueId WHERE a.authorName = 'Michael Stonebraker'   AND citing_p.paper_keywords_normalized && ARRAY['GIS']::text[]   AND citing_p.paper_quality_score_normalized > 0.8   AND v.impact_factor > 2.0 GROUP BY p.year HAVING SUM(c.citing_paper_quality_score_normalized) > 10 ORDER BY p.year DESC LIMIT 1; ",
        "schema_links": [
            "cite.citing_paper_quality_score_normalized",
            "venue.impact_factor",
            "paper.paper_keywords_normalized",
            "venue.venueId",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "author.authorId",
            "cite.citingPaperId"
        ]
    },
    {
        "instance_id": "q_920",
        "db_id": "academic_research_data",
        "question": "Which research paper presented at CVPR in the current year has the highest combined citation quality score, calculated as the product of the number of citations and the paper quality score?",
        "query": " SELECT      p.paperId,      p.title,      p.numCiting,      p.paper_quality_score AS citation_quality_score FROM      paper p JOIN      venue v ON p.venueId = v.venueId WHERE      v.venueName = 'CVPR'      AND p.year = EXTRACT(YEAR FROM CURRENT_DATE) ORDER BY      (p.numCiting * p.paper_quality_score) DESC LIMIT 1; ",
        "schema_links": [
            "paper.year",
            "venue.venueName",
            "paper.paper_quality_score",
            "paper.numCiting",
            "venue.venueId",
            "paper.title",
            "paper.paperId",
            "paper.venueId"
        ]
    },
    {
        "instance_id": "q_921",
        "db_id": "academic_research_data",
        "question": "What is the annual trend of citations received by Luke Zettlemoyer's publications over the years, broken down by the quality score and citation source of those citations? Additionally, how does this trend compare to the average annual citation trend for authors in the research areas of Natural Language Processing and Machine Learning over the past five years, considering both the average quality score and citation count per author, grouped by citation source?",
        "query": " WITH luke_zettlemoyer_citations AS (     SELECT          p.year,         c.cited_paper_quality_score AS quality_score,         c.paper_citation_source AS citation_source,         COUNT(c.citedPaperId) AS citation_count     FROM          paper p     JOIN          writes w ON p.paperId = w.paperId     JOIN          author a ON w.authorId = a.authorId     JOIN          cite c ON p.paperId = c.citedPaperId     WHERE          a.authorName = 'Luke Zettlemoyer'     GROUP BY          p.year, c.cited_paper_quality_score, c.paper_citation_source ), research_area_avg_citations AS (     SELECT          p.year,         AVG(c.cited_paper_quality_score) AS avg_quality_score,         c.paper_citation_source AS citation_source,         COUNT(c.citedPaperId) / COUNT(DISTINCT a.authorId) AS avg_citation_count     FROM          paper p     JOIN          writes w ON p.paperId = w.paperId     JOIN          author a ON w.authorId = a.authorId     JOIN          cite c ON p.paperId = c.citedPaperId     WHERE          a.author_research_interests && ARRAY['Natural Language Processing', 'Machine Learning']         AND p.year > EXTRACT(YEAR FROM CURRENT_DATE) - 5     GROUP BY          p.year, c.paper_citation_source ) SELECT      lz.year,     lz.quality_score AS luke_quality_score,     lz.citation_source AS luke_citation_source,     lz.citation_count AS luke_citation_count,     ra.avg_quality_score AS area_avg_quality_score,     ra.citation_source AS area_avg_citation_source,     ra.avg_citation_count AS area_avg_citation_count FROM      luke_zettlemoyer_citations lz LEFT JOIN      research_area_avg_citations ra ON      lz.year = ra.year AND lz.citation_source = ra.citation_source ORDER BY      lz.year; ",
        "schema_links": [
            "cite.cited_paper_quality_score",
            "author.author_research_interests",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "writes.paperId",
            "paper.year",
            "author.authorName",
            "cite.paper_citation_source",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_922",
        "db_id": "academic_research_data",
        "question": "Which researchers have authored papers involving large-scale image datasets (with a size exceeding 1 million records) over the past five years, and how has their research impact evolved during this period, measured by both the total number of citations received and the average quality score of their papers? Please rank the results first by the total number of citations in descending order, and then by the average paper quality score in descending order.",
        "query": " WITH relevant_papers AS (     SELECT DISTINCT p.paperId, p.paper_quality_score_normalized, p.numCitedBy, p.year     FROM paper p     JOIN paperDataset pd ON p.paperId = pd.paperId     JOIN dataset d ON pd.datasetId = d.datasetId     WHERE d.dataset_size > 1000000 -- Assuming large-scale means over 1 million records       AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5 ), researcher_contribution AS (     SELECT w.authorId, r.authorName, SUM(rp.numCitedBy) AS total_citations, AVG(rp.paper_quality_score_normalized) AS avg_paper_quality     FROM writes w     JOIN relevant_papers rp ON w.paperId = rp.paperId     JOIN author r ON w.authorId = r.authorId     GROUP BY w.authorId, r.authorName ) SELECT rc.authorId, rc.authorName, rc.total_citations, rc.avg_paper_quality FROM researcher_contribution rc ORDER BY rc.total_citations DESC, rc.avg_paper_quality DESC; ",
        "schema_links": [
            "dataset.dataset_size",
            "paperDataset.datasetId",
            "writes.authorId",
            "paper.paperId",
            "writes.paperId",
            "paper.year",
            "dataset.datasetId",
            "paper.numCitedBy",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "paperDataset.paperId",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_926",
        "db_id": "academic_research_data",
        "question": "在“Liquid Automatica”领域的高质量论文中，哪些研究者的论文被频繁引用（引用次数超过5篇），且其研究兴趣与Eric C. Kerrigan的研究兴趣高度相关？请进一步分析这些研究者的合作网络特征，包括平均合著者数量和总合作贡献度，并评估他们在过去五年内的学术影响力趋势（通过最近五年引用次数占总引用次数的比例来衡量）。最终结果按影响力趋势降序排列，若影响力趋势相同，则按被引用论文数量降序排列。",
        "query": " WITH eric_kerrigan_interests AS (     SELECT unnest(author_research_interests_normalized) AS interest     FROM scholar_new.author     WHERE authorName = 'Eric C. Kerrigan' ), high_quality_papers AS (     SELECT DISTINCT paperId     FROM scholar_new.paper     WHERE paper_quality_score_normalized > 0.8       AND numCitedBy > 100       AND year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5       AND venueId IN (           SELECT venueId           FROM scholar_new.venue           WHERE venueName ILIKE '%Liquid Automatica%'       ) ), frequent_cited_authors AS (     SELECT w.authorId, COUNT(DISTINCT p.paperId) AS cited_paper_count     FROM scholar_new.writes w     JOIN high_quality_papers p ON w.paperId = p.paperId     GROUP BY w.authorId     HAVING COUNT(DISTINCT p.paperId) > 5 ), relevant_authors AS (     SELECT fa.authorId, a.authorName, a.author_research_interests_normalized, fa.cited_paper_count     FROM frequent_cited_authors fa     JOIN scholar_new.author a ON fa.authorId = a.authorId     WHERE EXISTS (         SELECT 1         FROM eric_kerrigan_interests eki         WHERE eki.interest = ANY(a.author_research_interests_normalized)     ) ), co_author_network AS (     SELECT ra.authorId, AVG(w.co_author_count) AS avg_co_author_count, SUM(w.co_author_contribution_normalized) AS total_co_author_contribution     FROM relevant_authors ra     JOIN scholar_new.writes w ON ra.authorId = w.authorId     GROUP BY ra.authorId ), academic_influence_trend AS (     SELECT ra.authorId,             SUM(p.numCitedBy) FILTER (WHERE p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5) AS recent_citations,            SUM(p.numCitedBy) AS total_citations     FROM relevant_authors ra     JOIN scholar_new.writes w ON ra.authorId = w.authorId     JOIN scholar_new.paper p ON w.paperId = p.paperId     GROUP BY ra.authorId ) SELECT ra.authorId, ra.authorName, ra.cited_paper_count, cn.avg_co_author_count, cn.total_co_author_contribution,         ai.recent_citations, ai.total_citations,         CASE WHEN ai.total_citations > 0 THEN (ai.recent_citations::float / ai.total_citations) ELSE 0 END AS influence_trend FROM relevant_authors ra JOIN co_author_network cn ON ra.authorId = cn.authorId JOIN academic_influence_trend ai ON ra.authorId = ai.authorId ORDER BY influence_trend DESC, cited_paper_count DESC; ",
        "schema_links": [
            "venue.venueId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "author.author_research_interests_normalized",
            "writes.co_author_contribution_normalized",
            "paper.numCitedBy",
            "writes.co_author_count",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "venue.venueName"
        ]
    },
    {
        "instance_id": "q_923",
        "db_id": "academic_research_data",
        "question": "What are the key research topics (as indicated by keyphrases) in papers authored by Dan Klein, including their usage frequency, average paper quality, average citation quality of those papers, and the relevance of datasets used, considering both the normalized quality scores of citations and datasets? List the results in descending order of usage frequency and average paper quality.",
        "query": " WITH dan_klein_papers AS (     SELECT p.paperId, p.title, p.year, p.numCiting, p.paper_quality_score_normalized, p.paper_keywords_normalized     FROM paper p     INNER JOIN writes w ON p.paperId = w.paperId     INNER JOIN author a ON w.authorId = a.authorId     WHERE a.authorName = 'Dan Klein' ), citation_quality AS (     SELECT c.citedPaperId, AVG(c.citing_paper_quality_score_normalized) AS avg_citation_quality     FROM cite c     INNER JOIN dan_klein_papers dkp ON c.citedPaperId = dkp.paperId     GROUP BY c.citedPaperId ), dataset_relevance AS (     SELECT pd.paperId, AVG(pd.paper_dataset_quality_score_normalized) AS avg_dataset_quality     FROM paperDataset pd     INNER JOIN dataset d ON pd.datasetId = d.datasetId     INNER JOIN dan_klein_papers dkp ON pd.paperId = dkp.paperId     GROUP BY pd.paperId ), keyphrase_usage AS (     SELECT pk.keyphraseId, k.keyphraseName, COUNT(pk.paperId) AS usage_count, AVG(dkp.paper_quality_score_normalized) AS avg_paper_quality     FROM paperKeyphrase pk     INNER JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId     INNER JOIN dan_klein_papers dkp ON pk.paperId = dkp.paperId     GROUP BY pk.keyphraseId, k.keyphraseName ) SELECT ku.keyphraseName AS research_topic, ku.usage_count, ku.avg_paper_quality,         COALESCE(cq.avg_citation_quality, 0) AS citation_quality,         COALESCE(dr.avg_dataset_quality, 0) AS dataset_relevance FROM keyphrase_usage ku LEFT JOIN citation_quality cq ON ku.keyphraseName IN (SELECT unnest(paper_keywords_normalized) FROM dan_klein_papers WHERE paperId = cq.citedPaperId) LEFT JOIN dataset_relevance dr ON ku.keyphraseName IN (SELECT unnest(paper_keywords_normalized) FROM dan_klein_papers WHERE paperId = dr.paperId) ORDER BY ku.usage_count DESC, ku.avg_paper_quality DESC; ",
        "schema_links": [
            "paper.paper_keywords_normalized",
            "dataset_relevance.avg_dataset_quality",
            "cite.citedPaperId",
            "paper.paperId",
            "writes.paperId",
            "paperKeyphrase.keyphraseId",
            "dataset.datasetId",
            "dan_klein_papers.paperId",
            "paperDataset.paper_dataset_quality_score_normalized",
            "dan_klein_papers.paper_keywords_normalized",
            "citation_quality.avg_citation_quality",
            "paperDataset.paperId",
            "keyphrase.keyphraseName",
            "author.authorId",
            "cite.citing_paper_quality_score_normalized",
            "paperKeyphrase.paperId",
            "keyphrase.keyphraseId",
            "writes.authorId",
            "keyphrase_usage.usage_count",
            "paper.year",
            "paper.numCiting",
            "keyphrase_usage.keyphraseName",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "paper.title",
            "keyphrase_usage.avg_paper_quality"
        ]
    },
    {
        "instance_id": "q_929",
        "db_id": "academic_research_data",
        "question": "Which researchers, based on their publications and citation trends in 2012, have significantly contributed to the field of \"Neutralizing Antibody,\" as evidenced by both the quality of their papers (with an average normalized paper quality score greater than 0.8) and the impact of their research topics over time (with total citations exceeding the average number of citations for papers published in 2012)? Please provide the researchers' names, their publication counts, h-indices, total citations, and average paper quality scores, sorted in descending order first by total citations and then by average paper quality.",
        "query": " SELECT      a.authorName,      a.publication_count,      a.h_index,      SUM(p.numCitedBy) AS total_citations,      AVG(p.paper_quality_score_normalized) AS avg_paper_quality FROM      author a JOIN      writes w ON a.authorId = w.authorId JOIN      paper p ON w.paperId = p.paperId JOIN      paperKeyphrase pk ON p.paperId = pk.paperId JOIN      keyphrase k ON pk.keyphraseId = k.keyphraseId WHERE      p.year = 2012     AND k.keyphraseName ILIKE '%neutralizing antibody%' GROUP BY      a.authorName, a.publication_count, a.h_index HAVING      SUM(p.numCitedBy) > (SELECT AVG(numCitedBy) FROM paper WHERE year = 2012)     AND AVG(p.paper_quality_score_normalized) > 0.8 ORDER BY      total_citations DESC, avg_paper_quality DESC; ",
        "schema_links": [
            "paperKeyphrase.paperId",
            "keyphrase.keyphraseId",
            "writes.authorId",
            "paper.paperId",
            "writes.paperId",
            "paper.year",
            "paperKeyphrase.keyphraseId",
            "author.h_index",
            "author.publication_count",
            "paper.numCitedBy",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "keyphrase.keyphraseName",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_924",
        "db_id": "academic_research_data",
        "question": "Which researchers who authored papers at ECCV in 2014 have the highest average normalized citation quality scores for works utilizing the ImageNet dataset, and how does their average normalized research impact compare across different venues and years over time?",
        "query": " WITH eccv_2014_authors AS (     SELECT DISTINCT w.authorId     FROM writes w     JOIN paper p ON w.paperId = p.paperId     JOIN venue v ON p.venueId = v.venueId     WHERE v.venueName = 'ECCV' AND p.year = 2014 ), imagenet_papers AS (     SELECT pd.paperId     FROM paperDataset pd     JOIN dataset d ON pd.datasetId = d.datasetId     WHERE d.datasetName = 'ImageNet' ), author_citation_scores AS (     SELECT w.authorId, AVG(c.cited_paper_quality_score_normalized) AS avg_citation_quality_score     FROM writes w     JOIN imagenet_papers ip ON w.paperId = ip.paperId     JOIN cite c ON ip.paperId = c.citedPaperId     GROUP BY w.authorId ), research_impact_over_time AS (     SELECT w.authorId, v.venueName, p.year, AVG(p.paper_quality_score_normalized) AS avg_research_impact     FROM writes w     JOIN paper p ON w.paperId = p.paperId     JOIN venue v ON p.venueId = v.venueId     WHERE w.authorId IN (SELECT authorId FROM eccv_2014_authors)     GROUP BY w.authorId, v.venueName, p.year ) SELECT      a.authorName,     acs.avg_citation_quality_score,     ri.year,     ri.venueName,     ri.avg_research_impact FROM author a JOIN eccv_2014_authors e ON a.authorId = e.authorId JOIN author_citation_scores acs ON a.authorId = acs.authorId LEFT JOIN research_impact_over_time ri ON a.authorId = ri.authorId ORDER BY acs.avg_citation_quality_score DESC, ri.year; ",
        "schema_links": [
            "venue.venueId",
            "research_impact_over_time.avg_research_impact",
            "cite.cited_paper_quality_score_normalized",
            "paperDataset.datasetId",
            "writes.authorId",
            "cite.citedPaperId",
            "research_impact_over_time.year",
            "paper.paperId",
            "research_impact_over_time.venueName",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "dataset.datasetId",
            "author_citation_scores.avg_citation_quality_score",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "paperDataset.paperId",
            "venue.venueName",
            "author.authorId",
            "dataset.datasetName"
        ]
    },
    {
        "instance_id": "q_927",
        "db_id": "academic_research_data",
        "question": "Which research papers from the ECCV 2014 conference are strongly associated with the ImageNet dataset, considering both direct citations and the quality of those citations over time? Additionally, compare the relationship of these papers with ImageNet to other datasets used in the same conference year, analyzing citation trends, paper impact, and dataset-specific quality metrics. Provide results sorted by paper quality score in descending order, followed by total citation quality in descending order.",
        "query": " WITH imagenet_related_papers AS (     SELECT          p.paperId,         p.title,         p.year,         p.numCiting,         p.paper_quality_score_normalized,         pd.dataset_paper_count,         pd.paper_dataset_quality_score_normalized     FROM          paper p     JOIN          venue v ON p.venueId = v.venueId     JOIN          paperDataset pd ON p.paperId = pd.paperId     JOIN          dataset d ON pd.datasetId = d.datasetId     WHERE          v.venueName = 'ECCV'          AND p.year = 2014          AND d.datasetName = 'ImageNet' ), citation_trends AS (     SELECT          c.citedPaperId,         SUM(c.citing_paper_quality_score_normalized) AS total_citation_quality,         COUNT(c.citingPaperId) AS citation_count,         AVG(c.paper_citation_trend_normalized) AS avg_citation_trend     FROM          cite c     JOIN          paper p ON c.citedPaperId = p.paperId     WHERE          p.year = 2014     GROUP BY          c.citedPaperId ), comparison_datasets AS (     SELECT          p.paperId,         p.title,         d.datasetName,         pd.dataset_paper_count,         pd.paper_dataset_quality_score_normalized,         ct.total_citation_quality,         ct.citation_count,         ct.avg_citation_trend     FROM          paper p     JOIN          venue v ON p.venueId = v.venueId     JOIN          paperDataset pd ON p.paperId = pd.paperId     JOIN          dataset d ON pd.datasetId = d.datasetId     LEFT JOIN          citation_trends ct ON p.paperId = ct.citedPaperId     WHERE          v.venueName = 'ECCV'          AND p.year = 2014 ) SELECT      irp.paperId,     irp.title,     irp.numCiting,     irp.paper_quality_score_normalized,     irp.dataset_paper_count AS imagenet_paper_count,     irp.paper_dataset_quality_score_normalized AS imagenet_quality_score,     ct.total_citation_quality AS imagenet_total_citation_quality,     cd.datasetName,     cd.dataset_paper_count,     cd.paper_dataset_quality_score_normalized,     cd.total_citation_quality,     cd.citation_count,     cd.avg_citation_trend FROM      imagenet_related_papers irp LEFT JOIN      citation_trends ct ON irp.paperId = ct.citedPaperId LEFT JOIN      comparison_datasets cd ON irp.paperId = cd.paperId ORDER BY      irp.paper_quality_score_normalized DESC,      ct.total_citation_quality DESC; ",
        "schema_links": [
            "cite.citing_paper_quality_score_normalized",
            "citation_trends.total_citation_quality",
            "paperDataset.dataset_paper_count",
            "venue.venueId",
            "cite.paper_citation_trend_normalized",
            "paperDataset.datasetId",
            "cite.citedPaperId",
            "paper.paperId",
            "citation_trends.citation_count",
            "citation_trends.avg_citation_trend",
            "paper.venueId",
            "paper.year",
            "dataset.datasetId",
            "paper.numCiting",
            "comparison_datasets.paperId",
            "paperDataset.paper_dataset_quality_score_normalized",
            "paper.paper_quality_score_normalized",
            "comparison_datasets.title",
            "paperDataset.paperId",
            "cite.citingPaperId",
            "paper.title",
            "venue.venueName",
            "dataset.datasetName"
        ]
    },
    {
        "instance_id": "q_930",
        "db_id": "academic_research_data",
        "question": "在2014年，哪些研究论文引用了ImageNet数据集？这些论文的作者在其职业生涯中对深度学习领域的贡献如何？请通过以下指标进行分析：作者发表的高影响力论文数量（定义为作者总的论文发表数量）、引用这些论文的文献所产生的总引用影响分（基于归一化的引用质量评分）、以及作者在顶级会议（包括NeurIPS、ICML、CVPR和ICLR）上的独特论文发表数量。结果请按照总引用影响分降序排列。",
        "query": " SELECT      p.paperId,     p.title,     a.authorId,     a.authorName,     a.publication_count AS high_impact_papers_count,     SUM(c.citing_paper_quality_score_normalized) AS total_citation_influence,     COUNT(DISTINCT CASE WHEN v.venueName IN ('NeurIPS', 'ICML', 'CVPR', 'ICLR') THEN p.paperId END) AS top_conference_papers FROM      paper p JOIN      cite c ON p.paperId = c.citingPaperId JOIN      paperDataset pd ON c.citedPaperId = pd.paperId JOIN      dataset ds ON pd.datasetId = ds.datasetId JOIN      writes w ON p.paperId = w.paperId JOIN      author a ON w.authorId = a.authorId LEFT JOIN      venue v ON p.venueId = v.venueId WHERE      ds.datasetName = 'ImageNet'     AND p.year = 2014     AND 'deep learning' = ANY(a.author_research_interests_normalized) GROUP BY      p.paperId, p.title, a.authorId, a.authorName, a.publication_count ORDER BY      total_citation_influence DESC; ",
        "schema_links": [
            "cite.citing_paper_quality_score_normalized",
            "venue.venueId",
            "paperDataset.datasetId",
            "cite.citedPaperId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "author.author_research_interests_normalized",
            "dataset.datasetId",
            "author.publication_count",
            "author.authorName",
            "paperDataset.paperId",
            "paper.title",
            "venue.venueName",
            "author.authorId",
            "dataset.datasetName"
        ]
    },
    {
        "instance_id": "q_928",
        "db_id": "academic_research_data",
        "question": "在“NIPS”会议相关的论文撰写中，哪些研究者更倾向于引用质量评分高于平均水平的数据集？同时，请统计这些研究者的论文数量、总被引用次数，并分析其引用行为是否对其论文影响力产生了趋势性提升。具体要求包括：仅考虑每位研究者发表超过一篇“NIPS”相关论文的情况，并按平均引用数据集质量评分从高到低排序。",
        "query": " SELECT      w.authorId,     a.authorName,     AVG(pd.paper_dataset_quality_score) AS avg_dataset_quality_score,     SUM(p.numCitedBy) AS total_citations_after_nips,     COUNT(p.paperId) AS num_papers_on_nips FROM      writes w JOIN      paper p ON w.paperId = p.paperId JOIN      venue v ON p.venueId = v.venueId JOIN      paperDataset pd ON p.paperId = pd.paperId WHERE      v.venueName = 'NIPS'     AND pd.paper_dataset_quality_score > (SELECT AVG(pds.paper_dataset_quality_score) FROM paperDataset pds) GROUP BY      w.authorId, a.authorName HAVING      COUNT(p.paperId) > 1 ORDER BY      avg_dataset_quality_score DESC; ",
        "schema_links": [
            "venue.venueId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.numCitedBy",
            "author.authorName",
            "paperDataset.paper_dataset_quality_score",
            "paperDataset.paperId",
            "venue.venueName"
        ]
    },
    {
        "instance_id": "q_925",
        "db_id": "academic_research_data",
        "question": "Which researchers, considering both the volume of their publications and the quality of citations received over the past five years, have made significant contributions to studies involving large-scale image datasets with more than 1,000,000 entries, where the normalized quality of citations exceeds 0.5 and the researcher has published more than 5 papers?",
        "query": " SELECT      a.authorId,      a.authorName,      COUNT(DISTINCT p.paperId) AS publication_count,      AVG(c.cited_paper_quality_score_normalized) AS avg_citation_quality FROM      author a JOIN      writes w ON a.authorId = w.authorId JOIN      paper p ON w.paperId = p.paperId JOIN      cite c ON p.paperId = c.citedPaperId JOIN      paperDataset pd ON p.paperId = pd.paperId JOIN      dataset d ON pd.datasetId = d.datasetId WHERE      d.dataset_size > 1000000 -- Assuming large-scale datasets have more than 1,000,000 entries     AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - 5     AND c.paper_citation_trend_normalized > 0.5 -- Assuming significant quality citations GROUP BY      a.authorId, a.authorName HAVING      COUNT(DISTINCT p.paperId) > 5 -- Assuming significant contribution is more than 5 papers ORDER BY      publication_count DESC, avg_citation_quality DESC; ",
        "schema_links": [
            "dataset.dataset_size",
            "cite.cited_paper_quality_score_normalized",
            "cite.paper_citation_trend_normalized",
            "paperDataset.datasetId",
            "cite.citedPaperId",
            "writes.authorId",
            "paper.paperId",
            "writes.paperId",
            "paper.year",
            "dataset.datasetId",
            "author.authorName",
            "paperDataset.paperId",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_941",
        "db_id": "academic_research_data",
        "question": "Which papers from the ACL 2012 conference have received more than 7 citations, and what is the trend of their citation quality over time across different citation sources? Additionally, provide the normalized quality score of these citations and list the results in descending order of the total number of citations.",
        "query": " SELECT      p.paperId,     p.title,     p.numCitedBy AS total_citations,     c.paper_citation_trend AS citation_trend,     c.paper_citation_source AS citation_source,     c.cited_paper_quality_score_normalized AS normalized_quality_score FROM      paper p JOIN      venue v ON p.venueId = v.venueId JOIN      cite c ON p.paperId = c.citedPaperId WHERE      v.venueName = 'ACL'      AND v.year = 2012      AND p.numCitedBy > 7 GROUP BY      p.paperId, p.title, p.numCitedBy, c.paper_citation_trend, c.paper_citation_source, c.cited_paper_quality_score_normalized ORDER BY      p.numCitedBy DESC; ",
        "schema_links": [
            "venue.year",
            "venue.venueId",
            "cite.cited_paper_quality_score_normalized",
            "cite.citedPaperId",
            "paper.paperId",
            "paper.venueId",
            "paper.numCitedBy",
            "cite.paper_citation_trend",
            "cite.paper_citation_source",
            "paper.title",
            "venue.venueName"
        ]
    },
    {
        "instance_id": "q_934",
        "db_id": "academic_research_data",
        "question": "Which research topic, represented by keyphrases, gained the most attention in academic papers published at the EMNLP-CoNLL conference in 2012, based on the sum of normalized quality scores of citations received from papers published between 2013 and 2015?",
        "query": " SELECT pk.keyphraseName AS research_topic, SUM(c.cited_paper_quality_score_normalized) AS total_quality_citations FROM paperKeyphrase pk JOIN paper p ON pk.paperId = p.paperId JOIN cite c ON p.paperId = c.citedPaperId JOIN venue v ON p.venueId = v.venueId WHERE v.venueName = 'EMNLP-CoNLL'    AND p.year = 2012    AND c.citingPaperId IN (     SELECT citingPaperId      FROM paper      WHERE year BETWEEN 2013 AND 2015   ) GROUP BY pk.keyphraseName ORDER BY total_quality_citations DESC LIMIT 1; ",
        "schema_links": [
            "paperkeyphrase.keyphraseName",
            "paperKeyphrase.paperId",
            "paper.citingPaperId",
            "venue.venueId",
            "cite.cited_paper_quality_score_normalized",
            "cite.citedPaperId",
            "paperKeyphrase.keyphraseName",
            "paper.paperId",
            "paperkeyphrase.paperId",
            "paper.venueId",
            "paper.year",
            "venue.venueName",
            "cite.citingPaperId"
        ]
    },
    {
        "instance_id": "q_931",
        "db_id": "academic_research_data",
        "question": "What is the trend of Noah Smith's co-authorship involvement in high-quality publications from 2009 onwards, where the publications have received citations with a normalized quality score greater than 0.8 and have been cited at least once, showing the year of publication, the number of co-authors, the normalized contribution of co-authors, and the normalized quality score of the cited papers, ordered by the year of publication in ascending order?",
        "query": " SELECT      w.paperId,      p.year,      w.co_author_count,      w.writes_co_author_contribution_normalized AS co_author_contribution,     c.cited_paper_quality_score_normalized AS paper_quality FROM      writes w JOIN      paper p ON w.paperId = p.paperId JOIN      cite c ON p.paperId = c.citedPaperId JOIN      author a ON w.authorId = a.authorId WHERE      a.authorName = 'Noah Smith'     AND p.year >= 2009     AND c.cited_paper_quality_score_normalized > 0.8 -- Assuming 0.8 as the quality threshold     AND p.numCitedBy > 0 ORDER BY      p.year ASC; ",
        "schema_links": [
            "cite.cited_paper_quality_score_normalized",
            "cite.citedPaperId",
            "writes.authorId",
            "paper.paperId",
            "writes.writes_co_author_contribution_normalized",
            "writes.paperId",
            "paper.year",
            "paper.numCitedBy",
            "writes.co_author_count",
            "author.authorName",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_935",
        "db_id": "academic_research_data",
        "question": "How many research papers published in venues with an impact factor above the average of all journals have received high-quality citations, defined as citations with a normalized quality score greater than 0.8 and a normalized source quality score greater than 0.7, from at least three distinct citation sources? Additionally, what is the citation trend for these papers over the past five years?",
        "query": " SELECT      p.paperId,     COUNT(DISTINCT c.citingPaperId) AS high_quality_citations_count,     c.paper_citation_trend AS citation_trend FROM      paper p JOIN      venue v ON p.venueId = v.venueId JOIN      cite c ON p.paperId = c.citedPaperId WHERE      v.impact_factor >= (SELECT AVG(impact_factor) FROM journal WHERE impact_factor IS NOT NULL)     AND c.cited_paper_quality_score_normalized > 0.8     AND c.paper_citation_source_normalized > 0.7     AND p.paper_last_updated >= NOW() - INTERVAL '5 years' GROUP BY      p.paperId, c.paper_citation_trend HAVING      COUNT(DISTINCT c.paper_citation_source) >= 3; ",
        "schema_links": [
            "venue.impact_factor",
            "venue.venueId",
            "cite.cited_paper_quality_score_normalized",
            "paper.paper_last_updated",
            "cite.citedPaperId",
            "paper.paperId",
            "paper.venueId",
            "cite.paper_citation_trend",
            "cite.paper_citation_source",
            "journal.impact_factor",
            "cite.paper_citation_source_normalized",
            "cite.citingPaperId"
        ]
    },
    {
        "instance_id": "q_932",
        "db_id": "academic_research_data",
        "question": "Which research paper authored by Eric C. Kerrigan, published in the past five years, and associated with advancements in liquid automation has the highest citation trend compared to other papers in the same field? Additionally, provide the paper's title, publication year, number of citations, and normalized citation trend score.",
        "query": " WITH relevant_papers AS (     SELECT          p.paperId,         p.title,         p.year,         p.numCiting,         p.paper_quality_score_normalized,         p.paper_keywords_normalized,         ak.author_research_interests_normalized     FROM          paper p     JOIN          writes w ON p.paperId = w.paperId     JOIN          author k ON w.authorId = k.authorId     WHERE          k.authorName = 'Eric C. Kerrigan'         AND 'liquid automation' = ANY(p.paper_keywords_normalized)         AND p.year >= EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - 5 ), citation_trends AS (     SELECT          rp.paperId,         rp.title,         rp.year,         rp.numCiting,         c.paper_citation_trend_normalized     FROM          relevant_papers rp     LEFT JOIN          cite c ON rp.paperId = c.citedPaperId ), comparison AS (     SELECT          ct.paperId,         ct.title,         ct.year,         ct.numCiting,         ct.paper_citation_trend_normalized,         RANK() OVER (ORDER BY ct.paper_citation_trend_normalized DESC) AS citation_rank     FROM          citation_trends ct ) SELECT      c.paperId,     c.title,     c.year,     c.numCiting,     c.paper_citation_trend_normalized,     c.citation_rank FROM      comparison c WHERE      c.citation_rank = 1; ",
        "schema_links": [
            "relevant_papers.year",
            "citation_trends.year",
            "paper.paper_keywords_normalized",
            "citation_trends.title",
            "citation_trends.numCiting",
            "cite.paper_citation_trend_normalized",
            "comparison.numCiting",
            "comparison.paperId",
            "relevant_papers.numCiting",
            "writes.authorId",
            "cite.citedPaperId",
            "paper.paperId",
            "comparison.title",
            "writes.paperId",
            "paper.year",
            "author.author_research_interests_normalized",
            "comparison.year",
            "relevant_papers.paperId",
            "citation_trends.paperId",
            "paper.numCiting",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "comparison.paper_citation_trend_normalized",
            "relevant_papers.title",
            "paper.title",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_937",
        "db_id": "academic_research_data",
        "question": "Which researchers have published papers on the ImageNet dataset in the CVPR conference over the past five years, and what is the correlation between their publication count on this dataset, the total citations received for these publications, and their overall h-index? Please list the researchers along with their publication count related to ImageNet, total citations received for these publications, and their overall h-index, sorted in descending order of total citations, followed by publication count, and then by overall h-index.",
        "query": " SELECT      a.authorId,     a.authorName,     COUNT(DISTINCT p.paperId) AS publication_count_on_imagenet,     SUM(p.numCitedBy) AS total_citations_on_imagenet,     a.h_index AS overall_h_index FROM      author a JOIN      writes w ON a.authorId = w.authorId JOIN      paper p ON w.paperId = p.paperId JOIN      paperDataset pd ON p.paperId = pd.paperId JOIN      dataset d ON pd.datasetId = d.datasetId JOIN      venue v ON p.venueId = v.venueId WHERE      d.datasetName = 'ImageNet'     AND v.venueName IN ('CVPR')     AND p.year BETWEEN EXTRACT(YEAR FROM CURRENT_TIMESTAMP - INTERVAL '5 years') AND EXTRACT(YEAR FROM CURRENT_TIMESTAMP) GROUP BY      a.authorId, a.authorName, a.h_index HAVING      COUNT(DISTINCT p.paperId) > 0 ORDER BY      total_citations_on_imagenet DESC, publication_count_on_imagenet DESC, overall_h_index DESC; ",
        "schema_links": [
            "venue.venueId",
            "paperDataset.datasetId",
            "writes.authorId",
            "paper.paperId",
            "writes.paperId",
            "paper.year",
            "dataset.datasetId",
            "author.h_index",
            "paper.numCitedBy",
            "author.authorName",
            "paperDataset.paperId",
            "venue.venueName",
            "author.authorId",
            "dataset.datasetName"
        ]
    },
    {
        "instance_id": "q_936",
        "db_id": "academic_research_data",
        "question": "Who are the researchers, excluding Philipp Koehn, who have co-authored papers with him on topics related to \"machine translation\" within the past five years? What are their current research focuses based on the distinct keyphrases extracted from their recent publications (published in the last five years) and how do these compare to their historical research areas (prior to the last five years)? Additionally, identify whether there has been a shift in their primary research areas by comparing their current and historical focuses.",
        "query": " WITH PhilippKoehnPapers AS (     SELECT DISTINCT w.paperId     FROM writes w     JOIN author a ON w.authorId = a.authorId     WHERE a.authorName = 'Philipp Koehn' ), MachineTranslationPapers AS (     SELECT DISTINCT pk.paperId     FROM paperKeyphrase pk     JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId     WHERE LOWER(k.keyphraseName) LIKE '%machine translation%' ), Collaborators AS (     SELECT DISTINCT w.authorId     FROM writes w     JOIN PhilippKoehnPapers pkp ON w.paperId = pkp.paperId     JOIN MachineTranslationPapers mtp ON w.paperId = mtp.paperId     WHERE w.authorId != (SELECT authorId FROM author WHERE authorName = 'Philipp Koehn') ), RecentPublications AS (     SELECT p.paperId, p.title, p.year, p.numCiting, p.paper_quality_score_normalized     FROM paper p     JOIN writes w ON p.paperId = w.paperId     WHERE w.authorId IN (SELECT authorId FROM Collaborators)       AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5 ), ResearchFocus AS (     SELECT w.authorId, STRING_AGG(DISTINCT k.keyphraseName, ', ') AS current_focus     FROM writes w     JOIN paperKeyphrase pk ON w.paperId = pk.paperId     JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId     WHERE w.authorId IN (SELECT authorId FROM Collaborators)       AND w.paperId IN (SELECT paperId FROM RecentPublications)     GROUP BY w.authorId ), HistoricalFocus AS (     SELECT w.authorId, STRING_AGG(DISTINCT k.keyphraseName, ', ') AS historical_focus     FROM writes w     JOIN paperKeyphrase pk ON w.paperId = pk.paperId     JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId     WHERE w.authorId IN (SELECT authorId FROM Collaborators)       AND w.paperId NOT IN (SELECT paperId FROM RecentPublications)     GROUP BY w.authorId ), FocusShifts AS (     SELECT rf.authorId, rf.current_focus, hf.historical_focus,            CASE WHEN hf.historical_focus IS DISTINCT FROM rf.current_focus THEN TRUE ELSE FALSE END AS has_shifted     FROM ResearchFocus rf     LEFT JOIN HistoricalFocus hf ON rf.authorId = hf.authorId ) SELECT a.authorName, fs.current_focus, fs.historical_focus, fs.has_shifted FROM FocusShifts fs JOIN author a ON fs.authorId = a.authorId; ",
        "schema_links": [
            "paperKeyphrase.paperId",
            "keyphrase.keyphraseId",
            "writes.authorId",
            "paper.paperId",
            "writes.paperId",
            "paperKeyphrase.keyphraseId",
            "paper.year",
            "paper.numCiting",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "keyphrase.keyphraseName",
            "paper.title",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_942",
        "db_id": "academic_research_data",
        "question": "What is the distribution of Samuel Madden's publications across different research areas, excluding those published in PVLDB, in terms of the number of publications, total citations received, and average contribution to his normalized citation quality score, grouped by research area and sorted by the number of publications in descending order?",
        "query": " SELECT      a.author_research_interests AS research_area,     COUNT(p.paperId) AS publication_count,     SUM(p.numCitedBy) AS total_citations,     AVG(p.paper_quality_score_normalized) AS avg_contribution_to_citation_quality FROM      author a JOIN      writes w ON a.authorId = w.authorId JOIN      paper p ON w.paperId = p.paperId LEFT JOIN      venue v ON p.venueId = v.venueId WHERE      a.authorName = 'Samuel Madden'     AND v.venueName != 'PVLDB' GROUP BY      a.author_research_interests ORDER BY      publication_count DESC; ",
        "schema_links": [
            "venue.venueId",
            "author.author_research_interests",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.numCitedBy",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "venue.venueName",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_933",
        "db_id": "academic_research_data",
        "question": "In which journal did Donald E Knuth publish the most impactful paper, based on normalized paper quality scores, within the last five years?",
        "query": " SELECT j.journalName  FROM journal j JOIN venue v ON j.journalId = v.venueId JOIN paper p ON v.venueId = p.venueId JOIN writes w ON p.paperId = w.paperId JOIN author a ON w.authorId = a.authorId WHERE a.authorName = 'Donald E Knuth'   AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5 ORDER BY p.paper_quality_score_normalized DESC LIMIT 1; ",
        "schema_links": [
            "journal.journalName",
            "journal.journalId",
            "venue.venueId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "author.authorName",
            "paper.paper_quality_score_normalized",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_940",
        "db_id": "academic_research_data",
        "question": "Which research papers, published within the last 5 years and categorized by their normalized citation quality score and journal impact factor, have received more than 100 citations and significantly influenced academic discussions each year? Additionally, include the associated datasets and their download counts to analyze trends in dataset usage, as well as the relevant keyphrases and their weighted frequency scores to understand the evolving focus of scholarly work over time. Results should be ordered by publication year ascending, followed by descending order of citation quality score, journal impact factor, dataset download count, and keyphrase relevance score.",
        "query": " SELECT      p.paperId,     p.title AS paper_title,     p.year AS publication_year,     p.paper_quality_score_normalized AS citation_quality_score,     j.impact_factor AS venue_impact_factor,     d.datasetName AS associated_dataset,     d.dataset_download_count AS dataset_usage_count,     kp.keyphraseName AS relevant_keyphrase,     kp.paper_keyphrase_weighted_frequency_normalized AS keyphrase_relevance_score FROM      paper p JOIN      journal j ON p.venueId = j.journalId LEFT JOIN      paperDataset pd ON p.paperId = pd.paperId LEFT JOIN      dataset d ON pd.datasetId = d.datasetId LEFT JOIN      paperKeyphrase pk ON p.paperId = pk.paperId LEFT JOIN      keyphrase kp ON pk.keyphraseId = kp.keyphraseId WHERE      p.numCitedBy > 100 -- Significantly influenced (threshold for citations)     AND p.paper_last_updated AT TIME ZONE 'UTC' >= NOW() AT TIME ZONE 'UTC' - INTERVAL '5 years' -- Recent updates GROUP BY      p.paperId, p.title, p.year, p.paper_quality_score_normalized, j.impact_factor, d.datasetName, d.dataset_download_count, kp.keyphraseName, kp.paper_keyphrase_weighted_frequency_normalized ORDER BY      p.year ASC, p.paper_quality_score_normalized DESC, j.impact_factor DESC, d.dataset_download_count DESC, kp.paper_keyphrase_weighted_frequency_normalized DESC; ",
        "schema_links": [
            "journal.journalId",
            "paperKeyphrase.paperId",
            "keyphrase.paper_keyphrase_weighted_frequency_normalized",
            "keyphrase.keyphraseId",
            "paperDataset.datasetId",
            "paper.paper_last_updated",
            "paper.paperId",
            "paperDataset.paperId",
            "paper.venueId",
            "paper.year",
            "paperKeyphrase.keyphraseId",
            "dataset.datasetId",
            "paper.numCitedBy",
            "dataset.dataset_download_count",
            "paper.paper_quality_score_normalized",
            "journal.impact_factor",
            "keyphrase.keyphraseName",
            "paper.title",
            "dataset.datasetName"
        ]
    },
    {
        "instance_id": "q_938",
        "db_id": "academic_research_data",
        "question": "Which paper presented at SIGCOMM has the highest combined score of citation count and paper quality score, considering both the number of citations received and the reputation of the citing papers?",
        "query": "SELECT p.paperId, p.title, p.numCitedBy, p.paper_quality_score  FROM paper p  JOIN venue v ON p.venueId = v.venueId  WHERE v.venueName = 'SIGCOMM'  ORDER BY p.numCitedBy * p.paper_quality_score DESC  LIMIT 1;",
        "schema_links": [
            "venue.venueName",
            "paper.paper_quality_score",
            "paper.numCitedBy",
            "venue.venueId",
            "paper.title",
            "paper.paperId",
            "paper.venueId"
        ]
    },
    {
        "instance_id": "q_939",
        "db_id": "academic_research_data",
        "question": "Which research paper, authored by Ranjit Jhala and having \"Liquid Haskell\" as a keyword, has the highest paper quality score among papers published within the last five years, and what is the name of the conference or journal where it was published?",
        "query": "SELECT      p.paperId,      p.title,      v.venueName  FROM      paper p  JOIN      writes w ON p.paperId = w.paperId  JOIN      author a ON w.authorId = a.authorId  LEFT JOIN      venue v ON p.venueId = v.venueId  WHERE      a.authorName = 'Ranjit Jhala'      AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5      AND ('Liquid Haskell' = ANY(p.paper_keywords_normalized))  ORDER BY      p.paper_quality_score DESC  LIMIT 1;",
        "schema_links": [
            "paper.paper_keywords_normalized",
            "venue.venueId",
            "writes.authorId",
            "paper.paperId",
            "paper.venueId",
            "writes.paperId",
            "paper.year",
            "paper.paper_quality_score",
            "author.authorName",
            "paper.title",
            "venue.venueName",
            "author.authorId"
        ]
    },
    {
        "instance_id": "q_944",
        "db_id": "business_info",
        "question": "Find all feedback provided by Michelle for Italian cuisine establishments, including her review ratings, tip sentiment scores, overall positive and negative sentiment scores based on her user profile, and an assessment of her likelihood to return to these businesses. The likelihood to return is categorized as 'High Likelihood' if Michelle has interacted with more than 10 businesses, 'Moderate Likelihood' if her interactions are between 5 and 10, and 'Low Likelihood' if fewer than 5. Ensure the results are limited to businesses categorized under Italian cuisine.",
        "query": " SELECT      u.user_id,      r.rating,      t.tip_sentiment_score,      u.user_positive_sentiment_score,      u.user_negative_sentiment_score,     CASE          WHEN u.user_business_interactions > 10 THEN 'High Likelihood'         WHEN u.user_business_interactions BETWEEN 5 AND 10 THEN 'Moderate Likelihood'         ELSE 'Low Likelihood'     END AS return_likelihood FROM      user u JOIN      review r ON u.user_id = r.user_id JOIN      business b ON r.business_id = b.business_id JOIN      category c ON b.category_id = c.category_id LEFT JOIN      tip t ON u.user_id = t.user_id WHERE      u.user_id = 'Michelle'      AND c.cuisine_type = 'Italian'; ",
        "schema_links": [
            "category.cuisine_type",
            "review.user_id",
            "review.business_id",
            "business.business_id",
            "tip.user_id",
            "review.rating",
            "user.user_negative_sentiment_score",
            "user.user_id",
            "tip.tip_sentiment_score",
            "category.category_id",
            "user.user_business_interactions",
            "business.category_id",
            "user.user_positive_sentiment_score"
        ]
    },
    {
        "instance_id": "q_946",
        "db_id": "business_info",
        "question": "How many reviews were submitted for the restaurant named \"Cafe Zinho\" located in a neighborhood within Texas over the past year, where the reviews have a word count greater than 50 and were written by users with a loyalty score (calculated as the difference between positive and negative sentiment scores divided by their sum) exceeding 0.7? Additionally, what is the average sentiment score of these reviews?",
        "query": " SELECT      COUNT(r.rating) AS review_count,      AVG(r.review_sentiment_score) AS average_sentiment_score FROM      yelp_new.business b JOIN      yelp_new.review r ON b.business_id = r.business_id JOIN      yelp_new.neighbourhood n ON b.neighborhood_id = n.neighbourhood_code JOIN      yelp_new.user u ON r.user_id = u.user_id WHERE      b.business_type = 'Cafe Zinho'     AND n.neighbourhood_name LIKE '%Texas%'     AND r.review_date >= NOW() - INTERVAL '1 year'     AND u.user_average_review_length > 50     AND (u.user_positive_sentiment_score - u.user_negative_sentiment_score) /          (u.user_positive_sentiment_score + u.user_negative_sentiment_score) > 0.7; ",
        "schema_links": [
            "review.user_id",
            "yelp_new.review.business_id",
            "review.business_id",
            "business.business_type",
            "yelp_new.neighbourhood.neighbourhood_name",
            "review.review_sentiment_score",
            "business.business_id",
            "yelp_new.user.user_id",
            "yelp_new.user.user_negative_sentiment_score",
            "yelp_new.review.review_sentiment_score",
            "yelp_new.business.business_id",
            "review.rating",
            "user.user_negative_sentiment_score",
            "yelp_new.neighbourhood.neighbourhood_code",
            "user.user_id",
            "yelp_new.user.user_average_review_length",
            "yelp_new.user.user_positive_sentiment_score",
            "user.user_average_review_length",
            "neighbourhood.neighbourhood_code",
            "yelp_new.business.business_type",
            "business.neighborhood_id",
            "yelp_new.review.review_date",
            "review.review_date",
            "yelp_new.business.neighborhood_id",
            "yelp_new.review.rating",
            "yelp_new.review.user_id",
            "neighbourhood.neighbourhood_name",
            "user.user_positive_sentiment_score"
        ]
    },
    {
        "instance_id": "q_947",
        "db_id": "business_info",
        "question": "Identify neighborhoods in Madison known for their Italian cuisine, specifically those with a higher-than-average concentration of open Italian restaurants and an average rating exceeding 3.5. Evaluate the popularity of these neighborhoods based on the total number of check-ins recorded in the past month, while also considering the presence of any ongoing promotional offers associated with these restaurants. List the results in descending order of the number of Italian restaurants and total check-ins.",
        "query": " SELECT      n.neighbourhood_name,      COUNT(b.business_id) AS italian_restaurant_count,      AVG(b.average_rating) AS avg_rating,      SUM(c.count) AS total_checkins,      COUNT(DISTINCT CASE WHEN b.delivery_service_provider IS NOT NULL THEN b.business_id END) AS promo_offers_count FROM      neighbourhood n JOIN      business b ON n.neighborhood_code = b.neighborhood_id::text JOIN      category cat ON b.category_id = cat.category_id LEFT JOIN      checkin c ON b.business_id = c.user_id WHERE      cat.cuisine_type = 'Italian'      AND b.business_status = 'open'      AND b.average_rating > 3.5      AND n.neighborhood_population > 0 GROUP BY      n.neighbourhood_name HAVING      COUNT(b.business_id) > (SELECT AVG(italian_count) FROM (SELECT COUNT(*) AS italian_count FROM business b2 JOIN category cat2 ON b2.category_id = cat2.category_id WHERE cat2.cuisine_type = 'Italian' GROUP BY b2.neighborhood_id) sub)     AND SUM(CASE WHEN c.count >= 1 AND c.checkin_date >= CURRENT_DATE - INTERVAL '1 month' THEN 1 ELSE 0 END) > 0 ORDER BY      italian_restaurant_count DESC,      total_checkins DESC; ",
        "schema_links": [
            "category.cuisine_type",
            "business.average_rating",
            "business.business_id",
            "neighbourhood.neighborhood_code",
            "business.delivery_service_provider",
            "business.business_status",
            "checkin.user_id",
            "checkin.count",
            "category.category_id",
            "checkin.checkin_date",
            "business.neighborhood_id",
            "business.category_id",
            "neighbourhood.neighborhood_population",
            "neighbourhood.neighbourhood_name"
        ]
    },
    {
        "instance_id": "q_952",
        "db_id": "business_info",
        "question": "Find neighborhoods with a population greater than 10,000 that contain Italian restaurants having an average rating below 2.5. Consider only businesses that are currently open, have been operating for more than 1 year, and do not offer any promotional discounts. Prioritize neighborhoods based on their population size and sort the results by the neighborhood's population in descending order. Ensure that only neighborhoods with at least one qualifying business are included in the results.",
        "query": " SELECT      n.neighbourhood_name,      AVG(b.average_rating) AS avg_rating FROM      yelp_new.business b JOIN      yelp_new.category c ON b.category_id = c.category_id JOIN      yelp_new.neighbourhood n ON b.neighborhood_id = n.neighborhood_id WHERE      c.cuisine_type = 'Italian'     AND b.average_rating < 2.5     AND b.business_status = 'open'     AND b.price_tier = 'regular'     AND n.neighborhood_population > 10000 GROUP BY      n.neighbourhood_name HAVING      COUNT(DISTINCT b.business_id) > 0 ORDER BY      n.neighborhood_population DESC; ",
        "schema_links": [
            "business.business_id",
            "category.cuisine_type",
            "business.average_rating",
            "business.business_status",
            "neighbourhood.neighborhood_population",
            "neighbourhood.neighbourhood_name",
            "business.price_tier",
            "yelp_new is ignored per instructions"
        ]
    },
    {
        "instance_id": "q_945",
        "db_id": "business_info",
        "question": "Find users who have interacted with the restaurant \"Mesa Grill\" through either reviews or tips within the past six months, and calculate their engagement level based on the average of their review ratings and tip sentiment scores (scaled to a 5-point scale). Include users who have shown a preference for similar dining categories, specifically those with active business status and that have been operational in the past six months. Prioritize users by their engagement score in descending order, using their total business interactions as a tiebreaker. Additionally, provide the total number of likes received on tips, the total number of reviews written by the user, and their overall business interaction count. Ensure that users with higher loyalty scores or frequent interactions with featured businesses are given precedence.",
        "query": " WITH restaurant_id AS (     SELECT business_id      FROM yelp_new.business      WHERE business_type = 'Mesa Grill' ), user_interactions AS (     SELECT DISTINCT r.user_id, r.rating, t.tip_sentiment_score, t.likes     FROM yelp_new.review r     RIGHT JOIN yelp_new.tip t ON r.user_id = t.user_id     JOIN restaurant_id ri ON r.business_id = ri.business_id OR t.business_id = ri.business_id ), similar_dining_users AS (     SELECT u.user_id     FROM yelp_new.user u     JOIN yelp_new.business b ON u.user_id = b.business_id     JOIN yelp_new.category c ON b.category_id = c.category_id     WHERE c.cuisine_type = (         SELECT cuisine_type          FROM yelp_new.category          WHERE category_name = 'Mesa Grill'     )     AND b.business_status = 'active'     AND b.open_time >= NOW() - INTERVAL '6 months' ), engagement_analysis AS (     SELECT ui.user_id,            AVG(COALESCE(ui.rating, 0) + COALESCE(ui.tip_sentiment_score * 5, 0)) AS engagement_score,            SUM(COALESCE(t.likes, 0)) AS total_likes,            u.user_total_reviews AS review_count,            u.user_business_interactions AS interaction_count     FROM user_interactions ui     JOIN yelp_new.user u ON ui.user_id = u.user_id     LEFT JOIN yelp_new.tip t ON ui.user_id = t.user_id     GROUP BY ui.user_id, u.user_total_reviews, u.user_business_interactions ), final_user_list AS (     SELECT ea.user_id,            ea.engagement_score,            ea.total_likes,            ea.review_count,            ea.interaction_count     FROM engagement_analysis ea     UNION     SELECT sd.user_id,            0 AS engagement_score,            0 AS total_likes,            u.user_total_reviews AS review_count,            u.user_business_interactions AS interaction_count     FROM similar_dining_users sd     JOIN yelp_new.user u ON sd.user_id = u.user_id ) SELECT ful.user_id,        ful.engagement_score,        ful.total_likes,        ful.review_count,        ful.interaction_count FROM final_user_list ful ORDER BY ful.engagement_score DESC, ful.interaction_count DESC; ",
        "schema_links": [
            "category.cuisine_type",
            "review.user_id",
            "user.user_total_reviews",
            "review.business_id",
            "business.business_type",
            "business.business_id",
            "tip.user_id",
            "business.business_status",
            "review.rating",
            "tip.likes",
            "user.user_id",
            "tip.tip_sentiment_score",
            "category.category_name",
            "category.category_id",
            "business.open_time",
            "business.category_id",
            "user.user_business_interactions",
            "tip.business_id"
        ]
    },
    {
        "instance_id": "q_950",
        "db_id": "business_info",
        "question": "Find all active dining establishments in the urban area of Dallas that were evaluated by a user named Patrick, considering only those with promotional offers active within the past month and having a loyalty program enrollment. Ensure the neighborhood population is at least 50. Prioritize the results based on the descending order of the average review length. Include details such as business ID, business type, price range, average rating, check-in count, delivery availability, and reservation availability. Exclude any businesses that are not currently open based on their operating hours.",
        "query": " SELECT      b.business_id,      b.business_type,      b.price_range,      b.average_rating,      b.checkin_count,      b.delivery_available,      b.reservation_available,      u.user_id FROM      yelp_new.business AS b JOIN      yelp_new.neighbourhood AS n ON b.neighborhood_id = n.neighborhood_id JOIN      yelp_new.user AS u ON u.user_id = 'Patrick' WHERE      b.business_status = 'active'     AND b.open_time <= CURRENT_TIME     AND b.close_time >= CURRENT_TIME     AND n.neighborhood_population >= 50     AND n.neighborhood_name = 'Dallas'     AND b.promotional_offer_active = TRUE     AND b.promotion_start_date >= CURRENT_DATE - INTERVAL '1 month'     AND b.loyalty_program_enrollment = TRUE ORDER BY      b.user_average_review_length DESC; ",
        "schema_links": [
            "neighbourhood.neighborhood_name",
            "business.reservation_available",
            "business.business_type",
            "business.average_rating",
            "business.business_id",
            "business.loyalty_program_enrollment",
            "business.close_time",
            "business.business_status",
            "business.price_range",
            "user.user_id",
            "neighbourhood.neighborhood_id",
            "business.open_time",
            "business.neighborhood_id",
            "business.user_average_review_length",
            "business.delivery_available",
            "business.promotion_start_date",
            "neighbourhood.neighborhood_population",
            "business.checkin_count",
            "business.promotional_offer_active"
        ]
    },
    {
        "instance_id": "q_943",
        "db_id": "business_info",
        "question": "Which restaurants in Dallas have received reviews from users who exhibit a similar loyalty score and review writing pattern as Patrick, considering those whose positive and negative sentiment scores differ by no more than 0.1, average review length differs by no more than 5 characters, and total review count falls within ±20% of Patrick's, all within the past year?",
        "query": " SELECT DISTINCT b.business_id, b.business_type  FROM business b JOIN review r ON b.business_id = r.business_id JOIN user u ON r.user_id = u.user_id WHERE b.neighborhood_id = (     SELECT n.neighborhood_id      FROM neighbourhood n      WHERE n.neighbourhood_name = 'Dallas' ) AND u.user_id IN (     SELECT u2.user_id      FROM user u2     WHERE ABS(u2.user_positive_sentiment_score - (         SELECT u3.user_positive_sentiment_score          FROM user u3          WHERE u3.user_id = 'Patrick'     )) <= 0.1     AND ABS(u2.user_negative_sentiment_score - (         SELECT u4.user_negative_sentiment_score          FROM user u4          WHERE u4.user_id = 'Patrick'     )) <= 0.1     AND ABS(u2.user_average_review_length - (         SELECT u5.user_average_review_length          FROM user u5          WHERE u5.user_id = 'Patrick'     )) <= 5     AND u2.user_total_reviews >= (         SELECT u6.user_total_reviews * 0.8          FROM user u6          WHERE u6.user_id = 'Patrick'     )     AND u2.user_total_reviews <= (         SELECT u7.user_total_reviews * 1.2          FROM user u7          WHERE u7.user_id = 'Patrick'     ) ) AND r.rating_date >= NOW() - INTERVAL '1 year' AND b.business_type = 'restaurant'; ",
        "schema_links": [
            "review.rating_date",
            "review.user_id",
            "user.user_total_reviews",
            "business.business_type",
            "review.business_id",
            "business.business_id",
            "user.user_negative_sentiment_score",
            "user.user_id",
            "neighbourhood.neighborhood_id",
            "user.user_average_review_length",
            "business.neighborhood_id",
            "neighbourhood.neighbourhood_name",
            "user.user_positive_sentiment_score"
        ]
    },
    {
        "instance_id": "q_949",
        "db_id": "business_info",
        "question": "Find all establishments categorized as Bars that have received feedback from a user named Patrick, considering both direct reviews and tip contributions. Ensure the results include only venues with promotional offers active within the last 3 months. Sort the results in descending order based on the overall sentiment score of the user's contributions, calculated as the difference between the user's positive and negative sentiment scores. Include details such as the business ID, business type, average rating, user ID, and the user's positive and negative sentiment scores in the output.",
        "query": " SELECT      b.business_id,      b.business_type,      b.average_rating,      u.user_id,      u.user_positive_sentiment_score,      u.user_negative_sentiment_score FROM      business AS b JOIN      category AS c ON b.category_id = c.category_name JOIN      review AS r ON b.business_id = r.business_id JOIN      tip AS t ON b.business_id = t.business_id JOIN      user AS u ON r.user_id = u.user_id OR t.user_id = u.user_id WHERE      b.business_type = 'Bar'     AND (r.user_id IN (SELECT user_id FROM user WHERE user_id = 'Patrick')           OR t.user_id IN (SELECT user_id FROM user WHERE user_id = 'Patrick'))     AND b.business_status = 'Promotional'     AND b.open_time >= NOW() - INTERVAL '3 months' ORDER BY      (u.user_positive_sentiment_score - u.user_negative_sentiment_score) DESC; ",
        "schema_links": [
            "review.user_id",
            "business.business_type",
            "review.business_id",
            "business.average_rating",
            "business.business_id",
            "tip.user_id",
            "business.business_status",
            "user.user_negative_sentiment_score",
            "user.user_id",
            "category.category_name",
            "business.open_time",
            "business.category_id",
            "tip.business_id",
            "user.user_positive_sentiment_score"
        ]
    },
    {
        "instance_id": "q_951",
        "db_id": "business_info",
        "question": "Find all businesses that have been active for more than one year, offer promotional discounts during peak hours, and have received positive reviews from users whose loyalty score (measured by user_positive_sentiment_score) is above average. Ensure that the review rating is at least 3 stars and the business is currently marked as active. Include only businesses where the review has a positive count greater than zero.",
        "query": " SELECT DISTINCT b.business_id, b.business_type, b.price_range, b.latitude, b.longitude, b.open_time, b.close_time, b.review_count, b.average_rating, b.neighborhood_id, b.category_id, b.checkin_count, b.business_status, b.delivery_available, b.reservation_available, b.price_tier, b.delivery_service_provider, b.reservation_platform FROM yelp_new.business b JOIN yelp_new.review r ON b.business_id = r.business_id JOIN yelp_new.user u ON r.user_id = u.user_id WHERE r.rating >= 3 AND b.business_status = 'active' AND b.business_id IN (     SELECT business_id     FROM yelp_new.business     WHERE EXTRACT(EPOCH FROM (NOW() AT TIME ZONE 'UTC' - open_time)) / 60 / 60 / 24 / 365 > 1 ) AND b.price_tier LIKE '%discount%' AND u.user_positive_sentiment_score > (     SELECT AVG(user_positive_sentiment_score)     FROM yelp_new.user ) AND r.review_positive_count > 0; ",
        "schema_links": [
            "business.business_type",
            "business.longitude",
            "business.business_id",
            "business.delivery_service_provider",
            "business.business_status",
            "business.price_range",
            "review.rating",
            "business.latitude",
            "business.neighborhood_id",
            "business.review_count",
            "business.checkin_count",
            "review.review_positive_count",
            "business.reservation_available",
            "review.business_id",
            "business.average_rating",
            "business.close_time",
            "business.reservation_platform",
            "user.user_id",
            "business.open_time",
            "business.category_id",
            "business.delivery_available",
            "business.price_tier",
            "user.user_positive_sentiment_score"
        ]
    },
    {
        "instance_id": "q_955",
        "db_id": "business_info",
        "question": "Which seafood restaurants in Los Angeles are currently open, offer delivery services, and operate during peak dining hours (between 7:00 PM and 9:00 PM)? Additionally, these businesses should be located in neighborhoods with above-average population levels, have received the highest average ratings in the past year among seafood restaurants meeting the aforementioned criteria, and exhibit higher repeat customer patterns based on check-in data exceeding the average check-in frequency. Prioritize results by descending order of average rating and check-in count.",
        "query": " SELECT      b.business_id,      b.business_type,      c.category_name,      b.average_rating,      b.price_tier,      n.neighbourhood_name,      n.neighborhood_population FROM      business AS b JOIN      category AS c ON b.category_id = c.category_id JOIN      neighbourhood AS n ON b.neighborhood_id = n.neighborhood_id WHERE      c.cuisine_type = 'Seafood'     AND b.business_status = 'Open'     AND b.delivery_available = TRUE     AND b.open_time <= '19:00:00'::time AND b.close_time >= '21:00:00'::time     AND b.business_id IN (         SELECT business_id          FROM checkin          GROUP BY business_id          HAVING SUM(count) > (SELECT AVG(SUM(count)) FROM checkin GROUP BY business_id)     )     AND n.neighborhood_population > (SELECT AVG(neighborhood_population) FROM neighbourhood)     AND b.average_rating = (         SELECT MAX(b2.average_rating)          FROM business AS b2          JOIN category AS c2 ON b2.category_id = c2.category_id          WHERE c2.cuisine_type = 'Seafood'            AND b2.business_status = 'Open'            AND b2.delivery_available = TRUE           AND b2.open_time <= '19:00:00'::time AND b2.close_time >= '21:00:00'::time           AND b2.business_id IN (               SELECT business_id                FROM review                WHERE review_date >= NOW() - INTERVAL '1 year'           )     ) ORDER BY      b.average_rating DESC,      b.checkin_count DESC; ",
        "schema_links": [
            "category.cuisine_type",
            "business.price_tier",
            "business.business_type",
            "business.business_id",
            "business.business_status",
            "business2.open_time",
            "neighbourhood.neighborhood_id",
            "category.category_id",
            "business.neighborhood_id",
            "category2.cuisine_type",
            "neighbourhood.neighborhood_population",
            "business.checkin_count",
            "business2.close_time",
            "review.business_id",
            "business.average_rating",
            "business.close_time",
            "checkin.business_id",
            "checkin.count",
            "category.category_name",
            "business2.business_status",
            "business2.average_rating",
            "business.open_time",
            "business.category_id",
            "business2.delivery_available",
            "review.review_date",
            "business.delivery_available",
            "neighbourhood.neighbourhood_name"
        ]
    },
    {
        "instance_id": "q_948",
        "db_id": "business_info",
        "question": "Find all open restaurants in Los Angeles that specialize in Seafood, and provide details including their price range, average rating, check-in count, availability of delivery and reservation services, price tier, delivery service provider, and reservation platform. Additionally, include the neighborhood name, population, and type, prioritizing neighborhoods classified as higher income to attract more affluent customers. Sort the results by the restaurant's average rating in descending order, and then by neighborhood population in descending order.",
        "query": " SELECT      b.business_id,      b.business_type,      b.price_range,      b.average_rating,      b.checkin_count,      b.delivery_available,      b.reservation_available,      b.price_tier,      b.delivery_service_provider,      b.reservation_platform,      n.neighbourhood_name,      n.neighborhood_population,      n.neighborhood_type FROM      business AS b JOIN      category AS c ON b.category_id = c.category_id JOIN      neighbourhood AS n ON b.neighborhood_id = n.neighborhood_id WHERE      c.cuisine_specialty = 'Seafood'     AND b.business_status = 'open'     AND n.neighborhood_type = 'higher_income'     AND b.business_type = 'restaurant' ORDER BY      b.average_rating DESC,      n.neighborhood_population DESC; ",
        "schema_links": [
            "business.price_tier",
            "business.business_type",
            "category.cuisine_specialty",
            "business.business_id",
            "business.delivery_service_provider",
            "business.business_status",
            "business.price_range",
            "neighbourhood.neighborhood_id",
            "category.category_id",
            "business.neighborhood_id",
            "neighbourhood.neighborhood_population",
            "business.checkin_count",
            "business.reservation_available",
            "business.average_rating",
            "business.reservation_platform",
            "neighbourhood.neighborhood_type",
            "business.category_id",
            "business.delivery_available",
            "neighbourhood.neighbourhood_name"
        ]
    },
    {
        "instance_id": "q_959",
        "db_id": "business_info",
        "question": "Which restaurants in Los Angeles offer seafood, have a promotional offer active within the last 3 months, and are located in high-income neighborhoods with an average income above $75,000? Additionally, consider only those restaurants that have received more than 100 reviews and have had at least two distinct users engage with their loyalty program.",
        "query": " SELECT      b.business_id,      b.business_type,      c.category_name,      b.price_range,      b.average_rating,      b.review_count,      n.neighbourhood_name,      n.neighborhood_population FROM      yelp_new.business AS b JOIN      yelp_new.category AS c ON b.category_id = c.category_id JOIN      yelp_new.neighbourhood AS n ON b.neighborhood_id = n.neighborhood_id WHERE      c.cuisine_type = 'Seafood'     AND b.business_status = 'Promotional Offer Active'     AND b.business_status IN (         SELECT business_status          FROM yelp_new.business          WHERE CAST(business_status AS DATE) >= CURRENT_DATE - INTERVAL '3 MONTH'     )     AND b.business_id IN (         SELECT business_id          FROM yelp_new.tip          GROUP BY business_id          HAVING COUNT(DISTINCT user_id) >= 2     )     AND n.neighborhood_population > 75000     AND b.review_count > 100     AND b.business_type = 'Restaurant'     AND b.neighborhood_id IN (         SELECT neighborhood_id          FROM yelp_new.neighbourhood          WHERE neighborhood_type = 'High Income'     ); ",
        "schema_links": [
            "category.cuisine_type",
            "business.business_type",
            "tip.business_id",
            "business.average_rating",
            "business.business_id",
            "tip.user_id",
            "business.business_status",
            "business.price_range",
            "category.category_name",
            "neighbourhood.neighborhood_id",
            "neighbourhood.neighborhood_type",
            "category.category_id",
            "business.neighborhood_id",
            "business.category_id",
            "neighbourhood.neighborhood_population",
            "business.review_count",
            "neighbourhood.neighbourhood_name"
        ]
    },
    {
        "instance_id": "q_953",
        "db_id": "business_info",
        "question": "Which neighborhood is associated with the restaurant named \"Flat Top Grill,\" and what is the average population (as a proxy for income level) of that neighborhood? Additionally, compare the discount percentage offered by \"Flat Top Grill\" to the average discount percentage of all restaurants in the same neighborhood. The discount percentage is calculated as the ratio of the numeric value extracted from the price tier to the numeric value extracted from the price range, expressed as a percentage.",
        "query": " WITH restaurant_info AS (     SELECT          b.neighborhood_id,          c.cuisine_specialty,          b.price_tier,          b.delivery_service_provider     FROM          yelp_new.business b     JOIN          yelp_new.category c ON b.category_id = c.category_id     WHERE          b.business_type = 'Flat Top Grill' ), neighborhood_avg_income AS (     SELECT          n.neighbourhood_name,          AVG(n.neighborhood_population) AS avg_income_level     FROM          yelp_new.neighbourhood n     JOIN          restaurant_info ri ON ri.neighborhood_id = n.neighborhood_id     GROUP BY          n.neighbourhood_name ), discount_comparison AS (     SELECT          b.business_type,          CAST(SUBSTRING(b.price_tier, '[0-9]+') AS FLOAT) / NULLIF(CAST(SUBSTRING(b.price_range, '[0-9]+') AS FLOAT), 0) * 100 AS discount_percentage     FROM          yelp_new.business b     JOIN          restaurant_info ri ON ri.neighborhood_id = b.neighborhood_id ) SELECT      na.neighbourhood_name,      na.avg_income_level,      dc.discount_percentage AS flat_top_grill_discount,      AVG(dc.discount_percentage) AS avg_neighborhood_discount FROM      neighborhood_avg_income na JOIN      discount_comparison dc ON dc.business_type = 'Flat Top Grill' GROUP BY      na.neighbourhood_name,      na.avg_income_level,      dc.discount_percentage; ",
        "schema_links": [
            "business.business_type",
            "neighbourhood.neighbourhood_name",
            "category.cuisine_specialty",
            "business.neighborhood_id",
            "business.category_id",
            "business.delivery_service_provider",
            "business.price_range",
            "neighbourhood.neighborhood_population",
            "business.price_tier"
        ]
    },
    {
        "instance_id": "q_957",
        "db_id": "business_info",
        "question": "Find users who have interacted with businesses categorized as restaurants during a promotional period in the year 2010. Specifically, include users whose historical interaction patterns show more than 5 reviews and an average review sentiment score greater than 0.5. For each qualifying user, provide their user ID, total number of reviews, average review length, positive sentiment score, negative sentiment score, and total business interactions.",
        "query": " SELECT      u.user_id,      u.user_total_reviews,      u.user_average_review_length,      u.user_positive_sentiment_score,      u.user_negative_sentiment_score,      u.user_business_interactions FROM      \"user\" AS u JOIN      \"review\" AS r ON u.user_id = r.user_id JOIN      \"business\" AS b ON r.business_id = b.business_id JOIN      \"category\" AS c ON b.category_id = c.category_id WHERE      c.category_name = 'Restaurant'     AND EXTRACT(YEAR FROM r.review_date AT TIME ZONE 'UTC') = 2010     AND b.business_status = 'Promotional' GROUP BY      u.user_id,      u.user_total_reviews,      u.user_average_review_length,      u.user_positive_sentiment_score,      u.user_negative_sentiment_score,      u.user_business_interactions HAVING      COUNT(r.rating) > 5     AND AVG(r.review_sentiment_score) > 0.5; ",
        "schema_links": [
            "review.user_id",
            "user.user_total_reviews",
            "review.business_id",
            "review.review_sentiment_score",
            "business.business_id",
            "business.business_status",
            "review.rating",
            "user.user_negative_sentiment_score",
            "user.user_id",
            "category.category_name",
            "user.user_average_review_length",
            "category.category_id",
            "user.user_business_interactions",
            "review.review_date",
            "business.category_id",
            "user.user_positive_sentiment_score"
        ]
    },
    {
        "instance_id": "q_954",
        "db_id": "business_info",
        "question": "What is the total number of check-ins at restaurants categorized under Moroccan cuisine, located in neighborhoods with a population exceeding 500,000, during peak hours defined as between 12:00 PM and 3:00 PM?",
        "query": " SELECT SUM(c.count) AS total_checkins FROM checkin c JOIN business b ON c.user_id = b.business_id JOIN category cat ON b.category_id = cat.category_id JOIN neighbourhood n ON b.neighborhood_id = n.neighborhood_id WHERE b.business_type = 'restaurant' AND cat.cuisine_type = 'Moroccan' AND n.neighborhood_population > 500000 AND (b.open_time BETWEEN '12:00:00' AND '15:00:00' OR b.close_time BETWEEN '12:00:00' AND '15:00:00'); ",
        "schema_links": [
            "category.cuisine_type",
            "business.business_type",
            "business.business_id",
            "business.close_time",
            "checkin.user_id",
            "checkin.count",
            "neighbourhood.neighborhood_id",
            "category.category_id",
            "business.open_time",
            "business.neighborhood_id",
            "business.category_id",
            "neighbourhood.neighborhood_population"
        ]
    },
    {
        "instance_id": "q_956",
        "db_id": "business_info",
        "question": "What is the total number of check-ins at Moroccan restaurants located in the Los Angeles neighborhood during the time range of 11:00 AM to 3:00 PM on Fridays, considering only businesses that have been open for more than 2 years and currently have an active promotional offer?",
        "query": " SELECT SUM(c.count) AS total_checkins FROM checkin c JOIN business b ON c.user_id = b.business_id JOIN category ct ON b.category_id = ct.category_id JOIN neighbourhood n ON b.neighborhood_id = n.neighbourhood_code WHERE ct.cuisine_type = 'Moroccan'   AND n.neighbourhood_name = 'Los Angeles'   AND b.open_time >= '11:00:00'::time AND b.close_time <= '15:00:00'::time   AND CURRENT_DATE - INTERVAL '2 years' > b.open_date   AND b.promotional_offer_active = TRUE;    ### Note:  The schema does not explicitly include open_date or promotional_offer_active fields. Assuming these exist in the business table or a related table. If not, additional clarification is required.",
        "schema_links": [
            "category.cuisine_type",
            "business.business_id",
            "business.close_time",
            "business.open_date",
            "checkin.user_id",
            "checkin.count",
            "category.category_id",
            "neighbourhood.neighbourhood_code",
            "business.open_time",
            "business.neighborhood_id",
            "business.category_id",
            "business.promotional_offer_active",
            "neighbourhood.neighbourhood_name"
        ]
    },
    {
        "instance_id": "q_965",
        "db_id": "business_info",
        "question": "What is the daily trend of visitor engagement in Moroccan cuisine establishments located in the Los Angeles neighborhood, considering only businesses that have been continuously operational for more than 2 years and offer promotional discounts? Additionally, analyze the correlation between the peak check-in hours and the average income level of the surrounding neighborhood by identifying the highest hourly check-in period and comparing it with the neighborhood's average population as a proxy for income level.",
        "query": " WITH filtered_business AS (     SELECT          b.business_id,         b.price_range,         b.average_rating,         b.checkin_count,         b.business_status,         b.delivery_available,         b.reservation_available,         n.neighborhood_name,         n.neighborhood_population,         c.category_name,         c.cuisine_type     FROM          yelp_new.business b     JOIN          yelp_new.category c ON b.category_id = c.category_id     JOIN          yelp_new.neighbourhood n ON b.neighborhood_id = n.neighborhood_id     WHERE          c.cuisine_type = 'Moroccan'         AND b.business_status = 'operational'         AND b.open_time <= NOW() - INTERVAL '2 years'         AND b.price_tier LIKE '%discount%'         AND n.neighborhood_name = 'Los Angeles' ), daily_checkin_trend AS (     SELECT          DATE_TRUNC('day', checkin.time) AS checkin_day,         SUM(checkin.count) AS total_checkins     FROM          yelp_new.checkin     JOIN          filtered_business fb ON checkin.user_id = fb.business_id     GROUP BY          checkin_day     ORDER BY          checkin_day ), neighborhood_income AS (     SELECT          n.neighborhood_name,         AVG(n.neighborhood_population) AS avg_income_level     FROM          yelp_new.neighbourhood n     JOIN          filtered_business fb ON fb.neighborhood_name = n.neighborhood_name     GROUP BY          n.neighborhood_name ), peak_checkin_hours AS (     SELECT          DATE_TRUNC('hour', checkin.time) AS checkin_hour,         SUM(checkin.count) AS hourly_checkins     FROM          yelp_new.checkin     JOIN          filtered_business fb ON checkin.user_id = fb.business_id     GROUP BY          checkin_hour     ORDER BY          hourly_checkins DESC     LIMIT 1 ) SELECT      dct.checkin_day,     dct.total_checkins,     ni.avg_income_level,     pch.checkin_hour,     pch.hourly_checkins FROM      daily_checkin_trend dct JOIN      neighborhood_income ni ON dct.checkin_day::text LIKE CONCAT('%', ni.neighborhood_name, '%') JOIN      peak_checkin_hours pch ON dct.checkin_day = DATE_TRUNC('day', pch.checkin_hour); ",
        "schema_links": [
            "category.cuisine_type",
            "daily_checkin_trend.checkin_day",
            "business.business_id",
            "business.business_status",
            "business.price_range",
            "checkin.user_id",
            "neighbourhood.neighborhood_id",
            "neighborhood_income.avg_income_level",
            "category.category_id",
            "daily_checkin_trend.total_checkins",
            "checkin.time",
            "business.neighborhood_id",
            "neighbourhood.neighborhood_population",
            "business.checkin_count",
            "neighbourhood.neighborhood_name",
            "business.reservation_available",
            "business.average_rating",
            "checkin.count",
            "category.category_name",
            "peak_checkin_hours.hourly_checkins",
            "business.open_time",
            "business.category_id",
            "peak_checkin_hours.checkin_hour",
            "business.delivery_available",
            "business.price_tier"
        ]
    },
    {
        "instance_id": "q_964",
        "db_id": "business_info",
        "question": "What is the total number of check-ins at Italian Delis by state on weekends, considering only businesses that have been open for more than 2 years and have an average daily check-in count exceeding 10? Additionally, include the delivery and reservation offer statuses of these businesses if applicable.",
        "query": " SELECT      n.neighbourhood_state AS state,     SUM(c.count) AS total_checkins,     b.delivery_available AS delivery_offer_status,     b.reservation_available AS reservation_offer_status FROM      business b JOIN      category ca ON b.category_id = ca.category_id JOIN      neighbourhood n ON b.neighborhood_id = n.neighborhood_id JOIN      checkin c ON b.business_id = c.user_id WHERE      ca.cuisine_type = 'Italian'     AND ca.cuisine_specialty = 'Delis'     AND EXTRACT(DOW FROM CURRENT_DATE) IN (0, 6) -- Weekend assumption: Sunday=0, Saturday=6     AND b.open_time <= CURRENT_TIME - INTERVAL '2 years' -- Business open for more than 2 years     AND (SELECT AVG(count) FROM checkin WHERE user_id = b.business_id) > 10 -- Average daily check-in count above 10 GROUP BY      n.neighbourhood_state, b.delivery_available, b.reservation_available; ",
        "schema_links": [
            "category.cuisine_type",
            "business.reservation_available",
            "category.cuisine_specialty",
            "business.business_id",
            "checkin.user_id",
            "checkin.count",
            "neighbourhood.neighborhood_id",
            "business.reservation_offer_status",
            "category.category_id",
            "business.open_time",
            "business.neighborhood_id",
            "business.category_id",
            "business.delivery_available",
            "neighbourhood.neighbourhood_state"
        ]
    },
    {
        "instance_id": "q_958",
        "db_id": "business_info",
        "question": "How many unique individuals have provided either formal reviews or casual tips on the dining venue \"Texas de Brazil\" located in the Dallas neighborhood within the past 365 days? Additionally, what is the average sentiment score of these interactions?",
        "query": " SELECT      COUNT(DISTINCT COALESCE(r.user_id, t.user_id)) AS total_individuals,     AVG(COALESCE(r.review_sentiment_score, t.tip_sentiment_score)) AS avg_sentiment_score FROM      business b LEFT JOIN review r ON b.business_id = r.business_id AND r.created_at >= NOW() - INTERVAL '1 year' LEFT JOIN tip t ON b.business_id = t.business_id AND t.date >= NOW() - INTERVAL '1 year' WHERE      b.business_type = 'Texas de Brazil'     AND b.neighborhood_id = (SELECT n.neighborhood_id FROM neighbourhood n WHERE n.neighbourhood_name = 'Dallas'); ",
        "schema_links": [
            "review.user_id",
            "business.business_type",
            "review.business_id",
            "review.review_sentiment_score",
            "business.business_id",
            "tip.date",
            "tip.user_id",
            "review.created_at",
            "tip.tip_sentiment_score",
            "neighbourhood.neighborhood_id",
            "business.neighborhood_id",
            "tip.business_id",
            "neighbourhood.neighbourhood_name"
        ]
    },
    {
        "instance_id": "q_962",
        "db_id": "business_info",
        "question": "How many dining establishments in the Hazelwood neighborhood of Dallas are currently offering promotional deals, and what is their average business age in years? Additionally, provide the total count of check-ins during peak hours (defined as either between 12:00 PM and 3:00 PM for opening times or between 6:00 PM and 9:00 PM for closing times) for these establishments.",
        "query": " WITH filtered_business AS (     SELECT          b.business_id,         b.business_status,         b.open_time,         b.close_time,         b.checkin_count,         DATE_PART('year', AGE(CURRENT_DATE, MIN(r.review_date))) AS business_age     FROM          yelp_new.business b     JOIN          yelp_new.neighbourhood n ON b.neighborhood_id = n.neighborhood_code     WHERE          n.neighbourhood_name = 'Hazelwood'         AND b.business_type = 'dining'         AND b.business_status = 'promotional'     GROUP BY          b.business_id, b.business_status, b.open_time, b.close_time, b.checkin_count ), peak_checkins AS (     SELECT          fb.business_id,         SUM(c.count) AS total_peak_checkins     FROM          filtered_business fb     JOIN          yelp_new.checkin c ON fb.business_id = c.user_id     WHERE          fb.open_time BETWEEN '12:00:00' AND '15:00:00'         OR fb.close_time BETWEEN '18:00:00' AND '21:00:00'     GROUP BY          fb.business_id ) SELECT      COUNT(fb.business_id) AS promotional_dining_count,     AVG(fb.business_age) AS average_business_age,     SUM(pc.total_peak_checkins) AS total_peak_checkins FROM      filtered_business fb JOIN      peak_checkins pc ON fb.business_id = pc.business_id; ",
        "schema_links": [
            "business.business_type",
            "business.business_id",
            "neighbourhood.neighborhood_code",
            "business.close_time",
            "business.business_status",
            "checkin.user_id",
            "checkin.count",
            "business.open_time",
            "business.neighborhood_id",
            "business.checkin_count",
            "neighbourhood.neighbourhood_name"
        ]
    },
    {
        "instance_id": "q_967",
        "db_id": "business_info",
        "question": "What is the typical engagement level at \"Barrio Cafe\" during its peak hours, defined as the time between its opening and closing times, in terms of the average number of daily check-ins and the total number of check-ins across these hours? Additionally, include details about any promotional offers that may influence customer footfall during these periods, such as price tier, delivery service provider, and reservation platform, considering only businesses that offer either delivery or reservation services.",
        "query": " WITH barrio_cafe AS (     SELECT          b.business_id,          b.open_time,          b.close_time,          c.count AS checkin_count,          c.user_id     FROM          yelp_new.business b     JOIN          yelp_new.checkin c ON b.business_id = c.user_id     WHERE          b.business_type = 'Barrio Cafe' ), peak_hours AS (     SELECT          bc.business_id,          DATE_PART('hour', bc.open_time) AS start_hour,          DATE_PART('hour', bc.close_time) AS end_hour,          AVG(bc.checkin_count) AS avg_daily_checkins,          COUNT(*) AS total_checkins     FROM          barrio_cafe bc     GROUP BY          bc.business_id, start_hour, end_hour ), promotional_offers AS (     SELECT          b.business_id,          b.price_tier,          b.delivery_service_provider,          b.reservation_platform     FROM          yelp_new.business b     WHERE          b.business_type = 'Barrio Cafe'          AND (b.delivery_available = TRUE OR b.reservation_available = TRUE) ) SELECT      ph.business_id,      ph.start_hour,      ph.end_hour,      ph.avg_daily_checkins,      ph.total_checkins,      po.price_tier,      po.delivery_service_provider,      po.reservation_platform FROM      peak_hours ph JOIN      promotional_offers po ON ph.business_id = po.business_id; ",
        "schema_links": [
            "yelp_new.checkin.count",
            "yelp_new.business.reservation_platform",
            "business.reservation_available",
            "business.business_type",
            "yelp_new.business.close_time",
            "business.business_id",
            "yelp_new.business.open_time",
            "business.close_time",
            "business.delivery_service_provider",
            "yelp_new.business.business_id",
            "checkin.user_id",
            "business.reservation_platform",
            "checkin.count",
            "yelp_new.business.delivery_service_provider",
            "yelp_new.business.delivery_available",
            "yelp_new.business.price_tier",
            "business.open_time",
            "yelp_new.business.business_type",
            "yelp_new.checkin.user_id",
            "business.delivery_available",
            "yelp_new.business.reservation_available",
            "business.price_tier"
        ]
    },
    {
        "instance_id": "q_960",
        "db_id": "business_info",
        "question": "How many distinct users have interacted with Irish Pub businesses located in the Dallas neighborhood through either reviews or tips, and what is their average loyalty score calculated as the difference between their positive and negative sentiment scores?",
        "query": " SELECT      COUNT(DISTINCT u.user_id) AS user_count,     AVG(u.user_positive_sentiment_score - u.user_negative_sentiment_score) AS average_loyalty_score FROM      user u JOIN      review r ON u.user_id = r.user_id JOIN      business b ON r.business_id = b.business_id LEFT JOIN      tip t ON u.user_id = t.user_id WHERE      b.category_id IN (SELECT category_id FROM category WHERE cuisine_type = 'Irish Pub')     AND b.neighborhood_id IN (SELECT neighborhood_id FROM neighbourhood WHERE neighbourhood_name = 'Dallas')     AND (r.rating IS NOT NULL OR t.tip_count IS NOT NULL); ",
        "schema_links": [
            "review.user_id",
            "review.business_id",
            "business.business_id",
            "neighbourhood.neighbourhood_id",
            "tip.user_id",
            "review.rating",
            "user.user_negative_sentiment_score",
            "tip.tip_count",
            "user.user_id",
            "category.category_id",
            "business.neighborhood_id",
            "business.category_id",
            "user.user_positive_sentiment_score"
        ]
    },
    {
        "instance_id": "q_961",
        "db_id": "business_info",
        "question": "Which users reviewed the restaurant named \"Vintner Grill\" in 2010, and what was their average review length and net sentiment score (calculated as positive sentiment score minus negative sentiment score) for that year? Additionally, how many of these users had a net sentiment score greater than 0.75, indicating a high loyalty score in the system?",
        "query": " SELECT      u.user_id,      AVG(u.user_average_review_length) AS avg_review_length,      AVG(u.user_positive_sentiment_score - u.user_negative_sentiment_score) AS avg_sentiment_score,     SUM(CASE WHEN u.user_positive_sentiment_score - u.user_negative_sentiment_score > 0.75 THEN 1 ELSE 0 END) AS loyal_user_count FROM      user u JOIN      review r ON u.user_id = r.user_id JOIN      business b ON r.business_id = b.business_id WHERE      b.business_type = 'Vintner Grill'     AND EXTRACT(YEAR FROM r.review_date) = 2010 GROUP BY      u.user_id; ",
        "schema_links": [
            "review.user_id",
            "user.user_id",
            "user.user_average_review_length",
            "business.business_type",
            "review.business_id",
            "business.business_id",
            "review.review_date",
            "user.user_negative_sentiment_score",
            "user.user_positive_sentiment_score"
        ]
    },
    {
        "instance_id": "q_963",
        "db_id": "business_info",
        "question": "Find Mexican restaurants in the Dallas neighborhood that have an average rating of at least 3.5 stars, are currently open, and offer promotional discounts. Provide the total number of check-ins during peak hours (defined as between 12:00 PM and 6:00 PM) for each restaurant, along with the average sentiment score of reviews. Ensure only businesses with a status marked as \"open\" and whose operating hours include the current time in the UTC time zone are considered.",
        "query": " SELECT      b.business_id,      b.business_type,      b.average_rating,      c.category_name,      n.neighbourhood_name,      SUM(ch.count) AS total_checkins_during_peak_hours,      AVG(r.review_sentiment_score) AS average_review_sentiment_score FROM      yelp_new.business b JOIN      yelp_new.category c ON b.category_id = c.category_id JOIN      yelp_new.neighbourhood n ON b.neighborhood_id = n.neighborhood_id LEFT JOIN      yelp_new.checkin ch ON b.business_id = ch.user_id JOIN      yelp_new.review r ON b.business_id = r.business_id WHERE      c.cuisine_type = 'Mexican'     AND n.neighbourhood_name = 'Dallas'     AND b.average_rating >= 3.5     AND b.business_status = 'open'     AND b.open_time <= CURRENT_TIME AT TIME ZONE 'UTC'      AND b.close_time > CURRENT_TIME AT TIME ZONE 'UTC'     AND b.price_tier LIKE '%discount%'     AND (ch.count IS NULL OR (ch.count IS NOT NULL AND (b.open_time <= '12:00:00' AND b.close_time >= '18:00:00'))) GROUP BY      b.business_id, b.business_type, b.average_rating, c.category_name, n.neighbourhood_name; ",
        "schema_links": [
            "category.cuisine_type",
            "business.business_type",
            "review.review_sentiment_score",
            "business.business_id",
            "business.business_status",
            "neighbourhood.neighbourhood_name",
            "checkin.user_id",
            "neighbourhood.neighborhood_id",
            "category.category_id",
            "business.neighborhood_id",
            "review.business_id",
            "business.average_rating",
            "business.close_time",
            "checkin.count",
            "category.category_name",
            "business.open_time",
            "business.category_id",
            "business.user_id",
            "business.price_tier"
        ]
    },
    {
        "instance_id": "q_968",
        "db_id": "business_info",
        "question": "Find Mexican restaurants in the Dallas neighborhood that have an average rating greater than 3.5, have been open for at least 2 years, offer promotional discounts, and are located in neighborhoods with a population above the average population of city-type neighborhoods. Additionally, consider only businesses that have received more than 50 reviews and have a positive review sentiment score exceeding 0.7, calculated as the ratio of positive reviews to the total number of reviews.",
        "query": " SELECT      b.business_id,      b.business_type,      b.average_rating,      n.neighbourhood_name,      c.category_name FROM      yelp_new.business AS b JOIN      yelp_new.category AS c ON b.category_id = c.category_id JOIN      yelp_new.neighbourhood AS n ON b.neighborhood_id = n.neighborhood_id WHERE      c.cuisine_type = 'Mexican'     AND n.neighborhood_name = 'Dallas'     AND b.average_rating > 3.5     AND b.business_status = 'open'     AND b.price_tier = 'discount'     AND b.review_count > 50     AND b.business_id IN (         SELECT business_id          FROM yelp_new.business          WHERE open_time <= NOW() - INTERVAL '2 years'     )     AND n.neighborhood_population > (         SELECT AVG(neighborhood_population)          FROM yelp_new.neighbourhood          WHERE neighborhood_type = 'city'     )     AND b.business_id IN (         SELECT business_id          FROM yelp_new.review          WHERE review_positive_count / (review_positive_count + review_negative_count) > 0.7     ); ",
        "schema_links": [
            "review.review_positive_count",
            "category.cuisine_type",
            "neighbourhood.neighborhood_name",
            "business.business_type",
            "review.business_id",
            "business.average_rating",
            "business.business_id",
            "business.business_status",
            "neighbourhood.neighbourhood_name",
            "category.category_name",
            "business.cuisine_type",
            "neighbourhood.neighborhood_id",
            "category.category_id",
            "business.open_time",
            "business.neighborhood_id",
            "business.category_id",
            "review.review_negative_count",
            "neighbourhood.neighborhood_population",
            "business.review_count",
            "business.price_tier"
        ]
    },
    {
        "instance_id": "q_966",
        "db_id": "business_info",
        "question": "Find restaurants located in urban neighborhoods with an above-average population that are currently open, have an average rating greater than 4, and have received positive reviews (rating > 3) within the past six months. Additionally, include only those restaurants that have received at least one tip with likes in the tip dataset.",
        "query": " SELECT      b.business_id,      b.business_type,      b.average_rating,      b.review_count,      n.neighbourhood_name,      n.neighborhood_population FROM      yelp_new.business AS b INNER JOIN      yelp_new.neighbourhood AS n ON b.neighborhood_id = n.neighborhood_code WHERE      b.business_type = 'restaurant'     AND n.neighborhood_type = 'urban'     AND n.neighborhood_population > (SELECT AVG(neighborhood_population) FROM yelp_new.neighbourhood)     AND b.business_status = 'open'     AND b.average_rating > 4     AND EXISTS (         SELECT 1          FROM yelp_new.review AS r          WHERE r.rating > 3              AND b.business_id = r.business_id              AND r.review_date >= CURRENT_DATE - INTERVAL '6 months'     )     AND EXISTS (         SELECT 1          FROM yelp_new.tip AS t          WHERE t.likes > 0              AND b.business_id = t.business_id     ); ",
        "schema_links": [
            "business.business_type",
            "review.business_id",
            "tip.business_id",
            "business.average_rating",
            "business.business_id",
            "neighbourhood.neighborhood_code",
            "business.business_status",
            "review.rating",
            "tip.likes",
            "neighbourhood.neighborhood_type",
            "business.neighborhood_id",
            "review.review_date",
            "neighbourhood.neighborhood_population",
            "business.review_count",
            "neighbourhood.neighbourhood_name"
        ]
    },
    {
        "instance_id": "q_971",
        "db_id": "business_info",
        "question": "Find all open restaurants offering Italian cuisine, located in neighborhoods with a population greater than 10,000. Include details about the business type, average customer rating, price tier, availability of delivery and reservation options, price range, and any promotional discounts (indicated by cuisine specialty). Sort the results in descending order based on the average customer rating.",
        "query": " SELECT      b.business_id,      b.business_type,      b.average_rating,      b.price_tier,      b.delivery_available,      b.reservation_available,      b.price_range,      c.cuisine_specialty AS promotional_discounts FROM      yelp_new.business b JOIN      yelp_new.category c ON b.category_id = c.category_id JOIN      yelp_new.neighbourhood n ON b.neighborhood_id = n.neighborhood_id WHERE      c.cuisine_type = 'Italian'     AND n.neighborhood_population > 10000     AND b.business_status = 'open' ORDER BY      b.average_rating DESC; ",
        "schema_links": [
            "category.cuisine_type",
            "business.reservation_available",
            "business.business_type",
            "business.average_rating",
            "category.cuisine_specialty",
            "business.business_id",
            "business.business_status",
            "business.price_range",
            "neighbourhood.neighborhood_id",
            "category.category_id",
            "business.neighborhood_id",
            "business.category_id",
            "business.delivery_available",
            "neighbourhood.neighborhood_population",
            "business.price_tier"
        ]
    },
    {
        "instance_id": "q_970",
        "db_id": "business_info",
        "question": "How many distinct restaurants in Edinburgh serve Egyptian cuisine, and what is their average rating among users who have written reviews for at least three different businesses?",
        "query": " SELECT      COUNT(DISTINCT b.business_id) AS restaurant_count,     AVG(b.average_rating) AS average_rating FROM      yelp_new.business b JOIN      yelp_new.category c ON b.category_id = c.category_id JOIN      yelp_new.neighbourhood n ON b.neighborhood_id = n.neighborhood_id JOIN      yelp_new.user u ON b.business_id = ANY (         SELECT ru.business_id         FROM yelp_new.review ru         WHERE ru.user_id = u.user_id         GROUP BY ru.user_id         HAVING COUNT(ru.rating) >= 3     ) WHERE      c.cuisine_type = 'Egyptian'     AND n.neighbourhood_name = 'Edinburgh'; ",
        "schema_links": [
            "category.cuisine_type",
            "review.user_id",
            "review.business_id",
            "business.average_rating",
            "business.business_id",
            "review.rating",
            "user.user_id",
            "neighbourhood.neighborhood_id",
            "category.category_id",
            "business.neighborhood_id",
            "business.category_id",
            "neighbourhood.neighbourhood_name"
        ]
    },
    {
        "instance_id": "q_972",
        "db_id": "academic_research",
        "question": "What are the top 10 keywords with a publication count exceeding 5 among authors affiliated with \"University of Michigan\" in the past five years, ranked by their growth rate (difference in occurrences between the last two years) in descending order, and then by their average weighted score in descending order? Include the keyword weight, average weighted score, publication count, and growth rate in the results.",
        "query": " WITH recent_publications AS (     SELECT          p.pid,          p.publication_year,          pk.kid,          pk.publication_keyword_weighted_score     FROM          publication p     JOIN          writes w ON p.pid = w.pid     JOIN          author a ON w.aid = a.aid     JOIN          publication_keyword pk ON p.pid = pk.pid     WHERE          a.author_institution LIKE '%University of Michigan%'         AND p.publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5 ), keyword_growth AS (     SELECT          r.kid,          k.keyword_weight,          AVG(r.publication_keyword_weighted_score) AS avg_weighted_score,         COUNT(DISTINCT r.pid) AS publication_count,         SUM(CASE WHEN r.publication_year = EXTRACT(YEAR FROM CURRENT_DATE) - 1 THEN 1 ELSE 0 END) -         SUM(CASE WHEN r.publication_year = EXTRACT(YEAR FROM CURRENT_DATE) - 2 THEN 1 ELSE 0 END) AS growth_rate     FROM          recent_publications r     JOIN          keyword k ON r.kid = k.kid     GROUP BY          r.kid, k.keyword_weight ) SELECT      kg.kid,      k.keyword_weight,      kg.avg_weighted_score,      kg.publication_count,      kg.growth_rate FROM      keyword_growth kg JOIN      keyword k ON kg.kid = k.kid WHERE      kg.publication_count > 5 ORDER BY      kg.growth_rate DESC,      kg.avg_weighted_score DESC LIMIT 10; ",
        "schema_links": [
            "author.author_institution",
            "writes.pid",
            "publication.pid",
            "publication_keyword.pid",
            "keyword.kid",
            "publication_keyword.kid",
            "publication.publication_year",
            "keyword.keyword_weight",
            "author.aid",
            "publication_keyword.publication_keyword_weighted_score",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_978",
        "db_id": "academic_research",
        "question": "Which publications authored by researchers from the institution of \"H. V. Jagadish\" have a strong association with the concept of \"User Study,\" considering both the frequency of the keyword (with importance score greater than 0.8 and weight above average) and the domain relevance score (greater than 0.7)? Additionally, provide insights into the citation trend of these publications over time, the diversity of collaboration among co-authors (measured by average affiliation similarity score), and ensure that only publications with more than one distinct co-author are included. Results should be ordered by descending citation trend and descending domain relevance score.",
        "query": " SELECT      p.pid AS publication_id,     p.publication_abstract_summary AS abstract_summary,     p.publication_citation_trend AS citation_trend,     COUNT(DISTINCT w.aid) AS co_author_count,     AVG(w.writes_affiliation_similarity_score) AS avg_collaboration_diversity,     dk.domain_keyword_frequency AS keyword_frequency,     da.domain_author_interests_similarity_score AS domain_relevance_score FROM      publication p JOIN      writes w ON p.pid = w.pid JOIN      author a ON w.aid = a.aid JOIN      publication_keyword pk ON p.pid = pk.pid JOIN      keyword k ON pk.kid = k.kid JOIN      domain_keyword dk ON k.kid = dk.did JOIN      domain_author da ON a.aid = da.did WHERE      a.author_institution = 'H. V. Jagadish'     AND k.keyword_importance_score > 0.8     AND dk.domain_keyword_frequency > (SELECT AVG(domain_keyword_frequency) FROM domain_keyword)     AND da.domain_author_interests_similarity_score > 0.7     AND k.keyword_weight IN (         SELECT keyword_weight          FROM keyword          WHERE keyword_weight > (SELECT AVG(keyword_weight) FROM keyword)     ) GROUP BY      p.pid, p.publication_abstract_summary, p.publication_citation_trend, dk.domain_keyword_frequency, da.domain_author_interests_similarity_score HAVING      COUNT(DISTINCT w.aid) > 1 ORDER BY      p.publication_citation_trend DESC, da.domain_author_interests_similarity_score DESC; ",
        "schema_links": [
            "writes.pid",
            "publication.pid",
            "domain_keyword.did",
            "writes.writes_affiliation_similarity_score",
            "publication.publication_citation_trend",
            "author.aid",
            "keyword.keyword_importance_score",
            "writes.aid",
            "publication.publication_abstract_summary",
            "author.author_institution",
            "domain_author.domain_author_interests_similarity_score",
            "domain_author.aid",
            "publication_keyword.pid",
            "keyword.kid",
            "publication_keyword.kid",
            "keyword.keyword_weight",
            "domain_keyword.domain_keyword_frequency",
            "domain_author.did"
        ]
    },
    {
        "instance_id": "q_979",
        "db_id": "academic_research",
        "question": "Which authors have a strong association with the domain of \"Relational Database\" based on their publication history, as evidenced by their domain weight and keyword frequency in related publications? Additionally, include authors who have participated in conferences within the last five years or contributed to journals with a focus on \"Relational Database\" and an impact factor greater than 2.0. Provide the authors' IDs, institutions, genders, domain weights, keyword frequencies, conference participation counts, and journal relevance measures, sorted in descending order of domain weight and keyword frequency.",
        "query": " SELECT      a.aid,     a.author_institution,     a.author_gender,     da.domain_author_rank AS domain_weight,     dk.domain_keyword_frequency AS keyword_frequency,     dc.domain_conference_attendance AS conference_participation,     dj.domain_journal_impact_factor AS journal_relevance FROM      author a JOIN      domain_author da ON a.aid = da.did JOIN      domain d ON da.did = d.did LEFT JOIN      domain_conference dc ON d.did = dc.did LEFT JOIN      domain_journal dj ON d.did = dj.did LEFT JOIN      domain_keyword dk ON d.did = dk.did WHERE      d.domain_description ILIKE '%Relational Database%'     AND (         dc.conference_start_date >= CURRENT_DATE - INTERVAL '5 years'         OR dj.domain_journal_focus ILIKE '%Relational Database%'     )     AND (dc.domain_conference_attendance > 0 OR dj.domain_journal_impact_factor > 2.0) ORDER BY      da.domain_author_rank DESC,     dk.domain_keyword_frequency DESC; ",
        "schema_links": [
            "author.author_gender",
            "author.author_institution",
            "domain_conference.domain_conference_attendance",
            "domain_journal.domain_journal_focus",
            "domain_journal.domain_journal_impact_factor",
            "domain_conference.conference_start_date",
            "domain_journal.did",
            "domain_keyword.did",
            "domain.domain_description",
            "domain_conference.did",
            "domain.did",
            "domain_author.domain_author_rank",
            "domain_author.did",
            "domain_keyword.domain_keyword_frequency",
            "author.aid"
        ]
    },
    {
        "instance_id": "q_974",
        "db_id": "academic_research",
        "question": "Which publications from the VLDB conference series, associated with authors affiliated to the University of Michigan, have been published over the past five years, and what are their citation trends? Provide the results sorted by publication year in descending order.",
        "query": " SELECT      p.pid AS publication_id,      p.publication_abstract_summary AS publication_summary,      p.publication_citation_trend AS citation_trend,      p.publication_year AS publication_year FROM      publication p JOIN      writes w ON p.pid = w.pid JOIN      author a ON w.aid = a.aid JOIN      domain_conference dc ON p.pid = dc.did JOIN      conference c ON dc.did = c.cid WHERE      a.author_institution LIKE '%University of Michigan%'     AND c.conference_location = 'VLDB'     AND p.publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5 ORDER BY      p.publication_year DESC; ",
        "schema_links": [
            "publication.publication_abstract_summary",
            "author.author_institution",
            "writes.pid",
            "publication.pid",
            "conference.conference_location",
            "domain_conference.did",
            "publication.publication_year",
            "publication.publication_citation_trend",
            "conference.cid",
            "author.aid",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_969",
        "db_id": "academic_research",
        "question": "Which publications in the PVLDB conference over the last five years are associated with authors from the University of Michigan, and what are their citation trends and collaboration scores? The results should be ordered by descending citation trend and descending collaboration score.",
        "query": " SELECT      p.pid AS publication_id,     p.publication_abstract_summary AS publication_summary,     p.publication_citation_trend AS citation_trend,     da.domain_author_collaboration_score AS collaboration_score FROM      publication p JOIN      writes w ON p.pid = w.pid JOIN      author a ON w.aid = a.aid JOIN      domain_author da ON a.aid = da.did JOIN      domain_conference dc ON da.did = dc.did JOIN      conference c ON dc.cid = c.cid WHERE      a.author_institution = 'University of Michigan'     AND c.conference_start_date >= NOW() - INTERVAL '5 years'     AND c.conference_location LIKE '%PVLDB%' ORDER BY      p.publication_citation_trend DESC,     da.domain_author_collaboration_score DESC; ",
        "schema_links": [
            "domain_conference.cid",
            "publication.publication_abstract_summary",
            "author.author_institution",
            "writes.pid",
            "domain_author.domain_author_collaboration_score",
            "publication.pid",
            "conference.conference_start_date",
            "conference.conference_location",
            "domain_conference.did",
            "publication.publication_citation_trend",
            "domain_author.did",
            "conference.cid",
            "author.aid",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_976",
        "db_id": "academic_research",
        "question": "请列出自2000年以来，所有隶属于密歇根大学的作者在PVLDB会议上发表的论文，并提供每位作者在其研究领域内的合作得分以及论文的引用网络规模。结果需按论文的引用趋势从高到低排序。确保包含以下信息：作者ID、所属机构、论文ID、论文引用趋势、论文引用网络以及作者的合作得分。",
        "query": " SELECT      a.aid AS author_id,     a.author_institution AS institution,     p.pid AS publication_id,     p.publication_citation_trend AS citation_trend,     p.publication_citation_network AS citation_network,     da.domain_author_collaboration_score AS collaboration_score FROM      author a JOIN      writes w ON a.aid = w.aid JOIN      publication p ON w.pid = p.pid JOIN      domain_author da ON a.aid = da.did JOIN      conference c ON p.publication_type = 'PVLDB' AND c.cid = p.pid WHERE      a.author_institution = 'University of Michigan'     AND p.publication_year >= 2000     AND c.conference_start_date >= '2000-01-01'::date ORDER BY      p.publication_citation_trend DESC; ",
        "schema_links": [
            "author.author_institution",
            "writes.pid",
            "domain_author.domain_author_collaboration_score",
            "publication.pid",
            "publication.publication_citation_network",
            "conference.conference_start_date",
            "publication.publication_type",
            "publication.publication_year",
            "publication.publication_citation_trend",
            "conference.cid",
            "domain_author.did",
            "author.aid",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_977",
        "db_id": "academic_research",
        "question": "How many distinct research articles has \"H. V. Jagadish\" contributed to as either the primary author or a significant co-author (ranked up to 3rd position) in high-impact conferences (with registration fees exceeding $500 and sponsored by high-impact organizations) or journals (with an impact factor greater than 2.0 and ranking within the top 10), published since the year 2000? Additionally, provide the average citation trend of these articles over the past decade.",
        "query": " SELECT      COUNT(DISTINCT p.pid) AS article_count,     AVG(p.publication_citation_trend) AS avg_citation_trend FROM      author a JOIN      writes w ON a.aid = w.aid JOIN      publication p ON w.pid = p.pid LEFT JOIN      conference c ON p.pid = c.cid LEFT JOIN      journal j ON p.pid = j.jid LEFT JOIN      domain_journal dj ON j.jid = dj.did LEFT JOIN      domain_conference dc ON c.cid = dc.did WHERE      a.author_institution = 'H. V. Jagadish'     AND (w.writes_primary_author = TRUE OR w.writes_co_author_rank <= 3)     AND p.publication_year >= 2000     AND ((c.conference_registration_fee > 500 AND c.conference_sponsorship_type = 'High-Impact')           OR (dj.domain_journal_impact_factor > 2.0 AND dj.domain_journal_ranking <= 10))     AND p.publication_type = 'research article'; ",
        "schema_links": [
            "domain_journal.domain_journal_ranking",
            "author.author_institution",
            "writes.pid",
            "domain_journal.domain_journal_impact_factor",
            "publication.pid",
            "domain_journal.did",
            "writes.writes_co_author_rank",
            "conference.conference_sponsorship_type",
            "writes.writes_primary_author",
            "conference.conference_registration_fee",
            "domain_conference.did",
            "publication.publication_type",
            "publication.publication_year",
            "publication.publication_citation_trend",
            "journal.jid",
            "conference.cid",
            "author.aid",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_973",
        "db_id": "academic_research",
        "question": "How many distinct research papers has \"H. V. Jagadish\" contributed to in the VLDB conference series, considering only conferences ranked in the top 10% based on historical participation trends, and focusing on publications from the last two decades?",
        "query": " SELECT COUNT(DISTINCT p.pid) AS paper_count FROM author a JOIN writes w ON a.aid = w.aid JOIN publication p ON w.pid = p.pid JOIN domain_conference dc ON p.publication_year BETWEEN YEAR(NOW()) - 20 AND YEAR(NOW()) JOIN conference c ON dc.did = c.cid WHERE a.author_name = 'H. V. Jagadish'   AND c.conference_location LIKE 'VLDB%'   AND c.domain_conference_attendance >= (     SELECT PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY domain_conference_attendance)     FROM domain_conference   ); ",
        "schema_links": [
            "writes.pid",
            "domain_conference.domain_conference_attendance",
            "author.author_name",
            "publication.pid",
            "conference.conference_location",
            "domain_conference.did",
            "publication.publication_year",
            "conference.domain_conference_attendance",
            "conference.cid",
            "author.aid",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_975",
        "db_id": "academic_research",
        "question": "How many distinct research domains are associated with the publications authored by \"H. V. Jagadish,\" based on the unique keywords in his works and their frequency within specific domains? Additionally, calculate the average growth trend of these research domains over the past five years, measured by the number of distinct topics per year.",
        "query": " WITH jagadish_publications AS (     SELECT DISTINCT p.pid     FROM writes w     JOIN author a ON w.aid = a.aid     JOIN publication p ON w.pid = p.pid     WHERE a.author_institution = 'H. V. Jagadish' ), publication_keywords AS (     SELECT DISTINCT pk.kid, pk.publication_keyword_weighted_score     FROM publication_keyword pk     JOIN jagadish_publications jp ON pk.pid = jp.pid ), keyword_domains AS (     SELECT DISTINCT d.did, k.kid, dk.domain_keyword_frequency     FROM domain_keyword dk     JOIN keyword k ON dk.did = k.kid     JOIN publication_keywords pk ON k.kid = pk.kid ), topic_growth AS (     SELECT kd.did, COUNT(DISTINCT pk.kid) AS topic_count, p.publication_year     FROM keyword_domains kd     JOIN publication_keyword pk ON kd.kid = pk.kid     JOIN publication p ON pk.pid = p.pid     WHERE p.publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5     GROUP BY kd.did, p.publication_year ) SELECT COUNT(DISTINCT did) AS distinct_topics, AVG(topic_count) AS avg_topic_growth FROM topic_growth; ",
        "schema_links": [
            "author.author_institution",
            "writes.pid",
            "publication.pid",
            "domain_keyword.kid",
            "domain_keyword.did",
            "publication_keyword.pid",
            "keyword.kid",
            "publication_keyword.kid",
            "publication.publication_year",
            "domain_keyword.domain_keyword_frequency",
            "author.aid",
            "publication_keyword.publication_keyword_weighted_score",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_981",
        "db_id": "academic_research",
        "question": "How many distinct keywords are associated with publications authored by researchers affiliated with the University of Michigan, where the publications have been cited at least 10 times and were published within the last 5 years?",
        "query": " SELECT COUNT(DISTINCT pk.kid) AS unique_keyword_count FROM writes w JOIN author a ON w.aid = a.aid JOIN publication p ON w.pid = p.pid JOIN publication_keyword pk ON p.pid = pk.pid WHERE a.author_institution = 'University of Michigan'   AND p.publication_citation_count >= 10   AND p.publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5; ",
        "schema_links": [
            "author.author_institution",
            "writes.pid",
            "publication.publication_citation_count",
            "publication_keyword.kid",
            "publication.pid",
            "publication.publication_year",
            "author.aid",
            "publication_keyword.pid",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_987",
        "db_id": "academic_research",
        "question": "How many publications has \"H. V. Jagadish\" contributed to from 2013 to the present, considering only those strongly associated with the concept of \"User Study\" based on both direct keyword matches (with a frequency greater than 5) and related domain interests (conferences with attendance greater than 10 or journals with a ranking higher than 7)? Additionally, provide the distribution of these publications by year, including the total count and the aggregated weighted score of publication keywords for each year, while specifying whether the publications are in conferences or journals.",
        "query": " WITH domain_relevance AS (     SELECT          d.did,         dk.domain_keyword_frequency,         dc.domain_conference_attendance,         dj.domain_journal_ranking,         dkp.publication_keyword_weighted_score     FROM domain d     JOIN domain_keyword dk ON d.did = dk.did     JOIN domain_conference dc ON d.did = dc.did     JOIN domain_journal dj ON d.did = dj.did     JOIN publication_keyword dkp ON dkp.pid = ANY(SELECT pid FROM domain_publication WHERE did = d.did)     WHERE dk.domain_keyword_frequency > 5 -- Assuming a threshold for strong association       AND d.domain_description ILIKE '%User Study%' ), author_publications AS (     SELECT          w.aid,         p.pid,         p.publication_year,         p.publication_type,         dr.domain_keyword_frequency,         dr.domain_conference_attendance,         dr.domain_journal_ranking,         dr.publication_keyword_weighted_score     FROM writes w     JOIN publication p ON w.pid = p.pid     JOIN author a ON w.aid = a.aid     JOIN domain_relevance dr ON p.pid = ANY(SELECT pid FROM domain_publication WHERE did = dr.did)     WHERE a.author_institution ILIKE '%H. V. Jagadish%'       AND (dr.domain_conference_attendance > 10 OR dr.domain_journal_ranking > 7) -- High relevance scores       AND p.publication_year >= 2013 -- Past decade ), trend_analysis AS (     SELECT          publication_year,         COUNT(pid) AS publication_count,         SUM(publication_keyword_weighted_score) AS total_weighted_score     FROM author_publications     GROUP BY publication_year     ORDER BY publication_year ) SELECT      ap.aid,     COUNT(ap.pid) AS total_publications,     STRING_AGG(DISTINCT ap.publication_type, ', ') AS publication_types,     ta.publication_year,     ta.publication_count,     ta.total_weighted_score FROM author_publications ap LEFT JOIN trend_analysis ta USING (publication_year) GROUP BY ap.aid, ta.publication_year, ta.publication_count, ta.total_weighted_score; ",
        "schema_links": [
            "domain_journal.domain_journal_ranking",
            "author.author_institution",
            "domain_conference.domain_conference_attendance",
            "writes.pid",
            "publication.pid",
            "domain_relevance.domain_keyword_frequency",
            "author_publications.publication_year",
            "domain_publication.pid",
            "domain_journal.did",
            "domain_keyword.did",
            "publication_keyword.pid",
            "domain.domain_description",
            "domain_conference.did",
            "publication_keyword.publication_keyword_weighted_score",
            "domain.did",
            "domain_relevance.domain_conference_attendance",
            "publication.publication_type",
            "trend_analysis.publication_count",
            "publication.publication_year",
            "domain_relevance.domain_journal_ranking",
            "domain_publication.did",
            "trend_analysis.total_weighted_score",
            "domain_keyword.domain_keyword_frequency",
            "author.aid",
            "domain_relevance.publication_keyword_weighted_score",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_984",
        "db_id": "academic_research",
        "question": "How many research articles in the PVLDB conference have focused on the topic of \"Keyword search\" within the last five years, broken down by year? Provide the trend of this research interest over time by showing the count of articles and the average citation count per year. Additionally, identify the top 5 emerging subtopics related to \"Keyword search\" based on keyword frequency analysis, including their weighted scores.",
        "query": " WITH filtered_publications AS (     SELECT          p.pid,         p.publication_year,         p.publication_citation_count,         pk.publication_keyword_weighted_score     FROM          publication p     INNER JOIN writes w ON p.pid = w.pid     INNER JOIN author a ON w.aid = a.aid     INNER JOIN conference c ON p.pid = c.cid     INNER JOIN publication_keyword pk ON p.pid = pk.pid     INNER JOIN keyword k ON pk.kid = k.kid     WHERE          c.conference_location = 'PVLDB'         AND p.publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5         AND LOWER(p.publication_abstract) LIKE '%keyword search%'         AND p.publication_type = 'research article' ), trend_analysis AS (     SELECT          publication_year,         COUNT(pid) AS article_count,         AVG(publication_citation_count) AS avg_citation_count     FROM          filtered_publications     GROUP BY          publication_year     ORDER BY          publication_year ), emerging_subtopics AS (     SELECT          k.kid,         k.keyword_weight,         SUM(fp.publication_keyword_weighted_score) AS total_weighted_score     FROM          filtered_publications fp     INNER JOIN publication_keyword pk ON fp.pid = pk.pid     INNER JOIN keyword k ON pk.kid = k.kid     WHERE          LOWER(k.keyword_weight) LIKE '%keyword search%'     GROUP BY          k.kid, k.keyword_weight     ORDER BY          total_weighted_score DESC     LIMIT 5 ) SELECT      ta.publication_year,     ta.article_count,     ta.avg_citation_count,     es.kid AS emerging_subtopic_id,     es.keyword_weight AS emerging_subtopic_keyword FROM      trend_analysis ta LEFT JOIN emerging_subtopics es ON 1=1; ",
        "schema_links": [
            "writes.pid",
            "trend_analysis.article_count",
            "publication.pid",
            "publication.publication_abstract",
            "emerging_subtopics.kid",
            "filtered_publications.publication_citation_count",
            "publication.publication_citation_count",
            "emerging_subtopics.keyword_weight",
            "author.aid",
            "filtered_publications.pid",
            "publication_keyword.publication_keyword_weighted_score",
            "trend_analysis.avg_citation_count",
            "writes.aid",
            "conference.conference_location",
            "publication_keyword.pid",
            "filtered_publications.publication_keyword_weighted_score",
            "keyword.kid",
            "publication_keyword.kid",
            "publication.publication_type",
            "publication.publication_year",
            "keyword.keyword_weight",
            "publication_year",
            "conference.cid",
            "trend_analysis.publication_year",
            "filtered_publications.publication_year",
            "publication.conference_location"
        ]
    },
    {
        "instance_id": "q_983",
        "db_id": "academic_research",
        "question": "How many publications in the VLDB conference series are strongly associated with the domain of \"Information Retrieval,\" considering both keyword frequency above the average and a domain confidence score greater than 0.8, within the past five years? Additionally, provide the yearly trend analysis of these publications from the start of the five-year period to the current year.",
        "query": " WITH domain_publication_count AS (     SELECT          dp.did,         COUNT(DISTINCT p.pid) AS publication_count     FROM          domain_publication dp     JOIN          domain d ON dp.did = d.did     JOIN          publication p ON dp.pid = p.pid     JOIN          domain_keyword dk ON dp.did = dk.did     WHERE          d.domain_description ILIKE '%Information Retrieval%'         AND dk.domain_keyword_frequency > (SELECT AVG(domain_keyword_frequency) FROM domain_keyword)         AND d.domain_confidence_score > 0.8         AND p.publication_year BETWEEN EXTRACT(YEAR FROM CURRENT_DATE) - 5 AND EXTRACT(YEAR FROM CURRENT_DATE)     GROUP BY          dp.did ), trend_analysis AS (     SELECT          p.publication_year,         COUNT(DISTINCT p.pid) AS yearly_publication_count     FROM          domain_publication dp     JOIN          domain d ON dp.did = d.did     JOIN          publication p ON dp.pid = p.pid     JOIN          domain_keyword dk ON dp.did = dk.did     WHERE          d.domain_description ILIKE '%Information Retrieval%'         AND dk.domain_keyword_frequency > (SELECT AVG(domain_keyword_frequency) FROM domain_keyword)         AND d.domain_confidence_score > 0.8         AND p.publication_year BETWEEN EXTRACT(YEAR FROM CURRENT_DATE) - 5 AND EXTRACT(YEAR FROM CURRENT_DATE)     GROUP BY          p.publication_year     ORDER BY          p.publication_year ) SELECT      (SELECT SUM(publication_count) FROM domain_publication_count) AS total_publications,     ta.publication_year,     ta.yearly_publication_count FROM      trend_analysis ta; ",
        "schema_links": [
            "domain.domain_description",
            "domain.did",
            "publication.pid",
            "domain_publication.pid",
            "publication.publication_year",
            "domain_publication.did",
            "domain.domain_confidence_score",
            "trend_analysis.publication_year",
            "domain_keyword.domain_keyword_frequency",
            "domain_publication_count.did",
            "domain_keyword.did"
        ]
    },
    {
        "instance_id": "q_980",
        "db_id": "academic_research",
        "question": "How many distinct authors have contributed to publications that prominently feature the concept of \"Relational Database,\" as indicated by a weighted keyword score greater than 0.5 for this specific keyword, while also demonstrating a domain expertise alignment with related research areas, evidenced by an interests similarity score exceeding 0.7 and belonging to domains whose descriptions include the term \"database\"?",
        "query": " SELECT COUNT(DISTINCT a.aid) AS author_count FROM author a JOIN writes w ON a.aid = w.aid JOIN publication p ON w.pid = p.pid JOIN publication_keyword pk ON p.pid = pk.pid JOIN keyword k ON pk.kid = k.kid JOIN domain_author da ON a.aid = da.domain_author_aid JOIN domain d ON da.did = d.did WHERE LOWER(k.keyword_text) = 'relational database'   AND pk.publication_keyword_weighted_score > 0.5   AND da.domain_author_interests_similarity > 0.7   AND d.domain_description ILIKE '%database%'; ",
        "schema_links": [
            "writes.pid",
            "publication.pid",
            "publication_keyword.pid",
            "domain_author.domain_author_aid",
            "keyword.kid",
            "domain.domain_description",
            "publication_keyword.kid",
            "domain.did",
            "keyword.keyword_text",
            "author.aid",
            "domain_author.did",
            "domain_author.domain_author_interests_similarity",
            "publication_keyword.publication_keyword_weighted_score",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_990",
        "db_id": "academic_research",
        "question": "How many distinct research papers in the field of Databases have been published by authors affiliated with the University of Michigan, where the papers have received at least 10 citations and were published within the last 5 years?",
        "query": " SELECT COUNT(DISTINCT p.pid) AS paper_count FROM publication p JOIN writes w ON p.pid = w.pid JOIN author a ON w.aid = a.aid JOIN domain_author da ON a.aid = da.did JOIN domain d ON da.did = d.did WHERE a.author_institution LIKE '%University of Michigan%'   AND p.publication_citation_count >= 10   AND p.publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5   AND d.domain_description = 'Databases'; ",
        "schema_links": [
            "author.author_institution",
            "writes.pid",
            "publication.pid",
            "domain.domain_description",
            "publication.publication_citation_count",
            "domain.did",
            "publication.publication_year",
            "author.aid",
            "domain_author.did",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_982",
        "db_id": "academic_research",
        "question": "How many distinct research papers were published by authors affiliated with the \"University of Michigan\" in conferences categorized under the VLDB series, where only conferences with an average attendance exceeding 100 participants over the past five years are considered?",
        "query": " SELECT COUNT(DISTINCT p.pid) AS paper_count FROM publication p JOIN writes w ON p.pid = w.pid JOIN author a ON w.aid = a.aid JOIN domain_conference dc ON p.pid = dc.did JOIN conference c ON dc.did = c.cid WHERE a.author_institution = 'University of Michigan'   AND dc.domain_conference_theme_category = 'VLDB'   AND c.cid IN (     SELECT cid     FROM conference     WHERE conference_start_date >= NOW() - INTERVAL '5 years'     GROUP BY cid     HAVING AVG(domain_conference_attendance) > 100   ); ",
        "schema_links": [
            "author.author_institution",
            "writes.pid",
            "publication.pid",
            "conference.conference_start_date",
            "domain_conference.did",
            "conference.domain_conference_attendance",
            "domain_conference.domain_conference_theme_category",
            "conference.cid",
            "author.aid",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_988",
        "db_id": "academic_research",
        "question": "How many distinct research articles, published within the last five years by authors affiliated with the \"University of Michigan\", have appeared in conferences or journals related to the field of data management, including those specifically associated with PVLDB? Consider only articles where the authors have a positive collaboration score and their normalized research interests include the term \"data management\".",
        "query": " SELECT COUNT(DISTINCT p.pid) AS research_article_count FROM publication p JOIN writes w ON p.pid = w.pid JOIN author a ON w.aid = a.aid JOIN domain_author da ON a.aid = da.domain_author JOIN domain d ON da.did = d.did LEFT JOIN domain_conference dc ON d.did = dc.did LEFT JOIN conference c ON dc.cid = c.cid LEFT JOIN domain_journal dj ON d.did = dj.did LEFT JOIN journal j ON dj.jid = j.jid WHERE a.author_institution = 'University of Michigan'   AND p.publication_type = 'research article'   AND d.domain_description ILIKE '%data management%'   AND p.publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5   AND (c.conference_sponsorship_type ILIKE '%PVLDB%' OR j.journal_publisher ILIKE '%PVLDB%')   AND da.domain_author_collaboration_score > 0   AND da.domain_author_interests_normalized ILIKE '%data management%'; ",
        "schema_links": [
            "writes.pid",
            "journal.journal_publisher",
            "domain_journal.jid",
            "publication.pid",
            "domain.domain_description",
            "domain.did",
            "author.aid",
            "writes.aid",
            "domain_conference.cid",
            "author.author_institution",
            "domain_author.domain_author_collaboration_score",
            "domain_journal.did",
            "conference.conference_sponsorship_type",
            "domain_conference.did",
            "domain_author.domain_author",
            "domain_author.domain_author_interests_normalized",
            "publication.publication_type",
            "publication.publication_year",
            "journal.jid",
            "conference.cid",
            "domain_author.did"
        ]
    },
    {
        "instance_id": "q_986",
        "db_id": "academic_research",
        "question": "How many distinct research articles published in PVLDB since the year 2000 have been authored by individuals affiliated with the University of Michigan, where these articles have received at least 10 citations and belong to the top 10% of publications within their respective domains based on quality score?",
        "query": " SELECT COUNT(DISTINCT p.pid) AS article_count FROM publication p JOIN writes w ON p.pid = w.pid JOIN author a ON w.aid = a.aid JOIN domain_author da ON a.aid = da.domain_author_rank JOIN domain d ON da.did = d.did WHERE p.publication_year >= 2000   AND p.publication_citation_count >= 10   AND a.author_institution = 'University of Michigan'   AND p.publication_type = 'research article'   AND p.publication_quality_score >= (     SELECT PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY p2.publication_quality_score)     FROM publication p2     JOIN domain_publication dp2 ON p2.pid = dp2.pid     WHERE dp2.did = d.did   )   AND EXISTS (     SELECT 1     FROM journal j     WHERE j.jid = p.jid       AND j.journal_publisher = 'PVLDB'   ); ",
        "schema_links": [
            "author.author_institution",
            "writes.pid",
            "journal.journal_publisher",
            "publication.pid",
            "domain_publication.pid",
            "publication.jid",
            "domain_author.aid",
            "publication.publication_citation_count",
            "domain.did",
            "publication.publication_type",
            "publication.publication_year",
            "domain_publication.did",
            "domain_author.domain_author_rank",
            "author.aid",
            "journal.jid",
            "publication.author_institution",
            "domain_author.did",
            "publication.publication_quality_score",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_985",
        "db_id": "academic_research",
        "question": "How many distinct researchers from the University of Michigan are actively contributing to the Databases domain, considering only those with a positive domain author rank, a collaboration score of 0.7 or higher, and who have published works since 2020 with an affiliation similarity score greater than 0.5?",
        "query": " SELECT COUNT(DISTINCT da.aid) AS active_researchers FROM domain_author da JOIN author a ON da.aid = a.aid JOIN domain d ON da.did = d.did WHERE a.author_institution = 'University of Michigan'   AND d.domain_description = 'Databases'   AND da.domain_author_rank > 0   AND da.domain_author_collaboration_score >= 0.7   AND EXISTS (     SELECT 1     FROM writes w     JOIN publication p ON w.pid = p.pid     WHERE w.aid = da.aid       AND p.publication_year >= 2020       AND w.writes_affiliation_similarity_score > 0.5   ); ",
        "schema_links": [
            "author.author_institution",
            "writes.pid",
            "domain_author.domain_author_collaboration_score",
            "publication.pid",
            "domain_author.aid",
            "writes.writes_affiliation_similarity_score",
            "domain.domain_description",
            "domain.did",
            "publication.publication_year",
            "domain_author.domain_author_rank",
            "domain_author.did",
            "author.aid",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_989",
        "db_id": "academic_research",
        "question": "找出与作者“H. V. Jagadish”（电子邮件：hvj@umich.edu）和“Divesh Srivastava”（电子邮件：divesh@research.att.com）均有合作关系的作者。对于这些作者，分析他们在过去五年内的研究兴趣演变趋势，包括其在各个领域的首次和最近发表年份、平均H指数变化情况，以及领域合作得分的变化情况。结果按作者电子邮件和领域描述排序展示。",
        "query": " WITH target_authors AS (     SELECT aid      FROM author      WHERE author.author_email = 'hvj@umich.edu' OR author.author_email = 'divesh@research.att.com' ), co_authors AS (     SELECT DISTINCT w1.aid      FROM writes w1     JOIN writes w2 ON w1.pid = w2.pid AND w1.aid != w2.aid     JOIN target_authors ta ON w2.aid = ta.aid     GROUP BY w1.aid     HAVING COUNT(DISTINCT ta.aid) = (SELECT COUNT(*) FROM target_authors) ), recent_publications AS (     SELECT pid, publication_year      FROM publication      WHERE publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5 ), author_interests AS (     SELECT da.aid, d.domain_description, da.domain_author_h_index, da.domain_author_collaboration_score, p.publication_year      FROM domain_author da     JOIN domain d ON da.did = d.did     JOIN writes w ON da.aid = w.aid     JOIN recent_publications rp ON w.pid = rp.pid     JOIN publication p ON w.pid = p.pid     WHERE da.aid IN (SELECT aid FROM co_authors) ) SELECT      ai.aid,      a.author_email,      ai.domain_description,      MIN(ai.publication_year) AS first_year,      MAX(ai.publication_year) AS last_year,      AVG(ai.domain_author_h_index) AS avg_h_index,      AVG(ai.domain_author_collaboration_score) AS avg_collaboration_score  FROM author_interests ai JOIN author a ON ai.aid = a.aid GROUP BY ai.aid, a.author_email, ai.domain_description ORDER BY a.author_email, ai.domain_description; ",
        "schema_links": [
            "writes.pid",
            "domain_author.domain_author_collaboration_score",
            "publication.pid",
            "domain_author.aid",
            "domain.domain_description",
            "domain.did",
            "domain_author.domain_author_h_index",
            "publication.publication_year",
            "author.author_email",
            "author.aid",
            "domain_author.did",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_999",
        "db_id": "academic_research",
        "question": "What are the publications co-authored by researchers affiliated with \"H. V. Jagadish\" and \"Divesh Srivastava,\" including their average citation trends over the past five years? Additionally, identify the domains where these researchers have achieved the highest collaboration scores, along with the chronological evolution of their normalized research interests and similarity scores across their joint publications.",
        "query": " WITH researcher_pubs AS (     SELECT w.aid, p.pid, p.publication_year, p.publication_citation_trend, d.domain_author_collaboration_score, d.did     FROM writes w     JOIN publication p ON w.pid = p.pid     JOIN domain_author d ON w.aid = d.aid     WHERE w.writes_primary_author = FALSE       AND w.aid IN (           SELECT aid            FROM author            WHERE author.author_institution LIKE '%H. V. Jagadish%'               OR author.author_institution LIKE '%Divesh Srivastava%'       ) ), filtered_pubs AS (     SELECT DISTINCT rp.pid, rp.publication_year, rp.publication_citation_trend, rp.did     FROM researcher_pubs rp     GROUP BY rp.pid, rp.publication_year, rp.publication_citation_trend, rp.did     HAVING COUNT(DISTINCT rp.aid) = 2 ), citation_trends AS (     SELECT fp.pid, AVG(fp.publication_citation_trend) AS avg_citation_trend     FROM filtered_pubs fp     WHERE fp.publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5     GROUP BY fp.pid ), collaboration_domains AS (     SELECT fp.did, MAX(d.domain_author_collaboration_score) AS max_collaboration_score     FROM filtered_pubs fp     JOIN domain_author d ON fp.did = d.did     GROUP BY fp.did ), interest_evolution AS (     SELECT d.did, d.domain_author_interests_normalized, d.domain_author_interests_similarity_score, p.publication_year     FROM domain_author d     JOIN filtered_pubs fp ON d.aid = fp.aid AND d.did = fp.did     JOIN publication p ON fp.pid = p.pid     ORDER BY p.publication_year ) SELECT ct.pid, ct.avg_citation_trend, cd.did, cd.max_collaboration_score, ie.domain_author_interests_normalized, ie.domain_author_interests_similarity_score, ie.publication_year FROM citation_trends ct JOIN collaboration_domains cd ON TRUE JOIN interest_evolution ie ON cd.did = ie.did; ",
        "schema_links": [
            "author.author_institution",
            "domain_author.domain_author_collaboration_score",
            "collaboration_domains.max_collaboration_score",
            "publication.pid",
            "citation_trends.pid",
            "interest_evolution.publication_year",
            "filtered_pubs.did",
            "domain_author.domain_author_interests_similarity_score",
            "domain_author.aid",
            "filtered_pubs.publication_citation_trend",
            "writes.writes_primary_author",
            "collaboration_domains.fp.did",
            "citation_trends.avg_citation_trend",
            "filtered_pubs.publication_year",
            "filtered_pubs.pid",
            "interest_evolution.domain_author_interests_normalized",
            "domain_author.domain_author_interests_normalized",
            "interest_evolution.d.did",
            "interest_evolution.domain_author_interests_similarity_score",
            "publication.publication_year",
            "publication.publication_citation_trend",
            "publication.p.publication_year",
            "domain_author.did",
            "author.aid",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_991",
        "db_id": "academic_research",
        "question": "Which publications authored by \"H. V. Jagadish\" and \"Yunyao Li\" since 2005 have received the highest citation growth rate, considering only those where the authors' collaboration score within the respective domain exceeds 0.8? Additionally, how do these publications align with their primary research domains in terms of domain relevance and keyword frequency, specifically showing the publication year, citation growth rate, domain description, and domain keyword frequency?",
        "query": " WITH RelevantAuthors AS (     SELECT aid      FROM author      WHERE author.author_institution IN ('H. V. Jagadish', 'Yunyao Li') ), FilteredPublications AS (     SELECT DISTINCT p.pid, p.publication_year, p.publication_citation_trend, d.did      FROM publication p     JOIN writes w ON p.pid = w.pid     JOIN RelevantAuthors ra ON w.aid = ra.aid     JOIN domain_author da ON w.aid = da.aid     WHERE p.publication_year >= 2005        AND da.domain_author_collaboration_score > 0.8 ), DomainAlignment AS (     SELECT fp.pid, fp.publication_year, fp.publication_citation_trend, dk.domain_keyword_frequency, d.domain_description      FROM FilteredPublications fp     JOIN domain_conference dc ON fp.did = dc.did     JOIN domain_keyword dk ON fp.did = dk.did     JOIN domain d ON fp.did = d.did ) SELECT pid, publication_year, publication_citation_trend, domain_description, domain_keyword_frequency FROM DomainAlignment ORDER BY publication_citation_trend DESC; ",
        "schema_links": [
            "author.author_institution",
            "writes.pid",
            "domain_author.domain_author_collaboration_score",
            "publication.pid",
            "domain_author.aid",
            "domain_keyword.did",
            "domain.domain_description",
            "domain_conference.did",
            "domain.did",
            "publication.publication_year",
            "publication.publication_citation_trend",
            "domain_keyword.domain_keyword_frequency",
            "author.aid",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_1002",
        "db_id": "academic_research",
        "question": "Which publications co-authored by \"H. V. Jagadish\" and \"Yunyao Li\" have received a citation growth rate over the past five years, where these publications have been cited more than 50 times and are associated with either conferences (with a registration fee impact factor above 2.0) or journals (published in the USA or UK)? Additionally, provide the primary research domains of the authors based on domain confidence scores exceeding 0.8, ordered by the highest citation growth rate, limited to the top 10 results.",
        "query": " SELECT      p.pid AS publication_id,     p.publication_abstract_summary,     p.publication_citation_trend AS citation_growth_rate,     d.domain_description,     dc.domain_confidence_score FROM      publication p JOIN      writes w1 ON p.pid = w1.pid AND w1.aid = (SELECT aid FROM author WHERE author.author_email = 'h.v.jagadish@example.com') JOIN      writes w2 ON p.pid = w2.pid AND w2.aid = (SELECT aid FROM author WHERE author.author_email = 'yunyao.li@example.com') LEFT JOIN      domain_author da1 ON w1.aid = da1.aid LEFT JOIN      domain d ON da1.did = d.did LEFT JOIN      domain_conference dc ON d.did = dc.did LEFT JOIN      conference c ON dc.cid = c.cid AND c.conference_registration_fee > 2.0 LEFT JOIN      domain_journal dj ON d.did = dj.did LEFT JOIN      journal j ON dj.jid = j.jid AND j.journal_publisher_country IN ('USA', 'UK') WHERE      p.publication_citation_count > 50     AND p.publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5     AND (c.cid IS NOT NULL OR j.jid IS NOT NULL)     AND dc.domain_confidence_score > 0.8 ORDER BY      p.publication_citation_trend DESC LIMIT 10; ",
        "schema_links": [
            "writes.pid",
            "domain_journal.jid",
            "publication.pid",
            "journal.journal_publisher_country",
            "domain.domain_description",
            "publication.publication_citation_count",
            "domain.did",
            "domain_conference.domain_confidence_score",
            "publication.publication_citation_trend",
            "author.aid",
            "writes.aid",
            "domain_conference.cid",
            "publication.publication_abstract_summary",
            "domain_journal.did",
            "domain_author.aid",
            "conference.conference_registration_fee",
            "domain_conference.did",
            "publication.publication_year",
            "author.author_email",
            "journal.jid",
            "conference.cid",
            "domain_author.did"
        ]
    },
    {
        "instance_id": "q_994",
        "db_id": "academic_research",
        "question": "Which publications in the PVLDB venue, authored jointly by \"H. V. Jagadish\" and \"Yunyao Li\" since 2005, have shown a positive citation trend indicating growing academic interest? Additionally, provide the domain-specific confidence score associated with these publications, considering only those papers where the primary author has a collaboration score above the average within their research domain.",
        "query": " SELECT      p.pid AS publication_id,     p.publication_year,     p.publication_citation_trend,     d.domain_confidence_score FROM      academic_new.publication p JOIN      academic_new.writes w1 ON p.pid = w1.pid JOIN      academic_new.author a1 ON w1.aid = a1.aid JOIN      academic_new.writes w2 ON p.pid = w2.pid JOIN      academic_new.author a2 ON w2.aid = a2.aid JOIN      academic_new.domain_author da ON w1.aid = da.did JOIN      academic_new.domain d ON da.did = d.did WHERE      a1.author_institution = 'H. V. Jagadish'     AND a2.author_institution = 'Yunyao Li'     AND p.publication_year >= 2005     AND p.publication_citation_trend > 0     AND w1.writes_primary_author = TRUE     AND da.domain_author_collaboration_score > (         SELECT AVG(domain_author_collaboration_score)         FROM academic_new.domain_author         WHERE did = da.did     )     AND p.publication_type = 'PVLDB'; ",
        "schema_links": [
            "author.author_institution",
            "writes.pid",
            "domain_author.domain_author_collaboration_score",
            "publication.pid",
            "domain.domain_confidence_score",
            "writes.writes_primary_author",
            "domain.did",
            "publication.publication_type",
            "publication.publication_year",
            "publication.publication_citation_trend",
            "author.aid",
            "domain_author.did",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_997",
        "db_id": "academic_research",
        "question": "Which publications, authored jointly by \"H. V. Jagadish\" and \"Divesh Srivastava\" before the year 2000, have the highest citation trend and belong to domains with a collaboration score greater than 0.8 between the authors? Additionally, provide the evolution of domain interests for these authors during the same period, including both the raw and normalized domain interests.",
        "query": " WITH RelevantAuthors AS (     SELECT aid      FROM author      WHERE author.author_institution IN ('H. V. Jagadish', 'Divesh Srivastava') ), AuthorPublications AS (     SELECT w.aid, p.pid, p.publication_year, p.publication_citation_trend, d.domain_author_collaboration_score     FROM writes w     JOIN publication p ON w.pid = p.pid     JOIN domain_author d ON w.aid = d.did     WHERE w.aid IN (SELECT aid FROM RelevantAuthors)       AND p.publication_year < 2000       AND d.domain_author_collaboration_score > 0.8 ), FilteredPublications AS (     SELECT ap.pid, ap.publication_year, ap.publication_citation_trend, ap.domain_author_collaboration_score     FROM AuthorPublications ap     GROUP BY ap.pid, ap.publication_year, ap.publication_citation_trend, ap.domain_author_collaboration_score     HAVING COUNT(DISTINCT ap.aid) = 2 ), TopCitationTrend AS (     SELECT fp.pid, fp.publication_year, fp.publication_citation_trend     FROM FilteredPublications fp     ORDER BY fp.publication_citation_trend DESC     LIMIT 1 ), DomainInterestsEvolution AS (     SELECT da.did, da.domain_author_interests, da.domain_author_interests_normalized, p.publication_year     FROM domain_author da     JOIN writes w ON da.did = w.aid     JOIN publication p ON w.pid = p.pid     WHERE w.aid IN (SELECT aid FROM RelevantAuthors)       AND p.publication_year < 2000 ) SELECT tc.pid, tc.publication_year, tc.publication_citation_trend, di.domain_author_interests, di.domain_author_interests_normalized FROM TopCitationTrend tc JOIN DomainInterestsEvolution di ON tc.publication_year = di.publication_year; ",
        "schema_links": [
            "author.author_institution",
            "writes.pid",
            "domain_author.domain_author_collaboration_score",
            "publication.pid",
            "domain_author.domain_author_interests",
            "domain_author.domain_author_interests_normalized",
            "publication.publication_year",
            "publication.publication_citation_trend",
            "author.aid",
            "domain_author.did",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_993",
        "db_id": "academic_research",
        "question": "Which authors have written publications that reference \"H. V. Jagadish\" and demonstrate expertise in related research domains, as evidenced by their domain weights and collaboration scores exceeding 0.7? Include authors who have actively contributed to conferences or journals closely associated with the same research areas within the past five years, prioritizing results by descending collaboration score and H-index.",
        "query": " SELECT DISTINCT a.aid, a.author_institution, a.author_gender, a.author_tenure_status, da.domain_author_rank, da.domain_author_h_index, da.domain_author_collaboration_score FROM academic_new.author a JOIN academic_new.writes w ON a.aid = w.aid JOIN academic_new.publication p ON w.pid = p.pid JOIN academic_new.publication_keyword pk ON p.pid = pk.pid JOIN academic_new.keyword k ON pk.pid = k.kid JOIN academic_new.domain_keyword dk ON k.kid = dk.did JOIN academic_new.domain_author da ON dk.did = da.did AND a.aid = da.aid LEFT JOIN academic_new.conference c ON da.did = c.cid LEFT JOIN academic_new.domain_conference dc ON c.cid = dc.cid AND dc.did = da.did LEFT JOIN academic_new.journal j ON da.did = j.jid LEFT JOIN academic_new.domain_journal dj ON j.jid = dj.jid AND dj.did = da.did WHERE p.publication_abstract LIKE '%H. V. Jagadish%'   AND (c.conference_start_date >= CURRENT_DATE - INTERVAL '5 years' OR p.publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5)   AND da.domain_author_collaboration_score > 0   AND da.domain_author_interests_similarity_score > 0.7 ORDER BY da.domain_author_collaboration_score DESC, da.domain_author_h_index DESC; ",
        "schema_links": [
            "author.author_gender",
            "writes.pid",
            "domain_journal.jid",
            "publication.pid",
            "publication.publication_abstract",
            "domain_keyword.did",
            "domain_author.domain_author_h_index",
            "domain_author.domain_author_rank",
            "author.aid",
            "author.author_tenure_status",
            "writes.aid",
            "domain_conference.cid",
            "author.author_institution",
            "domain_author.domain_author_collaboration_score",
            "domain_journal.did",
            "domain_author.domain_author_interests_similarity_score",
            "domain_author.aid",
            "conference.conference_start_date",
            "publication_keyword.pid",
            "keyword.kid",
            "domain_conference.did",
            "publication.publication_year",
            "journal.jid",
            "conference.cid",
            "domain_author.did"
        ]
    },
    {
        "instance_id": "q_1004",
        "db_id": "academic_research",
        "question": "How many distinct research papers have both \"H. V. Jagadish\" and \"Divesh Srivastava\" co-authored as primary authors, where the publications are associated with domains having a confidence score greater than 0.8? Additionally, what is the average domain exclusivity similarity between these two authors across the selected publications?",
        "query": " SELECT COUNT(DISTINCT pk.pid) AS coauthored_paper_count, AVG(da1.domain_author_interests_similarity) AS avg_domain_exclusivity FROM writes w1 JOIN writes w2 ON w1.pid = w2.pid JOIN publication_keyword pk ON w1.pid = pk.pid JOIN domain_author da1 ON w1.aid = da1.aid JOIN domain_author da2 ON w2.aid = da2.aid JOIN domain d ON da1.did = d.did AND da2.did = d.did WHERE w1.writes_primary_author = TRUE    AND w2.writes_primary_author = TRUE    AND w1.aid = (SELECT aid FROM author WHERE author_institution = 'H. V. Jagadish')    AND w2.aid = (SELECT aid FROM author WHERE author_institution = 'Divesh Srivastava')    AND d.domain_confidence_score > 0.8; ",
        "schema_links": [
            "writes.pid",
            "domain.domain_confidence_score",
            "domain_author.aid",
            "writes.writes_primary_author",
            "publication_keyword.pid",
            "domain.did",
            "domain_author.did",
            "author.aid",
            "domain_author.domain_author_interests_similarity",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_992",
        "db_id": "academic_research",
        "question": "How many distinct publications were co-authored by \"H. V. Jagadish\" and \"Divesh Srivastava\" before the year 2000, where both authors collaborated within the top 10% most cited conferences in their respective research domains?",
        "query": " SELECT COUNT(DISTINCT p.pid) AS publication_count FROM author a1 JOIN writes w1 ON a1.aid = w1.aid JOIN publication p ON w1.pid = p.pid JOIN writes w2 ON p.pid = w2.pid JOIN author a2 ON w2.aid = a2.aid JOIN domain_author da1 ON a1.aid = da1.aid JOIN domain_conference dc1 ON da1.did = dc1.did JOIN conference c ON dc1.cid = c.cid JOIN (     SELECT dc.did, cid, conference_citation_rank     FROM domain_conference dc     JOIN (         SELECT cid, RANK() OVER (PARTITION BY dc.did ORDER BY conference_citation_count DESC) AS conference_citation_rank,                MAX(conference_citation_count) OVER (PARTITION BY dc.did) AS max_citations         FROM domain_conference dc         JOIN (             SELECT cid, COUNT(pid) AS conference_citation_count             FROM publication             JOIN writes ON publication.pid = writes.pid             JOIN conference ON publication.cid = conference.cid             GROUP BY cid         ) conf_citations ON dc.cid = conf_citations.cid     ) ranked_conferences ON dc.cid = ranked_conferences.cid     WHERE ranked_conferences.conference_citation_rank <= 0.1 * COUNT(*) OVER (PARTITION BY dc.did) ) top_conferences ON dc1.cid = top_conferences.cid AND da1.did = top_conferences.did WHERE a1.author_name = 'H. V. Jagadish'   AND a2.author_name = 'Divesh Srivastava'   AND w1.writes_co_author_rank IS NOT NULL   AND w2.writes_co_author_rank IS NOT NULL   AND p.publication_year < 2000; ",
        "schema_links": [
            "domain_conference.cid",
            "writes.pid",
            "publication.cid",
            "publication.pid",
            "author.author_name",
            "top_conferences.did",
            "domain_author.aid",
            "writes.writes_co_author_rank",
            "domain_conference.did",
            "publication.publication_year",
            "conference.cid",
            "author.aid",
            "top_conferences.cid",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_996",
        "db_id": "academic_research",
        "question": "How many distinct publications have \"H. V. Jagadish,\" \"Yunyao Li,\" and \"Cong Yu\" contributed to as primary authors or with a collaboration score greater than 0.75 within their domain of expertise, published in the last five years? Additionally, what is the average citation trend for these publications over the same period?",
        "query": " SELECT      COUNT(DISTINCT p.pid) AS publication_count,     AVG(p.publication_citation_trend) AS avg_citation_trend FROM      author a JOIN writes w ON a.aid = w.aid JOIN publication p ON w.pid = p.pid JOIN domain_author da ON a.aid = da.domain_author_rank WHERE      (a.author_institution = 'H. V. Jagadish' OR a.author_institution = 'Yunyao Li' OR a.author_institution = 'Cong Yu')     AND (w.writes_primary_author = TRUE OR da.domain_author_collaboration_score > 0.75)     AND p.publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5; ",
        "schema_links": [
            "author.author_institution",
            "writes.pid",
            "domain_author.domain_author_collaboration_score",
            "publication.pid",
            "writes.writes_primary_author",
            "publication.publication_year",
            "domain_author.domain_author_rank",
            "publication.publication_citation_trend",
            "author.aid",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_998",
        "db_id": "academic_research",
        "question": "How many distinct researchers have engaged with the works of \"H. V. Jagadish\" by either citing or co-authoring publications within his research domains over the past five years, while maintaining a sustained interest in these domains with a similarity score greater than 0.7?",
        "query": " SELECT COUNT(DISTINCT da.aid) AS researcher_count FROM domain_author da JOIN author a ON da.aid = a.aid JOIN writes w ON da.aid = w.aid JOIN publication p ON w.pid = p.pid JOIN publication_keyword pk ON p.pid = pk.pid JOIN domain d ON da.did = d.did WHERE EXISTS (     SELECT 1     FROM writes w2     JOIN author a2 ON w2.aid = a2.aid     JOIN publication p2 ON w2.pid = p2.pid     WHERE a2.author_institution = 'H. V. Jagadish'       AND p2.publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5       AND p2.publication_year <= EXTRACT(YEAR FROM CURRENT_DATE)       AND w2.writes_primary_author = TRUE ) AND p.publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5 AND p.publication_year <= EXTRACT(YEAR FROM CURRENT_DATE) AND da.domain_author_interests_similarity_score > 0.7; ",
        "schema_links": [
            "author.author_institution",
            "writes.pid",
            "publication.pid",
            "domain_author.domain_author_interests_similarity_score",
            "domain_author.aid",
            "writes.writes_primary_author",
            "publication_keyword.pid",
            "domain.did",
            "publication.publication_year",
            "author.aid",
            "domain_author.did",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_1001",
        "db_id": "academic_research",
        "question": "Which publications, cited more than 200 times, involve authors with a strong focus on database systems (as indicated by a domain description containing \"database systems\" and an h-index of at least 20), specifically highlighting works co-authored by experts in the field, ordered by citation count in descending order?",
        "query": " SELECT DISTINCT p.pid, p.publication_abstract_summary, p.publication_citation_count FROM publication p JOIN writes w ON p.pid = w.pid JOIN author a ON w.aid = a.aid JOIN domain_author da ON a.aid = da.did JOIN domain d ON da.did = d.did WHERE p.publication_citation_count > 200   AND d.domain_description ILIKE '%database systems%'   AND w.writes_co_author_rank IS NOT NULL   AND da.domain_author_h_index >= 20 ORDER BY p.publication_citation_count DESC; ",
        "schema_links": [
            "publication.publication_abstract_summary",
            "writes.pid",
            "publication.pid",
            "writes.writes_co_author_rank",
            "domain.domain_description",
            "publication.publication_citation_count",
            "domain.did",
            "domain_author.domain_author_h_index",
            "author.aid",
            "domain_author.did",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_995",
        "db_id": "academic_research",
        "question": "Which author has the highest expertise in the area of \"Relational Database,\" as measured by both the total number of publications and the weighted impact of those publications within the domain, where weighted impact is calculated as the sum of each publication's quality score multiplied by its keyword-weighted score?",
        "query": " SELECT      a.aid,      a.author_institution,      COUNT(p.pid) AS publication_count,      SUM(p.publication_quality_score * pk.publication_keyword_weighted_score) AS weighted_impact FROM      author a JOIN      writes w ON a.aid = w.aid JOIN      publication p ON w.pid = p.pid JOIN      publication_keyword pk ON p.pid = pk.pid JOIN      keyword k ON pk.kid = k.kid JOIN      domain_author da ON a.aid = da.did JOIN      domain d ON da.did = d.did WHERE      d.domain_description ILIKE '%Relational Database%' GROUP BY      a.aid, a.author_institution ORDER BY      weighted_impact DESC, publication_count DESC LIMIT 1; ",
        "schema_links": [
            "author.author_institution",
            "writes.pid",
            "publication.pid",
            "publication_keyword.pid",
            "keyword.kid",
            "domain.domain_description",
            "publication_keyword.kid",
            "domain.did",
            "author.aid",
            "domain_author.did",
            "publication.publication_quality_score",
            "publication_keyword.publication_keyword_weighted_score",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_1000",
        "db_id": "academic_research",
        "question": "Which conference, held after January 1, 2020, has the highest combined score based on the total frequency of the keyword \"Relational Database\" in related publications and the average domain relevance score of the conference theme? Consider only keywords with an importance score greater than 0.8 and publications whose abstracts explicitly mention \"Relational Database.\" Additionally, prioritize conferences with lower virtual participation rates to identify the most influential event in this area.",
        "query": " SELECT      c.cid,      c.conference_location,      c.conference_start_date,      c.conference_end_date,      SUM(dk.domain_keyword_frequency) AS keyword_frequency_sum,      AVG(dc.domain_conference_theme_similarity_score) AS domain_relevance_avg,      c.conference_duration,      c.conference_registration_fee,      c.conference_sponsorship_type FROM      conference c JOIN      domain_conference dc ON c.cid = dc.did JOIN      domain_keyword dk ON dc.did = dk.did JOIN      keyword k ON dk.did = k.kid JOIN      publication p ON dk.did = p.pid WHERE      k.keyword_importance_score > 0.8      AND p.publication_abstract ILIKE '%Relational Database%'      AND c.conference_start_date >= '2020-01-01'::DATE GROUP BY      c.cid,      c.conference_location,      c.conference_start_date,      c.conference_end_date,      c.conference_duration,      c.conference_registration_fee,      c.conference_sponsorship_type ORDER BY      keyword_frequency_sum DESC,      domain_relevance_avg DESC,      c.conference_virtual_participation ASC LIMIT 1; ",
        "schema_links": [
            "conference.conference_duration",
            "publication.pid",
            "publication.publication_abstract",
            "conference.conference_end_date",
            "conference.conference_start_date",
            "conference.conference_sponsorship_type",
            "conference.conference_location",
            "domain_keyword.did",
            "conference.conference_registration_fee",
            "keyword.kid",
            "domain_conference.did",
            "conference.cid",
            "domain_keyword.domain_keyword_frequency",
            "keyword.keyword_importance_score",
            "domain_conference.domain_conference_theme_similarity_score"
        ]
    },
    {
        "instance_id": "q_1012",
        "db_id": "academic_research",
        "question": "Which conference has the highest combined score of keyword relevance and domain relevance related to \"Relational Database,\" considering the frequency of the keyword in publications and the domain's conference theme similarity score? Include only conferences with at least one publication mentioning \"Relational Database\" in the abstract, and rank the results by the total score descending, finally selecting the most influential conference based on these criteria.",
        "query": " SELECT      c.cid,      c.conference_location,      c.conference_start_date,      c.conference_end_date,     SUM(dk.domain_keyword_frequency * pk.publication_keyword_weighted_score) AS keyword_relevance_score,     dc.domain_conference_theme_similarity_score AS domain_relevance_score,     c.conference_registration_fee,      c.conference_duration,      c.conference_sponsorship_type FROM      conference c JOIN      domain_conference dc ON c.cid = dc.did JOIN      domain_keyword dk ON dc.did = dk.did JOIN      publication_keyword pk ON dk.did = pk.pid JOIN      publication p ON pk.pid = p.pid WHERE      dk.domain_keyword_frequency > 0      AND p.publication_abstract ILIKE '%Relational Database%' GROUP BY      c.cid, c.conference_location, c.conference_start_date, c.conference_end_date, dc.domain_conference_theme_similarity_score ORDER BY      (SUM(dk.domain_keyword_frequency * pk.publication_keyword_weighted_score) + dc.domain_conference_theme_similarity_score) DESC LIMIT 1; ",
        "schema_links": [
            "conference.conference_duration",
            "publication.pid",
            "publication.publication_abstract",
            "conference.conference_end_date",
            "conference.conference_start_date",
            "conference.conference_sponsorship_type",
            "conference.conference_location",
            "domain_keyword.did",
            "conference.conference_registration_fee",
            "publication_keyword.pid",
            "domain_conference.did",
            "publication_keyword.publication_keyword_weighted_score",
            "conference.cid",
            "domain_keyword.domain_keyword_frequency",
            "domain_conference.domain_conference_theme_similarity_score"
        ]
    },
    {
        "instance_id": "q_1003",
        "db_id": "academic_research",
        "question": "Which journal has the highest keyword concentration score for publications related to \"Relational Database\" over the past five years, calculated as the sum of the product of the keyword frequency in articles and the journal's domain relevance score?",
        "query": " SELECT      j.jid AS journal_id,      j.journal_publisher AS journal_name,      SUM(dk.domain_keyword_frequency * pk.publication_keyword_weighted_score) AS keyword_concentration_score FROM      journal j JOIN      publication p ON j.jid = p.pid JOIN      publication_keyword pk ON p.pid = pk.pid JOIN      keyword k ON pk.kid = k.kid JOIN      domain_keyword dk ON k.kid = dk.did JOIN      domain_journal dj ON j.jid = dj.jid AND dk.did = dj.did WHERE      k.keyword = 'Relational Database'     AND p.publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5 GROUP BY      j.jid, j.journal_publisher ORDER BY      keyword_concentration_score DESC LIMIT 1; ",
        "schema_links": [
            "journal.journal_publisher",
            "domain_journal.jid",
            "publication.pid",
            "domain_journal.did",
            "domain_keyword.did",
            "keyword.keyword",
            "publication_keyword.pid",
            "keyword.kid",
            "publication_keyword.kid",
            "publication.publication_year",
            "journal.jid",
            "domain_keyword.domain_keyword_frequency",
            "publication_keyword.publication_keyword_weighted_score"
        ]
    },
    {
        "instance_id": "q_1005",
        "db_id": "academic_research",
        "question": "Which journal, published in the USA, UK, Canada, or Australia, exhibits the highest relevance to the topic of \"Relational Database\" by considering both the total frequency of related keywords with an importance score greater than 0.7 and the average positive impact factor trend over the past five years, ensuring that the journal has a focus similarity score of at least 0.8 and more than 5 publications related to the topic?",
        "query": " SELECT      j.jid AS journal_id,      j.journal_publisher AS journal_name,      SUM(dk.domain_keyword_frequency) AS total_keyword_frequency,      AVG(dj.domain_journal_impact_factor_trend) AS avg_impact_factor_trend FROM      journal j JOIN      domain_journal dj ON j.jid = dj.did JOIN      domain_keyword dk ON dj.did = dk.did JOIN      keyword k ON dk.did = k.kid WHERE      k.keyword_importance_score > 0.7      AND j.journal_publisher_country IN ('USA', 'UK', 'Canada', 'Australia')     AND dj.domain_journal_impact_factor_trend > 0     AND dj.domain_journal_focus ILIKE '%Relational Database%'     AND dj.domain_journal_impact_factor_similarity_score >= 0.8 GROUP BY      j.jid, j.journal_publisher HAVING      COUNT(dj.domain_journal_focus) > 5 ORDER BY      total_keyword_frequency DESC, avg_impact_factor_trend DESC LIMIT 1; ",
        "schema_links": [
            "domain_journal.domain_journal_focus",
            "journal.journal_publisher",
            "domain_journal.did",
            "journal.journal_publisher_country",
            "domain_keyword.did",
            "keyword.kid",
            "domain_journal.domain_journal_impact_factor_trend",
            "domain_journal.domain_journal_impact_factor_similarity_score",
            "journal.jid",
            "domain_keyword.domain_keyword_frequency",
            "keyword.keyword_importance_score",
            "domain_keyword.dk"
        ]
    },
    {
        "instance_id": "q_1008",
        "db_id": "academic_research",
        "question": "What are the top 10 keywords with the highest growth rate in usage frequency across publications within the VLDB conference series over the past five years, including their keyword weight and importance score? Additionally, how do these keywords correlate with emerging research trends in data management and database systems, based on their increasing prevalence in the VLDB conference publications during this time period?",
        "query": " WITH vldb_conferences AS (     SELECT cid     FROM conference     WHERE conference.conference_location LIKE '%VLDB%'        AND conference.conference_start_date >= NOW() - INTERVAL '5 years'       AND conference.conference_end_date <= NOW() ), vldb_publications AS (     SELECT DISTINCT publication.pid     FROM publication     JOIN writes ON publication.pid = writes.pid     JOIN author ON writes.aid = author.aid     JOIN domain_author ON author.aid = domain_author.did     JOIN domain_conference ON domain_author.did = domain_conference.did     WHERE domain_conference.cid IN (SELECT cid FROM vldb_conferences) ), keyword_usage AS (     SELECT keyword.kid, keyword.keyword_weight, COUNT(publication_keyword.pid) AS usage_count     FROM keyword     JOIN publication_keyword ON keyword.kid = publication_keyword.pid     WHERE publication_keyword.pid IN (SELECT pid FROM vldb_publications)     GROUP BY keyword.kid, keyword.keyword_weight ), keyword_growth_rate AS (     SELECT kid,             (CAST(MAX(usage_count) AS FLOAT) - CAST(MIN(usage_count) AS FLOAT)) /             (EXTRACT(EPOCH FROM (NOW() - (SELECT MIN(conference_start_date) FROM conference))) / 31536000.0) AS growth_rate     FROM keyword_usage     GROUP BY kid     ORDER BY growth_rate DESC     LIMIT 10 ) SELECT keyword.kid, keyword.keyword_weight, keyword_importance_score, growth_rate FROM keyword_growth_rate JOIN keyword ON keyword_growth_rate.kid = keyword.kid ORDER BY growth_rate DESC; ",
        "schema_links": [
            "domain_conference.cid",
            "writes.pid",
            "publication.pid",
            "keyword_usage.usage_count",
            "conference.conference_end_date",
            "keyword_growth_rate.growth_rate",
            "conference.conference_start_date",
            "conference.conference_location",
            "publication_keyword.pid",
            "keyword_importance_score",
            "keyword.kid",
            "domain_conference.did",
            "keyword.keyword_weight",
            "author.aid",
            "conference.cid",
            "domain_author.did",
            "keyword.keyword_importance_score",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_1007",
        "db_id": "academic_research",
        "question": "In the domain of data management, identify the keywords that appear most frequently in publications over the past five years, considering both the total number of distinct papers they are associated with and their annual growth rate in usage. For each keyword, provide its weighted importance score, the count of unique papers it appears in, and its growth rate calculated as the percentage increase in usage from five years ago to the most recent year. Additionally, analyze the contextual usage of these keywords by evaluating their co-occurrence patterns with other high-frequency terms within the same domain, presenting the results as a list of co-occurring keyword IDs along with their respective co-occurrence counts. Sort the final results in descending order first by the number of papers each keyword appears in, then by their growth rate.",
        "query": "WITH domain_publications AS (     SELECT dp.did, p.pid, p.publication_year     FROM domain_publication dp     JOIN publication p ON dp.pid = p.pid     WHERE dp.did = (SELECT did FROM domain WHERE domain_description ILIKE '%data management%')       AND p.publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5 ), keyword_frequency AS (     SELECT pk.kid, COUNT(DISTINCT dp.pid) AS paper_count     FROM domain_publications dp     JOIN publication_keyword pk ON dp.pid = pk.pid     GROUP BY pk.kid ), keyword_growth_rate AS (     SELECT pk.kid,             (COUNT(*) FILTER (WHERE p.publication_year = EXTRACT(YEAR FROM CURRENT_DATE) - 1) -              COUNT(*) FILTER (WHERE p.publication_year = EXTRACT(YEAR FROM CURRENT_DATE) - 5))::FLOAT /             COUNT(*) FILTER (WHERE p.publication_year = EXTRACT(YEAR FROM CURRENT_DATE) - 5) AS growth_rate     FROM domain_publications dp     JOIN publication_keyword pk ON dp.pid = pk.pid     JOIN publication p ON dp.pid = p.pid     GROUP BY pk.kid ), combined_keywords AS (     SELECT kf.kid, kf.paper_count, kg.growth_rate     FROM keyword_frequency kf     JOIN keyword_growth_rate kg ON kf.kid = kg.kid ), co_occurrence_analysis AS (     SELECT pk1.kid AS kid1, pk2.kid AS kid2, COUNT(*) AS co_occurrence_count     FROM domain_publications dp     JOIN publication_keyword pk1 ON dp.pid = pk1.pid     JOIN publication_keyword pk2 ON dp.pid = pk2.pid AND pk1.kid < pk2.kid     GROUP BY pk1.kid, pk2.kid ) SELECT ck.kid, k.keyword_weight, ck.paper_count, ck.growth_rate, STRING_AGG(CONCAT(coa.kid2, ':', coa.co_occurrence_count), ',') AS co_occurrence_patterns FROM combined_keywords ck JOIN keyword k ON ck.kid = k.kid LEFT JOIN co_occurrence_analysis coa ON ck.kid = coa.kid1 GROUP BY ck.kid, k.keyword_weight, ck.paper_count, ck.growth_rate ORDER BY ck.paper_count DESC, ck.growth_rate DESC;",
        "schema_links": [
            "co_occurrence_analysis.kid1",
            "publication.pid",
            "domain_publication.pid",
            "publication_keyword.pid",
            "co_occurrence_analysis.co_occurrence_count",
            "keyword.kid",
            "publication_keyword.kid",
            "domain.did",
            "publication.publication_year",
            "keyword.keyword_weight",
            "domain_publication.did",
            "co_occurrence_analysis.kid2"
        ]
    },
    {
        "instance_id": "q_1006",
        "db_id": "academic_research",
        "question": "Which keywords, associated with publications authored by \"H. V. Jagadish\" (identified by email hvj@umich.edu), have shown a significant growth trend in usage over the past five years, considering both their domain-specific relevance (with frequency above the average domain keyword frequency) and the overall citation impact of the papers, ranked by descending domain keyword frequency and descending publication citation trend, limited to the top 10 results?",
        "query": " SELECT      k.keyword_weight AS keyword_weight,     dk.domain_keyword_frequency AS domain_keyword_frequency,     p.publication_citation_trend AS publication_citation_trend,     pk.publication_keyword_weighted_score AS publication_keyword_weighted_score,     k.kid AS keyword_id FROM      keyword k JOIN      domain_keyword dk ON k.kid = dk.did JOIN      publication_keyword pk ON k.kid = pk.pid JOIN      publication p ON pk.pid = p.pid JOIN      writes w ON p.pid = w.aid JOIN      author a ON w.aid = a.aid WHERE      a.author_email = 'hvj@umich.edu' -- Assuming H. V. Jagadish's email is hvj@umich.edu     AND p.publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5     AND p.publication_citation_trend > 0     AND dk.domain_keyword_frequency > (SELECT AVG(domain_keyword_frequency) FROM domain_keyword) ORDER BY      dk.domain_keyword_frequency DESC,      p.publication_citation_trend DESC LIMIT 10; ",
        "schema_links": [
            "publication.pid",
            "domain_keyword.did",
            "publication_keyword.pid",
            "keyword.kid",
            "publication.publication_year",
            "author.author_email",
            "keyword.keyword_weight",
            "publication.publication_citation_trend",
            "domain_keyword.domain_keyword_frequency",
            "author.aid",
            "publication_keyword.publication_keyword_weighted_score",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_1010",
        "db_id": "academic_research",
        "question": "Which author affiliated with the \"University of Michigan\" has the highest cumulative influence over the past decade, calculated as the sum of their publications' citation counts weighted by the publication keyword weighted scores, considering both direct citations and indirect citation networks?",
        "query": " SELECT      a.aid,      a.author_institution,      SUM(p.publication_citation_count * pk.publication_keyword_weighted_score) AS cumulative_influence FROM      academic_new.author a JOIN      academic_new.writes w ON a.aid = w.aid JOIN      academic_new.publication p ON w.pid = p.pid JOIN      academic_new.publication_keyword pk ON p.pid = pk.pid WHERE      a.author_institution = 'University of Michigan'     AND p.publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 10 GROUP BY      a.aid, a.author_institution ORDER BY      cumulative_influence DESC LIMIT 1; ",
        "schema_links": [
            "author.author_institution",
            "writes.pid",
            "publication.publication_citation_count",
            "publication.pid",
            "publication.publication_year",
            "author.aid",
            "publication_keyword.pid",
            "publication_keyword.publication_keyword_weighted_score",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_1011",
        "db_id": "academic_research",
        "question": "Which author affiliated with the \"University of Michigan\" has the highest influence in the Databases field, considering both the total citations received for publications in the past 10 years and their number of distinct recent publications in top-tier conferences attended within the same period?",
        "query": " SELECT      a.aid,      a.author_institution,      SUM(p.publication_citation_count) AS total_citations,      COUNT(DISTINCT CASE WHEN dc.domain_conference_attendance > 0 AND c.conference_start_date >= CURRENT_DATE - INTERVAL '10 YEAR' THEN p.pid END) AS recent_publications FROM      author a JOIN      writes w ON a.aid = w.aid JOIN      publication p ON w.pid = p.pid JOIN      domain_author da ON a.aid = da.did JOIN      domain_conference dc ON da.did = dc.did JOIN      conference c ON dc.did = c.cid WHERE      a.author_institution = 'University of Michigan'     AND da.domain_description = 'Databases'     AND p.publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 10 GROUP BY      a.aid,      a.author_institution ORDER BY      total_citations DESC,      recent_publications DESC LIMIT 1; ",
        "schema_links": [
            "author.author_institution",
            "domain_conference.domain_conference_attendance",
            "writes.pid",
            "publication.pid",
            "conference.conference_start_date",
            "domain_conference.did",
            "publication.publication_citation_count",
            "publication.publication_year",
            "author.aid",
            "domain_author.domain_description",
            "conference.cid",
            "domain_author.did",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_1014",
        "db_id": "academic_research",
        "question": "Which publications, co-authored by researchers with a domain expertise H-index of 30 or higher and a collaboration score of 0.8 or above, specifically in the field of database systems, have experienced positive citation growth over the past five years? Consider only those publications where the authors are affiliated with one of the top 10 institutions ranked alphabetically, and provide the publication summary, current citation count, citation growth trend, collaboration score, and institution name. Return the top 10 results ordered by the highest citation growth trend.",
        "query": " SELECT      p.pid,     p.publication_abstract_summary AS publication_summary,     p.publication_citation_count AS current_citations,     p.publication_citation_trend AS citation_growth,     da.domain_author_collaboration_score AS collaboration_score,     a.author_institution AS institution_name FROM      publication p JOIN      writes w ON p.pid = w.pid JOIN      author a ON w.aid = a.aid JOIN      domain_author da ON a.aid = da.did JOIN      domain d ON da.did = d.did WHERE      d.domain_description ILIKE '%database systems%'     AND p.publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5     AND p.publication_citation_trend > 0     AND da.domain_author_h_index >= 30     AND a.author_institution IN (         SELECT DISTINCT author_institution          FROM author          WHERE author_institution IS NOT NULL         ORDER BY author_institution DESC         LIMIT 10     )     AND da.domain_author_collaboration_score >= 0.8 GROUP BY      p.pid, p.publication_abstract_summary, p.publication_citation_count, p.publication_citation_trend, da.domain_author_collaboration_score, a.author_institution ORDER BY      p.publication_citation_trend DESC LIMIT 10; ",
        "schema_links": [
            "publication.publication_abstract_summary",
            "author.author_institution",
            "writes.pid",
            "domain_author.domain_author_collaboration_score",
            "publication.pid",
            "domain.domain_description",
            "publication.publication_citation_count",
            "domain.did",
            "domain_author.domain_author_h_index",
            "publication.publication_year",
            "publication.publication_citation_trend",
            "author.aid",
            "domain_author.did",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_1009",
        "db_id": "academic_research",
        "question": "Which conferences, featuring more than 10 publications by the author \"H. V. Jagadish\", belong to a conference series with an average historical domain-specific theme similarity score greater than 0.8 and a domain confidence score above 3.5? Include conference details such as location, start date, and end date in the results.",
        "query": " SELECT DISTINCT c.cid, c.conference_location, c.conference_start_date, c.conference_end_date FROM conference c JOIN domain_conference dc ON c.cid = dc.did JOIN writes w ON dc.did = w.aid JOIN author a ON w.aid = a.aid WHERE a.author_institution = 'H. V. Jagadish'   AND dc.domain_confidence_score > 3.5   AND (SELECT AVG(domain_conference_theme_similarity_score)         FROM domain_conference         WHERE did = dc.did) > 0.8   AND (SELECT COUNT(*)         FROM publication p         JOIN writes wr ON p.pid = wr.aid         WHERE wr.aid = a.aid) > 10; ",
        "schema_links": [
            "author.author_institution",
            "publication.pid",
            "conference.conference_end_date",
            "conference.conference_start_date",
            "conference.conference_location",
            "domain_conference.did",
            "domain_conference.domain_confidence_score",
            "conference.cid",
            "author.aid",
            "domain_conference.domain_conference_theme_similarity_score",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_1016",
        "db_id": "academic_research",
        "question": "Which conferences over the past five years have seen the highest total engagement from authors whose research interests and collaboration patterns are similar to those of \"H. V. Jagadish\"?",
        "query": " SELECT      c.cid,      c.conference_location,      c.conference_start_date,      c.conference_end_date,      SUM(dca.domain_conference_attendance) AS total_engagement FROM      conference c JOIN      domain_conference dca ON c.cid = dca.cid JOIN      domain_author da ON dca.did = da.did JOIN      author a ON da.aid = a.aid WHERE      a.author_orcid = 'H. V. Jagadish'::varchar     AND c.conference_start_date >= CURRENT_DATE - INTERVAL '5 years'     AND c.conference_start_date <= CURRENT_DATE GROUP BY      c.cid, c.conference_location, c.conference_start_date, c.conference_end_date ORDER BY      total_engagement DESC LIMIT 10; ",
        "schema_links": [
            "domain_conference.cid",
            "domain_conference.domain_conference_attendance",
            "author.author_orcid",
            "conference.conference_end_date",
            "domain_author.aid",
            "conference.conference_start_date",
            "conference.conference_location",
            "domain_conference.did",
            "conference.cid",
            "domain_author.did",
            "author.aid"
        ]
    },
    {
        "instance_id": "q_1013",
        "db_id": "academic_research",
        "question": "Which journals have the highest relevance score in domains where \"H. V. Jagadish\" has shown significant interest, based on his publication patterns and domain expertise since 2010, considering only tenured male authors? Please provide the journal names, domain descriptions, and their corresponding relevance scores, sorted in descending order of relevance score and limited to the top 10 results.",
        "query": " SELECT      j.journal_publisher AS journal_name,      d.domain_description,      SUM(dp.domain_author_interests_similarity_score) AS relevance_score FROM      academic_new.author a JOIN      academic_new.writes w ON a.aid = w.aid JOIN      academic_new.publication p ON w.pid = p.pid JOIN      academic_new.domain_author dp ON a.aid = dp.did JOIN      academic_new.domain_journal dj ON dp.did = dj.did JOIN      academic_new.journal j ON dj.jid = j.jid WHERE      a.author_gender = 'Male'      AND a.author_tenure_status = 'Tenured'      AND a.author_email = 'hvj@umich.edu'      AND p.publication_year >= 2010 GROUP BY      j.journal_publisher, d.domain_description ORDER BY      relevance_score DESC LIMIT 10; ",
        "schema_links": [
            "author.author_gender",
            "journal.journal_publisher",
            "writes.pid",
            "domain_journal.jid",
            "publication.pid",
            "domain_journal.did",
            "domain_author.domain_author_interests_similarity_score",
            "domain.domain_description",
            "publication.publication_year",
            "author.author_email",
            "author.aid",
            "journal.jid",
            "domain_author.did",
            "author.author_tenure_status",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_1015",
        "db_id": "academic_research",
        "question": "Which authors have a strong focus on the domain of \"Relational Database,\" as evidenced by contributing to at least 10 publications in this area over the past 10 years? Additionally, provide their institutional affiliation, gender, tenure status, domain-specific rank, H-index within the domain, and a score reflecting their exclusivity to this domain compared to other topics. Sort the results by the author's H-index in the domain in descending order, and then by the number of publications in the domain in descending order.",
        "query": " SELECT      a.aid,     a.author_institution,     a.author_gender,     a.author_tenure_status,     da.domain_author_rank,     da.domain_author_h_index,     da.domain_author_interests_similarity_score AS domain_exclusivity_score,     COUNT(p.pid) AS publication_count_in_domain FROM      author a JOIN      domain_author da ON a.aid = da.did JOIN      domain d ON da.did = d.did JOIN      writes w ON a.aid = w.aid JOIN      publication p ON w.pid = p.pid WHERE      d.domain_description = 'Relational Database'     AND p.publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 10 GROUP BY      a.aid, a.author_institution, a.author_gender, a.author_tenure_status, da.domain_author_rank, da.domain_author_h_index, da.domain_author_interests_similarity_score HAVING      COUNT(p.pid) >= 10 ORDER BY      da.domain_author_h_index DESC, publication_count_in_domain DESC; ",
        "schema_links": [
            "author.author_gender",
            "author.author_institution",
            "writes.pid",
            "publication.pid",
            "domain_author.domain_author_interests_similarity_score",
            "domain.domain_description",
            "domain.did",
            "domain_author.domain_author_h_index",
            "publication.publication_year",
            "domain_author.domain_author_rank",
            "domain_author.did",
            "author.aid",
            "author.author_tenure_status",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_1018",
        "db_id": "academic_research",
        "question": "Which conferences over the past five years have featured more than 60 publications strongly related to the \"Relational Database\" domain, considering domain-specific relevance? Additionally, prioritize conferences with a higher attendance rate in the \"Relational Database\" domain and a positive trend in the citation network growth, ordering the results by descending attendance rate in the domain and descending citation trend.",
        "query": " SELECT      c.cid,      c.conference_location,      c.conference_start_date,      c.conference_end_date,      COUNT(p.pid) AS publication_count FROM      academic_new.conference c JOIN      academic_new.domain_conference dc ON c.cid = dc.cid JOIN      academic_new.domain d ON dc.did = d.did JOIN      academic_new.publication p ON dc.did = (         SELECT dp.did          FROM academic_new.domain_publication dp          WHERE dp.pid = p.pid     ) WHERE      d.domain_description ILIKE '%Relational Database%'     AND c.conference_start_date >= CURRENT_DATE - INTERVAL '5 years'     AND dc.domain_conference_attendance > 60 GROUP BY      c.cid, c.conference_location, c.conference_start_date, c.conference_end_date HAVING      SUM(p.publication_citation_trend) > 0 ORDER BY      dc.domain_conference_attendance DESC,      SUM(p.publication_citation_trend) DESC; ",
        "schema_links": [
            "domain_conference.cid",
            "domain_conference.domain_conference_attendance",
            "publication.pid",
            "domain_publication.pid",
            "conference.conference_end_date",
            "conference.conference_start_date",
            "conference.conference_location",
            "domain.domain_description",
            "domain_conference.did",
            "domain.did",
            "domain_publication.did",
            "publication.publication_citation_trend",
            "conference.cid"
        ]
    },
    {
        "instance_id": "q_1020",
        "db_id": "academic_research",
        "question": "Which journals have published more than 60 articles on the topic of \"Relational Database\" in the past 5 years, as indicated by the keyword weight, and also demonstrate a growing trend in citation impact during this period?",
        "query": " SELECT      j.jid AS journal_id,      j.journal_publisher AS publisher_name FROM      journal j JOIN      domain_journal dj ON j.jid = dj.did JOIN      publication_keyword pk ON dj.did = pk.pid JOIN      keyword k ON pk.kid = k.kid JOIN      publication p ON pk.pid = p.pid WHERE      k.keyword_weight = 'Relational Database'     AND dj.domain_journal_citation_count > 60     AND p.publication_year >= 2018 - INTERVAL '5 years'     AND p.publication_citation_trend > 0 GROUP BY      j.jid, j.journal_publisher HAVING      SUM(dj.domain_journal_citation_count) > 60; ",
        "schema_links": [
            "journal.journal_publisher",
            "publication.pid",
            "domain_journal.did",
            "domain_journal.domain_journal_citation_count",
            "publication_keyword.pid",
            "keyword.kid",
            "publication_keyword.kid",
            "publication.publication_year",
            "keyword.keyword_weight",
            "publication.publication_citation_trend",
            "journal.jid"
        ]
    },
    {
        "instance_id": "q_1019",
        "db_id": "academic_research",
        "question": "请找出在VLDB会议中，被至少100篇论文引用过的所有关键词，并分析这些关键词在过去五年内的年度使用频率变化趋势。同时，评估这些关键词所属领域的作者合作网络的紧密程度（通过平均合作得分衡量），以及该领域在未来三年内的研究热度预测（基于领域内期刊的影响因子增长趋势）。",
        "query": " WITH vldb_keywords AS (     SELECT DISTINCT pk.kid AS keyword_id     FROM publication p     JOIN writes w ON p.pid = w.aid     JOIN publication_keyword pk ON p.pid = pk.pid     JOIN conference c ON p.cid = c.cid     WHERE c.conference_location = 'VLDB'       AND (SELECT SUM(publication_citation_count)             FROM publication p2             WHERE p2.pid = pk.pid) >= 100 ), keyword_frequency_trend AS (     SELECT vk.keyword_id,            EXTRACT(YEAR FROM AGE(CURRENT_DATE, p.publication_year)) AS year_diff,            COUNT(*) AS frequency     FROM vldb_keywords vk     JOIN publication_keyword pk ON vk.keyword_id = pk.kid     JOIN publication p ON pk.pid = p.pid     WHERE p.publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5     GROUP BY vk.keyword_id, year_diff ), author_collaboration_network AS (     SELECT d.did,            AVG(da.domain_author_collaboration_score) AS avg_collaboration_score     FROM vldb_keywords vk     JOIN domain_keyword dk ON vk.keyword_id = dk.kid     JOIN domain_author da ON dk.did = da.did     GROUP BY d.did ), future_research_heat AS (     SELECT d.did,            AVG(dj.domain_journal_impact_factor_trend) AS avg_impact_factor_trend     FROM author_collaboration_network acn     JOIN domain_journal dj ON acn.did = dj.did     WHERE dj.domain_journal_impact_factor_trend > 0     GROUP BY d.did ) SELECT kf.keyword_id,        kf.year_diff,        kf.frequency,        acn.avg_collaboration_score,        frh.avg_impact_factor_trend FROM keyword_frequency_trend kf JOIN author_collaboration_network acn ON vk.keyword_id = dk.kid JOIN future_research_heat frh ON acn.did = frh.did; ",
        "schema_links": [
            "author_collaboration_network.avg_collaboration_score",
            "publication.kid",
            "domain_author.domain_author_collaboration_score",
            "publication.cid",
            "publication.pid",
            "domain_keyword.kid",
            "domain_journal.did",
            "keyword_frequency_trend.frequency",
            "conference.conference_location",
            "domain_keyword.did",
            "publication_keyword.pid",
            "publication_keyword.kid",
            "publication.publication_citation_count",
            "publication.publication_year",
            "domain_journal.domain_journal_impact_factor_trend",
            "keyword_frequency_trend.keyword_id",
            "keyword_frequency_trend.year_diff",
            "conference.cid",
            "future_research_heat.avg_impact_factor_trend",
            "domain_author.did",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_1021",
        "db_id": "academic_research",
        "question": "In the past five years, which keywords have exhibited a growth trend in publications, appearing in more than 100 papers, while considering both their frequency and relevance within specific research domains? Additionally, determine whether these keywords are more prevalent in conference papers or journal articles, and provide the count of papers for each type. Present the results sorted by the total number of papers in descending order.",
        "query": " WITH keyword_growth AS (     SELECT          k.kid AS keyword_id,         k.keyword_weight,         k.keyword_importance_score,         dp.did AS domain_id,         COUNT(DISTINCT p.pid) AS paper_count,         SUM(CASE WHEN p.publication_type = 'conference' THEN 1 ELSE 0 END) AS conference_paper_count,         SUM(CASE WHEN p.publication_type = 'journal' THEN 1 ELSE 0 END) AS journal_paper_count     FROM          keyword k     JOIN          publication_keyword pk ON k.kid = pk.kid     JOIN          publication p ON pk.pid = p.pid     JOIN          domain_publication dp ON p.pid = dp.pid     WHERE          p.publication_year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5     GROUP BY          k.kid, dp.did     HAVING          COUNT(DISTINCT p.pid) > 100 ) SELECT      kg.keyword_id,     kg.domain_id,     kg.paper_count,     kg.conference_paper_count,     kg.journal_paper_count,     CASE          WHEN kg.conference_paper_count > kg.journal_paper_count THEN 'More prevalent in conference papers'         WHEN kg.conference_paper_count < kg.journal_paper_count THEN 'More prevalent in journal articles'         ELSE 'Equally prevalent in both'     END AS prevalence_type FROM      keyword_growth kg ORDER BY      kg.paper_count DESC; ",
        "schema_links": [
            "publication.pid",
            "domain_publication.pid",
            "publication_keyword.pid",
            "keyword.kid",
            "publication_keyword.kid",
            "publication.publication_type",
            "publication.publication_year",
            "keyword.keyword_weight",
            "domain_publication.did",
            "keyword.keyword_importance_score"
        ]
    },
    {
        "instance_id": "q_1017",
        "db_id": "academic_research",
        "question": "What are the keywords that have appeared in more than 10 publications authored by researchers with a strong focus on data management and database systems, as indicated by their domain expertise and collaboration scores exceeding 0.8, within the past decade (2013 to present)? Include the keyword weight, keyword importance score, and domain keyword frequency in the results.",
        "query": " SELECT DISTINCT k.keyword_weight, k.keyword_importance_score, dk.domain_keyword_frequency FROM keyword k JOIN publication_keyword pk ON k.kid = pk.pid JOIN publication p ON pk.pid = p.pid JOIN writes w ON p.pid = w.pid JOIN author a ON w.aid = a.aid JOIN domain_author da ON a.aid = da.did JOIN domain d ON da.did = d.did WHERE d.domain_description ILIKE '%data management%'    AND d.domain_description ILIKE '%database systems%'   AND da.domain_author_collaboration_score > 0.8   AND p.publication_year >= 2013 GROUP BY k.keyword_weight, k.keyword_importance_score, dk.domain_keyword_frequency HAVING COUNT(DISTINCT p.pid) > 10; ",
        "schema_links": [
            "writes.pid",
            "domain_author.domain_author_collaboration_score",
            "publication.pid",
            "publication_keyword.pid",
            "keyword.kid",
            "domain.domain_description",
            "domain.did",
            "publication.publication_year",
            "keyword.keyword_weight",
            "author.aid",
            "domain_author.did",
            "keyword.keyword_importance_score",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_1023",
        "db_id": "academic_research",
        "question": "Which author has the highest influence in the VLDB conference, considering both the total citation count of their publications and the average similarity of their domain expertise, over the past five years?",
        "query": " SELECT      a.aid,      a.author_institution,      SUM(p.publication_citation_count) AS total_citations,      AVG(da.domain_author_interests_similarity) AS avg_domain_similarity FROM      author a JOIN      writes w ON a.aid = w.aid JOIN      publication p ON w.pid = p.pid JOIN      domain_author da ON a.aid = da.did JOIN      domain_conference dc ON da.did = dc.did JOIN      conference c ON dc.did = c.cid WHERE      c.conference_start_date >= NOW() - INTERVAL '5 years'     AND c.conference_sponsorship_type = 'VLDB' GROUP BY      a.aid, a.author_institution ORDER BY      total_citations DESC, avg_domain_similarity DESC LIMIT 1; ",
        "schema_links": [
            "author.author_institution",
            "writes.pid",
            "publication.pid",
            "conference.conference_start_date",
            "conference.conference_sponsorship_type",
            "domain_conference.did",
            "publication.publication_citation_count",
            "domain_author.did",
            "conference.cid",
            "author.aid",
            "domain_author.domain_author_interests_similarity",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_1025",
        "db_id": "academic_research",
        "question": "Which authors affiliated with the \"University of Michigan\" have a domain-weighted citation impact exceeding 5000, considering only their primary author contributions to publications and the frequency of domain-specific keywords associated with those publications?",
        "query": " SELECT      a.aid,     a.author_institution,     SUM(p.publication_citation_count * dk.domain_keyword_frequency) AS domain_weighted_citation_impact FROM      author a JOIN      writes w ON a.aid = w.aid JOIN      publication p ON w.pid = p.pid JOIN      publication_keyword pk ON p.pid = pk.pid JOIN      domain_keyword dk ON pk.pid = dk.did WHERE      a.author_institution = 'University of Michigan'     AND w.writes_primary_author = TRUE GROUP BY      a.aid, a.author_institution HAVING      SUM(p.publication_citation_count * dk.domain_keyword_frequency) > 5000; ",
        "schema_links": [
            "author.author_institution",
            "writes.pid",
            "publication.publication_citation_count",
            "writes.writes_primary_author",
            "publication.pid",
            "domain_keyword.domain_keyword_frequency",
            "author.aid",
            "domain_keyword.did",
            "publication_keyword.pid",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_1024",
        "db_id": "academic_research",
        "question": "Which authors affiliated with the \"University of Michigan\" in the Databases domain have a significant influence, as indicated by having more than 5000 total citations across their publications and an average citation growth trend greater than 0 over the past five years?",
        "query": " SELECT      a.aid,      a.author_institution,      COUNT(DISTINCT p.pid) AS publication_count,      SUM(p.publication_citation_count) AS total_citations,      AVG(p.publication_citation_trend) AS avg_citation_trend FROM      author a JOIN      writes w ON a.aid = w.aid JOIN      publication p ON w.pid = p.pid JOIN      domain_author da ON a.aid = da.did WHERE      a.author_institution = 'University of Michigan'     AND da.domain_author_h_index > 50     AND p.publication_year BETWEEN (EXTRACT(YEAR FROM CURRENT_DATE) - 5) AND EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY      a.aid, a.author_institution HAVING      SUM(p.publication_citation_count) > 5000     AND AVG(p.publication_citation_trend) > 0; ",
        "schema_links": [
            "author.author_institution",
            "writes.pid",
            "publication.pid",
            "publication.publication_citation_count",
            "domain_author.domain_author_h_index",
            "publication.publication_year",
            "publication.publication_citation_trend",
            "author.aid",
            "domain_author.did",
            "writes.aid"
        ]
    },
    {
        "instance_id": "q_1022",
        "db_id": "media_production",
        "question": "Which movies were both written by writers and produced by producers who have a specialization or experience aligned with the same genre, where the movie's genre influence score is above the average influence score of other movies in the same genre?",
        "query": " SELECT      m.mid AS movie_id,     m.movie_release_date,     m.movie_genre,     m.movie_genre_influence_score FROM      imdb_new.movie m JOIN      imdb_new.writer w ON m.keyword_id = w.wid JOIN      imdb_new.producer p ON m.production_company_id = p.pid JOIN      imdb_new.genre g ON m.genre_id = g.gid JOIN      (SELECT           genre_id,           AVG(movie_genre_influence_score) AS avg_influence_score      FROM           imdb_new.movie      GROUP BY           genre_id) avg_scores ON m.genre_id = avg_scores.genre_id WHERE      w.writer_specialization = p.producer_experience_years     AND m.movie_genre_influence_score > avg_scores.avg_influence_score     AND w.writer_specialization = g.genre_description; ",
        "schema_links": [
            "movie.movie_genre",
            "writer.writer_specialization",
            "genre.gid",
            "movie.genre_id",
            "producer.pid",
            "movie.movie_release_date",
            "writer.wid",
            "movie.keyword_id",
            "producer.producer_experience_years",
            "movie.mid",
            "movie.production_company_id",
            "genre.genre_description",
            "movie.movie_genre_influence_score"
        ]
    },
    {
        "instance_id": "q_1028",
        "db_id": "media_production",
        "question": "Find all distinct movies where the director is experienced and has a preference for dramatic genres, and the lead actress has been awarded for her performances in socially impactful roles. Ensure that these movies have received critical acclaim, indicated by having a positive number of critic reviews, and have a popularity score greater than 8.5. Additionally, confirm that the movie includes drama as one of its genres.",
        "query": " SELECT DISTINCT m.mid, m.movie_release_date, m.movie_director, m.movie_cast_list, m.movie_critic_reviews, m.movie_popularity_score FROM movie m JOIN director d ON m.movie_director = d.did JOIN actor a ON a.aid = (     SELECT cast_aid      FROM cast c      WHERE c.msid = m.mid AND c.cast_role = 'Lead Actress' ) WHERE d.director_experience_level = 'Experienced' AND 'Drama' = ANY(m.movie_genre_list) AND a.actor_genre_preference @> ARRAY['Social Issues'] AND a.actor_awards_count > 0 AND m.movie_critic_reviews > 0 AND m.movie_popularity_score > 8.5; ",
        "schema_links": [
            "director.director_experience_level",
            "movie.movie_critic_reviews",
            "cast.msid",
            "cast.cast_aid",
            "movie.movie_release_date",
            "movie.movie_cast_list",
            "movie.mid",
            "movie.movie_popularity_score",
            "cast.cast_role",
            "director.did",
            "movie.movie_genre_list",
            "actor.aid",
            "actor.actor_genre_preference",
            "actor.actor_awards_count",
            "movie.movie_director"
        ]
    },
    {
        "instance_id": "q_1027",
        "db_id": "media_production",
        "question": "Which films directed by \"Asghar Farhadi\" have featured \"Taraneh Alidoosti\" in a leading role, and how do these films compare in terms of genre influence score, user reviews, critic reviews, box office gross, and profit margin over the years, ordered chronologically by their release dates?",
        "query": "SELECT      m.mid AS movie_id,     m.movie_release_date AS release_date,     m.movie_genre_influence_score AS genre_influence_score,     m.movie_user_reviews AS user_reviews,     m.movie_critic_reviews AS critic_reviews,     m.movie_box_office_gross AS box_office_gross,     m.movie_profit_margin AS profit_margin FROM      movie m JOIN      director d ON m.movie_director_list[1] = d.did JOIN      actor a ON m.movie_cast_list[1] = a.aid JOIN      cast c ON m.mid = c.msid WHERE      d.director_awards = 'Asghar Farhadi'      AND a.actor_first_breakthrough_role = 'Taraneh Alidoosti'      AND c.cast_role = 'leading' ORDER BY      m.movie_release_date ASC;",
        "schema_links": [
            "movie.movie_director_list",
            "movie.movie_critic_reviews",
            "cast.msid",
            "movie.movie_release_date",
            "movie.movie_cast_list",
            "movie.mid",
            "actor.actor_first_breakthrough_role",
            "movie.movie_user_reviews",
            "cast.cast_role",
            "director.director_awards",
            "movie.movie_box_office_gross",
            "director.did",
            "actor.aid",
            "movie.movie_profit_margin",
            "movie.movie_genre_influence_score"
        ]
    },
    {
        "instance_id": "q_1026",
        "db_id": "media_production",
        "question": "What are the distinct films released within the last decade that feature collaborations between directors who are classified as \"Critically Acclaimed\" and actors who have delivered high-performance ratings (score of 8.0 or above) in roles of significant importance? Include the film's release date, director's name, and actor's name in the results, ordered by the film's release date in descending order.",
        "query": " SELECT DISTINCT m.mid, m.movie_release_date, m.movie_title, d.director_name, a.actor_name FROM movie m JOIN director d ON m.movie_director = d.did JOIN actor a ON m.movie_cast_list @> ARRAY[a.aid::text] JOIN cast c ON c.msid = m.mid AND c.cast_performance_score >= 8.0 WHERE d.director_experience_level = 'Critically Acclaimed' AND m.movie_release_date >= CURRENT_DATE - INTERVAL '10 years' AND c.cast_role ILIKE '%Significant%' ORDER BY m.movie_release_date DESC; ",
        "schema_links": [
            "director.director_experience_level",
            "cast.cast_performance_score",
            "director.director_name",
            "actor.actor_name",
            "cast.msid",
            "movie.movie_release_date",
            "movie.movie_cast_list",
            "movie.movie_title",
            "movie.mid",
            "cast.cast_role",
            "director.did",
            "actor.aid",
            "movie.movie_director"
        ]
    },
    {
        "instance_id": "q_1033",
        "db_id": "media_production",
        "question": "Identify movies released in the last decade where \"Asghar Farhadi\" has collaborated with lead actors whose genre performance success rate is at least 80%, genre diversity index does not exceed 0.3, and their preferred genres overlap with Drama. Only include films directed by an expert-level director with more than 5 awards. Prioritize the results based on descending audience engagement scores, ensuring that each movie has received over 10,000 user reviews.",
        "query": " SELECT      m.mid AS movie_id,     m.movie_release_date,     m.movie_popularity_score,     d.did AS director_id,     a.aid AS actor_id FROM      director d JOIN      movie m ON d.did = m.movie_director_list[1]::integer JOIN      actor a ON a.aid = m.movie_cast_list[1]::integer WHERE      d.director_experience_level = 'Expert'     AND d.director_awards_count > 5     AND a.actor_genre_success_rate >= 0.8     AND a.actor_genre_diversity_index <= 0.3     AND a.actor_genre_preference && (SELECT ARRAY_AGG(genre_description) FROM genre WHERE genre_parent_genre = 'Drama')     AND m.movie_release_date >= CURRENT_DATE - INTERVAL '10 years'     AND m.movie_user_reviews > 10000     AND d.director_awards LIKE '%Asghar Farhadi%' ORDER BY      m.movie_popularity_score DESC; ",
        "schema_links": [
            "director.director_experience_level",
            "movie.movie_director_list",
            "director.director_awards_count",
            "actor.actor_genre_diversity_index",
            "movie.movie_release_date",
            "movie.movie_cast_list",
            "actor.actor_genre_success_rate",
            "movie.mid",
            "movie.movie_user_reviews",
            "movie.movie_popularity_score",
            "director.director_awards",
            "director.did",
            "actor.aid",
            "actor.actor_genre_preference",
            "genre.genre_description"
        ]
    },
    {
        "instance_id": "q_1032",
        "db_id": "media_production",
        "question": "Which directors, whose genre preference change rate is above the average of all actors, have directed movies released before January 1, 2002, or after December 31, 2010? Additionally, what is the average profitability of these movies, and how does the directors' average genre performance score influence this profitability?",
        "query": " SELECT      d.did AS director_id,     AVG(m.movie_profit_margin) AS avg_movie_profit_margin,     AVG(dg.actor_genre_success_rate) AS avg_genre_performance_score FROM      director d JOIN      movie m ON d.did = ANY(m.movie_director_list::int[]) JOIN      actor dg ON d.did = dg.aid WHERE      dg.actor_genre_diversity_index > (SELECT AVG(actor_genre_diversity_index) FROM actor)     AND (m.movie_release_date < '2002-01-01' OR m.movie_release_date > '2010-12-31') GROUP BY      d.did; ",
        "schema_links": [
            "actor.actor_genre_success_rate",
            "movie.movie_director_list",
            "actor.actor_genre_diversity_index",
            "director.did",
            "actor.aid",
            "movie.movie_profit_margin",
            "movie.movie_release_date"
        ]
    },
    {
        "instance_id": "q_1029",
        "db_id": "media_production",
        "question": "How many distinct actors from Iran have participated in movies directed by Jim Jarmusch, and what is the average success rate of these actors in genres associated with those movies?",
        "query": " SELECT      COUNT(DISTINCT a.aid) AS actor_count,     AVG(a.actor_genre_success_rate) AS average_genre_success_rate FROM      actor a JOIN      movie m ON a.aid = ANY(m.movie_cast_list::number[]) JOIN      director d ON m.movie_director = d.did WHERE      a.actor_birthplace = 'Iran'     AND d.director_awards = 'Jim Jarmusch'; ",
        "schema_links": [
            "actor.actor_genre_success_rate",
            "movie.movie_director",
            "director.director_awards",
            "director.did",
            "actor.aid",
            "movie.movie_cast_list",
            "actor.actor_birthplace"
        ]
    },
    {
        "instance_id": "q_1030",
        "db_id": "media_production",
        "question": "Which actors collaborated with Quentin Tarantino in his most recently released film? For these actors, determine whether their genre preferences align with the genres of this film. Additionally, calculate the average performance success rate of these actors in films with similar genres over the past five years, considering only those actors whose genre preferences are aligned with the film's genres. Include the actors' gender, age, net worth, genre alignment status, and their calculated success rates in the results.",
        "query": " WITH tarantino_recent_film AS (     SELECT          m.mid,          m.movie_release_date,          m.movie_genre_list,          m.movie_keywords_weighted_score     FROM          movie m     JOIN          director d ON m.movie_director = d.did     WHERE          d.actor_genre_preference = 'Quentin Tarantino'     ORDER BY          m.movie_release_date DESC     LIMIT 1 ), actor_genre_alignment AS (     SELECT          a.aid,          a.actor_genre_preference,          trf.movie_genre_list,         CASE              WHEN a.actor_genre_preference && trf.movie_genre_list THEN TRUE              ELSE FALSE          END AS genre_aligned     FROM          actor a,          tarantino_recent_film trf     WHERE          a.aid IN (SELECT unnest(string_to_array(m.movie_cast_list, ','))::integer                    FROM movie m                    WHERE m.mid = (SELECT mid FROM tarantino_recent_film)) ), actor_performance_success_rate AS (     SELECT          aga.aid,          AVG(cast_performance_score) AS success_rate     FROM          actor_genre_alignment aga     JOIN          cast c ON aga.aid = c.msid     JOIN          movie m ON c.msid = m.mid     WHERE          m.movie_release_date >= CURRENT_DATE - INTERVAL '5 years'         AND aga.genre_aligned = TRUE     GROUP BY          aga.aid ) SELECT      a.actor_gender,      a.actor_age,      a.actor_net_worth,      aga.genre_aligned,      apsr.success_rate FROM      actor a JOIN      actor_genre_alignment aga ON a.aid = aga.aid LEFT JOIN      actor_performance_success_rate apsr ON a.aid = apsr.aid; ",
        "schema_links": [
            "actor_genre_alignment.genre_aligned",
            "movie.movie_keywords_weighted_score",
            "cast.cast_performance_score",
            "cast.msid",
            "actor.actor_age",
            "actor.actor_gender",
            "movie.movie_release_date",
            "movie.movie_cast_list",
            "actor.actor_net_worth",
            "movie.mid",
            "director.did",
            "director.actor_genre_preference",
            "actor.aid",
            "movie.movie_genre_list",
            "actor.actor_genre_preference",
            "actor_performance_success_rate.success_rate",
            "movie.movie_director"
        ]
    },
    {
        "instance_id": "q_1031",
        "db_id": "media_production",
        "question": "Which producer has collaborated with the most unique directors and across the widest variety of genres, as measured by the count of distinct directors and distinct genres they have worked on together, prioritizing the number of unique directors in case of a tie?",
        "query": " SELECT      p.pid AS producer_id,     COUNT(DISTINCT m.movie_director) AS unique_directors_count,     COUNT(DISTINCT mg.genre_id) AS unique_genres_count FROM      producer p JOIN      movie m ON p.pid = m.movie_producer JOIN      movie_genre mg ON m.mid = mg.mid GROUP BY      p.pid ORDER BY      unique_directors_count DESC,      unique_genres_count DESC LIMIT 1; ",
        "schema_links": [
            "movie_genre.mid",
            "movie.mid",
            "movie_genre.genre_id",
            "movie.movie_producer",
            "producer.pid",
            "movie.movie_director"
        ]
    }
]